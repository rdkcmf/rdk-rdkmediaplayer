var stuff = "https://px-apps.sys.comcast.net/pxscene-samples/examples/px-reference/frameworks/";
px.configImport({"stuff:":stuff});
px.import({scene : 'px:scene.1.js'
}).then( function importsAreReady(imports) {

function log(msg)
{
	console.log("rdkmediaplayer.js: " + msg);
}

function my_console_log(msg)
{
	log("rdkmediaplayer.js: " + msg);
}

function XREReceiver1() {
};
XREReceiver1.prototype.onEvent = function (name, params) {
    log("XREReceiver.onEvent "+ name);
    if(name === "onReadyFailed") {
        module.exports.onReady({status:1});    
    }
    else if(name === "onMediaOpened") {
        module.exports.onMediaOpened(params);
    }
    else if(name === "onProgress") {
        module.exports.onProgress(params);
    }
    else if(name === "onPlaying") {
        module.exports.onPlaying(params);
    }
}

global.XREReceiver = new XREReceiver1();
var XREReceiver = global.XREReceiver;

var scene = imports.scene;
var waylandObj = null;
var rdkMediaPlayer = null;

module.exports.wantsClearscreen = function()
{
    return false;
};

module.exports.load = function(url)
{
    log("module.exports.load " + url);
    global._xrePlayerPlatform.setContentUrl(url);
}

module.exports.setContentOptions = function(options)
{
    log("module.exports.setContentOptions");
    global._xrePlayerPlatform.setContentOptions(options)
}

module.exports.stop = function()
{
    log("module.exports.stop");
    global._xrePlayerPlatform.stop();
}

module.exports.pause = function()
{
    log("module.exports.pause");
	global._xrePlayerPlatform.pause();
}

module.exports.play = function()
{
    log("module.exports.play");
	global._xrePlayerPlatform.play();
}

module.exports.setSpeed = function(speed)
{
	log("module.exports.setSpeed");
	global._xrePlayerPlatform.setSpeed(speed,0);
}

module.exports.seek = function(position)
{
	log("module.exports.seek " + position);
	global._xrePlayerPlatform.seek(position);
}

module.exports.seekToLive = function()
{
	log("module.exports.seekToLive");
	global._xrePlayerPlatform.seekToLive();
}

module.exports.requestStatus = function()
{
	log("module.exports.requestStatus");
	global._xrePlayerPlatform.requestStatus();
}

module.exports.setVolume = function(volume)
{
	log("module.exports.setVolume " + volume);
	global._xrePlayerPlatform.setVolume();
}

module.exports.setAudioLanguage = function(lang)
{
    global._xrePlayerPlatform.setPreferredAudioLanguage(lang);
}

module.exports.setClosedCaptionsEnabled = function(enabled)
{
   	log("module.exports.setClosedCaptionsEnabled " + enabled);
}

module.exports.setZoom = function(zoom)
{
	log("module.exports.setZoom " + zoom);
    global._xrePlayerPlatform.setPreferredZoomSetting(zoom);
}

function onRemoteReadySuccess(wayland)
{
	log("onRemoteReadySuccess");
	waylandObj = wayland;
	waylandObj.moveToBack();
	rdkMediaPlayer = wayland.api;
    global.onXREReady();
    module.exports.onReady({status:0});
}

function onRemoteReadyFail(error)
{
	log("onRemoteReadyFail");
    delete process.env.PLAYERSINKBIN_USE_WESTEROSSINK;
    module.exports.onReady({status:1});
}

waylandObj = scene.create( {t:"wayland", x:0, y:0, w:1280, h:720, parent:scene.root,cmd:"rdkmediaplayer"} );
waylandObj.remoteReady.then(onRemoteReadySuccess, onRemoteReadyFail);
waylandObj.focus = true;
waylandObj.moveToBack();

//VIPER INTEGRATION

var document = /** @class */ (function () {
    function document() {
        this.hidden = true;
    };
    document.prototype.addEventListener = function (a,b,c) {
        return null;
    };
    document.prototype.removeEventListener = function (a,b,c) {
        return null;
    };
    document.prototype.createElement = function (a) {
        return null;
    };
    document.prototype.getElementById = function (a) {
        return null;
    };
    document.prototype.getElementsByTagName = function (a) {
        return null;
    };
    document.prototype.createStyleSheet = function (a) {
        return null;
    };
}());


//VIPER BUNDLE BEGIN
(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
exports.endianness = function () { return 'LE' };

exports.hostname = function () {
    if (typeof location !== 'undefined') {
        return location.hostname
    }
    else return '';
};

exports.loadavg = function () { return [] };

exports.uptime = function () { return 0 };

exports.freemem = function () {
    return Number.MAX_VALUE;
};

exports.totalmem = function () {
    return Number.MAX_VALUE;
};

exports.cpus = function () { return [] };

exports.type = function () { return 'Browser' };

exports.release = function () {
    if (typeof navigator !== 'undefined') {
        return navigator.appVersion;
    }
    return '';
};

exports.networkInterfaces
= exports.getNetworkInterfaces
= function () { return {} };

exports.arch = function () { return 'javascript' };

exports.platform = function () { return 'browser' };

exports.tmpdir = exports.tmpDir = function () {
    return '/tmp';
};

exports.EOL = '\n';

exports.homedir = function () {
	return '/'
};

},{}],2:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],3:[function(require,module,exports){
require('../modules/es6.string.iterator');
require('../modules/es6.array.is-array');
require('../modules/es6.array.from');
require('../modules/es6.array.of');
require('../modules/es6.array.join');
require('../modules/es6.array.slice');
require('../modules/es6.array.sort');
require('../modules/es6.array.for-each');
require('../modules/es6.array.map');
require('../modules/es6.array.filter');
require('../modules/es6.array.some');
require('../modules/es6.array.every');
require('../modules/es6.array.reduce');
require('../modules/es6.array.reduce-right');
require('../modules/es6.array.index-of');
require('../modules/es6.array.last-index-of');
require('../modules/es6.array.copy-within');
require('../modules/es6.array.fill');
require('../modules/es6.array.find');
require('../modules/es6.array.find-index');
require('../modules/es6.array.species');
require('../modules/es6.array.iterator');
module.exports = require('../modules/_core').Array;

},{"../modules/_core":25,"../modules/es6.array.copy-within":100,"../modules/es6.array.every":101,"../modules/es6.array.fill":102,"../modules/es6.array.filter":103,"../modules/es6.array.find":105,"../modules/es6.array.find-index":104,"../modules/es6.array.for-each":106,"../modules/es6.array.from":107,"../modules/es6.array.index-of":108,"../modules/es6.array.is-array":109,"../modules/es6.array.iterator":110,"../modules/es6.array.join":111,"../modules/es6.array.last-index-of":112,"../modules/es6.array.map":113,"../modules/es6.array.of":114,"../modules/es6.array.reduce":116,"../modules/es6.array.reduce-right":115,"../modules/es6.array.slice":117,"../modules/es6.array.some":118,"../modules/es6.array.sort":119,"../modules/es6.array.species":120,"../modules/es6.string.iterator":141}],4:[function(require,module,exports){
require('../modules/es6.object.to-string');
require('../modules/es6.string.iterator');
require('../modules/web.dom.iterable');
require('../modules/es6.map');
module.exports = require('../modules/_core').Map;

},{"../modules/_core":25,"../modules/es6.map":121,"../modules/es6.object.to-string":122,"../modules/es6.string.iterator":141,"../modules/web.dom.iterable":161}],5:[function(require,module,exports){
require('../modules/es6.object.to-string');
require('../modules/es6.string.iterator');
require('../modules/web.dom.iterable');
require('../modules/es6.promise');
module.exports = require('../modules/_core').Promise;

},{"../modules/_core":25,"../modules/es6.object.to-string":122,"../modules/es6.promise":123,"../modules/es6.string.iterator":141,"../modules/web.dom.iterable":161}],6:[function(require,module,exports){
require('../modules/es6.string.from-code-point');
require('../modules/es6.string.raw');
require('../modules/es6.string.trim');
require('../modules/es6.string.iterator');
require('../modules/es6.string.code-point-at');
require('../modules/es6.string.ends-with');
require('../modules/es6.string.includes');
require('../modules/es6.string.repeat');
require('../modules/es6.string.starts-with');
require('../modules/es6.string.anchor');
require('../modules/es6.string.big');
require('../modules/es6.string.blink');
require('../modules/es6.string.bold');
require('../modules/es6.string.fixed');
require('../modules/es6.string.fontcolor');
require('../modules/es6.string.fontsize');
require('../modules/es6.string.italics');
require('../modules/es6.string.link');
require('../modules/es6.string.small');
require('../modules/es6.string.strike');
require('../modules/es6.string.sub');
require('../modules/es6.string.sup');
require('../modules/es6.regexp.match');
require('../modules/es6.regexp.replace');
require('../modules/es6.regexp.search');
require('../modules/es6.regexp.split');
module.exports = require('../modules/_core').String;

},{"../modules/_core":25,"../modules/es6.regexp.match":124,"../modules/es6.regexp.replace":125,"../modules/es6.regexp.search":126,"../modules/es6.regexp.split":127,"../modules/es6.string.anchor":129,"../modules/es6.string.big":130,"../modules/es6.string.blink":131,"../modules/es6.string.bold":132,"../modules/es6.string.code-point-at":133,"../modules/es6.string.ends-with":134,"../modules/es6.string.fixed":135,"../modules/es6.string.fontcolor":136,"../modules/es6.string.fontsize":137,"../modules/es6.string.from-code-point":138,"../modules/es6.string.includes":139,"../modules/es6.string.italics":140,"../modules/es6.string.iterator":141,"../modules/es6.string.link":142,"../modules/es6.string.raw":143,"../modules/es6.string.repeat":144,"../modules/es6.string.small":145,"../modules/es6.string.starts-with":146,"../modules/es6.string.strike":147,"../modules/es6.string.sub":148,"../modules/es6.string.sup":149,"../modules/es6.string.trim":150}],7:[function(require,module,exports){
require('../modules/es7.reflect.define-metadata');
require('../modules/es7.reflect.delete-metadata');
require('../modules/es7.reflect.get-metadata');
require('../modules/es7.reflect.get-metadata-keys');
require('../modules/es7.reflect.get-own-metadata');
require('../modules/es7.reflect.get-own-metadata-keys');
require('../modules/es7.reflect.has-metadata');
require('../modules/es7.reflect.has-own-metadata');
require('../modules/es7.reflect.metadata');
module.exports = require('../modules/_core').Reflect;

},{"../modules/_core":25,"../modules/es7.reflect.define-metadata":152,"../modules/es7.reflect.delete-metadata":153,"../modules/es7.reflect.get-metadata":155,"../modules/es7.reflect.get-metadata-keys":154,"../modules/es7.reflect.get-own-metadata":157,"../modules/es7.reflect.get-own-metadata-keys":156,"../modules/es7.reflect.has-metadata":158,"../modules/es7.reflect.has-own-metadata":159,"../modules/es7.reflect.metadata":160}],8:[function(require,module,exports){
module.exports = function (it) {
  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
  return it;
};

},{}],9:[function(require,module,exports){
// 22.1.3.31 Array.prototype[@@unscopables]
var UNSCOPABLES = require('./_wks')('unscopables');
var ArrayProto = Array.prototype;
if (ArrayProto[UNSCOPABLES] == undefined) require('./_hide')(ArrayProto, UNSCOPABLES, {});
module.exports = function (key) {
  ArrayProto[UNSCOPABLES][key] = true;
};

},{"./_hide":39,"./_wks":98}],10:[function(require,module,exports){
module.exports = function (it, Constructor, name, forbiddenField) {
  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {
    throw TypeError(name + ': incorrect invocation!');
  } return it;
};

},{}],11:[function(require,module,exports){
var isObject = require('./_is-object');
module.exports = function (it) {
  if (!isObject(it)) throw TypeError(it + ' is not an object!');
  return it;
};

},{"./_is-object":47}],12:[function(require,module,exports){
// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
'use strict';
var toObject = require('./_to-object');
var toAbsoluteIndex = require('./_to-absolute-index');
var toLength = require('./_to-length');

module.exports = [].copyWithin || function copyWithin(target /* = 0 */, start /* = 0, end = @length */) {
  var O = toObject(this);
  var len = toLength(O.length);
  var to = toAbsoluteIndex(target, len);
  var from = toAbsoluteIndex(start, len);
  var end = arguments.length > 2 ? arguments[2] : undefined;
  var count = Math.min((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);
  var inc = 1;
  if (from < to && to < from + count) {
    inc = -1;
    from += count - 1;
    to += count - 1;
  }
  while (count-- > 0) {
    if (from in O) O[to] = O[from];
    else delete O[to];
    to += inc;
    from += inc;
  } return O;
};

},{"./_to-absolute-index":89,"./_to-length":92,"./_to-object":93}],13:[function(require,module,exports){
// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
'use strict';
var toObject = require('./_to-object');
var toAbsoluteIndex = require('./_to-absolute-index');
var toLength = require('./_to-length');
module.exports = function fill(value /* , start = 0, end = @length */) {
  var O = toObject(this);
  var length = toLength(O.length);
  var aLen = arguments.length;
  var index = toAbsoluteIndex(aLen > 1 ? arguments[1] : undefined, length);
  var end = aLen > 2 ? arguments[2] : undefined;
  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);
  while (endPos > index) O[index++] = value;
  return O;
};

},{"./_to-absolute-index":89,"./_to-length":92,"./_to-object":93}],14:[function(require,module,exports){
var forOf = require('./_for-of');

module.exports = function (iter, ITERATOR) {
  var result = [];
  forOf(iter, false, result.push, result, ITERATOR);
  return result;
};

},{"./_for-of":36}],15:[function(require,module,exports){
// false -> Array#indexOf
// true  -> Array#includes
var toIObject = require('./_to-iobject');
var toLength = require('./_to-length');
var toAbsoluteIndex = require('./_to-absolute-index');
module.exports = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIObject($this);
    var length = toLength(O.length);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare
      if (value != value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
      if (O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};

},{"./_to-absolute-index":89,"./_to-iobject":91,"./_to-length":92}],16:[function(require,module,exports){
// 0 -> Array#forEach
// 1 -> Array#map
// 2 -> Array#filter
// 3 -> Array#some
// 4 -> Array#every
// 5 -> Array#find
// 6 -> Array#findIndex
var ctx = require('./_ctx');
var IObject = require('./_iobject');
var toObject = require('./_to-object');
var toLength = require('./_to-length');
var asc = require('./_array-species-create');
module.exports = function (TYPE, $create) {
  var IS_MAP = TYPE == 1;
  var IS_FILTER = TYPE == 2;
  var IS_SOME = TYPE == 3;
  var IS_EVERY = TYPE == 4;
  var IS_FIND_INDEX = TYPE == 6;
  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
  var create = $create || asc;
  return function ($this, callbackfn, that) {
    var O = toObject($this);
    var self = IObject(O);
    var f = ctx(callbackfn, that, 3);
    var length = toLength(self.length);
    var index = 0;
    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
    var val, res;
    for (;length > index; index++) if (NO_HOLES || index in self) {
      val = self[index];
      res = f(val, index, O);
      if (TYPE) {
        if (IS_MAP) result[index] = res;   // map
        else if (res) switch (TYPE) {
          case 3: return true;             // some
          case 5: return val;              // find
          case 6: return index;            // findIndex
          case 2: result.push(val);        // filter
        } else if (IS_EVERY) return false; // every
      }
    }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
  };
};

},{"./_array-species-create":19,"./_ctx":27,"./_iobject":44,"./_to-length":92,"./_to-object":93}],17:[function(require,module,exports){
var aFunction = require('./_a-function');
var toObject = require('./_to-object');
var IObject = require('./_iobject');
var toLength = require('./_to-length');

module.exports = function (that, callbackfn, aLen, memo, isRight) {
  aFunction(callbackfn);
  var O = toObject(that);
  var self = IObject(O);
  var length = toLength(O.length);
  var index = isRight ? length - 1 : 0;
  var i = isRight ? -1 : 1;
  if (aLen < 2) for (;;) {
    if (index in self) {
      memo = self[index];
      index += i;
      break;
    }
    index += i;
    if (isRight ? index < 0 : length <= index) {
      throw TypeError('Reduce of empty array with no initial value');
    }
  }
  for (;isRight ? index >= 0 : length > index; index += i) if (index in self) {
    memo = callbackfn(memo, self[index], index, O);
  }
  return memo;
};

},{"./_a-function":8,"./_iobject":44,"./_to-length":92,"./_to-object":93}],18:[function(require,module,exports){
var isObject = require('./_is-object');
var isArray = require('./_is-array');
var SPECIES = require('./_wks')('species');

module.exports = function (original) {
  var C;
  if (isArray(original)) {
    C = original.constructor;
    // cross-realm fallback
    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
    if (isObject(C)) {
      C = C[SPECIES];
      if (C === null) C = undefined;
    }
  } return C === undefined ? Array : C;
};

},{"./_is-array":46,"./_is-object":47,"./_wks":98}],19:[function(require,module,exports){
// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
var speciesConstructor = require('./_array-species-constructor');

module.exports = function (original, length) {
  return new (speciesConstructor(original))(length);
};

},{"./_array-species-constructor":18}],20:[function(require,module,exports){
// getting tag from 19.1.3.6 Object.prototype.toString()
var cof = require('./_cof');
var TAG = require('./_wks')('toStringTag');
// ES3 wrong here
var ARG = cof(function () { return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function (it, key) {
  try {
    return it[key];
  } catch (e) { /* empty */ }
};

module.exports = function (it) {
  var O, T, B;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
    // builtinTag case
    : ARG ? cof(O)
    // ES3 arguments fallback
    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
};

},{"./_cof":21,"./_wks":98}],21:[function(require,module,exports){
var toString = {}.toString;

module.exports = function (it) {
  return toString.call(it).slice(8, -1);
};

},{}],22:[function(require,module,exports){
'use strict';
var dP = require('./_object-dp').f;
var create = require('./_object-create');
var redefineAll = require('./_redefine-all');
var ctx = require('./_ctx');
var anInstance = require('./_an-instance');
var forOf = require('./_for-of');
var $iterDefine = require('./_iter-define');
var step = require('./_iter-step');
var setSpecies = require('./_set-species');
var DESCRIPTORS = require('./_descriptors');
var fastKey = require('./_meta').fastKey;
var validate = require('./_validate-collection');
var SIZE = DESCRIPTORS ? '_s' : 'size';

var getEntry = function (that, key) {
  // fast case
  var index = fastKey(key);
  var entry;
  if (index !== 'F') return that._i[index];
  // frozen object case
  for (entry = that._f; entry; entry = entry.n) {
    if (entry.k == key) return entry;
  }
};

module.exports = {
  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      anInstance(that, C, NAME, '_i');
      that._t = NAME;         // collection type
      that._i = create(null); // index
      that._f = undefined;    // first entry
      that._l = undefined;    // last entry
      that[SIZE] = 0;         // size
      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.1.3.1 Map.prototype.clear()
      // 23.2.3.2 Set.prototype.clear()
      clear: function clear() {
        for (var that = validate(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {
          entry.r = true;
          if (entry.p) entry.p = entry.p.n = undefined;
          delete data[entry.i];
        }
        that._f = that._l = undefined;
        that[SIZE] = 0;
      },
      // 23.1.3.3 Map.prototype.delete(key)
      // 23.2.3.4 Set.prototype.delete(value)
      'delete': function (key) {
        var that = validate(this, NAME);
        var entry = getEntry(that, key);
        if (entry) {
          var next = entry.n;
          var prev = entry.p;
          delete that._i[entry.i];
          entry.r = true;
          if (prev) prev.n = next;
          if (next) next.p = prev;
          if (that._f == entry) that._f = next;
          if (that._l == entry) that._l = prev;
          that[SIZE]--;
        } return !!entry;
      },
      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
      forEach: function forEach(callbackfn /* , that = undefined */) {
        validate(this, NAME);
        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
        var entry;
        while (entry = entry ? entry.n : this._f) {
          f(entry.v, entry.k, this);
          // revert to the last existing entry
          while (entry && entry.r) entry = entry.p;
        }
      },
      // 23.1.3.7 Map.prototype.has(key)
      // 23.2.3.7 Set.prototype.has(value)
      has: function has(key) {
        return !!getEntry(validate(this, NAME), key);
      }
    });
    if (DESCRIPTORS) dP(C.prototype, 'size', {
      get: function () {
        return validate(this, NAME)[SIZE];
      }
    });
    return C;
  },
  def: function (that, key, value) {
    var entry = getEntry(that, key);
    var prev, index;
    // change existing entry
    if (entry) {
      entry.v = value;
    // create new entry
    } else {
      that._l = entry = {
        i: index = fastKey(key, true), // <- index
        k: key,                        // <- key
        v: value,                      // <- value
        p: prev = that._l,             // <- previous entry
        n: undefined,                  // <- next entry
        r: false                       // <- removed
      };
      if (!that._f) that._f = entry;
      if (prev) prev.n = entry;
      that[SIZE]++;
      // add to index
      if (index !== 'F') that._i[index] = entry;
    } return that;
  },
  getEntry: getEntry,
  setStrong: function (C, NAME, IS_MAP) {
    // add .keys, .values, .entries, [@@iterator]
    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
    $iterDefine(C, NAME, function (iterated, kind) {
      this._t = validate(iterated, NAME); // target
      this._k = kind;                     // kind
      this._l = undefined;                // previous
    }, function () {
      var that = this;
      var kind = that._k;
      var entry = that._l;
      // revert to the last existing entry
      while (entry && entry.r) entry = entry.p;
      // get next entry
      if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
        // or finish the iteration
        that._t = undefined;
        return step(1);
      }
      // return step by kind
      if (kind == 'keys') return step(0, entry.k);
      if (kind == 'values') return step(0, entry.v);
      return step(0, [entry.k, entry.v]);
    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);

    // add [@@species], 23.1.2.2, 23.2.2.2
    setSpecies(NAME);
  }
};

},{"./_an-instance":10,"./_ctx":27,"./_descriptors":29,"./_for-of":36,"./_iter-define":51,"./_iter-step":53,"./_meta":56,"./_object-create":61,"./_object-dp":62,"./_redefine-all":73,"./_set-species":76,"./_validate-collection":97}],23:[function(require,module,exports){
'use strict';
var redefineAll = require('./_redefine-all');
var getWeak = require('./_meta').getWeak;
var anObject = require('./_an-object');
var isObject = require('./_is-object');
var anInstance = require('./_an-instance');
var forOf = require('./_for-of');
var createArrayMethod = require('./_array-methods');
var $has = require('./_has');
var validate = require('./_validate-collection');
var arrayFind = createArrayMethod(5);
var arrayFindIndex = createArrayMethod(6);
var id = 0;

// fallback for uncaught frozen keys
var uncaughtFrozenStore = function (that) {
  return that._l || (that._l = new UncaughtFrozenStore());
};
var UncaughtFrozenStore = function () {
  this.a = [];
};
var findUncaughtFrozen = function (store, key) {
  return arrayFind(store.a, function (it) {
    return it[0] === key;
  });
};
UncaughtFrozenStore.prototype = {
  get: function (key) {
    var entry = findUncaughtFrozen(this, key);
    if (entry) return entry[1];
  },
  has: function (key) {
    return !!findUncaughtFrozen(this, key);
  },
  set: function (key, value) {
    var entry = findUncaughtFrozen(this, key);
    if (entry) entry[1] = value;
    else this.a.push([key, value]);
  },
  'delete': function (key) {
    var index = arrayFindIndex(this.a, function (it) {
      return it[0] === key;
    });
    if (~index) this.a.splice(index, 1);
    return !!~index;
  }
};

module.exports = {
  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      anInstance(that, C, NAME, '_i');
      that._t = NAME;      // collection type
      that._i = id++;      // collection id
      that._l = undefined; // leak store for uncaught frozen objects
      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.3.3.2 WeakMap.prototype.delete(key)
      // 23.4.3.3 WeakSet.prototype.delete(value)
      'delete': function (key) {
        if (!isObject(key)) return false;
        var data = getWeak(key);
        if (data === true) return uncaughtFrozenStore(validate(this, NAME))['delete'](key);
        return data && $has(data, this._i) && delete data[this._i];
      },
      // 23.3.3.4 WeakMap.prototype.has(key)
      // 23.4.3.4 WeakSet.prototype.has(value)
      has: function has(key) {
        if (!isObject(key)) return false;
        var data = getWeak(key);
        if (data === true) return uncaughtFrozenStore(validate(this, NAME)).has(key);
        return data && $has(data, this._i);
      }
    });
    return C;
  },
  def: function (that, key, value) {
    var data = getWeak(anObject(key), true);
    if (data === true) uncaughtFrozenStore(that).set(key, value);
    else data[that._i] = value;
    return that;
  },
  ufstore: uncaughtFrozenStore
};

},{"./_an-instance":10,"./_an-object":11,"./_array-methods":16,"./_for-of":36,"./_has":38,"./_is-object":47,"./_meta":56,"./_redefine-all":73,"./_validate-collection":97}],24:[function(require,module,exports){
'use strict';
var global = require('./_global');
var $export = require('./_export');
var redefine = require('./_redefine');
var redefineAll = require('./_redefine-all');
var meta = require('./_meta');
var forOf = require('./_for-of');
var anInstance = require('./_an-instance');
var isObject = require('./_is-object');
var fails = require('./_fails');
var $iterDetect = require('./_iter-detect');
var setToStringTag = require('./_set-to-string-tag');
var inheritIfRequired = require('./_inherit-if-required');

module.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
  var Base = global[NAME];
  var C = Base;
  var ADDER = IS_MAP ? 'set' : 'add';
  var proto = C && C.prototype;
  var O = {};
  var fixMethod = function (KEY) {
    var fn = proto[KEY];
    redefine(proto, KEY,
      KEY == 'delete' ? function (a) {
        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'has' ? function has(a) {
        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'get' ? function get(a) {
        return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'add' ? function add(a) { fn.call(this, a === 0 ? 0 : a); return this; }
        : function set(a, b) { fn.call(this, a === 0 ? 0 : a, b); return this; }
    );
  };
  if (typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {
    new C().entries().next();
  }))) {
    // create collection constructor
    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
    redefineAll(C.prototype, methods);
    meta.NEED = true;
  } else {
    var instance = new C();
    // early implementations not supports chaining
    var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;
    // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false
    var THROWS_ON_PRIMITIVES = fails(function () { instance.has(1); });
    // most early implementations doesn't supports iterables, most modern - not close it correctly
    var ACCEPT_ITERABLES = $iterDetect(function (iter) { new C(iter); }); // eslint-disable-line no-new
    // for early implementations -0 and +0 not the same
    var BUGGY_ZERO = !IS_WEAK && fails(function () {
      // V8 ~ Chromium 42- fails only with 5+ elements
      var $instance = new C();
      var index = 5;
      while (index--) $instance[ADDER](index, index);
      return !$instance.has(-0);
    });
    if (!ACCEPT_ITERABLES) {
      C = wrapper(function (target, iterable) {
        anInstance(target, C, NAME);
        var that = inheritIfRequired(new Base(), target, C);
        if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
        return that;
      });
      C.prototype = proto;
      proto.constructor = C;
    }
    if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
      fixMethod('delete');
      fixMethod('has');
      IS_MAP && fixMethod('get');
    }
    if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);
    // weak collections should not contains .clear method
    if (IS_WEAK && proto.clear) delete proto.clear;
  }

  setToStringTag(C, NAME);

  O[NAME] = C;
  $export($export.G + $export.W + $export.F * (C != Base), O);

  if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);

  return C;
};

},{"./_an-instance":10,"./_export":32,"./_fails":34,"./_for-of":36,"./_global":37,"./_inherit-if-required":42,"./_is-object":47,"./_iter-detect":52,"./_meta":56,"./_redefine":74,"./_redefine-all":73,"./_set-to-string-tag":77}],25:[function(require,module,exports){
var core = module.exports = { version: '2.5.7' };
if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef

},{}],26:[function(require,module,exports){
'use strict';
var $defineProperty = require('./_object-dp');
var createDesc = require('./_property-desc');

module.exports = function (object, index, value) {
  if (index in object) $defineProperty.f(object, index, createDesc(0, value));
  else object[index] = value;
};

},{"./_object-dp":62,"./_property-desc":72}],27:[function(require,module,exports){
// optional / simple context binding
var aFunction = require('./_a-function');
module.exports = function (fn, that, length) {
  aFunction(fn);
  if (that === undefined) return fn;
  switch (length) {
    case 1: return function (a) {
      return fn.call(that, a);
    };
    case 2: return function (a, b) {
      return fn.call(that, a, b);
    };
    case 3: return function (a, b, c) {
      return fn.call(that, a, b, c);
    };
  }
  return function (/* ...args */) {
    return fn.apply(that, arguments);
  };
};

},{"./_a-function":8}],28:[function(require,module,exports){
// 7.2.1 RequireObjectCoercible(argument)
module.exports = function (it) {
  if (it == undefined) throw TypeError("Can't call method on  " + it);
  return it;
};

},{}],29:[function(require,module,exports){
// Thank's IE8 for his funny defineProperty
module.exports = !require('./_fails')(function () {
  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
});

},{"./_fails":34}],30:[function(require,module,exports){
var isObject = require('./_is-object');
var document = require('./_global').document;
// typeof document.createElement is 'object' in old IE
var is = isObject(document) && isObject(document.createElement);
module.exports = function (it) {
  return is ? document.createElement(it) : {};
};

},{"./_global":37,"./_is-object":47}],31:[function(require,module,exports){
// IE 8- don't enum bug keys
module.exports = (
  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
).split(',');

},{}],32:[function(require,module,exports){
var global = require('./_global');
var core = require('./_core');
var hide = require('./_hide');
var redefine = require('./_redefine');
var ctx = require('./_ctx');
var PROTOTYPE = 'prototype';

var $export = function (type, name, source) {
  var IS_FORCED = type & $export.F;
  var IS_GLOBAL = type & $export.G;
  var IS_STATIC = type & $export.S;
  var IS_PROTO = type & $export.P;
  var IS_BIND = type & $export.B;
  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];
  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});
  var key, own, out, exp;
  if (IS_GLOBAL) source = name;
  for (key in source) {
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    // export native or passed
    out = (own ? target : source)[key];
    // bind timers to global for call from export context
    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // extend global
    if (target) redefine(target, key, out, type & $export.U);
    // export
    if (exports[key] != out) hide(exports, key, exp);
    if (IS_PROTO && expProto[key] != out) expProto[key] = out;
  }
};
global.core = core;
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library`
module.exports = $export;

},{"./_core":25,"./_ctx":27,"./_global":37,"./_hide":39,"./_redefine":74}],33:[function(require,module,exports){
var MATCH = require('./_wks')('match');
module.exports = function (KEY) {
  var re = /./;
  try {
    '/./'[KEY](re);
  } catch (e) {
    try {
      re[MATCH] = false;
      return !'/./'[KEY](re);
    } catch (f) { /* empty */ }
  } return true;
};

},{"./_wks":98}],34:[function(require,module,exports){
module.exports = function (exec) {
  try {
    return !!exec();
  } catch (e) {
    return true;
  }
};

},{}],35:[function(require,module,exports){
'use strict';
var hide = require('./_hide');
var redefine = require('./_redefine');
var fails = require('./_fails');
var defined = require('./_defined');
var wks = require('./_wks');

module.exports = function (KEY, length, exec) {
  var SYMBOL = wks(KEY);
  var fns = exec(defined, SYMBOL, ''[KEY]);
  var strfn = fns[0];
  var rxfn = fns[1];
  if (fails(function () {
    var O = {};
    O[SYMBOL] = function () { return 7; };
    return ''[KEY](O) != 7;
  })) {
    redefine(String.prototype, KEY, strfn);
    hide(RegExp.prototype, SYMBOL, length == 2
      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
      // 21.2.5.11 RegExp.prototype[@@split](string, limit)
      ? function (string, arg) { return rxfn.call(string, this, arg); }
      // 21.2.5.6 RegExp.prototype[@@match](string)
      // 21.2.5.9 RegExp.prototype[@@search](string)
      : function (string) { return rxfn.call(string, this); }
    );
  }
};

},{"./_defined":28,"./_fails":34,"./_hide":39,"./_redefine":74,"./_wks":98}],36:[function(require,module,exports){
var ctx = require('./_ctx');
var call = require('./_iter-call');
var isArrayIter = require('./_is-array-iter');
var anObject = require('./_an-object');
var toLength = require('./_to-length');
var getIterFn = require('./core.get-iterator-method');
var BREAK = {};
var RETURN = {};
var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);
  var f = ctx(fn, that, entries ? 2 : 1);
  var index = 0;
  var length, step, iterator, result;
  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');
  // fast case for arrays with default iterator
  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {
    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
    if (result === BREAK || result === RETURN) return result;
  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
    result = call(iterator, f, step.value, entries);
    if (result === BREAK || result === RETURN) return result;
  }
};
exports.BREAK = BREAK;
exports.RETURN = RETURN;

},{"./_an-object":11,"./_ctx":27,"./_is-array-iter":45,"./_iter-call":49,"./_to-length":92,"./core.get-iterator-method":99}],37:[function(require,module,exports){
// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self
  // eslint-disable-next-line no-new-func
  : Function('return this')();
if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef

},{}],38:[function(require,module,exports){
var hasOwnProperty = {}.hasOwnProperty;
module.exports = function (it, key) {
  return hasOwnProperty.call(it, key);
};

},{}],39:[function(require,module,exports){
var dP = require('./_object-dp');
var createDesc = require('./_property-desc');
module.exports = require('./_descriptors') ? function (object, key, value) {
  return dP.f(object, key, createDesc(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};

},{"./_descriptors":29,"./_object-dp":62,"./_property-desc":72}],40:[function(require,module,exports){
var document = require('./_global').document;
module.exports = document && document.documentElement;

},{"./_global":37}],41:[function(require,module,exports){
module.exports = !require('./_descriptors') && !require('./_fails')(function () {
  return Object.defineProperty(require('./_dom-create')('div'), 'a', { get: function () { return 7; } }).a != 7;
});

},{"./_descriptors":29,"./_dom-create":30,"./_fails":34}],42:[function(require,module,exports){
var isObject = require('./_is-object');
var setPrototypeOf = require('./_set-proto').set;
module.exports = function (that, target, C) {
  var S = target.constructor;
  var P;
  if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf) {
    setPrototypeOf(that, P);
  } return that;
};

},{"./_is-object":47,"./_set-proto":75}],43:[function(require,module,exports){
// fast apply, http://jsperf.lnkit.com/fast-apply/5
module.exports = function (fn, args, that) {
  var un = that === undefined;
  switch (args.length) {
    case 0: return un ? fn()
                      : fn.call(that);
    case 1: return un ? fn(args[0])
                      : fn.call(that, args[0]);
    case 2: return un ? fn(args[0], args[1])
                      : fn.call(that, args[0], args[1]);
    case 3: return un ? fn(args[0], args[1], args[2])
                      : fn.call(that, args[0], args[1], args[2]);
    case 4: return un ? fn(args[0], args[1], args[2], args[3])
                      : fn.call(that, args[0], args[1], args[2], args[3]);
  } return fn.apply(that, args);
};

},{}],44:[function(require,module,exports){
// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = require('./_cof');
// eslint-disable-next-line no-prototype-builtins
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
  return cof(it) == 'String' ? it.split('') : Object(it);
};

},{"./_cof":21}],45:[function(require,module,exports){
// check on default Array iterator
var Iterators = require('./_iterators');
var ITERATOR = require('./_wks')('iterator');
var ArrayProto = Array.prototype;

module.exports = function (it) {
  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
};

},{"./_iterators":54,"./_wks":98}],46:[function(require,module,exports){
// 7.2.2 IsArray(argument)
var cof = require('./_cof');
module.exports = Array.isArray || function isArray(arg) {
  return cof(arg) == 'Array';
};

},{"./_cof":21}],47:[function(require,module,exports){
module.exports = function (it) {
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};

},{}],48:[function(require,module,exports){
// 7.2.8 IsRegExp(argument)
var isObject = require('./_is-object');
var cof = require('./_cof');
var MATCH = require('./_wks')('match');
module.exports = function (it) {
  var isRegExp;
  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');
};

},{"./_cof":21,"./_is-object":47,"./_wks":98}],49:[function(require,module,exports){
// call something on iterator step with safe closing on error
var anObject = require('./_an-object');
module.exports = function (iterator, fn, value, entries) {
  try {
    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
  // 7.4.6 IteratorClose(iterator, completion)
  } catch (e) {
    var ret = iterator['return'];
    if (ret !== undefined) anObject(ret.call(iterator));
    throw e;
  }
};

},{"./_an-object":11}],50:[function(require,module,exports){
'use strict';
var create = require('./_object-create');
var descriptor = require('./_property-desc');
var setToStringTag = require('./_set-to-string-tag');
var IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
require('./_hide')(IteratorPrototype, require('./_wks')('iterator'), function () { return this; });

module.exports = function (Constructor, NAME, next) {
  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
  setToStringTag(Constructor, NAME + ' Iterator');
};

},{"./_hide":39,"./_object-create":61,"./_property-desc":72,"./_set-to-string-tag":77,"./_wks":98}],51:[function(require,module,exports){
'use strict';
var LIBRARY = require('./_library');
var $export = require('./_export');
var redefine = require('./_redefine');
var hide = require('./_hide');
var Iterators = require('./_iterators');
var $iterCreate = require('./_iter-create');
var setToStringTag = require('./_set-to-string-tag');
var getPrototypeOf = require('./_object-gpo');
var ITERATOR = require('./_wks')('iterator');
var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
var FF_ITERATOR = '@@iterator';
var KEYS = 'keys';
var VALUES = 'values';

var returnThis = function () { return this; };

module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
  $iterCreate(Constructor, NAME, next);
  var getMethod = function (kind) {
    if (!BUGGY && kind in proto) return proto[kind];
    switch (kind) {
      case KEYS: return function keys() { return new Constructor(this, kind); };
      case VALUES: return function values() { return new Constructor(this, kind); };
    } return function entries() { return new Constructor(this, kind); };
  };
  var TAG = NAME + ' Iterator';
  var DEF_VALUES = DEFAULT == VALUES;
  var VALUES_BUG = false;
  var proto = Base.prototype;
  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
  var $default = $native || getMethod(DEFAULT);
  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
  var methods, key, IteratorPrototype;
  // Fix native
  if ($anyNative) {
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
      // Set @@toStringTag to native iterators
      setToStringTag(IteratorPrototype, TAG, true);
      // fix for some old engines
      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);
    }
  }
  // fix Array#{values, @@iterator}.name in V8 / FF
  if (DEF_VALUES && $native && $native.name !== VALUES) {
    VALUES_BUG = true;
    $default = function values() { return $native.call(this); };
  }
  // Define iterator
  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
    hide(proto, ITERATOR, $default);
  }
  // Plug for library
  Iterators[NAME] = $default;
  Iterators[TAG] = returnThis;
  if (DEFAULT) {
    methods = {
      values: DEF_VALUES ? $default : getMethod(VALUES),
      keys: IS_SET ? $default : getMethod(KEYS),
      entries: $entries
    };
    if (FORCED) for (key in methods) {
      if (!(key in proto)) redefine(proto, key, methods[key]);
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
  }
  return methods;
};

},{"./_export":32,"./_hide":39,"./_iter-create":50,"./_iterators":54,"./_library":55,"./_object-gpo":66,"./_redefine":74,"./_set-to-string-tag":77,"./_wks":98}],52:[function(require,module,exports){
var ITERATOR = require('./_wks')('iterator');
var SAFE_CLOSING = false;

try {
  var riter = [7][ITERATOR]();
  riter['return'] = function () { SAFE_CLOSING = true; };
  // eslint-disable-next-line no-throw-literal
  Array.from(riter, function () { throw 2; });
} catch (e) { /* empty */ }

module.exports = function (exec, skipClosing) {
  if (!skipClosing && !SAFE_CLOSING) return false;
  var safe = false;
  try {
    var arr = [7];
    var iter = arr[ITERATOR]();
    iter.next = function () { return { done: safe = true }; };
    arr[ITERATOR] = function () { return iter; };
    exec(arr);
  } catch (e) { /* empty */ }
  return safe;
};

},{"./_wks":98}],53:[function(require,module,exports){
module.exports = function (done, value) {
  return { value: value, done: !!done };
};

},{}],54:[function(require,module,exports){
module.exports = {};

},{}],55:[function(require,module,exports){
module.exports = false;

},{}],56:[function(require,module,exports){
var META = require('./_uid')('meta');
var isObject = require('./_is-object');
var has = require('./_has');
var setDesc = require('./_object-dp').f;
var id = 0;
var isExtensible = Object.isExtensible || function () {
  return true;
};
var FREEZE = !require('./_fails')(function () {
  return isExtensible(Object.preventExtensions({}));
});
var setMeta = function (it) {
  setDesc(it, META, { value: {
    i: 'O' + ++id, // object ID
    w: {}          // weak collections IDs
  } });
};
var fastKey = function (it, create) {
  // return primitive with prefix
  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return 'F';
    // not necessary to add metadata
    if (!create) return 'E';
    // add missing metadata
    setMeta(it);
  // return object ID
  } return it[META].i;
};
var getWeak = function (it, create) {
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return true;
    // not necessary to add metadata
    if (!create) return false;
    // add missing metadata
    setMeta(it);
  // return hash weak collections IDs
  } return it[META].w;
};
// add metadata on freeze-family methods calling
var onFreeze = function (it) {
  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
  return it;
};
var meta = module.exports = {
  KEY: META,
  NEED: false,
  fastKey: fastKey,
  getWeak: getWeak,
  onFreeze: onFreeze
};

},{"./_fails":34,"./_has":38,"./_is-object":47,"./_object-dp":62,"./_uid":95}],57:[function(require,module,exports){
var Map = require('./es6.map');
var $export = require('./_export');
var shared = require('./_shared')('metadata');
var store = shared.store || (shared.store = new (require('./es6.weak-map'))());

var getOrCreateMetadataMap = function (target, targetKey, create) {
  var targetMetadata = store.get(target);
  if (!targetMetadata) {
    if (!create) return undefined;
    store.set(target, targetMetadata = new Map());
  }
  var keyMetadata = targetMetadata.get(targetKey);
  if (!keyMetadata) {
    if (!create) return undefined;
    targetMetadata.set(targetKey, keyMetadata = new Map());
  } return keyMetadata;
};
var ordinaryHasOwnMetadata = function (MetadataKey, O, P) {
  var metadataMap = getOrCreateMetadataMap(O, P, false);
  return metadataMap === undefined ? false : metadataMap.has(MetadataKey);
};
var ordinaryGetOwnMetadata = function (MetadataKey, O, P) {
  var metadataMap = getOrCreateMetadataMap(O, P, false);
  return metadataMap === undefined ? undefined : metadataMap.get(MetadataKey);
};
var ordinaryDefineOwnMetadata = function (MetadataKey, MetadataValue, O, P) {
  getOrCreateMetadataMap(O, P, true).set(MetadataKey, MetadataValue);
};
var ordinaryOwnMetadataKeys = function (target, targetKey) {
  var metadataMap = getOrCreateMetadataMap(target, targetKey, false);
  var keys = [];
  if (metadataMap) metadataMap.forEach(function (_, key) { keys.push(key); });
  return keys;
};
var toMetaKey = function (it) {
  return it === undefined || typeof it == 'symbol' ? it : String(it);
};
var exp = function (O) {
  $export($export.S, 'Reflect', O);
};

module.exports = {
  store: store,
  map: getOrCreateMetadataMap,
  has: ordinaryHasOwnMetadata,
  get: ordinaryGetOwnMetadata,
  set: ordinaryDefineOwnMetadata,
  keys: ordinaryOwnMetadataKeys,
  key: toMetaKey,
  exp: exp
};

},{"./_export":32,"./_shared":79,"./es6.map":121,"./es6.weak-map":151}],58:[function(require,module,exports){
var global = require('./_global');
var macrotask = require('./_task').set;
var Observer = global.MutationObserver || global.WebKitMutationObserver;
var process = global.process;
var Promise = global.Promise;
var isNode = require('./_cof')(process) == 'process';

module.exports = function () {
  var head, last, notify;

  var flush = function () {
    var parent, fn;
    if (isNode && (parent = process.domain)) parent.exit();
    while (head) {
      fn = head.fn;
      head = head.next;
      try {
        fn();
      } catch (e) {
        if (head) notify();
        else last = undefined;
        throw e;
      }
    } last = undefined;
    if (parent) parent.enter();
  };

  // Node.js
  if (isNode) {
    notify = function () {
      process.nextTick(flush);
    };
  // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339
  } else if (Observer && !(global.navigator && global.navigator.standalone)) {
    var toggle = true;
    var node = document.createTextNode('');
    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new
    notify = function () {
      node.data = toggle = !toggle;
    };
  // environments with maybe non-completely correct, but existent Promise
  } else if (Promise && Promise.resolve) {
    // Promise.resolve without an argument throws an error in LG WebOS 2
    var promise = Promise.resolve(undefined);
    notify = function () {
      promise.then(flush);
    };
  // for other environments - macrotask based on:
  // - setImmediate
  // - MessageChannel
  // - window.postMessag
  // - onreadystatechange
  // - setTimeout
  } else {
    notify = function () {
      // strange IE + webpack dev server bug - use .call(global)
      macrotask.call(global, flush);
    };
  }

  return function (fn) {
    var task = { fn: fn, next: undefined };
    if (last) last.next = task;
    if (!head) {
      head = task;
      notify();
    } last = task;
  };
};

},{"./_cof":21,"./_global":37,"./_task":88}],59:[function(require,module,exports){
'use strict';
// 25.4.1.5 NewPromiseCapability(C)
var aFunction = require('./_a-function');

function PromiseCapability(C) {
  var resolve, reject;
  this.promise = new C(function ($$resolve, $$reject) {
    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject = $$reject;
  });
  this.resolve = aFunction(resolve);
  this.reject = aFunction(reject);
}

module.exports.f = function (C) {
  return new PromiseCapability(C);
};

},{"./_a-function":8}],60:[function(require,module,exports){
'use strict';
// 19.1.2.1 Object.assign(target, source, ...)
var getKeys = require('./_object-keys');
var gOPS = require('./_object-gops');
var pIE = require('./_object-pie');
var toObject = require('./_to-object');
var IObject = require('./_iobject');
var $assign = Object.assign;

// should work with symbols and should have deterministic property order (V8 bug)
module.exports = !$assign || require('./_fails')(function () {
  var A = {};
  var B = {};
  // eslint-disable-next-line no-undef
  var S = Symbol();
  var K = 'abcdefghijklmnopqrst';
  A[S] = 7;
  K.split('').forEach(function (k) { B[k] = k; });
  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
  var T = toObject(target);
  var aLen = arguments.length;
  var index = 1;
  var getSymbols = gOPS.f;
  var isEnum = pIE.f;
  while (aLen > index) {
    var S = IObject(arguments[index++]);
    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
    var length = keys.length;
    var j = 0;
    var key;
    while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];
  } return T;
} : $assign;

},{"./_fails":34,"./_iobject":44,"./_object-gops":65,"./_object-keys":68,"./_object-pie":69,"./_to-object":93}],61:[function(require,module,exports){
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject = require('./_an-object');
var dPs = require('./_object-dps');
var enumBugKeys = require('./_enum-bug-keys');
var IE_PROTO = require('./_shared-key')('IE_PROTO');
var Empty = function () { /* empty */ };
var PROTOTYPE = 'prototype';

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var createDict = function () {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = require('./_dom-create')('iframe');
  var i = enumBugKeys.length;
  var lt = '<';
  var gt = '>';
  var iframeDocument;
  iframe.style.display = 'none';
  require('./_html').appendChild(iframe);
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];
  return createDict();
};

module.exports = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    Empty[PROTOTYPE] = anObject(O);
    result = new Empty();
    Empty[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = createDict();
  return Properties === undefined ? result : dPs(result, Properties);
};

},{"./_an-object":11,"./_dom-create":30,"./_enum-bug-keys":31,"./_html":40,"./_object-dps":63,"./_shared-key":78}],62:[function(require,module,exports){
var anObject = require('./_an-object');
var IE8_DOM_DEFINE = require('./_ie8-dom-define');
var toPrimitive = require('./_to-primitive');
var dP = Object.defineProperty;

exports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return dP(O, P, Attributes);
  } catch (e) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};

},{"./_an-object":11,"./_descriptors":29,"./_ie8-dom-define":41,"./_to-primitive":94}],63:[function(require,module,exports){
var dP = require('./_object-dp');
var anObject = require('./_an-object');
var getKeys = require('./_object-keys');

module.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var keys = getKeys(Properties);
  var length = keys.length;
  var i = 0;
  var P;
  while (length > i) dP.f(O, P = keys[i++], Properties[P]);
  return O;
};

},{"./_an-object":11,"./_descriptors":29,"./_object-dp":62,"./_object-keys":68}],64:[function(require,module,exports){
var pIE = require('./_object-pie');
var createDesc = require('./_property-desc');
var toIObject = require('./_to-iobject');
var toPrimitive = require('./_to-primitive');
var has = require('./_has');
var IE8_DOM_DEFINE = require('./_ie8-dom-define');
var gOPD = Object.getOwnPropertyDescriptor;

exports.f = require('./_descriptors') ? gOPD : function getOwnPropertyDescriptor(O, P) {
  O = toIObject(O);
  P = toPrimitive(P, true);
  if (IE8_DOM_DEFINE) try {
    return gOPD(O, P);
  } catch (e) { /* empty */ }
  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
};

},{"./_descriptors":29,"./_has":38,"./_ie8-dom-define":41,"./_object-pie":69,"./_property-desc":72,"./_to-iobject":91,"./_to-primitive":94}],65:[function(require,module,exports){
exports.f = Object.getOwnPropertySymbols;

},{}],66:[function(require,module,exports){
// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has = require('./_has');
var toObject = require('./_to-object');
var IE_PROTO = require('./_shared-key')('IE_PROTO');
var ObjectProto = Object.prototype;

module.exports = Object.getPrototypeOf || function (O) {
  O = toObject(O);
  if (has(O, IE_PROTO)) return O[IE_PROTO];
  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectProto : null;
};

},{"./_has":38,"./_shared-key":78,"./_to-object":93}],67:[function(require,module,exports){
var has = require('./_has');
var toIObject = require('./_to-iobject');
var arrayIndexOf = require('./_array-includes')(false);
var IE_PROTO = require('./_shared-key')('IE_PROTO');

module.exports = function (object, names) {
  var O = toIObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (has(O, key = names[i++])) {
    ~arrayIndexOf(result, key) || result.push(key);
  }
  return result;
};

},{"./_array-includes":15,"./_has":38,"./_shared-key":78,"./_to-iobject":91}],68:[function(require,module,exports){
// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys = require('./_object-keys-internal');
var enumBugKeys = require('./_enum-bug-keys');

module.exports = Object.keys || function keys(O) {
  return $keys(O, enumBugKeys);
};

},{"./_enum-bug-keys":31,"./_object-keys-internal":67}],69:[function(require,module,exports){
exports.f = {}.propertyIsEnumerable;

},{}],70:[function(require,module,exports){
module.exports = function (exec) {
  try {
    return { e: false, v: exec() };
  } catch (e) {
    return { e: true, v: e };
  }
};

},{}],71:[function(require,module,exports){
var anObject = require('./_an-object');
var isObject = require('./_is-object');
var newPromiseCapability = require('./_new-promise-capability');

module.exports = function (C, x) {
  anObject(C);
  if (isObject(x) && x.constructor === C) return x;
  var promiseCapability = newPromiseCapability.f(C);
  var resolve = promiseCapability.resolve;
  resolve(x);
  return promiseCapability.promise;
};

},{"./_an-object":11,"./_is-object":47,"./_new-promise-capability":59}],72:[function(require,module,exports){
module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};

},{}],73:[function(require,module,exports){
var redefine = require('./_redefine');
module.exports = function (target, src, safe) {
  for (var key in src) redefine(target, key, src[key], safe);
  return target;
};

},{"./_redefine":74}],74:[function(require,module,exports){
var global = require('./_global');
var hide = require('./_hide');
var has = require('./_has');
var SRC = require('./_uid')('src');
var TO_STRING = 'toString';
var $toString = Function[TO_STRING];
var TPL = ('' + $toString).split(TO_STRING);

require('./_core').inspectSource = function (it) {
  return $toString.call(it);
};

(module.exports = function (O, key, val, safe) {
  var isFunction = typeof val == 'function';
  if (isFunction) has(val, 'name') || hide(val, 'name', key);
  if (O[key] === val) return;
  if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
  if (O === global) {
    O[key] = val;
  } else if (!safe) {
    delete O[key];
    hide(O, key, val);
  } else if (O[key]) {
    O[key] = val;
  } else {
    hide(O, key, val);
  }
// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
})(Function.prototype, TO_STRING, function toString() {
  return typeof this == 'function' && this[SRC] || $toString.call(this);
});

},{"./_core":25,"./_global":37,"./_has":38,"./_hide":39,"./_uid":95}],75:[function(require,module,exports){
// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */
var isObject = require('./_is-object');
var anObject = require('./_an-object');
var check = function (O, proto) {
  anObject(O);
  if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
};
module.exports = {
  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
    function (test, buggy, set) {
      try {
        set = require('./_ctx')(Function.call, require('./_object-gopd').f(Object.prototype, '__proto__').set, 2);
        set(test, []);
        buggy = !(test instanceof Array);
      } catch (e) { buggy = true; }
      return function setPrototypeOf(O, proto) {
        check(O, proto);
        if (buggy) O.__proto__ = proto;
        else set(O, proto);
        return O;
      };
    }({}, false) : undefined),
  check: check
};

},{"./_an-object":11,"./_ctx":27,"./_is-object":47,"./_object-gopd":64}],76:[function(require,module,exports){
'use strict';
var global = require('./_global');
var dP = require('./_object-dp');
var DESCRIPTORS = require('./_descriptors');
var SPECIES = require('./_wks')('species');

module.exports = function (KEY) {
  var C = global[KEY];
  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {
    configurable: true,
    get: function () { return this; }
  });
};

},{"./_descriptors":29,"./_global":37,"./_object-dp":62,"./_wks":98}],77:[function(require,module,exports){
var def = require('./_object-dp').f;
var has = require('./_has');
var TAG = require('./_wks')('toStringTag');

module.exports = function (it, tag, stat) {
  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
};

},{"./_has":38,"./_object-dp":62,"./_wks":98}],78:[function(require,module,exports){
var shared = require('./_shared')('keys');
var uid = require('./_uid');
module.exports = function (key) {
  return shared[key] || (shared[key] = uid(key));
};

},{"./_shared":79,"./_uid":95}],79:[function(require,module,exports){
var core = require('./_core');
var global = require('./_global');
var SHARED = '__core-js_shared__';
var store = global[SHARED] || (global[SHARED] = {});

(module.exports = function (key, value) {
  return store[key] || (store[key] = value !== undefined ? value : {});
})('versions', []).push({
  version: core.version,
  mode: require('./_library') ? 'pure' : 'global',
  copyright: '© 2018 Denis Pushkarev (zloirock.ru)'
});

},{"./_core":25,"./_global":37,"./_library":55}],80:[function(require,module,exports){
// 7.3.20 SpeciesConstructor(O, defaultConstructor)
var anObject = require('./_an-object');
var aFunction = require('./_a-function');
var SPECIES = require('./_wks')('species');
module.exports = function (O, D) {
  var C = anObject(O).constructor;
  var S;
  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
};

},{"./_a-function":8,"./_an-object":11,"./_wks":98}],81:[function(require,module,exports){
'use strict';
var fails = require('./_fails');

module.exports = function (method, arg) {
  return !!method && fails(function () {
    // eslint-disable-next-line no-useless-call
    arg ? method.call(null, function () { /* empty */ }, 1) : method.call(null);
  });
};

},{"./_fails":34}],82:[function(require,module,exports){
var toInteger = require('./_to-integer');
var defined = require('./_defined');
// true  -> String#at
// false -> String#codePointAt
module.exports = function (TO_STRING) {
  return function (that, pos) {
    var s = String(defined(that));
    var i = toInteger(pos);
    var l = s.length;
    var a, b;
    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
      ? TO_STRING ? s.charAt(i) : a
      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};

},{"./_defined":28,"./_to-integer":90}],83:[function(require,module,exports){
// helper for String#{startsWith, endsWith, includes}
var isRegExp = require('./_is-regexp');
var defined = require('./_defined');

module.exports = function (that, searchString, NAME) {
  if (isRegExp(searchString)) throw TypeError('String#' + NAME + " doesn't accept regex!");
  return String(defined(that));
};

},{"./_defined":28,"./_is-regexp":48}],84:[function(require,module,exports){
var $export = require('./_export');
var fails = require('./_fails');
var defined = require('./_defined');
var quot = /"/g;
// B.2.3.2.1 CreateHTML(string, tag, attribute, value)
var createHTML = function (string, tag, attribute, value) {
  var S = String(defined(string));
  var p1 = '<' + tag;
  if (attribute !== '') p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
  return p1 + '>' + S + '</' + tag + '>';
};
module.exports = function (NAME, exec) {
  var O = {};
  O[NAME] = exec(createHTML);
  $export($export.P + $export.F * fails(function () {
    var test = ''[NAME]('"');
    return test !== test.toLowerCase() || test.split('"').length > 3;
  }), 'String', O);
};

},{"./_defined":28,"./_export":32,"./_fails":34}],85:[function(require,module,exports){
'use strict';
var toInteger = require('./_to-integer');
var defined = require('./_defined');

module.exports = function repeat(count) {
  var str = String(defined(this));
  var res = '';
  var n = toInteger(count);
  if (n < 0 || n == Infinity) throw RangeError("Count can't be negative");
  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) res += str;
  return res;
};

},{"./_defined":28,"./_to-integer":90}],86:[function(require,module,exports){
var $export = require('./_export');
var defined = require('./_defined');
var fails = require('./_fails');
var spaces = require('./_string-ws');
var space = '[' + spaces + ']';
var non = '\u200b\u0085';
var ltrim = RegExp('^' + space + space + '*');
var rtrim = RegExp(space + space + '*$');

var exporter = function (KEY, exec, ALIAS) {
  var exp = {};
  var FORCE = fails(function () {
    return !!spaces[KEY]() || non[KEY]() != non;
  });
  var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];
  if (ALIAS) exp[ALIAS] = fn;
  $export($export.P + $export.F * FORCE, 'String', exp);
};

// 1 -> String#trimLeft
// 2 -> String#trimRight
// 3 -> String#trim
var trim = exporter.trim = function (string, TYPE) {
  string = String(defined(string));
  if (TYPE & 1) string = string.replace(ltrim, '');
  if (TYPE & 2) string = string.replace(rtrim, '');
  return string;
};

module.exports = exporter;

},{"./_defined":28,"./_export":32,"./_fails":34,"./_string-ws":87}],87:[function(require,module,exports){
module.exports = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' +
  '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';

},{}],88:[function(require,module,exports){
var ctx = require('./_ctx');
var invoke = require('./_invoke');
var html = require('./_html');
var cel = require('./_dom-create');
var global = require('./_global');
var process = global.process;
var setTask = global.setImmediate;
var clearTask = global.clearImmediate;
var MessageChannel = global.MessageChannel;
var Dispatch = global.Dispatch;
var counter = 0;
var queue = {};
var ONREADYSTATECHANGE = 'onreadystatechange';
var defer, channel, port;
var run = function () {
  var id = +this;
  // eslint-disable-next-line no-prototype-builtins
  if (queue.hasOwnProperty(id)) {
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};
var listener = function (event) {
  run.call(event.data);
};
// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if (!setTask || !clearTask) {
  setTask = function setImmediate(fn) {
    var args = [];
    var i = 1;
    while (arguments.length > i) args.push(arguments[i++]);
    queue[++counter] = function () {
      // eslint-disable-next-line no-new-func
      invoke(typeof fn == 'function' ? fn : Function(fn), args);
    };
    defer(counter);
    return counter;
  };
  clearTask = function clearImmediate(id) {
    delete queue[id];
  };
  // Node.js 0.8-
  if (require('./_cof')(process) == 'process') {
    defer = function (id) {
      process.nextTick(ctx(run, id, 1));
    };
  // Sphere (JS game engine) Dispatch API
  } else if (Dispatch && Dispatch.now) {
    defer = function (id) {
      Dispatch.now(ctx(run, id, 1));
    };
  // Browsers with MessageChannel, includes WebWorkers
  } else if (MessageChannel) {
    channel = new MessageChannel();
    port = channel.port2;
    channel.port1.onmessage = listener;
    defer = ctx(port.postMessage, port, 1);
  // Browsers with postMessage, skip WebWorkers
  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {
    defer = function (id) {
      global.postMessage(id + '', '*');
    };
    global.addEventListener('message', listener, false);
  // IE8-
  } else if (ONREADYSTATECHANGE in cel('script')) {
    defer = function (id) {
      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {
        html.removeChild(this);
        run.call(id);
      };
    };
  // Rest old browsers
  } else {
    defer = function (id) {
      setTimeout(ctx(run, id, 1), 0);
    };
  }
}
module.exports = {
  set: setTask,
  clear: clearTask
};

},{"./_cof":21,"./_ctx":27,"./_dom-create":30,"./_global":37,"./_html":40,"./_invoke":43}],89:[function(require,module,exports){
var toInteger = require('./_to-integer');
var max = Math.max;
var min = Math.min;
module.exports = function (index, length) {
  index = toInteger(index);
  return index < 0 ? max(index + length, 0) : min(index, length);
};

},{"./_to-integer":90}],90:[function(require,module,exports){
// 7.1.4 ToInteger
var ceil = Math.ceil;
var floor = Math.floor;
module.exports = function (it) {
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};

},{}],91:[function(require,module,exports){
// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = require('./_iobject');
var defined = require('./_defined');
module.exports = function (it) {
  return IObject(defined(it));
};

},{"./_defined":28,"./_iobject":44}],92:[function(require,module,exports){
// 7.1.15 ToLength
var toInteger = require('./_to-integer');
var min = Math.min;
module.exports = function (it) {
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};

},{"./_to-integer":90}],93:[function(require,module,exports){
// 7.1.13 ToObject(argument)
var defined = require('./_defined');
module.exports = function (it) {
  return Object(defined(it));
};

},{"./_defined":28}],94:[function(require,module,exports){
// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = require('./_is-object');
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function (it, S) {
  if (!isObject(it)) return it;
  var fn, val;
  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  throw TypeError("Can't convert object to primitive value");
};

},{"./_is-object":47}],95:[function(require,module,exports){
var id = 0;
var px = Math.random();
module.exports = function (key) {
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};

},{}],96:[function(require,module,exports){
var global = require('./_global');
var navigator = global.navigator;

module.exports = navigator && navigator.userAgent || '';

},{"./_global":37}],97:[function(require,module,exports){
var isObject = require('./_is-object');
module.exports = function (it, TYPE) {
  if (!isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');
  return it;
};

},{"./_is-object":47}],98:[function(require,module,exports){
var store = require('./_shared')('wks');
var uid = require('./_uid');
var Symbol = require('./_global').Symbol;
var USE_SYMBOL = typeof Symbol == 'function';

var $exports = module.exports = function (name) {
  return store[name] || (store[name] =
    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
};

$exports.store = store;

},{"./_global":37,"./_shared":79,"./_uid":95}],99:[function(require,module,exports){
var classof = require('./_classof');
var ITERATOR = require('./_wks')('iterator');
var Iterators = require('./_iterators');
module.exports = require('./_core').getIteratorMethod = function (it) {
  if (it != undefined) return it[ITERATOR]
    || it['@@iterator']
    || Iterators[classof(it)];
};

},{"./_classof":20,"./_core":25,"./_iterators":54,"./_wks":98}],100:[function(require,module,exports){
// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
var $export = require('./_export');

$export($export.P, 'Array', { copyWithin: require('./_array-copy-within') });

require('./_add-to-unscopables')('copyWithin');

},{"./_add-to-unscopables":9,"./_array-copy-within":12,"./_export":32}],101:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var $every = require('./_array-methods')(4);

$export($export.P + $export.F * !require('./_strict-method')([].every, true), 'Array', {
  // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])
  every: function every(callbackfn /* , thisArg */) {
    return $every(this, callbackfn, arguments[1]);
  }
});

},{"./_array-methods":16,"./_export":32,"./_strict-method":81}],102:[function(require,module,exports){
// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
var $export = require('./_export');

$export($export.P, 'Array', { fill: require('./_array-fill') });

require('./_add-to-unscopables')('fill');

},{"./_add-to-unscopables":9,"./_array-fill":13,"./_export":32}],103:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var $filter = require('./_array-methods')(2);

$export($export.P + $export.F * !require('./_strict-method')([].filter, true), 'Array', {
  // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])
  filter: function filter(callbackfn /* , thisArg */) {
    return $filter(this, callbackfn, arguments[1]);
  }
});

},{"./_array-methods":16,"./_export":32,"./_strict-method":81}],104:[function(require,module,exports){
'use strict';
// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)
var $export = require('./_export');
var $find = require('./_array-methods')(6);
var KEY = 'findIndex';
var forced = true;
// Shouldn't skip holes
if (KEY in []) Array(1)[KEY](function () { forced = false; });
$export($export.P + $export.F * forced, 'Array', {
  findIndex: function findIndex(callbackfn /* , that = undefined */) {
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
require('./_add-to-unscopables')(KEY);

},{"./_add-to-unscopables":9,"./_array-methods":16,"./_export":32}],105:[function(require,module,exports){
'use strict';
// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)
var $export = require('./_export');
var $find = require('./_array-methods')(5);
var KEY = 'find';
var forced = true;
// Shouldn't skip holes
if (KEY in []) Array(1)[KEY](function () { forced = false; });
$export($export.P + $export.F * forced, 'Array', {
  find: function find(callbackfn /* , that = undefined */) {
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
require('./_add-to-unscopables')(KEY);

},{"./_add-to-unscopables":9,"./_array-methods":16,"./_export":32}],106:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var $forEach = require('./_array-methods')(0);
var STRICT = require('./_strict-method')([].forEach, true);

$export($export.P + $export.F * !STRICT, 'Array', {
  // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])
  forEach: function forEach(callbackfn /* , thisArg */) {
    return $forEach(this, callbackfn, arguments[1]);
  }
});

},{"./_array-methods":16,"./_export":32,"./_strict-method":81}],107:[function(require,module,exports){
'use strict';
var ctx = require('./_ctx');
var $export = require('./_export');
var toObject = require('./_to-object');
var call = require('./_iter-call');
var isArrayIter = require('./_is-array-iter');
var toLength = require('./_to-length');
var createProperty = require('./_create-property');
var getIterFn = require('./core.get-iterator-method');

$export($export.S + $export.F * !require('./_iter-detect')(function (iter) { Array.from(iter); }), 'Array', {
  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
  from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
    var O = toObject(arrayLike);
    var C = typeof this == 'function' ? this : Array;
    var aLen = arguments.length;
    var mapfn = aLen > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    var index = 0;
    var iterFn = getIterFn(O);
    var length, result, step, iterator;
    if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
    // if object isn't iterable or it's array with default iterator - use simple case
    if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {
      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
      }
    } else {
      length = toLength(O.length);
      for (result = new C(length); length > index; index++) {
        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
      }
    }
    result.length = index;
    return result;
  }
});

},{"./_create-property":26,"./_ctx":27,"./_export":32,"./_is-array-iter":45,"./_iter-call":49,"./_iter-detect":52,"./_to-length":92,"./_to-object":93,"./core.get-iterator-method":99}],108:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var $indexOf = require('./_array-includes')(false);
var $native = [].indexOf;
var NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;

$export($export.P + $export.F * (NEGATIVE_ZERO || !require('./_strict-method')($native)), 'Array', {
  // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])
  indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {
    return NEGATIVE_ZERO
      // convert -0 to +0
      ? $native.apply(this, arguments) || 0
      : $indexOf(this, searchElement, arguments[1]);
  }
});

},{"./_array-includes":15,"./_export":32,"./_strict-method":81}],109:[function(require,module,exports){
// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)
var $export = require('./_export');

$export($export.S, 'Array', { isArray: require('./_is-array') });

},{"./_export":32,"./_is-array":46}],110:[function(require,module,exports){
'use strict';
var addToUnscopables = require('./_add-to-unscopables');
var step = require('./_iter-step');
var Iterators = require('./_iterators');
var toIObject = require('./_to-iobject');

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
module.exports = require('./_iter-define')(Array, 'Array', function (iterated, kind) {
  this._t = toIObject(iterated); // target
  this._i = 0;                   // next index
  this._k = kind;                // kind
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var kind = this._k;
  var index = this._i++;
  if (!O || index >= O.length) {
    this._t = undefined;
    return step(1);
  }
  if (kind == 'keys') return step(0, index);
  if (kind == 'values') return step(0, O[index]);
  return step(0, [index, O[index]]);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators.Arguments = Iterators.Array;

addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');

},{"./_add-to-unscopables":9,"./_iter-define":51,"./_iter-step":53,"./_iterators":54,"./_to-iobject":91}],111:[function(require,module,exports){
'use strict';
// 22.1.3.13 Array.prototype.join(separator)
var $export = require('./_export');
var toIObject = require('./_to-iobject');
var arrayJoin = [].join;

// fallback for not array-like strings
$export($export.P + $export.F * (require('./_iobject') != Object || !require('./_strict-method')(arrayJoin)), 'Array', {
  join: function join(separator) {
    return arrayJoin.call(toIObject(this), separator === undefined ? ',' : separator);
  }
});

},{"./_export":32,"./_iobject":44,"./_strict-method":81,"./_to-iobject":91}],112:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var toIObject = require('./_to-iobject');
var toInteger = require('./_to-integer');
var toLength = require('./_to-length');
var $native = [].lastIndexOf;
var NEGATIVE_ZERO = !!$native && 1 / [1].lastIndexOf(1, -0) < 0;

$export($export.P + $export.F * (NEGATIVE_ZERO || !require('./_strict-method')($native)), 'Array', {
  // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])
  lastIndexOf: function lastIndexOf(searchElement /* , fromIndex = @[*-1] */) {
    // convert -0 to +0
    if (NEGATIVE_ZERO) return $native.apply(this, arguments) || 0;
    var O = toIObject(this);
    var length = toLength(O.length);
    var index = length - 1;
    if (arguments.length > 1) index = Math.min(index, toInteger(arguments[1]));
    if (index < 0) index = length + index;
    for (;index >= 0; index--) if (index in O) if (O[index] === searchElement) return index || 0;
    return -1;
  }
});

},{"./_export":32,"./_strict-method":81,"./_to-integer":90,"./_to-iobject":91,"./_to-length":92}],113:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var $map = require('./_array-methods')(1);

$export($export.P + $export.F * !require('./_strict-method')([].map, true), 'Array', {
  // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])
  map: function map(callbackfn /* , thisArg */) {
    return $map(this, callbackfn, arguments[1]);
  }
});

},{"./_array-methods":16,"./_export":32,"./_strict-method":81}],114:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var createProperty = require('./_create-property');

// WebKit Array.of isn't generic
$export($export.S + $export.F * require('./_fails')(function () {
  function F() { /* empty */ }
  return !(Array.of.call(F) instanceof F);
}), 'Array', {
  // 22.1.2.3 Array.of( ...items)
  of: function of(/* ...args */) {
    var index = 0;
    var aLen = arguments.length;
    var result = new (typeof this == 'function' ? this : Array)(aLen);
    while (aLen > index) createProperty(result, index, arguments[index++]);
    result.length = aLen;
    return result;
  }
});

},{"./_create-property":26,"./_export":32,"./_fails":34}],115:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var $reduce = require('./_array-reduce');

$export($export.P + $export.F * !require('./_strict-method')([].reduceRight, true), 'Array', {
  // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])
  reduceRight: function reduceRight(callbackfn /* , initialValue */) {
    return $reduce(this, callbackfn, arguments.length, arguments[1], true);
  }
});

},{"./_array-reduce":17,"./_export":32,"./_strict-method":81}],116:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var $reduce = require('./_array-reduce');

$export($export.P + $export.F * !require('./_strict-method')([].reduce, true), 'Array', {
  // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])
  reduce: function reduce(callbackfn /* , initialValue */) {
    return $reduce(this, callbackfn, arguments.length, arguments[1], false);
  }
});

},{"./_array-reduce":17,"./_export":32,"./_strict-method":81}],117:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var html = require('./_html');
var cof = require('./_cof');
var toAbsoluteIndex = require('./_to-absolute-index');
var toLength = require('./_to-length');
var arraySlice = [].slice;

// fallback for not array-like ES3 strings and DOM objects
$export($export.P + $export.F * require('./_fails')(function () {
  if (html) arraySlice.call(html);
}), 'Array', {
  slice: function slice(begin, end) {
    var len = toLength(this.length);
    var klass = cof(this);
    end = end === undefined ? len : end;
    if (klass == 'Array') return arraySlice.call(this, begin, end);
    var start = toAbsoluteIndex(begin, len);
    var upTo = toAbsoluteIndex(end, len);
    var size = toLength(upTo - start);
    var cloned = new Array(size);
    var i = 0;
    for (; i < size; i++) cloned[i] = klass == 'String'
      ? this.charAt(start + i)
      : this[start + i];
    return cloned;
  }
});

},{"./_cof":21,"./_export":32,"./_fails":34,"./_html":40,"./_to-absolute-index":89,"./_to-length":92}],118:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var $some = require('./_array-methods')(3);

$export($export.P + $export.F * !require('./_strict-method')([].some, true), 'Array', {
  // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])
  some: function some(callbackfn /* , thisArg */) {
    return $some(this, callbackfn, arguments[1]);
  }
});

},{"./_array-methods":16,"./_export":32,"./_strict-method":81}],119:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var aFunction = require('./_a-function');
var toObject = require('./_to-object');
var fails = require('./_fails');
var $sort = [].sort;
var test = [1, 2, 3];

$export($export.P + $export.F * (fails(function () {
  // IE8-
  test.sort(undefined);
}) || !fails(function () {
  // V8 bug
  test.sort(null);
  // Old WebKit
}) || !require('./_strict-method')($sort)), 'Array', {
  // 22.1.3.25 Array.prototype.sort(comparefn)
  sort: function sort(comparefn) {
    return comparefn === undefined
      ? $sort.call(toObject(this))
      : $sort.call(toObject(this), aFunction(comparefn));
  }
});

},{"./_a-function":8,"./_export":32,"./_fails":34,"./_strict-method":81,"./_to-object":93}],120:[function(require,module,exports){
require('./_set-species')('Array');

},{"./_set-species":76}],121:[function(require,module,exports){
'use strict';
var strong = require('./_collection-strong');
var validate = require('./_validate-collection');
var MAP = 'Map';

// 23.1 Map Objects
module.exports = require('./_collection')(MAP, function (get) {
  return function Map() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.1.3.6 Map.prototype.get(key)
  get: function get(key) {
    var entry = strong.getEntry(validate(this, MAP), key);
    return entry && entry.v;
  },
  // 23.1.3.9 Map.prototype.set(key, value)
  set: function set(key, value) {
    return strong.def(validate(this, MAP), key === 0 ? 0 : key, value);
  }
}, strong, true);

},{"./_collection":24,"./_collection-strong":22,"./_validate-collection":97}],122:[function(require,module,exports){
'use strict';
// 19.1.3.6 Object.prototype.toString()
var classof = require('./_classof');
var test = {};
test[require('./_wks')('toStringTag')] = 'z';
if (test + '' != '[object z]') {
  require('./_redefine')(Object.prototype, 'toString', function toString() {
    return '[object ' + classof(this) + ']';
  }, true);
}

},{"./_classof":20,"./_redefine":74,"./_wks":98}],123:[function(require,module,exports){
'use strict';
var LIBRARY = require('./_library');
var global = require('./_global');
var ctx = require('./_ctx');
var classof = require('./_classof');
var $export = require('./_export');
var isObject = require('./_is-object');
var aFunction = require('./_a-function');
var anInstance = require('./_an-instance');
var forOf = require('./_for-of');
var speciesConstructor = require('./_species-constructor');
var task = require('./_task').set;
var microtask = require('./_microtask')();
var newPromiseCapabilityModule = require('./_new-promise-capability');
var perform = require('./_perform');
var userAgent = require('./_user-agent');
var promiseResolve = require('./_promise-resolve');
var PROMISE = 'Promise';
var TypeError = global.TypeError;
var process = global.process;
var versions = process && process.versions;
var v8 = versions && versions.v8 || '';
var $Promise = global[PROMISE];
var isNode = classof(process) == 'process';
var empty = function () { /* empty */ };
var Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;
var newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;

var USE_NATIVE = !!function () {
  try {
    // correct subclassing with @@species support
    var promise = $Promise.resolve(1);
    var FakePromise = (promise.constructor = {})[require('./_wks')('species')] = function (exec) {
      exec(empty, empty);
    };
    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
    return (isNode || typeof PromiseRejectionEvent == 'function')
      && promise.then(empty) instanceof FakePromise
      // v8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
      // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
      // we can't detect it synchronously, so just check versions
      && v8.indexOf('6.6') !== 0
      && userAgent.indexOf('Chrome/66') === -1;
  } catch (e) { /* empty */ }
}();

// helpers
var isThenable = function (it) {
  var then;
  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
};
var notify = function (promise, isReject) {
  if (promise._n) return;
  promise._n = true;
  var chain = promise._c;
  microtask(function () {
    var value = promise._v;
    var ok = promise._s == 1;
    var i = 0;
    var run = function (reaction) {
      var handler = ok ? reaction.ok : reaction.fail;
      var resolve = reaction.resolve;
      var reject = reaction.reject;
      var domain = reaction.domain;
      var result, then, exited;
      try {
        if (handler) {
          if (!ok) {
            if (promise._h == 2) onHandleUnhandled(promise);
            promise._h = 1;
          }
          if (handler === true) result = value;
          else {
            if (domain) domain.enter();
            result = handler(value); // may throw
            if (domain) {
              domain.exit();
              exited = true;
            }
          }
          if (result === reaction.promise) {
            reject(TypeError('Promise-chain cycle'));
          } else if (then = isThenable(result)) {
            then.call(result, resolve, reject);
          } else resolve(result);
        } else reject(value);
      } catch (e) {
        if (domain && !exited) domain.exit();
        reject(e);
      }
    };
    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach
    promise._c = [];
    promise._n = false;
    if (isReject && !promise._h) onUnhandled(promise);
  });
};
var onUnhandled = function (promise) {
  task.call(global, function () {
    var value = promise._v;
    var unhandled = isUnhandled(promise);
    var result, handler, console;
    if (unhandled) {
      result = perform(function () {
        if (isNode) {
          process.emit('unhandledRejection', value, promise);
        } else if (handler = global.onunhandledrejection) {
          handler({ promise: promise, reason: value });
        } else if ((console = global.console) && console.error) {
          console.error('Unhandled promise rejection', value);
        }
      });
      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
    } promise._a = undefined;
    if (unhandled && result.e) throw result.v;
  });
};
var isUnhandled = function (promise) {
  return promise._h !== 1 && (promise._a || promise._c).length === 0;
};
var onHandleUnhandled = function (promise) {
  task.call(global, function () {
    var handler;
    if (isNode) {
      process.emit('rejectionHandled', promise);
    } else if (handler = global.onrejectionhandled) {
      handler({ promise: promise, reason: promise._v });
    }
  });
};
var $reject = function (value) {
  var promise = this;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  promise._v = value;
  promise._s = 2;
  if (!promise._a) promise._a = promise._c.slice();
  notify(promise, true);
};
var $resolve = function (value) {
  var promise = this;
  var then;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  try {
    if (promise === value) throw TypeError("Promise can't be resolved itself");
    if (then = isThenable(value)) {
      microtask(function () {
        var wrapper = { _w: promise, _d: false }; // wrap
        try {
          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
        } catch (e) {
          $reject.call(wrapper, e);
        }
      });
    } else {
      promise._v = value;
      promise._s = 1;
      notify(promise, false);
    }
  } catch (e) {
    $reject.call({ _w: promise, _d: false }, e); // wrap
  }
};

// constructor polyfill
if (!USE_NATIVE) {
  // 25.4.3.1 Promise(executor)
  $Promise = function Promise(executor) {
    anInstance(this, $Promise, PROMISE, '_h');
    aFunction(executor);
    Internal.call(this);
    try {
      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
    } catch (err) {
      $reject.call(this, err);
    }
  };
  // eslint-disable-next-line no-unused-vars
  Internal = function Promise(executor) {
    this._c = [];             // <- awaiting reactions
    this._a = undefined;      // <- checked in isUnhandled reactions
    this._s = 0;              // <- state
    this._d = false;          // <- done
    this._v = undefined;      // <- value
    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
    this._n = false;          // <- notify
  };
  Internal.prototype = require('./_redefine-all')($Promise.prototype, {
    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
    then: function then(onFulfilled, onRejected) {
      var reaction = newPromiseCapability(speciesConstructor(this, $Promise));
      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
      reaction.fail = typeof onRejected == 'function' && onRejected;
      reaction.domain = isNode ? process.domain : undefined;
      this._c.push(reaction);
      if (this._a) this._a.push(reaction);
      if (this._s) notify(this, false);
      return reaction.promise;
    },
    // 25.4.5.1 Promise.prototype.catch(onRejected)
    'catch': function (onRejected) {
      return this.then(undefined, onRejected);
    }
  });
  OwnPromiseCapability = function () {
    var promise = new Internal();
    this.promise = promise;
    this.resolve = ctx($resolve, promise, 1);
    this.reject = ctx($reject, promise, 1);
  };
  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {
    return C === $Promise || C === Wrapper
      ? new OwnPromiseCapability(C)
      : newGenericPromiseCapability(C);
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });
require('./_set-to-string-tag')($Promise, PROMISE);
require('./_set-species')(PROMISE);
Wrapper = require('./_core')[PROMISE];

// statics
$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
  // 25.4.4.5 Promise.reject(r)
  reject: function reject(r) {
    var capability = newPromiseCapability(this);
    var $$reject = capability.reject;
    $$reject(r);
    return capability.promise;
  }
});
$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
  // 25.4.4.6 Promise.resolve(x)
  resolve: function resolve(x) {
    return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);
  }
});
$export($export.S + $export.F * !(USE_NATIVE && require('./_iter-detect')(function (iter) {
  $Promise.all(iter)['catch'](empty);
})), PROMISE, {
  // 25.4.4.1 Promise.all(iterable)
  all: function all(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var resolve = capability.resolve;
    var reject = capability.reject;
    var result = perform(function () {
      var values = [];
      var index = 0;
      var remaining = 1;
      forOf(iterable, false, function (promise) {
        var $index = index++;
        var alreadyCalled = false;
        values.push(undefined);
        remaining++;
        C.resolve(promise).then(function (value) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values[$index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if (result.e) reject(result.v);
    return capability.promise;
  },
  // 25.4.4.4 Promise.race(iterable)
  race: function race(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var reject = capability.reject;
    var result = perform(function () {
      forOf(iterable, false, function (promise) {
        C.resolve(promise).then(capability.resolve, reject);
      });
    });
    if (result.e) reject(result.v);
    return capability.promise;
  }
});

},{"./_a-function":8,"./_an-instance":10,"./_classof":20,"./_core":25,"./_ctx":27,"./_export":32,"./_for-of":36,"./_global":37,"./_is-object":47,"./_iter-detect":52,"./_library":55,"./_microtask":58,"./_new-promise-capability":59,"./_perform":70,"./_promise-resolve":71,"./_redefine-all":73,"./_set-species":76,"./_set-to-string-tag":77,"./_species-constructor":80,"./_task":88,"./_user-agent":96,"./_wks":98}],124:[function(require,module,exports){
// @@match logic
require('./_fix-re-wks')('match', 1, function (defined, MATCH, $match) {
  // 21.1.3.11 String.prototype.match(regexp)
  return [function match(regexp) {
    'use strict';
    var O = defined(this);
    var fn = regexp == undefined ? undefined : regexp[MATCH];
    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
  }, $match];
});

},{"./_fix-re-wks":35}],125:[function(require,module,exports){
// @@replace logic
require('./_fix-re-wks')('replace', 2, function (defined, REPLACE, $replace) {
  // 21.1.3.14 String.prototype.replace(searchValue, replaceValue)
  return [function replace(searchValue, replaceValue) {
    'use strict';
    var O = defined(this);
    var fn = searchValue == undefined ? undefined : searchValue[REPLACE];
    return fn !== undefined
      ? fn.call(searchValue, O, replaceValue)
      : $replace.call(String(O), searchValue, replaceValue);
  }, $replace];
});

},{"./_fix-re-wks":35}],126:[function(require,module,exports){
// @@search logic
require('./_fix-re-wks')('search', 1, function (defined, SEARCH, $search) {
  // 21.1.3.15 String.prototype.search(regexp)
  return [function search(regexp) {
    'use strict';
    var O = defined(this);
    var fn = regexp == undefined ? undefined : regexp[SEARCH];
    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
  }, $search];
});

},{"./_fix-re-wks":35}],127:[function(require,module,exports){
// @@split logic
require('./_fix-re-wks')('split', 2, function (defined, SPLIT, $split) {
  'use strict';
  var isRegExp = require('./_is-regexp');
  var _split = $split;
  var $push = [].push;
  var $SPLIT = 'split';
  var LENGTH = 'length';
  var LAST_INDEX = 'lastIndex';
  if (
    'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||
    'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||
    'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||
    '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||
    '.'[$SPLIT](/()()/)[LENGTH] > 1 ||
    ''[$SPLIT](/.?/)[LENGTH]
  ) {
    var NPCG = /()??/.exec('')[1] === undefined; // nonparticipating capturing group
    // based on es5-shim implementation, need to rework it
    $split = function (separator, limit) {
      var string = String(this);
      if (separator === undefined && limit === 0) return [];
      // If `separator` is not a regex, use native split
      if (!isRegExp(separator)) return _split.call(string, separator, limit);
      var output = [];
      var flags = (separator.ignoreCase ? 'i' : '') +
                  (separator.multiline ? 'm' : '') +
                  (separator.unicode ? 'u' : '') +
                  (separator.sticky ? 'y' : '');
      var lastLastIndex = 0;
      var splitLimit = limit === undefined ? 4294967295 : limit >>> 0;
      // Make `global` and avoid `lastIndex` issues by working with a copy
      var separatorCopy = new RegExp(separator.source, flags + 'g');
      var separator2, match, lastIndex, lastLength, i;
      // Doesn't need flags gy, but they don't hurt
      if (!NPCG) separator2 = new RegExp('^' + separatorCopy.source + '$(?!\\s)', flags);
      while (match = separatorCopy.exec(string)) {
        // `separatorCopy.lastIndex` is not reliable cross-browser
        lastIndex = match.index + match[0][LENGTH];
        if (lastIndex > lastLastIndex) {
          output.push(string.slice(lastLastIndex, match.index));
          // Fix browsers whose `exec` methods don't consistently return `undefined` for NPCG
          // eslint-disable-next-line no-loop-func
          if (!NPCG && match[LENGTH] > 1) match[0].replace(separator2, function () {
            for (i = 1; i < arguments[LENGTH] - 2; i++) if (arguments[i] === undefined) match[i] = undefined;
          });
          if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));
          lastLength = match[0][LENGTH];
          lastLastIndex = lastIndex;
          if (output[LENGTH] >= splitLimit) break;
        }
        if (separatorCopy[LAST_INDEX] === match.index) separatorCopy[LAST_INDEX]++; // Avoid an infinite loop
      }
      if (lastLastIndex === string[LENGTH]) {
        if (lastLength || !separatorCopy.test('')) output.push('');
      } else output.push(string.slice(lastLastIndex));
      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;
    };
  // Chakra, V8
  } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {
    $split = function (separator, limit) {
      return separator === undefined && limit === 0 ? [] : _split.call(this, separator, limit);
    };
  }
  // 21.1.3.17 String.prototype.split(separator, limit)
  return [function split(separator, limit) {
    var O = defined(this);
    var fn = separator == undefined ? undefined : separator[SPLIT];
    return fn !== undefined ? fn.call(separator, O, limit) : $split.call(String(O), separator, limit);
  }, $split];
});

},{"./_fix-re-wks":35,"./_is-regexp":48}],128:[function(require,module,exports){
'use strict';
var strong = require('./_collection-strong');
var validate = require('./_validate-collection');
var SET = 'Set';

// 23.2 Set Objects
module.exports = require('./_collection')(SET, function (get) {
  return function Set() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.2.3.1 Set.prototype.add(value)
  add: function add(value) {
    return strong.def(validate(this, SET), value = value === 0 ? 0 : value, value);
  }
}, strong);

},{"./_collection":24,"./_collection-strong":22,"./_validate-collection":97}],129:[function(require,module,exports){
'use strict';
// B.2.3.2 String.prototype.anchor(name)
require('./_string-html')('anchor', function (createHTML) {
  return function anchor(name) {
    return createHTML(this, 'a', 'name', name);
  };
});

},{"./_string-html":84}],130:[function(require,module,exports){
'use strict';
// B.2.3.3 String.prototype.big()
require('./_string-html')('big', function (createHTML) {
  return function big() {
    return createHTML(this, 'big', '', '');
  };
});

},{"./_string-html":84}],131:[function(require,module,exports){
'use strict';
// B.2.3.4 String.prototype.blink()
require('./_string-html')('blink', function (createHTML) {
  return function blink() {
    return createHTML(this, 'blink', '', '');
  };
});

},{"./_string-html":84}],132:[function(require,module,exports){
'use strict';
// B.2.3.5 String.prototype.bold()
require('./_string-html')('bold', function (createHTML) {
  return function bold() {
    return createHTML(this, 'b', '', '');
  };
});

},{"./_string-html":84}],133:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var $at = require('./_string-at')(false);
$export($export.P, 'String', {
  // 21.1.3.3 String.prototype.codePointAt(pos)
  codePointAt: function codePointAt(pos) {
    return $at(this, pos);
  }
});

},{"./_export":32,"./_string-at":82}],134:[function(require,module,exports){
// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])
'use strict';
var $export = require('./_export');
var toLength = require('./_to-length');
var context = require('./_string-context');
var ENDS_WITH = 'endsWith';
var $endsWith = ''[ENDS_WITH];

$export($export.P + $export.F * require('./_fails-is-regexp')(ENDS_WITH), 'String', {
  endsWith: function endsWith(searchString /* , endPosition = @length */) {
    var that = context(this, searchString, ENDS_WITH);
    var endPosition = arguments.length > 1 ? arguments[1] : undefined;
    var len = toLength(that.length);
    var end = endPosition === undefined ? len : Math.min(toLength(endPosition), len);
    var search = String(searchString);
    return $endsWith
      ? $endsWith.call(that, search, end)
      : that.slice(end - search.length, end) === search;
  }
});

},{"./_export":32,"./_fails-is-regexp":33,"./_string-context":83,"./_to-length":92}],135:[function(require,module,exports){
'use strict';
// B.2.3.6 String.prototype.fixed()
require('./_string-html')('fixed', function (createHTML) {
  return function fixed() {
    return createHTML(this, 'tt', '', '');
  };
});

},{"./_string-html":84}],136:[function(require,module,exports){
'use strict';
// B.2.3.7 String.prototype.fontcolor(color)
require('./_string-html')('fontcolor', function (createHTML) {
  return function fontcolor(color) {
    return createHTML(this, 'font', 'color', color);
  };
});

},{"./_string-html":84}],137:[function(require,module,exports){
'use strict';
// B.2.3.8 String.prototype.fontsize(size)
require('./_string-html')('fontsize', function (createHTML) {
  return function fontsize(size) {
    return createHTML(this, 'font', 'size', size);
  };
});

},{"./_string-html":84}],138:[function(require,module,exports){
var $export = require('./_export');
var toAbsoluteIndex = require('./_to-absolute-index');
var fromCharCode = String.fromCharCode;
var $fromCodePoint = String.fromCodePoint;

// length should be 1, old FF problem
$export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
  // 21.1.2.2 String.fromCodePoint(...codePoints)
  fromCodePoint: function fromCodePoint(x) { // eslint-disable-line no-unused-vars
    var res = [];
    var aLen = arguments.length;
    var i = 0;
    var code;
    while (aLen > i) {
      code = +arguments[i++];
      if (toAbsoluteIndex(code, 0x10ffff) !== code) throw RangeError(code + ' is not a valid code point');
      res.push(code < 0x10000
        ? fromCharCode(code)
        : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)
      );
    } return res.join('');
  }
});

},{"./_export":32,"./_to-absolute-index":89}],139:[function(require,module,exports){
// 21.1.3.7 String.prototype.includes(searchString, position = 0)
'use strict';
var $export = require('./_export');
var context = require('./_string-context');
var INCLUDES = 'includes';

$export($export.P + $export.F * require('./_fails-is-regexp')(INCLUDES), 'String', {
  includes: function includes(searchString /* , position = 0 */) {
    return !!~context(this, searchString, INCLUDES)
      .indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
  }
});

},{"./_export":32,"./_fails-is-regexp":33,"./_string-context":83}],140:[function(require,module,exports){
'use strict';
// B.2.3.9 String.prototype.italics()
require('./_string-html')('italics', function (createHTML) {
  return function italics() {
    return createHTML(this, 'i', '', '');
  };
});

},{"./_string-html":84}],141:[function(require,module,exports){
'use strict';
var $at = require('./_string-at')(true);

// 21.1.3.27 String.prototype[@@iterator]()
require('./_iter-define')(String, 'String', function (iterated) {
  this._t = String(iterated); // target
  this._i = 0;                // next index
// 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var index = this._i;
  var point;
  if (index >= O.length) return { value: undefined, done: true };
  point = $at(O, index);
  this._i += point.length;
  return { value: point, done: false };
});

},{"./_iter-define":51,"./_string-at":82}],142:[function(require,module,exports){
'use strict';
// B.2.3.10 String.prototype.link(url)
require('./_string-html')('link', function (createHTML) {
  return function link(url) {
    return createHTML(this, 'a', 'href', url);
  };
});

},{"./_string-html":84}],143:[function(require,module,exports){
var $export = require('./_export');
var toIObject = require('./_to-iobject');
var toLength = require('./_to-length');

$export($export.S, 'String', {
  // 21.1.2.4 String.raw(callSite, ...substitutions)
  raw: function raw(callSite) {
    var tpl = toIObject(callSite.raw);
    var len = toLength(tpl.length);
    var aLen = arguments.length;
    var res = [];
    var i = 0;
    while (len > i) {
      res.push(String(tpl[i++]));
      if (i < aLen) res.push(String(arguments[i]));
    } return res.join('');
  }
});

},{"./_export":32,"./_to-iobject":91,"./_to-length":92}],144:[function(require,module,exports){
var $export = require('./_export');

$export($export.P, 'String', {
  // 21.1.3.13 String.prototype.repeat(count)
  repeat: require('./_string-repeat')
});

},{"./_export":32,"./_string-repeat":85}],145:[function(require,module,exports){
'use strict';
// B.2.3.11 String.prototype.small()
require('./_string-html')('small', function (createHTML) {
  return function small() {
    return createHTML(this, 'small', '', '');
  };
});

},{"./_string-html":84}],146:[function(require,module,exports){
// 21.1.3.18 String.prototype.startsWith(searchString [, position ])
'use strict';
var $export = require('./_export');
var toLength = require('./_to-length');
var context = require('./_string-context');
var STARTS_WITH = 'startsWith';
var $startsWith = ''[STARTS_WITH];

$export($export.P + $export.F * require('./_fails-is-regexp')(STARTS_WITH), 'String', {
  startsWith: function startsWith(searchString /* , position = 0 */) {
    var that = context(this, searchString, STARTS_WITH);
    var index = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));
    var search = String(searchString);
    return $startsWith
      ? $startsWith.call(that, search, index)
      : that.slice(index, index + search.length) === search;
  }
});

},{"./_export":32,"./_fails-is-regexp":33,"./_string-context":83,"./_to-length":92}],147:[function(require,module,exports){
'use strict';
// B.2.3.12 String.prototype.strike()
require('./_string-html')('strike', function (createHTML) {
  return function strike() {
    return createHTML(this, 'strike', '', '');
  };
});

},{"./_string-html":84}],148:[function(require,module,exports){
'use strict';
// B.2.3.13 String.prototype.sub()
require('./_string-html')('sub', function (createHTML) {
  return function sub() {
    return createHTML(this, 'sub', '', '');
  };
});

},{"./_string-html":84}],149:[function(require,module,exports){
'use strict';
// B.2.3.14 String.prototype.sup()
require('./_string-html')('sup', function (createHTML) {
  return function sup() {
    return createHTML(this, 'sup', '', '');
  };
});

},{"./_string-html":84}],150:[function(require,module,exports){
'use strict';
// 21.1.3.25 String.prototype.trim()
require('./_string-trim')('trim', function ($trim) {
  return function trim() {
    return $trim(this, 3);
  };
});

},{"./_string-trim":86}],151:[function(require,module,exports){
'use strict';
var each = require('./_array-methods')(0);
var redefine = require('./_redefine');
var meta = require('./_meta');
var assign = require('./_object-assign');
var weak = require('./_collection-weak');
var isObject = require('./_is-object');
var fails = require('./_fails');
var validate = require('./_validate-collection');
var WEAK_MAP = 'WeakMap';
var getWeak = meta.getWeak;
var isExtensible = Object.isExtensible;
var uncaughtFrozenStore = weak.ufstore;
var tmp = {};
var InternalMap;

var wrapper = function (get) {
  return function WeakMap() {
    return get(this, arguments.length > 0 ? arguments[0] : undefined);
  };
};

var methods = {
  // 23.3.3.3 WeakMap.prototype.get(key)
  get: function get(key) {
    if (isObject(key)) {
      var data = getWeak(key);
      if (data === true) return uncaughtFrozenStore(validate(this, WEAK_MAP)).get(key);
      return data ? data[this._i] : undefined;
    }
  },
  // 23.3.3.5 WeakMap.prototype.set(key, value)
  set: function set(key, value) {
    return weak.def(validate(this, WEAK_MAP), key, value);
  }
};

// 23.3 WeakMap Objects
var $WeakMap = module.exports = require('./_collection')(WEAK_MAP, wrapper, methods, weak, true, true);

// IE11 WeakMap frozen keys fix
if (fails(function () { return new $WeakMap().set((Object.freeze || Object)(tmp), 7).get(tmp) != 7; })) {
  InternalMap = weak.getConstructor(wrapper, WEAK_MAP);
  assign(InternalMap.prototype, methods);
  meta.NEED = true;
  each(['delete', 'has', 'get', 'set'], function (key) {
    var proto = $WeakMap.prototype;
    var method = proto[key];
    redefine(proto, key, function (a, b) {
      // store frozen objects on internal weakmap shim
      if (isObject(a) && !isExtensible(a)) {
        if (!this._f) this._f = new InternalMap();
        var result = this._f[key](a, b);
        return key == 'set' ? this : result;
      // store all the rest on native weakmap
      } return method.call(this, a, b);
    });
  });
}

},{"./_array-methods":16,"./_collection":24,"./_collection-weak":23,"./_fails":34,"./_is-object":47,"./_meta":56,"./_object-assign":60,"./_redefine":74,"./_validate-collection":97}],152:[function(require,module,exports){
var metadata = require('./_metadata');
var anObject = require('./_an-object');
var toMetaKey = metadata.key;
var ordinaryDefineOwnMetadata = metadata.set;

metadata.exp({ defineMetadata: function defineMetadata(metadataKey, metadataValue, target, targetKey) {
  ordinaryDefineOwnMetadata(metadataKey, metadataValue, anObject(target), toMetaKey(targetKey));
} });

},{"./_an-object":11,"./_metadata":57}],153:[function(require,module,exports){
var metadata = require('./_metadata');
var anObject = require('./_an-object');
var toMetaKey = metadata.key;
var getOrCreateMetadataMap = metadata.map;
var store = metadata.store;

metadata.exp({ deleteMetadata: function deleteMetadata(metadataKey, target /* , targetKey */) {
  var targetKey = arguments.length < 3 ? undefined : toMetaKey(arguments[2]);
  var metadataMap = getOrCreateMetadataMap(anObject(target), targetKey, false);
  if (metadataMap === undefined || !metadataMap['delete'](metadataKey)) return false;
  if (metadataMap.size) return true;
  var targetMetadata = store.get(target);
  targetMetadata['delete'](targetKey);
  return !!targetMetadata.size || store['delete'](target);
} });

},{"./_an-object":11,"./_metadata":57}],154:[function(require,module,exports){
var Set = require('./es6.set');
var from = require('./_array-from-iterable');
var metadata = require('./_metadata');
var anObject = require('./_an-object');
var getPrototypeOf = require('./_object-gpo');
var ordinaryOwnMetadataKeys = metadata.keys;
var toMetaKey = metadata.key;

var ordinaryMetadataKeys = function (O, P) {
  var oKeys = ordinaryOwnMetadataKeys(O, P);
  var parent = getPrototypeOf(O);
  if (parent === null) return oKeys;
  var pKeys = ordinaryMetadataKeys(parent, P);
  return pKeys.length ? oKeys.length ? from(new Set(oKeys.concat(pKeys))) : pKeys : oKeys;
};

metadata.exp({ getMetadataKeys: function getMetadataKeys(target /* , targetKey */) {
  return ordinaryMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
} });

},{"./_an-object":11,"./_array-from-iterable":14,"./_metadata":57,"./_object-gpo":66,"./es6.set":128}],155:[function(require,module,exports){
var metadata = require('./_metadata');
var anObject = require('./_an-object');
var getPrototypeOf = require('./_object-gpo');
var ordinaryHasOwnMetadata = metadata.has;
var ordinaryGetOwnMetadata = metadata.get;
var toMetaKey = metadata.key;

var ordinaryGetMetadata = function (MetadataKey, O, P) {
  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
  if (hasOwn) return ordinaryGetOwnMetadata(MetadataKey, O, P);
  var parent = getPrototypeOf(O);
  return parent !== null ? ordinaryGetMetadata(MetadataKey, parent, P) : undefined;
};

metadata.exp({ getMetadata: function getMetadata(metadataKey, target /* , targetKey */) {
  return ordinaryGetMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
} });

},{"./_an-object":11,"./_metadata":57,"./_object-gpo":66}],156:[function(require,module,exports){
var metadata = require('./_metadata');
var anObject = require('./_an-object');
var ordinaryOwnMetadataKeys = metadata.keys;
var toMetaKey = metadata.key;

metadata.exp({ getOwnMetadataKeys: function getOwnMetadataKeys(target /* , targetKey */) {
  return ordinaryOwnMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
} });

},{"./_an-object":11,"./_metadata":57}],157:[function(require,module,exports){
var metadata = require('./_metadata');
var anObject = require('./_an-object');
var ordinaryGetOwnMetadata = metadata.get;
var toMetaKey = metadata.key;

metadata.exp({ getOwnMetadata: function getOwnMetadata(metadataKey, target /* , targetKey */) {
  return ordinaryGetOwnMetadata(metadataKey, anObject(target)
    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
} });

},{"./_an-object":11,"./_metadata":57}],158:[function(require,module,exports){
var metadata = require('./_metadata');
var anObject = require('./_an-object');
var getPrototypeOf = require('./_object-gpo');
var ordinaryHasOwnMetadata = metadata.has;
var toMetaKey = metadata.key;

var ordinaryHasMetadata = function (MetadataKey, O, P) {
  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
  if (hasOwn) return true;
  var parent = getPrototypeOf(O);
  return parent !== null ? ordinaryHasMetadata(MetadataKey, parent, P) : false;
};

metadata.exp({ hasMetadata: function hasMetadata(metadataKey, target /* , targetKey */) {
  return ordinaryHasMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
} });

},{"./_an-object":11,"./_metadata":57,"./_object-gpo":66}],159:[function(require,module,exports){
var metadata = require('./_metadata');
var anObject = require('./_an-object');
var ordinaryHasOwnMetadata = metadata.has;
var toMetaKey = metadata.key;

metadata.exp({ hasOwnMetadata: function hasOwnMetadata(metadataKey, target /* , targetKey */) {
  return ordinaryHasOwnMetadata(metadataKey, anObject(target)
    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
} });

},{"./_an-object":11,"./_metadata":57}],160:[function(require,module,exports){
var $metadata = require('./_metadata');
var anObject = require('./_an-object');
var aFunction = require('./_a-function');
var toMetaKey = $metadata.key;
var ordinaryDefineOwnMetadata = $metadata.set;

$metadata.exp({ metadata: function metadata(metadataKey, metadataValue) {
  return function decorator(target, targetKey) {
    ordinaryDefineOwnMetadata(
      metadataKey, metadataValue,
      (targetKey !== undefined ? anObject : aFunction)(target),
      toMetaKey(targetKey)
    );
  };
} });

},{"./_a-function":8,"./_an-object":11,"./_metadata":57}],161:[function(require,module,exports){
var $iterators = require('./es6.array.iterator');
var getKeys = require('./_object-keys');
var redefine = require('./_redefine');
var global = require('./_global');
var hide = require('./_hide');
var Iterators = require('./_iterators');
var wks = require('./_wks');
var ITERATOR = wks('iterator');
var TO_STRING_TAG = wks('toStringTag');
var ArrayValues = Iterators.Array;

var DOMIterables = {
  CSSRuleList: true, // TODO: Not spec compliant, should be false.
  CSSStyleDeclaration: false,
  CSSValueList: false,
  ClientRectList: false,
  DOMRectList: false,
  DOMStringList: false,
  DOMTokenList: true,
  DataTransferItemList: false,
  FileList: false,
  HTMLAllCollection: false,
  HTMLCollection: false,
  HTMLFormElement: false,
  HTMLSelectElement: false,
  MediaList: true, // TODO: Not spec compliant, should be false.
  MimeTypeArray: false,
  NamedNodeMap: false,
  NodeList: true,
  PaintRequestList: false,
  Plugin: false,
  PluginArray: false,
  SVGLengthList: false,
  SVGNumberList: false,
  SVGPathSegList: false,
  SVGPointList: false,
  SVGStringList: false,
  SVGTransformList: false,
  SourceBufferList: false,
  StyleSheetList: true, // TODO: Not spec compliant, should be false.
  TextTrackCueList: false,
  TextTrackList: false,
  TouchList: false
};

for (var collections = getKeys(DOMIterables), i = 0; i < collections.length; i++) {
  var NAME = collections[i];
  var explicit = DOMIterables[NAME];
  var Collection = global[NAME];
  var proto = Collection && Collection.prototype;
  var key;
  if (proto) {
    if (!proto[ITERATOR]) hide(proto, ITERATOR, ArrayValues);
    if (!proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
    Iterators[NAME] = ArrayValues;
    if (explicit) for (key in $iterators) if (!proto[key]) redefine(proto, key, $iterators[key], true);
  }
}

},{"./_global":37,"./_hide":39,"./_iterators":54,"./_object-keys":68,"./_redefine":74,"./_wks":98,"./es6.array.iterator":110}],162:[function(require,module,exports){
'use strict'

function injectStyleTag (document, fileName, cb) {
  var style = document.getElementById(fileName)

  if (style) {
    cb(style)
  } else {
    var head = document.getElementsByTagName('head')[0]

    style = document.createElement('style')
    if (fileName != null) style.id = fileName
    cb(style)
    head.appendChild(style)
  }

  return style
}

//WMR gutted this because createStyleSheet not found
module.exports = function (css, customDocument, fileName) {
}

//WMR gutted this because createStyleSheet not found
module.exports.byUrl = function (url) {
}

},{}],163:[function(require,module,exports){
(function (process){
function detect() {
  var nodeVersion = getNodeVersion();
  if (nodeVersion) {
    return nodeVersion;
  } else if (typeof navigator !== 'undefined') {
    return parseUserAgent(navigator.userAgent);
  }

  return null;
}

function detectOS(userAgentString) {
  var rules = getOperatingSystemRules();
  var detected = rules.filter(function (os) {
    return os.rule && os.rule.test(userAgentString);
  })[0];

  return detected ? detected.name : null;
}

function getNodeVersion() {
  var isNode = typeof navigator === 'undefined' && typeof process !== 'undefined';
  return isNode ? {
    name: 'node',
    version: process.version.slice(1),
    os: require('os').type().toLowerCase()
  } : null;
}

function parseUserAgent(userAgentString) {
  var browsers = getBrowserRules();
  if (!userAgentString) {
    return null;
  }

  var detected = browsers.map(function(browser) {
    var match = browser.rule.exec(userAgentString);
    var version = match && match[1].split(/[._]/).slice(0,3);

    if (version && version.length < 3) {
      version = version.concat(version.length == 1 ? [0, 0] : [0]);
    }

    return match && {
      name: browser.name,
      version: version.join('.')
    };
  }).filter(Boolean)[0] || null;

  if (detected) {
    detected.os = detectOS(userAgentString);
  }

  if (/alexa|bot|crawl(er|ing)|facebookexternalhit|feedburner|google web preview|nagios|postrank|pingdom|slurp|spider|yahoo!|yandex/i.test(userAgentString)) {
    detected = detected || {};
    detected.bot = true;
  }

  return detected;
}

function getBrowserRules() {
  return buildRules([
    [ 'aol', /AOLShield\/([0-9\._]+)/ ],
    [ 'edge', /Edge\/([0-9\._]+)/ ],
    [ 'yandexbrowser', /YaBrowser\/([0-9\._]+)/ ],
    [ 'vivaldi', /Vivaldi\/([0-9\.]+)/ ],
    [ 'kakaotalk', /KAKAOTALK\s([0-9\.]+)/ ],
    [ 'samsung', /SamsungBrowser\/([0-9\.]+)/ ],
    [ 'chrome', /(?!Chrom.*OPR)Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/ ],
    [ 'phantomjs', /PhantomJS\/([0-9\.]+)(:?\s|$)/ ],
    [ 'crios', /CriOS\/([0-9\.]+)(:?\s|$)/ ],
    [ 'firefox', /Firefox\/([0-9\.]+)(?:\s|$)/ ],
    [ 'fxios', /FxiOS\/([0-9\.]+)/ ],
    [ 'opera', /Opera\/([0-9\.]+)(?:\s|$)/ ],
    [ 'opera', /OPR\/([0-9\.]+)(:?\s|$)$/ ],
    [ 'ie', /Trident\/7\.0.*rv\:([0-9\.]+).*\).*Gecko$/ ],
    [ 'ie', /MSIE\s([0-9\.]+);.*Trident\/[4-7].0/ ],
    [ 'ie', /MSIE\s(7\.0)/ ],
    [ 'bb10', /BB10;\sTouch.*Version\/([0-9\.]+)/ ],
    [ 'android', /Android\s([0-9\.]+)/ ],
    [ 'ios', /Version\/([0-9\._]+).*Mobile.*Safari.*/ ],
    [ 'safari', /Version\/([0-9\._]+).*Safari/ ],
    [ 'facebook', /FBAV\/([0-9\.]+)/],
    [ 'instagram', /Instagram\ ([0-9\.]+)/],
    [ 'ios-webview', /AppleWebKit\/([0-9\.]+).*Mobile/]
  ]);
}

function getOperatingSystemRules() {
  return buildRules([
    [ 'iOS', /iP(hone|od|ad)/ ],
    [ 'Android OS', /Android/ ],
    [ 'BlackBerry OS', /BlackBerry|BB10/ ],
    [ 'Windows Mobile', /IEMobile/ ],
    [ 'Amazon OS', /Kindle/ ],
    [ 'Windows 3.11', /Win16/ ],
    [ 'Windows 95', /(Windows 95)|(Win95)|(Windows_95)/ ],
    [ 'Windows 98', /(Windows 98)|(Win98)/ ],
    [ 'Windows 2000', /(Windows NT 5.0)|(Windows 2000)/ ],
    [ 'Windows XP', /(Windows NT 5.1)|(Windows XP)/ ],
    [ 'Windows Server 2003', /(Windows NT 5.2)/ ],
    [ 'Windows Vista', /(Windows NT 6.0)/ ],
    [ 'Windows 7', /(Windows NT 6.1)/ ],
    [ 'Windows 8', /(Windows NT 6.2)/ ],
    [ 'Windows 8.1', /(Windows NT 6.3)/ ],
    [ 'Windows 10', /(Windows NT 10.0)/ ],
    [ 'Windows ME', /Windows ME/ ],
    [ 'Open BSD', /OpenBSD/ ],
    [ 'Sun OS', /SunOS/ ],
    [ 'Linux', /(Linux)|(X11)/ ],
    [ 'Mac OS', /(Mac_PowerPC)|(Macintosh)/ ],
    [ 'QNX', /QNX/ ],
    [ 'BeOS', /BeOS/ ],
    [ 'OS/2', /OS\/2/ ],
    [ 'Search Bot', /(nuhk)|(Googlebot)|(Yammybot)|(Openbot)|(Slurp)|(MSNBot)|(Ask Jeeves\/Teoma)|(ia_archiver)/ ]
  ]);
}

function buildRules(ruleTuples) {
  return ruleTuples.map(function(tuple) {
    return {
      name: tuple[0],
      rule: tuple[1]
    };
  });
}

module.exports = {
  detect: detect,
  detectOS: detectOS,
  getNodeVersion: getNodeVersion,
  parseUserAgent: parseUserAgent
};

}).call(this,require('_process'))
},{"_process":2,"os":1}],164:[function(require,module,exports){
// Taken from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind
if (!Function.prototype.bind) {
  Function.prototype.bind = function (oThis) {
    if (typeof this !== "function") {
      // closest thing possible to the ECMAScript 5
      // internal IsCallable function
      throw new TypeError("Function.prototype.bind - what is trying to be bound is not callable");
    }

    var aArgs = Array.prototype.slice.call(arguments, 1), 
        fToBind = this, 
        fNOP = function () {},
        fBound = function () {
          return fToBind.apply(this instanceof fNOP && oThis
                 ? this
                 : oThis,
                 aArgs.concat(Array.prototype.slice.call(arguments)));
        };

    fNOP.prototype = this.prototype;
    fBound.prototype = new fNOP();

    return fBound;
  };
}

},{}],165:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var hasOwnProperty = Object.prototype.hasOwnProperty;
var Subscription = (function () {
    function Subscription(fn, context) {
        this.fn = fn;
        this.context = context;
        this.id = Subscription.hashFn(fn);
    }
    Subscription.hashFn = function (fn) {
        return Subscription.hashStr(fn.toString().replace(/\s/g, ''));
    };
    Subscription.hashStr = function (str) {
        var hash = 0;
        var idx = 0;
        for (; idx < str.length; idx++) {
            hash = ((hash << 5) - hash) + str.charCodeAt(idx);
            hash |= 0;
        }
        return hash.toString();
    };
    Subscription.prototype.applyToCallback = function (args) {
        this.fn.apply(this.context, args);
    };
    Subscription.prototype.toString = function () {
        return (this.context ? this.context.constructor.name : this.context) + "::" + (this.fn.name || "anonymous");
    };
    return Subscription;
}());
var DLLNode = (function () {
    function DLLNode(subscriptionFn, context, priority) {
        this.priority = priority;
        this.prev = null;
        this.next = null;
        this.subscription = new Subscription(subscriptionFn, context);
    }
    return DLLNode;
}());
var Channel = (function () {
    function Channel(namespace) {
        this.namespace = namespace;
        this._commandMask = 0;
        this._priorityMatrix = [];
        this._fnHashMap = Object.create(null);
        this._callingNode = null;
    }
    Channel.prototype.hasSubscribers = function () {
        return Object.keys(this._fnHashMap).length > 0;
    };
    Channel.prototype.interrupt = function () {
        this._commandMask |= this.SIG_INT;
    };
    Channel.prototype.publish = function (args) {
        var _this = this;
        var node = null;
        var idx = 0;
        var caughtError = undefined;
        var lastArg = args[args.length - 1] || {};
        var suppressErrors = lastArg.suppressErrors != false;
        if (this._commandMask & this.PUBLISHING) {
            if (suppressErrors) {
                setTimeout(this.publish.bind(this), 0, args);
                return;
            }
            return new Promise(function (resolve, reject) {
                setTimeout(function () {
                    try {
                        _this.publish.bind(_this);
                        resolve();
                    }
                    catch (e) {
                        reject(e);
                    }
                }, 0, args);
            });
        }
        if (hasOwnProperty.call(lastArg, "suppressErrors")) {
            args.pop();
        }
        args.push(this);
        this._commandMask |= this.PUBLISHING;
        for (; idx < this._priorityMatrix.length; idx++) {
            node = this._priorityMatrix[idx];
            while (node) {
                if (this._commandMask & this.SIG_INT) {
                    this._commandMask &= this.CLEAR_BITS;
                    return;
                }
                this._callingNode = node;
                try {
                    node.subscription.applyToCallback(args);
                }
                catch (err) {
                    caughtError = err;
                    console.error("Publish channel:" + this.namespace + " error <" + err + "> from subscriber - " + node.subscription);
                    if (err.stack) {
                        console.error("StackTrace:\n" + err.stack);
                    }
                }
                this._callingNode = null;
                node = node.next;
            }
        }
        this._commandMask &= this.CLEAR_BITS;
        if (caughtError && !suppressErrors) {
            throw caughtError;
        }
    };
    Channel.prototype.subscribe = function (fn, priority, context) {
        var _this = this;
        var node = new DLLNode(fn, context, priority);
        var last;
        if (!hasOwnProperty.call(this._fnHashMap, node.subscription.id)) {
            this._fnHashMap[node.subscription.id] = [];
        }
        else {
            this._fnHashMap[node.subscription.id].forEach(function (node) {
                if (node.subscription.fn === fn) {
                    throw new Error("Function " + node.subscription + " has already been passed as a subscriber to <" + _this.namespace + ">; will not be able to safely remove.");
                }
            });
        }
        this._fnHashMap[node.subscription.id].push(node);
        if (this._priorityMatrix[priority]) {
            last = this._priorityMatrix[priority];
            while (last.next) {
                last = last.next;
            }
            last.next = node;
            node.prev = last;
        }
        else {
            this._priorityMatrix[priority] = node;
        }
    };
    Channel.prototype.unsubscribe = function (fn) {
        var id = Subscription.hashFn(fn);
        ;
        var fnArray = null;
        var node = null;
        var idx = 0;
        var didEvictDLLNode = false;
        if (!hasOwnProperty.call(this._fnHashMap, id)) {
            return didEvictDLLNode;
        }
        fnArray = this._fnHashMap[id];
        for (; idx < fnArray.length; idx++) {
            node = fnArray[idx];
            if (node.subscription.fn !== fn) {
                continue;
            }
            if (this._callingNode === node && !(this._commandMask & this.SIG_INT)) {
                setTimeout(this.unsubscribe.bind(this), 0, node.subscription.fn);
                break;
            }
            if (!node.prev) {
                if (node.next) {
                    node.next.prev = null;
                }
                this._priorityMatrix[node.priority] = node.next || undefined;
                node.next = null;
            }
            else {
                node.prev.next = node.next;
                if (node.next) {
                    node.next.prev = node.prev;
                    node.next = null;
                }
                node.prev = null;
            }
            didEvictDLLNode = true;
            break;
        }
        if (didEvictDLLNode) {
            if (fnArray.length <= 1) {
                delete this._fnHashMap[id];
            }
            else {
                fnArray.splice(idx, 1);
            }
        }
        return didEvictDLLNode;
    };
    return Channel;
}());
Channel.prototype.CLEAR_BITS = 0x00;
Channel.prototype.SIG_INT = 0x01;
Channel.prototype.PUBLISHING = 0x02;
Channel.prototype.stopPropagation = Channel.prototype.interrupt;
var PubSub = (function () {
    function PubSub(publishOptions) {
        if (publishOptions === void 0) { publishOptions = { suppressErrors: true }; }
        this.publishOptions = publishOptions;
        this._channels = Object.create(null);
        if (!(this instanceof PubSub)) {
            return new PubSub(publishOptions);
        }
    }
    PubSub.prototype.subscribe = function (channelName, fn, priority, context) {
        var suggestedPriority;
        if (!hasOwnProperty.call(this._channels, channelName)) {
            this._channels[channelName] = new Channel(channelName);
        }
        suggestedPriority = priority && typeof priority.priority === "number" ? priority.priority : 4;
        this._channels[channelName].subscribe(fn, Math.max(0, Math.min(suggestedPriority, 4)), context);
        return {
            channel: this._channels[channelName],
            fn: fn
        };
    };
    PubSub.prototype.unsubscribe = function (channelName, fn) {
        var didUnsubscribe = false;
        if (hasOwnProperty.call(this._channels, channelName) && typeof fn === "function") {
            didUnsubscribe = this._channels[channelName].unsubscribe(fn);
            if (didUnsubscribe && !this._channels[channelName].hasSubscribers()) {
                delete this._channels[channelName];
            }
        }
        return didUnsubscribe;
    };
    PubSub.prototype.publish = function (channelName) {
        if (hasOwnProperty.call(this._channels, channelName)) {
            var args = Array.prototype.slice.call(arguments, 1);
            if (!hasOwnProperty.call(args[args.length - 1] || {}, "suppressErrors")) {
                args.push(this.publishOptions);
            }
            return this._channels[channelName].publish(args);
        }
    };
    return PubSub;
}());
exports.PubSub = PubSub;
PubSub.prototype.off = PubSub.prototype.unsubscribe;
PubSub.prototype.remove = PubSub.prototype.unsubscribe;
PubSub.prototype.on = PubSub.prototype.subscribe;
PubSub.prototype.bind = PubSub.prototype.subscribe;
PubSub.prototype.emit = PubSub.prototype.publish;
PubSub.prototype.trigger = PubSub.prototype.publish;

},{}],166:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var rxjs_1 = require("rxjs");
exports.Observable = rxjs_1.Observable;

},{"rxjs":281}],167:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var rxjs_1 = require("rxjs");
rxjs_1.Observable.bindCallback = rxjs_1.bindCallback;

},{"rxjs":281}],168:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var rxjs_1 = require("rxjs");
var ajax_1 = require("rxjs/ajax");
rxjs_1.Observable.ajax = ajax_1.ajax;

},{"rxjs":281,"rxjs/ajax":280}],169:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var rxjs_1 = require("rxjs");
rxjs_1.Observable.empty = rxjs_1.empty;

},{"rxjs":281}],170:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var rxjs_1 = require("rxjs");
rxjs_1.Observable.from = rxjs_1.from;

},{"rxjs":281}],171:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var rxjs_1 = require("rxjs");
rxjs_1.Observable.fromEvent = rxjs_1.fromEvent;

},{"rxjs":281}],172:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var rxjs_1 = require("rxjs");
rxjs_1.Observable.fromEventPattern = rxjs_1.fromEventPattern;

},{"rxjs":281}],173:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var rxjs_1 = require("rxjs");
rxjs_1.Observable.fromPromise = rxjs_1.from;

},{"rxjs":281}],174:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var rxjs_1 = require("rxjs");
rxjs_1.Observable.interval = rxjs_1.interval;

},{"rxjs":281}],175:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var rxjs_1 = require("rxjs");
rxjs_1.Observable.merge = rxjs_1.merge;

},{"rxjs":281}],176:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var rxjs_1 = require("rxjs");
function staticNever() {
    return rxjs_1.NEVER;
}
exports.staticNever = staticNever;
rxjs_1.Observable.never = staticNever;

},{"rxjs":281}],177:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var rxjs_1 = require("rxjs");
rxjs_1.Observable.of = rxjs_1.of;

},{"rxjs":281}],178:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var rxjs_1 = require("rxjs");
rxjs_1.Observable.throw = rxjs_1.throwError;
rxjs_1.Observable.throwError = rxjs_1.throwError;

},{"rxjs":281}],179:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var rxjs_1 = require("rxjs");
rxjs_1.Observable.timer = rxjs_1.timer;

},{"rxjs":281}],180:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var rxjs_1 = require("rxjs");
var buffer_1 = require("../../operator/buffer");
rxjs_1.Observable.prototype.buffer = buffer_1.buffer;

},{"../../operator/buffer":209,"rxjs":281}],181:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var rxjs_1 = require("rxjs");
var bufferCount_1 = require("../../operator/bufferCount");
rxjs_1.Observable.prototype.bufferCount = bufferCount_1.bufferCount;

},{"../../operator/bufferCount":210,"rxjs":281}],182:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var rxjs_1 = require("rxjs");
var catch_1 = require("../../operator/catch");
rxjs_1.Observable.prototype.catch = catch_1._catch;
rxjs_1.Observable.prototype._catch = catch_1._catch;

},{"../../operator/catch":211,"rxjs":281}],183:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var rxjs_1 = require("rxjs");
var concatAll_1 = require("../../operator/concatAll");
rxjs_1.Observable.prototype.concatAll = concatAll_1.concatAll;

},{"../../operator/concatAll":212,"rxjs":281}],184:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var rxjs_1 = require("rxjs");
var concatMap_1 = require("../../operator/concatMap");
rxjs_1.Observable.prototype.concatMap = concatMap_1.concatMap;

},{"../../operator/concatMap":213,"rxjs":281}],185:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var rxjs_1 = require("rxjs");
var defaultIfEmpty_1 = require("../../operator/defaultIfEmpty");
rxjs_1.Observable.prototype.defaultIfEmpty = defaultIfEmpty_1.defaultIfEmpty;

},{"../../operator/defaultIfEmpty":214,"rxjs":281}],186:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var rxjs_1 = require("rxjs");
var distinctUntilChanged_1 = require("../../operator/distinctUntilChanged");
rxjs_1.Observable.prototype.distinctUntilChanged = distinctUntilChanged_1.distinctUntilChanged;

},{"../../operator/distinctUntilChanged":215,"rxjs":281}],187:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var rxjs_1 = require("rxjs");
var distinctUntilKeyChanged_1 = require("../../operator/distinctUntilKeyChanged");
rxjs_1.Observable.prototype.distinctUntilKeyChanged = distinctUntilKeyChanged_1.distinctUntilKeyChanged;

},{"../../operator/distinctUntilKeyChanged":216,"rxjs":281}],188:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var rxjs_1 = require("rxjs");
var do_1 = require("../../operator/do");
rxjs_1.Observable.prototype.do = do_1._do;
rxjs_1.Observable.prototype._do = do_1._do;

},{"../../operator/do":217,"rxjs":281}],189:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var rxjs_1 = require("rxjs");
var filter_1 = require("../../operator/filter");
rxjs_1.Observable.prototype.filter = filter_1.filter;

},{"../../operator/filter":218,"rxjs":281}],190:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var rxjs_1 = require("rxjs");
var find_1 = require("../../operator/find");
rxjs_1.Observable.prototype.find = find_1.find;

},{"../../operator/find":219,"rxjs":281}],191:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var rxjs_1 = require("rxjs");
var first_1 = require("../../operator/first");
rxjs_1.Observable.prototype.first = first_1.first;

},{"../../operator/first":220,"rxjs":281}],192:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var rxjs_1 = require("rxjs");
var map_1 = require("../../operator/map");
rxjs_1.Observable.prototype.map = map_1.map;

},{"../../operator/map":221,"rxjs":281}],193:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var rxjs_1 = require("rxjs");
var mapTo_1 = require("../../operator/mapTo");
rxjs_1.Observable.prototype.mapTo = mapTo_1.mapTo;

},{"../../operator/mapTo":222,"rxjs":281}],194:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var rxjs_1 = require("rxjs");
var merge_1 = require("../../operator/merge");
rxjs_1.Observable.prototype.merge = merge_1.merge;

},{"../../operator/merge":223,"rxjs":281}],195:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var rxjs_1 = require("rxjs");
var mergeMap_1 = require("../../operator/mergeMap");
rxjs_1.Observable.prototype.mergeMap = mergeMap_1.mergeMap;
rxjs_1.Observable.prototype.flatMap = mergeMap_1.mergeMap;

},{"../../operator/mergeMap":224,"rxjs":281}],196:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var rxjs_1 = require("rxjs");
var multicast_1 = require("../../operator/multicast");
rxjs_1.Observable.prototype.multicast = multicast_1.multicast;

},{"../../operator/multicast":225,"rxjs":281}],197:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var rxjs_1 = require("rxjs");
var pairwise_1 = require("../../operator/pairwise");
rxjs_1.Observable.prototype.pairwise = pairwise_1.pairwise;

},{"../../operator/pairwise":226,"rxjs":281}],198:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var rxjs_1 = require("rxjs");
var retry_1 = require("../../operator/retry");
rxjs_1.Observable.prototype.retry = retry_1.retry;

},{"../../operator/retry":227,"rxjs":281}],199:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var rxjs_1 = require("rxjs");
var scan_1 = require("../../operator/scan");
rxjs_1.Observable.prototype.scan = scan_1.scan;

},{"../../operator/scan":228,"rxjs":281}],200:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var rxjs_1 = require("rxjs");
var share_1 = require("../../operator/share");
rxjs_1.Observable.prototype.share = share_1.share;

},{"../../operator/share":229,"rxjs":281}],201:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var rxjs_1 = require("rxjs");
var skip_1 = require("../../operator/skip");
rxjs_1.Observable.prototype.skip = skip_1.skip;

},{"../../operator/skip":230,"rxjs":281}],202:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var rxjs_1 = require("rxjs");
var startWith_1 = require("../../operator/startWith");
rxjs_1.Observable.prototype.startWith = startWith_1.startWith;

},{"../../operator/startWith":231,"rxjs":281}],203:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var rxjs_1 = require("rxjs");
var switchMap_1 = require("../../operator/switchMap");
rxjs_1.Observable.prototype.switchMap = switchMap_1.switchMap;

},{"../../operator/switchMap":232,"rxjs":281}],204:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var rxjs_1 = require("rxjs");
var take_1 = require("../../operator/take");
rxjs_1.Observable.prototype.take = take_1.take;

},{"../../operator/take":233,"rxjs":281}],205:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var rxjs_1 = require("rxjs");
var takeUntil_1 = require("../../operator/takeUntil");
rxjs_1.Observable.prototype.takeUntil = takeUntil_1.takeUntil;

},{"../../operator/takeUntil":234,"rxjs":281}],206:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var rxjs_1 = require("rxjs");
var timeout_1 = require("../../operator/timeout");
rxjs_1.Observable.prototype.timeout = timeout_1.timeout;

},{"../../operator/timeout":235,"rxjs":281}],207:[function(require,module,exports){
// HACK: does nothing, because `toPromise` now lives on the `Observable` itself.
// leaving this module here to prevent breakage.

},{}],208:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var rxjs_1 = require("rxjs");
var withLatestFrom_1 = require("../../operator/withLatestFrom");
rxjs_1.Observable.prototype.withLatestFrom = withLatestFrom_1.withLatestFrom;

},{"../../operator/withLatestFrom":236,"rxjs":281}],209:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var operators_1 = require("rxjs/operators");
/**
 * Buffers the source Observable values until `closingNotifier` emits.
 *
 * <span class="informal">Collects values from the past as an array, and emits
 * that array only when another Observable emits.</span>
 *
 * <img src="./img/buffer.png" width="100%">
 *
 * Buffers the incoming Observable values until the given `closingNotifier`
 * Observable emits a value, at which point it emits the buffer on the output
 * Observable and starts a new buffer internally, awaiting the next time
 * `closingNotifier` emits.
 *
 * @example <caption>On every click, emit array of most recent interval events</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var interval = Rx.Observable.interval(1000);
 * var buffered = interval.buffer(clicks);
 * buffered.subscribe(x => my_console_log(x));
 *
 * @see {@link bufferCount}
 * @see {@link bufferTime}
 * @see {@link bufferToggle}
 * @see {@link bufferWhen}
 * @see {@link window}
 *
 * @param {Observable<any>} closingNotifier An Observable that signals the
 * buffer to be emitted on the output Observable.
 * @return {Observable<T[]>} An Observable of buffers, which are arrays of
 * values.
 * @method buffer
 * @owner Observable
 */
function buffer(closingNotifier) {
    return operators_1.buffer(closingNotifier)(this);
}
exports.buffer = buffer;

},{"rxjs/operators":481}],210:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var operators_1 = require("rxjs/operators");
/**
 * Buffers the source Observable values until the size hits the maximum
 * `bufferSize` given.
 *
 * <span class="informal">Collects values from the past as an array, and emits
 * that array only when its size reaches `bufferSize`.</span>
 *
 * <img src="./img/bufferCount.png" width="100%">
 *
 * Buffers a number of values from the source Observable by `bufferSize` then
 * emits the buffer and clears it, and starts a new buffer each
 * `startBufferEvery` values. If `startBufferEvery` is not provided or is
 * `null`, then new buffers are started immediately at the start of the source
 * and when each buffer closes and is emitted.
 *
 * @example <caption>Emit the last two click events as an array</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var buffered = clicks.bufferCount(2);
 * buffered.subscribe(x => my_console_log(x));
 *
 * @example <caption>On every click, emit the last two click events as an array</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var buffered = clicks.bufferCount(2, 1);
 * buffered.subscribe(x => my_console_log(x));
 *
 * @see {@link buffer}
 * @see {@link bufferTime}
 * @see {@link bufferToggle}
 * @see {@link bufferWhen}
 * @see {@link pairwise}
 * @see {@link windowCount}
 *
 * @param {number} bufferSize The maximum size of the buffer emitted.
 * @param {number} [startBufferEvery] Interval at which to start a new buffer.
 * For example if `startBufferEvery` is `2`, then a new buffer will be started
 * on every other value from the source. A new buffer is started at the
 * beginning of the source by default.
 * @return {Observable<T[]>} An Observable of arrays of buffered values.
 * @method bufferCount
 * @owner Observable
 */
function bufferCount(bufferSize, startBufferEvery) {
    if (startBufferEvery === void 0) { startBufferEvery = null; }
    return operators_1.bufferCount(bufferSize, startBufferEvery)(this);
}
exports.bufferCount = bufferCount;

},{"rxjs/operators":481}],211:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var operators_1 = require("rxjs/operators");
/**
 * Catches errors on the observable to be handled by returning a new observable or throwing an error.
 *
 * <img src="./img/catch.png" width="100%">
 *
 * @example <caption>Continues with a different Observable when there's an error</caption>
 *
 * Observable.of(1, 2, 3, 4, 5)
 *   .map(n => {
 * 	   if (n == 4) {
 * 	     throw 'four!';
 *     }
 *	   return n;
 *   })
 *   .catch(err => Observable.of('I', 'II', 'III', 'IV', 'V'))
 *   .subscribe(x => my_console_log(x));
 *   // 1, 2, 3, I, II, III, IV, V
 *
 * @example <caption>Retries the caught source Observable again in case of error, similar to retry() operator</caption>
 *
 * Observable.of(1, 2, 3, 4, 5)
 *   .map(n => {
 * 	   if (n === 4) {
 * 	     throw 'four!';
 *     }
 * 	   return n;
 *   })
 *   .catch((err, caught) => caught)
 *   .take(30)
 *   .subscribe(x => my_console_log(x));
 *   // 1, 2, 3, 1, 2, 3, ...
 *
 * @example <caption>Throws a new error when the source Observable throws an error</caption>
 *
 * Observable.of(1, 2, 3, 4, 5)
 *   .map(n => {
 *     if (n == 4) {
 *       throw 'four!';
 *     }
 *     return n;
 *   })
 *   .catch(err => {
 *     throw 'error in source. Details: ' + err;
 *   })
 *   .subscribe(
 *     x => my_console_log(x),
 *     err => my_console_log(err)
 *   );
 *   // 1, 2, 3, error in source. Details: four!
 *
 * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which
 *  is the source observable, in case you'd like to "retry" that observable by returning it again. Whatever observable
 *  is returned by the `selector` will be used to continue the observable chain.
 * @return {Observable} An observable that originates from either the source or the observable returned by the
 *  catch `selector` function.
 * @method catch
 * @name catch
 * @owner Observable
 */
function _catch(selector) {
    return operators_1.catchError(selector)(this);
}
exports._catch = _catch;

},{"rxjs/operators":481}],212:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var operators_1 = require("rxjs/operators");
/**
 * Converts a higher-order Observable into a first-order Observable by
 * concatenating the inner Observables in order.
 *
 * <span class="informal">Flattens an Observable-of-Observables by putting one
 * inner Observable after the other.</span>
 *
 * <img src="./img/concatAll.png" width="100%">
 *
 * Joins every Observable emitted by the source (a higher-order Observable), in
 * a serial fashion. It subscribes to each inner Observable only after the
 * previous inner Observable has completed, and merges all of their values into
 * the returned observable.
 *
 * __Warning:__ If the source Observable emits Observables quickly and
 * endlessly, and the inner Observables it emits generally complete slower than
 * the source emits, you can run into memory issues as the incoming Observables
 * collect in an unbounded buffer.
 *
 * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set
 * to `1`.
 *
 * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));
 * var firstOrder = higherOrder.concatAll();
 * firstOrder.subscribe(x => my_console_log(x));
 *
 * // Results in the following:
 * // (results are not concurrent)
 * // For every click on the "document" it will emit values 0 to 3 spaced
 * // on a 1000ms interval
 * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3
 *
 * @see {@link combineAll}
 * @see {@link concat}
 * @see {@link concatMap}
 * @see {@link concatMapTo}
 * @see {@link exhaust}
 * @see {@link mergeAll}
 * @see {@link switch}
 * @see {@link zipAll}
 *
 * @return {Observable} An Observable emitting values from all the inner
 * Observables concatenated.
 * @method concatAll
 * @owner Observable
 */
function concatAll() {
    return operators_1.concatAll()(this);
}
exports.concatAll = concatAll;

},{"rxjs/operators":481}],213:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var operators_1 = require("rxjs/operators");
/**
 * Projects each source value to an Observable which is merged in the output
 * Observable, in a serialized fashion waiting for each one to complete before
 * merging the next.
 *
 * <span class="informal">Maps each value to an Observable, then flattens all of
 * these inner Observables using {@link concatAll}.</span>
 *
 * <img src="./img/concatMap.png" width="100%">
 *
 * Returns an Observable that emits items based on applying a function that you
 * supply to each item emitted by the source Observable, where that function
 * returns an (so-called "inner") Observable. Each new inner Observable is
 * concatenated with the previous inner Observable.
 *
 * __Warning:__ if source values arrive endlessly and faster than their
 * corresponding inner Observables can complete, it will result in memory issues
 * as inner Observables amass in an unbounded buffer waiting for their turn to
 * be subscribed to.
 *
 * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set
 * to `1`.
 *
 * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));
 * result.subscribe(x => my_console_log(x));
 *
 * // Results in the following:
 * // (results are not concurrent)
 * // For every click on the "document" it will emit values 0 to 3 spaced
 * // on a 1000ms interval
 * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3
 *
 * @see {@link concat}
 * @see {@link concatAll}
 * @see {@link concatMapTo}
 * @see {@link exhaustMap}
 * @see {@link mergeMap}
 * @see {@link switchMap}
 *
 * @param {function(value: T, ?index: number): ObservableInput} project A function
 * that, when applied to an item emitted by the source Observable, returns an
 * Observable.
 * @return {Observable} An Observable that emits the result of applying the
 * projection function (and the optional `resultSelector`) to each item emitted
 * by the source Observable and taking values from each projected inner
 * Observable sequentially.
 * @method concatMap
 * @owner Observable
 */
function concatMap(project) {
    return operators_1.concatMap(project)(this);
}
exports.concatMap = concatMap;

},{"rxjs/operators":481}],214:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var operators_1 = require("rxjs/operators");
/* tslint:enable:max-line-length */
/**
 * Emits a given value if the source Observable completes without emitting any
 * `next` value, otherwise mirrors the source Observable.
 *
 * <span class="informal">If the source Observable turns out to be empty, then
 * this operator will emit a default value.</span>
 *
 * <img src="./img/defaultIfEmpty.png" width="100%">
 *
 * `defaultIfEmpty` emits the values emitted by the source Observable or a
 * specified default value if the source Observable is empty (completes without
 * having emitted any `next` value).
 *
 * @example <caption>If no clicks happen in 5 seconds, then emit "no clicks"</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));
 * var result = clicksBeforeFive.defaultIfEmpty('no clicks');
 * result.subscribe(x => my_console_log(x));
 *
 * @see {@link empty}
 * @see {@link last}
 *
 * @param {any} [defaultValue=null] The default value used if the source
 * Observable is empty.
 * @return {Observable} An Observable that emits either the specified
 * `defaultValue` if the source Observable emits no items, or the values emitted
 * by the source Observable.
 * @method defaultIfEmpty
 * @owner Observable
 */
function defaultIfEmpty(defaultValue) {
    if (defaultValue === void 0) { defaultValue = null; }
    return operators_1.defaultIfEmpty(defaultValue)(this);
}
exports.defaultIfEmpty = defaultIfEmpty;

},{"rxjs/operators":481}],215:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var operators_1 = require("rxjs/operators");
/* tslint:enable:max-line-length */
/**
 * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.
 *
 * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.
 *
 * If a comparator function is not provided, an equality check is used by default.
 *
 * @example <caption>A simple example with numbers</caption>
 * Observable.of(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4)
 *   .distinctUntilChanged()
 *   .subscribe(x => my_console_log(x)); // 1, 2, 1, 2, 3, 4
 *
 * @example <caption>An example using a compare function</caption>
 * interface Person {
 *    age: number,
 *    name: string
 * }
 *
 * Observable.of<Person>(
 *     { age: 4, name: 'Foo'},
 *     { age: 7, name: 'Bar'},
 *     { age: 5, name: 'Foo'})
 *     { age: 6, name: 'Foo'})
 *     .distinctUntilChanged((p: Person, q: Person) => p.name === q.name)
 *     .subscribe(x => my_console_log(x));
 *
 * // displays:
 * // { age: 4, name: 'Foo' }
 * // { age: 7, name: 'Bar' }
 * // { age: 5, name: 'Foo' }
 *
 * @see {@link distinct}
 * @see {@link distinctUntilKeyChanged}
 *
 * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.
 * @return {Observable} An Observable that emits items from the source Observable with distinct values.
 * @method distinctUntilChanged
 * @owner Observable
 */
function distinctUntilChanged(compare, keySelector) {
    return operators_1.distinctUntilChanged(compare, keySelector)(this);
}
exports.distinctUntilChanged = distinctUntilChanged;

},{"rxjs/operators":481}],216:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var operators_1 = require("rxjs/operators");
/* tslint:enable:max-line-length */
/**
 * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item,
 * using a property accessed by using the key provided to check if the two items are distinct.
 *
 * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.
 *
 * If a comparator function is not provided, an equality check is used by default.
 *
 * @example <caption>An example comparing the name of persons</caption>
 *
 *  interface Person {
 *     age: number,
 *     name: string
 *  }
 *
 * Observable.of<Person>(
 *     { age: 4, name: 'Foo'},
 *     { age: 7, name: 'Bar'},
 *     { age: 5, name: 'Foo'},
 *     { age: 6, name: 'Foo'})
 *     .distinctUntilKeyChanged('name')
 *     .subscribe(x => my_console_log(x));
 *
 * // displays:
 * // { age: 4, name: 'Foo' }
 * // { age: 7, name: 'Bar' }
 * // { age: 5, name: 'Foo' }
 *
 * @example <caption>An example comparing the first letters of the name</caption>
 *
 * interface Person {
 *     age: number,
 *     name: string
 *  }
 *
 * Observable.of<Person>(
 *     { age: 4, name: 'Foo1'},
 *     { age: 7, name: 'Bar'},
 *     { age: 5, name: 'Foo2'},
 *     { age: 6, name: 'Foo3'})
 *     .distinctUntilKeyChanged('name', (x: string, y: string) => x.substring(0, 3) === y.substring(0, 3))
 *     .subscribe(x => my_console_log(x));
 *
 * // displays:
 * // { age: 4, name: 'Foo1' }
 * // { age: 7, name: 'Bar' }
 * // { age: 5, name: 'Foo2' }
 *
 * @see {@link distinct}
 * @see {@link distinctUntilChanged}
 *
 * @param {string} key String key for object property lookup on each item.
 * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.
 * @return {Observable} An Observable that emits items from the source Observable with distinct values based on the key specified.
 * @method distinctUntilKeyChanged
 * @owner Observable
 */
function distinctUntilKeyChanged(key, compare) {
    return operators_1.distinctUntilKeyChanged(key, compare)(this);
}
exports.distinctUntilKeyChanged = distinctUntilKeyChanged;

},{"rxjs/operators":481}],217:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var operators_1 = require("rxjs/operators");
/* tslint:enable:max-line-length */
/**
 * Perform a side effect for every emission on the source Observable, but return
 * an Observable that is identical to the source.
 *
 * <span class="informal">Intercepts each emission on the source and runs a
 * function, but returns an output which is identical to the source as long as errors don't occur.</span>
 *
 * <img src="./img/do.png" width="100%">
 *
 * Returns a mirrored Observable of the source Observable, but modified so that
 * the provided Observer is called to perform a side effect for every value,
 * error, and completion emitted by the source. Any errors that are thrown in
 * the aforementioned Observer or handlers are safely sent down the error path
 * of the output Observable.
 *
 * This operator is useful for debugging your Observables for the correct values
 * or performing other side effects.
 *
 * Note: this is different to a `subscribe` on the Observable. If the Observable
 * returned by `do` is not subscribed, the side effects specified by the
 * Observer will never happen. `do` therefore simply spies on existing
 * execution, it does not trigger an execution to happen like `subscribe` does.
 *
 * @example <caption>Map every click to the clientX position of that click, while also logging the click event</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var positions = clicks
 *   .do(ev => my_console_log(ev))
 *   .map(ev => ev.clientX);
 * positions.subscribe(x => my_console_log(x));
 *
 * @see {@link map}
 * @see {@link subscribe}
 *
 * @param {Observer|function} [nextOrObserver] A normal Observer object or a
 * callback for `next`.
 * @param {function} [error] Callback for errors in the source.
 * @param {function} [complete] Callback for the completion of the source.
 * @return {Observable} An Observable identical to the source, but runs the
 * specified Observer or callback(s) for each item.
 * @method do
 * @name do
 * @owner Observable
 */
function _do(nextOrObserver, error, complete) {
    return operators_1.tap(nextOrObserver, error, complete)(this);
}
exports._do = _do;

},{"rxjs/operators":481}],218:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var operators_1 = require("rxjs/operators");
/* tslint:enable:max-line-length */
/**
 * Filter items emitted by the source Observable by only emitting those that
 * satisfy a specified predicate.
 *
 * <span class="informal">Like
 * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),
 * it only emits a value from the source if it passes a criterion function.</span>
 *
 * <img src="./img/filter.png" width="100%">
 *
 * Similar to the well-known `Array.prototype.filter` method, this operator
 * takes values from the source Observable, passes them through a `predicate`
 * function and only emits those values that yielded `true`.
 *
 * @example <caption>Emit only click events whose target was a DIV element</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');
 * clicksOnDivs.subscribe(x => my_console_log(x));
 *
 * @see {@link distinct}
 * @see {@link distinctUntilChanged}
 * @see {@link distinctUntilKeyChanged}
 * @see {@link ignoreElements}
 * @see {@link partition}
 * @see {@link skip}
 *
 * @param {function(value: T, index: number): boolean} predicate A function that
 * evaluates each value emitted by the source Observable. If it returns `true`,
 * the value is emitted, if `false` the value is not passed to the output
 * Observable. The `index` parameter is the number `i` for the i-th source
 * emission that has happened since the subscription, starting from the number
 * `0`.
 * @param {any} [thisArg] An optional argument to determine the value of `this`
 * in the `predicate` function.
 * @return {Observable} An Observable of values from the source that were
 * allowed by the `predicate` function.
 * @method filter
 * @owner Observable
 */
function filter(predicate, thisArg) {
    return operators_1.filter(predicate, thisArg)(this);
}
exports.filter = filter;

},{"rxjs/operators":481}],219:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var operators_1 = require("rxjs/operators");
/* tslint:enable:max-line-length */
/**
 * Emits only the first value emitted by the source Observable that meets some
 * condition.
 *
 * <span class="informal">Finds the first value that passes some test and emits
 * that.</span>
 *
 * <img src="./img/find.png" width="100%">
 *
 * `find` searches for the first item in the source Observable that matches the
 * specified condition embodied by the `predicate`, and returns the first
 * occurrence in the source. Unlike {@link first}, the `predicate` is required
 * in `find`, and does not emit an error if a valid value is not found.
 *
 * @example <caption>Find and emit the first click that happens on a DIV element</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.find(ev => ev.target.tagName === 'DIV');
 * result.subscribe(x => my_console_log(x));
 *
 * @see {@link filter}
 * @see {@link first}
 * @see {@link findIndex}
 * @see {@link take}
 *
 * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate
 * A function called with each item to test for condition matching.
 * @param {any} [thisArg] An optional argument to determine the value of `this`
 * in the `predicate` function.
 * @return {Observable<T>} An Observable of the first item that matches the
 * condition.
 * @method find
 * @owner Observable
 */
function find(predicate, thisArg) {
    return operators_1.find(predicate, thisArg)(this);
}
exports.find = find;

},{"rxjs/operators":481}],220:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var operators_1 = require("rxjs/operators");
/**
 * Emits only the first value (or the first value that meets some condition)
 * emitted by the source Observable.
 *
 * <span class="informal">Emits only the first value. Or emits only the first
 * value that passes some test.</span>
 *
 * <img src="./img/first.png" width="100%">
 *
 * If called with no arguments, `first` emits the first value of the source
 * Observable, then completes. If called with a `predicate` function, `first`
 * emits the first value of the source that matches the specified condition. It
 * may also take a `resultSelector` function to produce the output value from
 * the input value, and a `defaultValue` to emit in case the source completes
 * before it is able to emit a valid value. Throws an error if `defaultValue`
 * was not provided and a matching element is not found.
 *
 * @example <caption>Emit only the first click that happens on the DOM</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.first();
 * result.subscribe(x => my_console_log(x));
 *
 * @example <caption>Emits the first click that happens on a DIV</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.first(ev => ev.target.tagName === 'DIV');
 * result.subscribe(x => my_console_log(x));
 *
 * @see {@link filter}
 * @see {@link find}
 * @see {@link take}
 *
 * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`
 * callback if the Observable completes before any `next` notification was sent.
 *
 * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]
 * An optional function called with each item to test for condition matching.
 * @param {T} [defaultValue] The default value emitted in case no valid value
 * was found on the source.
 * @return {Observable<T>} An Observable of the first item that matches the
 * condition.
 * @method first
 * @owner Observable
 */
function first() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    return operators_1.first.apply(void 0, args)(this);
}
exports.first = first;

},{"rxjs/operators":481}],221:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var operators_1 = require("rxjs/operators");
/**
 * Applies a given `project` function to each value emitted by the source
 * Observable, and emits the resulting values as an Observable.
 *
 * <span class="informal">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),
 * it passes each source value through a transformation function to get
 * corresponding output values.</span>
 *
 * <img src="./img/map.png" width="100%">
 *
 * Similar to the well known `Array.prototype.map` function, this operator
 * applies a projection to each value and emits that projection in the output
 * Observable.
 *
 * @example <caption>Map every click to the clientX position of that click</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var positions = clicks.map(ev => ev.clientX);
 * positions.subscribe(x => my_console_log(x));
 *
 * @see {@link mapTo}
 * @see {@link pluck}
 *
 * @param {function(value: T, index: number): R} project The function to apply
 * to each `value` emitted by the source Observable. The `index` parameter is
 * the number `i` for the i-th emission that has happened since the
 * subscription, starting from the number `0`.
 * @param {any} [thisArg] An optional argument to define what `this` is in the
 * `project` function.
 * @return {Observable<R>} An Observable that emits the values from the source
 * Observable transformed by the given `project` function.
 * @method map
 * @owner Observable
 */
function map(project, thisArg) {
    return operators_1.map(project, thisArg)(this);
}
exports.map = map;

},{"rxjs/operators":481}],222:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var operators_1 = require("rxjs/operators");
/**
 * Emits the given constant value on the output Observable every time the source
 * Observable emits a value.
 *
 * <span class="informal">Like {@link map}, but it maps every source value to
 * the same output value every time.</span>
 *
 * <img src="./img/mapTo.png" width="100%">
 *
 * Takes a constant `value` as argument, and emits that whenever the source
 * Observable emits a value. In other words, ignores the actual source value,
 * and simply uses the emission moment to know when to emit the given `value`.
 *
 * @example <caption>Map every click to the string 'Hi'</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var greetings = clicks.mapTo('Hi');
 * greetings.subscribe(x => my_console_log(x));
 *
 * @see {@link map}
 *
 * @param {any} value The value to map each source value to.
 * @return {Observable} An Observable that emits the given `value` every time
 * the source Observable emits something.
 * @method mapTo
 * @owner Observable
 */
function mapTo(value) {
    return operators_1.mapTo(value)(this);
}
exports.mapTo = mapTo;

},{"rxjs/operators":481}],223:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var rxjs_1 = require("rxjs");
/* tslint:enable:max-line-length */
/**
 * Creates an output Observable which concurrently emits all values from every
 * given input Observable.
 *
 * <span class="informal">Flattens multiple Observables together by blending
 * their values into one Observable.</span>
 *
 * <img src="./img/merge.png" width="100%">
 *
 * `merge` subscribes to each given input Observable (either the source or an
 * Observable given as argument), and simply forwards (without doing any
 * transformation) all the values from all the input Observables to the output
 * Observable. The output Observable only completes once all input Observables
 * have completed. Any error delivered by an input Observable will be immediately
 * emitted on the output Observable.
 *
 * @example <caption>Merge together two Observables: 1s interval and clicks</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var timer = Rx.Observable.interval(1000);
 * var clicksOrTimer = clicks.merge(timer);
 * clicksOrTimer.subscribe(x => my_console_log(x));
 *
 * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>
 * var timer1 = Rx.Observable.interval(1000).take(10);
 * var timer2 = Rx.Observable.interval(2000).take(6);
 * var timer3 = Rx.Observable.interval(500).take(10);
 * var concurrent = 2; // the argument
 * var merged = timer1.merge(timer2, timer3, concurrent);
 * merged.subscribe(x => my_console_log(x));
 *
 * @see {@link mergeAll}
 * @see {@link mergeMap}
 * @see {@link mergeMapTo}
 * @see {@link mergeScan}
 *
 * @param {ObservableInput} other An input Observable to merge with the source
 * Observable. More than one input Observables may be given as argument.
 * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input
 * Observables being subscribed to concurrently.
 * @param {Scheduler} [scheduler=null] The IScheduler to use for managing
 * concurrency of input Observables.
 * @return {Observable} An Observable that emits items that are the result of
 * every input Observable.
 * @method merge
 * @owner Observable
 */
function merge() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i] = arguments[_i];
    }
    return this.lift.call(rxjs_1.merge.apply(void 0, [this].concat(observables)));
}
exports.merge = merge;

},{"rxjs":281}],224:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var operators_1 = require("rxjs/operators");
/**
 * Projects each source value to an Observable which is merged in the output
 * Observable.
 *
 * <span class="informal">Maps each value to an Observable, then flattens all of
 * these inner Observables using {@link mergeAll}.</span>
 *
 * <img src="./img/mergeMap.png" width="100%">
 *
 * Returns an Observable that emits items based on applying a function that you
 * supply to each item emitted by the source Observable, where that function
 * returns an Observable, and then merging those resulting Observables and
 * emitting the results of this merger.
 *
 * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>
 * var letters = Rx.Observable.of('a', 'b', 'c');
 * var result = letters.mergeMap(x =>
 *   Rx.Observable.interval(1000).map(i => x+i)
 * );
 * result.subscribe(x => my_console_log(x));
 *
 * // Results in the following:
 * // a0
 * // b0
 * // c0
 * // a1
 * // b1
 * // c1
 * // continues to list a,b,c with respective ascending integers
 *
 * @see {@link concatMap}
 * @see {@link exhaustMap}
 * @see {@link merge}
 * @see {@link mergeAll}
 * @see {@link mergeMapTo}
 * @see {@link mergeScan}
 * @see {@link switchMap}
 *
 * @param {function(value: T, ?index: number): ObservableInput} project A function
 * that, when applied to an item emitted by the source Observable, returns an
 * Observable.
 * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input
 * Observables being subscribed to concurrently.
 * @return {Observable} An Observable that emits the result of applying the
 * projection function (and the optional `resultSelector`) to each item emitted
 * by the source Observable and merging the results of the Observables obtained
 * from this transformation.
 * @method mergeMap
 * @owner Observable
 */
function mergeMap(project, concurrent) {
    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
    return operators_1.mergeMap(project, concurrent)(this);
}
exports.mergeMap = mergeMap;

},{"rxjs/operators":481}],225:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var operators_1 = require("rxjs/operators");
/* tslint:enable:max-line-length */
/**
 * Allows source Observable to be subscribed only once with a Subject of choice,
 * while still sharing its values between multiple subscribers.
 *
 * <span class="informal">Subscribe to Observable once, but send its values to multiple subscribers.</span>
 *
 * <img src="./img/multicast.png" width="100%">
 *
 * `multicast` is an operator that works in two modes.
 *
 * In the first mode you provide a single argument to it, which can be either an initialized Subject or a Subject
 * factory. As a result you will get a special kind of an Observable - a {@link ConnectableObservable}. It can be
 * subscribed multiple times, just as regular Observable, but it won't subscribe to the source Observable at that
 * moment. It will do it only if you call its `connect` method. This means you can essentially control by hand, when
 * source Observable will be actually subscribed. What is more, ConnectableObservable will share this one subscription
 * between all of its subscribers. This means that, for example, `ajax` Observable will only send a request once,
 * even though usually it would send a request per every subscriber. Since it sends a request at the moment of
 * subscription, here request would be sent when the `connect` method of a ConnectableObservable is called.
 *
 * The most common pattern of using ConnectableObservable is calling `connect` when the first consumer subscribes,
 * keeping the subscription alive while several consumers come and go and finally unsubscribing from the source
 * Observable, when the last consumer unsubscribes. To not implement that logic over and over again,
 * ConnectableObservable has a special operator, `refCount`. When called, it returns an Observable, which will count
 * the number of consumers subscribed to it and keep ConnectableObservable connected as long as there is at least
 * one consumer. So if you don't actually need to decide yourself when to connect and disconnect a
 * ConnectableObservable, use `refCount`.
 *
 * The second mode is invoked by calling `multicast` with an additional, second argument - selector function.
 * This function accepts an Observable - which basically mirrors the source Observable - and returns Observable
 * as well, which should be the input stream modified by any operators you want. Note that in this
 * mode you cannot provide initialized Subject as a first argument - it has to be a Subject factory. If
 * you provide selector function, `multicast` returns just a regular Observable, instead of ConnectableObservable.
 * Thus, as usual, each subscription to this stream triggers subscription to the source Observable. However,
 * if inside the selector function you subscribe to the input Observable multiple times, actual source stream
 * will be subscribed only once. So if you have a chain of operators that use some Observable many times,
 * but you want to subscribe to that Observable only once, this is the mode you would use.
 *
 * Subject provided as a first parameter of `multicast` is used as a proxy for the single subscription to the
 * source Observable. It means that all values from the source stream go through that Subject. Thus, if a Subject
 * has some special properties, Observable returned by `multicast` will have them as well. If you want to use
 * `multicast` with a Subject that is one of the ones included in RxJS by default - {@link Subject},
 * {@link AsyncSubject}, {@link BehaviorSubject}, or {@link ReplaySubject} - simply use {@link publish},
 * {@link publishLast}, {@link publishBehavior} or {@link publishReplay} respectively. These are actually
 * just wrappers around `multicast`, with a specific Subject hardcoded inside.
 *
 * Also, if you use {@link publish} or {@link publishReplay} with a ConnectableObservables `refCount` operator,
 * you can simply use {@link share} and {@link shareReplay} respectively, which chain these two.
 *
 * @example <caption>Use ConnectableObservable</caption>
 * const seconds = Rx.Observable.interval(1000);
 * const connectableSeconds = seconds.multicast(new Subject());
 *
 * connectableSeconds.subscribe(value => my_console_log('first: ' + value));
 * connectableSeconds.subscribe(value => my_console_log('second: ' + value));
 *
 * // At this point still nothing happens, even though we subscribed twice.
 *
 * connectableSeconds.connect();
 *
 * // From now on `seconds` are being logged to the console,
 * // twice per every second. `seconds` Observable was however only subscribed once,
 * // so under the hood Observable.interval had only one clock started.
 *
 * @example <caption>Use selector</caption>
 * const seconds = Rx.Observable.interval(1000);
 *
 * seconds
 *     .multicast(
 *         () => new Subject(),
 *         seconds => seconds.zip(seconds) // Usually zip would subscribe to `seconds` twice.
 *                                         // Because we are inside selector, `seconds` is subscribed once,
 *     )                                   // thus starting only one clock used internally by Observable.interval.
 *     .subscribe();
 *
 * @see {@link publish}
 * @see {@link publishLast}
 * @see {@link publishBehavior}
 * @see {@link publishReplay}
 * @see {@link share}
 * @see {@link shareReplay}
 *
 * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate Subject through
 * which the source sequence's elements will be multicast to the selector function input Observable or
 * ConnectableObservable returned by the operator.
 * @param {Function} [selector] - Optional selector function that can use the input stream
 * as many times as needed, without causing multiple subscriptions to the source stream.
 * Subscribers to the input source will receive all notifications of the source from the
 * time of the subscription forward.
 * @return {Observable<T>|ConnectableObservable<T>} An Observable that emits the results of invoking the selector
 * on the source stream or a special {@link ConnectableObservable}, if selector was not provided.
 *
 * @method multicast
 * @owner Observable
 */
function multicast(subjectOrSubjectFactory, selector) {
    return operators_1.multicast(subjectOrSubjectFactory, selector)(this);
}
exports.multicast = multicast;

},{"rxjs/operators":481}],226:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var operators_1 = require("rxjs/operators");
/**
 * Groups pairs of consecutive emissions together and emits them as an array of
 * two values.
 *
 * <span class="informal">Puts the current value and previous value together as
 * an array, and emits that.</span>
 *
 * <img src="./img/pairwise.png" width="100%">
 *
 * The Nth emission from the source Observable will cause the output Observable
 * to emit an array [(N-1)th, Nth] of the previous and the current value, as a
 * pair. For this reason, `pairwise` emits on the second and subsequent
 * emissions from the source Observable, but not on the first emission, because
 * there is no previous value in that case.
 *
 * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var pairs = clicks.pairwise();
 * var distance = pairs.map(pair => {
 *   var x0 = pair[0].clientX;
 *   var y0 = pair[0].clientY;
 *   var x1 = pair[1].clientX;
 *   var y1 = pair[1].clientY;
 *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));
 * });
 * distance.subscribe(x => my_console_log(x));
 *
 * @see {@link buffer}
 * @see {@link bufferCount}
 *
 * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of
 * consecutive values from the source Observable.
 * @method pairwise
 * @owner Observable
 */
function pairwise() {
    return operators_1.pairwise()(this);
}
exports.pairwise = pairwise;

},{"rxjs/operators":481}],227:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var operators_1 = require("rxjs/operators");
/**
 * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable
 * calls `error`, this method will resubscribe to the source Observable for a maximum of `count` resubscriptions (given
 * as a number parameter) rather than propagating the `error` call.
 *
 * <img src="./img/retry.png" width="100%">
 *
 * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted
 * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second
 * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications
 * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].
 * @param {number} count - Number of retry attempts before failing.
 * @return {Observable} The source Observable modified with the retry logic.
 * @method retry
 * @owner Observable
 */
function retry(count) {
    if (count === void 0) { count = -1; }
    return operators_1.retry(count)(this);
}
exports.retry = retry;

},{"rxjs/operators":481}],228:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var operators_1 = require("rxjs/operators");
/* tslint:enable:max-line-length */
/**
 * Applies an accumulator function over the source Observable, and returns each
 * intermediate result, with an optional seed value.
 *
 * <span class="informal">It's like {@link reduce}, but emits the current
 * accumulation whenever the source emits a value.</span>
 *
 * <img src="./img/scan.png" width="100%">
 *
 * Combines together all values emitted on the source, using an accumulator
 * function that knows how to join a new source value into the accumulation from
 * the past. Is similar to {@link reduce}, but emits the intermediate
 * accumulations.
 *
 * Returns an Observable that applies a specified `accumulator` function to each
 * item emitted by the source Observable. If a `seed` value is specified, then
 * that value will be used as the initial value for the accumulator. If no seed
 * value is specified, the first item of the source is used as the seed.
 *
 * @example <caption>Count the number of click events</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var ones = clicks.mapTo(1);
 * var seed = 0;
 * var count = ones.scan((acc, one) => acc + one, seed);
 * count.subscribe(x => my_console_log(x));
 *
 * @see {@link expand}
 * @see {@link mergeScan}
 * @see {@link reduce}
 *
 * @param {function(acc: R, value: T, index: number): R} accumulator
 * The accumulator function called on each source value.
 * @param {T|R} [seed] The initial accumulation value.
 * @return {Observable<R>} An observable of the accumulated values.
 * @method scan
 * @owner Observable
 */
function scan(accumulator, seed) {
    if (arguments.length >= 2) {
        return operators_1.scan(accumulator, seed)(this);
    }
    return operators_1.scan(accumulator)(this);
}
exports.scan = scan;

},{"rxjs/operators":481}],229:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var operators_1 = require("rxjs/operators");
/**
 * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one
 * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will
 * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.
 *
 * This behaves similarly to .publish().refCount(), with a behavior difference when the source observable emits complete.
 * .publish().refCount() will not resubscribe to the original source, however .share() will resubscribe to the original source.
 * Observable.of("test").publish().refCount() will not re-emit "test" on new subscriptions, Observable.of("test").share() will
 * re-emit "test" to new subscriptions.
 *
 * <img src="./img/share.png" width="100%">
 *
 * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.
 * @method share
 * @owner Observable
 */
function share() {
    return operators_1.share()(this);
}
exports.share = share;

},{"rxjs/operators":481}],230:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var operators_1 = require("rxjs/operators");
/**
 * Returns an Observable that skips the first `count` items emitted by the source Observable.
 *
 * <img src="./img/skip.png" width="100%">
 *
 * @param {Number} count - The number of times, items emitted by source Observable should be skipped.
 * @return {Observable} An Observable that skips values emitted by the source Observable.
 *
 * @method skip
 * @owner Observable
 */
function skip(count) {
    return operators_1.skip(count)(this);
}
exports.skip = skip;

},{"rxjs/operators":481}],231:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var operators_1 = require("rxjs/operators");
/* tslint:enable:max-line-length */
/**
 * Returns an Observable that emits the items you specify as arguments before it begins to emit
 * items emitted by the source Observable.
 *
 * <img src="./img/startWith.png" width="100%">
 *
 * @param {...T} values - Items you want the modified Observable to emit first.
 * @param {Scheduler} [scheduler] - A {@link IScheduler} to use for scheduling
 * the emissions of the `next` notifications.
 * @return {Observable} An Observable that emits the items in the specified Iterable and then emits the items
 * emitted by the source Observable.
 * @method startWith
 * @owner Observable
 */
function startWith() {
    var array = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        array[_i] = arguments[_i];
    }
    return operators_1.startWith.apply(void 0, array)(this);
}
exports.startWith = startWith;

},{"rxjs/operators":481}],232:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var operators_1 = require("rxjs/operators");
/**
 * Projects each source value to an Observable which is merged in the output
 * Observable, emitting values only from the most recently projected Observable.
 *
 * <span class="informal">Maps each value to an Observable, then flattens all of
 * these inner Observables using {@link switch}.</span>
 *
 * <img src="./img/switchMap.png" width="100%">
 *
 * Returns an Observable that emits items based on applying a function that you
 * supply to each item emitted by the source Observable, where that function
 * returns an (so-called "inner") Observable. Each time it observes one of these
 * inner Observables, the output Observable begins emitting the items emitted by
 * that inner Observable. When a new inner Observable is emitted, `switchMap`
 * stops emitting items from the earlier-emitted inner Observable and begins
 * emitting items from the new one. It continues to behave like this for
 * subsequent inner Observables.
 *
 * @example <caption>Rerun an interval Observable on every click event</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));
 * result.subscribe(x => my_console_log(x));
 *
 * @see {@link concatMap}
 * @see {@link exhaustMap}
 * @see {@link mergeMap}
 * @see {@link switch}
 * @see {@link switchMapTo}
 *
 * @param {function(value: T, ?index: number): ObservableInput} project A function
 * that, when applied to an item emitted by the source Observable, returns an
 * Observable.
 * @return {Observable} An Observable that emits the result of applying the
 * projection function (and the optional `resultSelector`) to each item emitted
 * by the source Observable and taking only the values from the most recently
 * projected inner Observable.
 * @method switchMap
 * @owner Observable
 */
function switchMap(project) {
    return operators_1.switchMap(project)(this);
}
exports.switchMap = switchMap;

},{"rxjs/operators":481}],233:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var operators_1 = require("rxjs/operators");
/**
 * Emits only the first `count` values emitted by the source Observable.
 *
 * <span class="informal">Takes the first `count` values from the source, then
 * completes.</span>
 *
 * <img src="./img/take.png" width="100%">
 *
 * `take` returns an Observable that emits only the first `count` values emitted
 * by the source Observable. If the source emits fewer than `count` values then
 * all of its values are emitted. After that, it completes, regardless if the
 * source completes.
 *
 * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>
 * var interval = Rx.Observable.interval(1000);
 * var five = interval.take(5);
 * five.subscribe(x => my_console_log(x));
 *
 * @see {@link takeLast}
 * @see {@link takeUntil}
 * @see {@link takeWhile}
 * @see {@link skip}
 *
 * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an
 * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.
 *
 * @param {number} count The maximum number of `next` values to emit.
 * @return {Observable<T>} An Observable that emits only the first `count`
 * values emitted by the source Observable, or all of the values from the source
 * if the source emits fewer than `count` values.
 * @method take
 * @owner Observable
 */
function take(count) {
    return operators_1.take(count)(this);
}
exports.take = take;

},{"rxjs/operators":481}],234:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var operators_1 = require("rxjs/operators");
/**
 * Emits the values emitted by the source Observable until a `notifier`
 * Observable emits a value.
 *
 * <span class="informal">Lets values pass until a second Observable,
 * `notifier`, emits a value. Then, it completes.</span>
 *
 * <img src="./img/takeUntil.png" width="100%">
 *
 * `takeUntil` subscribes and begins mirroring the source Observable. It also
 * monitors a second Observable, `notifier` that you provide. If the `notifier`
 * emits a value, the output Observable stops mirroring the source Observable
 * and completes. If the `notifier` doesn't emit any value and completes
 * then `takeUntil` will pass all values.
 *
 * @example <caption>Tick every second until the first click happens</caption>
 * var interval = Rx.Observable.interval(1000);
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = interval.takeUntil(clicks);
 * result.subscribe(x => my_console_log(x));
 *
 * @see {@link take}
 * @see {@link takeLast}
 * @see {@link takeWhile}
 * @see {@link skip}
 *
 * @param {Observable} notifier The Observable whose first emitted value will
 * cause the output Observable of `takeUntil` to stop emitting values from the
 * source Observable.
 * @return {Observable<T>} An Observable that emits the values from the source
 * Observable until such time as `notifier` emits its first value.
 * @method takeUntil
 * @owner Observable
 */
function takeUntil(notifier) {
    return operators_1.takeUntil(notifier)(this);
}
exports.takeUntil = takeUntil;

},{"rxjs/operators":481}],235:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var rxjs_1 = require("rxjs");
var operators_1 = require("rxjs/operators");
/**
 *
 * Errors if Observable does not emit a value in given time span.
 *
 * <span class="informal">Timeouts on Observable that doesn't emit values fast enough.</span>
 *
 * <img src="./img/timeout.png" width="100%">
 *
 * `timeout` operator accepts as an argument either a number or a Date.
 *
 * If number was provided, it returns an Observable that behaves like a source
 * Observable, unless there is a period of time where there is no value emitted.
 * So if you provide `100` as argument and first value comes after 50ms from
 * the moment of subscription, this value will be simply re-emitted by the resulting
 * Observable. If however after that 100ms passes without a second value being emitted,
 * stream will end with an error and source Observable will be unsubscribed.
 * These checks are performed throughout whole lifecycle of Observable - from the moment
 * it was subscribed to, until it completes or errors itself. Thus every value must be
 * emitted within specified period since previous value.
 *
 * If provided argument was Date, returned Observable behaves differently. It throws
 * if Observable did not complete before provided Date. This means that periods between
 * emission of particular values do not matter in this case. If Observable did not complete
 * before provided Date, source Observable will be unsubscribed. Other than that, resulting
 * stream behaves just as source Observable.
 *
 * `timeout` accepts also a Scheduler as a second parameter. It is used to schedule moment (or moments)
 * when returned Observable will check if source stream emitted value or completed.
 *
 * @example <caption>Check if ticks are emitted within certain timespan</caption>
 * const seconds = Rx.Observable.interval(1000);
 *
 * seconds.timeout(1100) // Let's use bigger timespan to be safe,
 *                       // since `interval` might fire a bit later then scheduled.
 * .subscribe(
 *     value => my_console_log(value), // Will emit numbers just as regular `interval` would.
 *     err => my_console_log(err) // Will never be called.
 * );
 *
 * seconds.timeout(900).subscribe(
 *     value => my_console_log(value), // Will never be called.
 *     err => my_console_log(err) // Will emit error before even first value is emitted,
 *                             // since it did not arrive within 900ms period.
 * );
 *
 * @example <caption>Use Date to check if Observable completed</caption>
 * const seconds = Rx.Observable.interval(1000);
 *
 * seconds.timeout(new Date("December 17, 2020 03:24:00"))
 * .subscribe(
 *     value => my_console_log(value), // Will emit values as regular `interval` would
 *                                  // until December 17, 2020 at 03:24:00.
 *     err => my_console_log(err) // On December 17, 2020 at 03:24:00 it will emit an error,
 *                             // since Observable did not complete by then.
 * );
 *
 * @see {@link timeoutWith}
 *
 * @param {number|Date} due Number specifying period within which Observable must emit values
 *                          or Date specifying before when Observable should complete
 * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.
 * @return {Observable<T>} Observable that mirrors behaviour of source, unless timeout checks fail.
 * @method timeout
 * @owner Observable
 */
function timeout(due, scheduler) {
    if (scheduler === void 0) { scheduler = rxjs_1.asyncScheduler; }
    return operators_1.timeout(due, scheduler)(this);
}
exports.timeout = timeout;

},{"rxjs":281,"rxjs/operators":481}],236:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var operators_1 = require("rxjs/operators");
/* tslint:enable:max-line-length */
/**
 * Combines the source Observable with other Observables to create an Observable
 * whose values are calculated from the latest values of each, only when the
 * source emits.
 *
 * <span class="informal">Whenever the source Observable emits a value, it
 * computes a formula using that value plus the latest values from other input
 * Observables, then emits the output of that formula.</span>
 *
 * <img src="./img/withLatestFrom.png" width="100%">
 *
 * `withLatestFrom` combines each value from the source Observable (the
 * instance) with the latest values from the other input Observables only when
 * the source emits a value, optionally using a `project` function to determine
 * the value to be emitted on the output Observable. All input Observables must
 * emit at least one value before the output Observable will emit a value.
 *
 * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var timer = Rx.Observable.interval(1000);
 * var result = clicks.withLatestFrom(timer);
 * result.subscribe(x => my_console_log(x));
 *
 * @see {@link combineLatest}
 *
 * @param {ObservableInput} other An input Observable to combine with the source
 * Observable. More than one input Observables may be given as argument.
 * @param {Function} [project] Projection function for combining values
 * together. Receives all values in order of the Observables passed, where the
 * first parameter is a value from the source Observable. (e.g.
 * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not
 * passed, arrays will be emitted on the output Observable.
 * @return {Observable} An Observable of projected values from the most recent
 * values from each input Observable, or an array of the most recent values from
 * each input Observable.
 * @method withLatestFrom
 * @owner Observable
 */
function withLatestFrom() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    return operators_1.withLatestFrom.apply(void 0, args)(this);
}
exports.withLatestFrom = withLatestFrom;

},{"rxjs/operators":481}],237:[function(require,module,exports){
"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(require("rxjs-compat/Observable"));

},{"rxjs-compat/Observable":166}],238:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("rxjs-compat/add/observable/bindCallback");

},{"rxjs-compat/add/observable/bindCallback":167}],239:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("rxjs-compat/add/observable/dom/ajax");

},{"rxjs-compat/add/observable/dom/ajax":168}],240:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("rxjs-compat/add/observable/empty");

},{"rxjs-compat/add/observable/empty":169}],241:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("rxjs-compat/add/observable/from");

},{"rxjs-compat/add/observable/from":170}],242:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("rxjs-compat/add/observable/fromEvent");

},{"rxjs-compat/add/observable/fromEvent":171}],243:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("rxjs-compat/add/observable/fromEventPattern");

},{"rxjs-compat/add/observable/fromEventPattern":172}],244:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("rxjs-compat/add/observable/fromPromise");

},{"rxjs-compat/add/observable/fromPromise":173}],245:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("rxjs-compat/add/observable/interval");

},{"rxjs-compat/add/observable/interval":174}],246:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("rxjs-compat/add/observable/merge");

},{"rxjs-compat/add/observable/merge":175}],247:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("rxjs-compat/add/observable/never");

},{"rxjs-compat/add/observable/never":176}],248:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("rxjs-compat/add/observable/of");

},{"rxjs-compat/add/observable/of":177}],249:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("rxjs-compat/add/observable/throw");

},{"rxjs-compat/add/observable/throw":178}],250:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("rxjs-compat/add/observable/timer");

},{"rxjs-compat/add/observable/timer":179}],251:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("rxjs-compat/add/operator/buffer");

},{"rxjs-compat/add/operator/buffer":180}],252:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("rxjs-compat/add/operator/bufferCount");

},{"rxjs-compat/add/operator/bufferCount":181}],253:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("rxjs-compat/add/operator/catch");

},{"rxjs-compat/add/operator/catch":182}],254:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("rxjs-compat/add/operator/concatAll");

},{"rxjs-compat/add/operator/concatAll":183}],255:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("rxjs-compat/add/operator/concatMap");

},{"rxjs-compat/add/operator/concatMap":184}],256:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("rxjs-compat/add/operator/defaultIfEmpty");

},{"rxjs-compat/add/operator/defaultIfEmpty":185}],257:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("rxjs-compat/add/operator/distinctUntilChanged");

},{"rxjs-compat/add/operator/distinctUntilChanged":186}],258:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("rxjs-compat/add/operator/distinctUntilKeyChanged");

},{"rxjs-compat/add/operator/distinctUntilKeyChanged":187}],259:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("rxjs-compat/add/operator/do");

},{"rxjs-compat/add/operator/do":188}],260:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("rxjs-compat/add/operator/filter");

},{"rxjs-compat/add/operator/filter":189}],261:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("rxjs-compat/add/operator/find");

},{"rxjs-compat/add/operator/find":190}],262:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("rxjs-compat/add/operator/first");

},{"rxjs-compat/add/operator/first":191}],263:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("rxjs-compat/add/operator/map");

},{"rxjs-compat/add/operator/map":192}],264:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("rxjs-compat/add/operator/mapTo");

},{"rxjs-compat/add/operator/mapTo":193}],265:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("rxjs-compat/add/operator/merge");

},{"rxjs-compat/add/operator/merge":194}],266:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("rxjs-compat/add/operator/mergeMap");

},{"rxjs-compat/add/operator/mergeMap":195}],267:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("rxjs-compat/add/operator/multicast");

},{"rxjs-compat/add/operator/multicast":196}],268:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("rxjs-compat/add/operator/pairwise");

},{"rxjs-compat/add/operator/pairwise":197}],269:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("rxjs-compat/add/operator/retry");

},{"rxjs-compat/add/operator/retry":198}],270:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("rxjs-compat/add/operator/scan");

},{"rxjs-compat/add/operator/scan":199}],271:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("rxjs-compat/add/operator/share");

},{"rxjs-compat/add/operator/share":200}],272:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("rxjs-compat/add/operator/skip");

},{"rxjs-compat/add/operator/skip":201}],273:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("rxjs-compat/add/operator/startWith");

},{"rxjs-compat/add/operator/startWith":202}],274:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("rxjs-compat/add/operator/switchMap");

},{"rxjs-compat/add/operator/switchMap":203}],275:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("rxjs-compat/add/operator/take");

},{"rxjs-compat/add/operator/take":204}],276:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("rxjs-compat/add/operator/takeUntil");

},{"rxjs-compat/add/operator/takeUntil":205}],277:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("rxjs-compat/add/operator/timeout");

},{"rxjs-compat/add/operator/timeout":206}],278:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("rxjs-compat/add/operator/toPromise");

},{"rxjs-compat/add/operator/toPromise":207}],279:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("rxjs-compat/add/operator/withLatestFrom");

},{"rxjs-compat/add/operator/withLatestFrom":208}],280:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ajax_1 = require("../internal/observable/dom/ajax");
exports.ajax = ajax_1.ajax;
var AjaxObservable_1 = require("../internal/observable/dom/AjaxObservable");
exports.AjaxResponse = AjaxObservable_1.AjaxResponse;
exports.AjaxError = AjaxObservable_1.AjaxError;
exports.AjaxTimeoutError = AjaxObservable_1.AjaxTimeoutError;

},{"../internal/observable/dom/AjaxObservable":303,"../internal/observable/dom/ajax":304}],281:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* Observable */
var Observable_1 = require("./internal/Observable");
exports.Observable = Observable_1.Observable;
var ConnectableObservable_1 = require("./internal/observable/ConnectableObservable");
exports.ConnectableObservable = ConnectableObservable_1.ConnectableObservable;
var groupBy_1 = require("./internal/operators/groupBy");
exports.GroupedObservable = groupBy_1.GroupedObservable;
var observable_1 = require("./internal/symbol/observable");
exports.observable = observable_1.observable;
/* Subjects */
var Subject_1 = require("./internal/Subject");
exports.Subject = Subject_1.Subject;
var BehaviorSubject_1 = require("./internal/BehaviorSubject");
exports.BehaviorSubject = BehaviorSubject_1.BehaviorSubject;
var ReplaySubject_1 = require("./internal/ReplaySubject");
exports.ReplaySubject = ReplaySubject_1.ReplaySubject;
var AsyncSubject_1 = require("./internal/AsyncSubject");
exports.AsyncSubject = AsyncSubject_1.AsyncSubject;
/* Schedulers */
var asap_1 = require("./internal/scheduler/asap");
exports.asapScheduler = asap_1.asap;
var async_1 = require("./internal/scheduler/async");
exports.asyncScheduler = async_1.async;
var queue_1 = require("./internal/scheduler/queue");
exports.queueScheduler = queue_1.queue;
var animationFrame_1 = require("./internal/scheduler/animationFrame");
exports.animationFrameScheduler = animationFrame_1.animationFrame;
var VirtualTimeScheduler_1 = require("./internal/scheduler/VirtualTimeScheduler");
exports.VirtualTimeScheduler = VirtualTimeScheduler_1.VirtualTimeScheduler;
exports.VirtualAction = VirtualTimeScheduler_1.VirtualAction;
var Scheduler_1 = require("./internal/Scheduler");
exports.Scheduler = Scheduler_1.Scheduler;
/* Subscription */
var Subscription_1 = require("./internal/Subscription");
exports.Subscription = Subscription_1.Subscription;
var Subscriber_1 = require("./internal/Subscriber");
exports.Subscriber = Subscriber_1.Subscriber;
/* Notification */
var Notification_1 = require("./internal/Notification");
exports.Notification = Notification_1.Notification;
/* Utils */
var pipe_1 = require("./internal/util/pipe");
exports.pipe = pipe_1.pipe;
var noop_1 = require("./internal/util/noop");
exports.noop = noop_1.noop;
var identity_1 = require("./internal/util/identity");
exports.identity = identity_1.identity;
var isObservable_1 = require("./internal/util/isObservable");
exports.isObservable = isObservable_1.isObservable;
/* Error types */
var ArgumentOutOfRangeError_1 = require("./internal/util/ArgumentOutOfRangeError");
exports.ArgumentOutOfRangeError = ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;
var EmptyError_1 = require("./internal/util/EmptyError");
exports.EmptyError = EmptyError_1.EmptyError;
var ObjectUnsubscribedError_1 = require("./internal/util/ObjectUnsubscribedError");
exports.ObjectUnsubscribedError = ObjectUnsubscribedError_1.ObjectUnsubscribedError;
var UnsubscriptionError_1 = require("./internal/util/UnsubscriptionError");
exports.UnsubscriptionError = UnsubscriptionError_1.UnsubscriptionError;
var TimeoutError_1 = require("./internal/util/TimeoutError");
exports.TimeoutError = TimeoutError_1.TimeoutError;
/* Static observable creation exports */
var bindCallback_1 = require("./internal/observable/bindCallback");
exports.bindCallback = bindCallback_1.bindCallback;
var bindNodeCallback_1 = require("./internal/observable/bindNodeCallback");
exports.bindNodeCallback = bindNodeCallback_1.bindNodeCallback;
var combineLatest_1 = require("./internal/observable/combineLatest");
exports.combineLatest = combineLatest_1.combineLatest;
var concat_1 = require("./internal/observable/concat");
exports.concat = concat_1.concat;
var defer_1 = require("./internal/observable/defer");
exports.defer = defer_1.defer;
var empty_1 = require("./internal/observable/empty");
exports.empty = empty_1.empty;
var forkJoin_1 = require("./internal/observable/forkJoin");
exports.forkJoin = forkJoin_1.forkJoin;
var from_1 = require("./internal/observable/from");
exports.from = from_1.from;
var fromEvent_1 = require("./internal/observable/fromEvent");
exports.fromEvent = fromEvent_1.fromEvent;
var fromEventPattern_1 = require("./internal/observable/fromEventPattern");
exports.fromEventPattern = fromEventPattern_1.fromEventPattern;
var generate_1 = require("./internal/observable/generate");
exports.generate = generate_1.generate;
var iif_1 = require("./internal/observable/iif");
exports.iif = iif_1.iif;
var interval_1 = require("./internal/observable/interval");
exports.interval = interval_1.interval;
var merge_1 = require("./internal/observable/merge");
exports.merge = merge_1.merge;
var never_1 = require("./internal/observable/never");
exports.never = never_1.never;
var of_1 = require("./internal/observable/of");
exports.of = of_1.of;
var onErrorResumeNext_1 = require("./internal/observable/onErrorResumeNext");
exports.onErrorResumeNext = onErrorResumeNext_1.onErrorResumeNext;
var pairs_1 = require("./internal/observable/pairs");
exports.pairs = pairs_1.pairs;
var race_1 = require("./internal/observable/race");
exports.race = race_1.race;
var range_1 = require("./internal/observable/range");
exports.range = range_1.range;
var throwError_1 = require("./internal/observable/throwError");
exports.throwError = throwError_1.throwError;
var timer_1 = require("./internal/observable/timer");
exports.timer = timer_1.timer;
var using_1 = require("./internal/observable/using");
exports.using = using_1.using;
var zip_1 = require("./internal/observable/zip");
exports.zip = zip_1.zip;
/* Constants */
var empty_2 = require("./internal/observable/empty");
exports.EMPTY = empty_2.EMPTY;
var never_2 = require("./internal/observable/never");
exports.NEVER = never_2.NEVER;
/* Config */
var config_1 = require("./internal/config");
exports.config = config_1.config;

},{"./internal/AsyncSubject":282,"./internal/BehaviorSubject":283,"./internal/Notification":285,"./internal/Observable":286,"./internal/ReplaySubject":289,"./internal/Scheduler":290,"./internal/Subject":291,"./internal/Subscriber":293,"./internal/Subscription":294,"./internal/config":295,"./internal/observable/ConnectableObservable":296,"./internal/observable/bindCallback":298,"./internal/observable/bindNodeCallback":299,"./internal/observable/combineLatest":300,"./internal/observable/concat":301,"./internal/observable/defer":302,"./internal/observable/empty":305,"./internal/observable/forkJoin":306,"./internal/observable/from":307,"./internal/observable/fromEvent":309,"./internal/observable/fromEventPattern":310,"./internal/observable/generate":314,"./internal/observable/iif":315,"./internal/observable/interval":316,"./internal/observable/merge":317,"./internal/observable/never":318,"./internal/observable/of":319,"./internal/observable/onErrorResumeNext":320,"./internal/observable/pairs":321,"./internal/observable/race":322,"./internal/observable/range":323,"./internal/observable/throwError":325,"./internal/observable/timer":326,"./internal/observable/using":327,"./internal/observable/zip":328,"./internal/operators/groupBy":364,"./internal/scheduler/VirtualTimeScheduler":441,"./internal/scheduler/animationFrame":442,"./internal/scheduler/asap":443,"./internal/scheduler/async":444,"./internal/scheduler/queue":445,"./internal/symbol/observable":447,"./internal/util/ArgumentOutOfRangeError":449,"./internal/util/EmptyError":450,"./internal/util/ObjectUnsubscribedError":452,"./internal/util/TimeoutError":453,"./internal/util/UnsubscriptionError":454,"./internal/util/identity":457,"./internal/util/isObservable":466,"./internal/util/noop":469,"./internal/util/pipe":471}],282:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Subject_1 = require("./Subject");
var Subscription_1 = require("./Subscription");
/**
 * @class AsyncSubject<T>
 */
var AsyncSubject = /** @class */ (function (_super) {
    __extends(AsyncSubject, _super);
    function AsyncSubject() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.value = null;
        _this.hasNext = false;
        _this.hasCompleted = false;
        return _this;
    }
    /** @deprecated This is an internal implementation detail, do not use. */
    AsyncSubject.prototype._subscribe = function (subscriber) {
        if (this.hasError) {
            subscriber.error(this.thrownError);
            return Subscription_1.Subscription.EMPTY;
        }
        else if (this.hasCompleted && this.hasNext) {
            subscriber.next(this.value);
            subscriber.complete();
            return Subscription_1.Subscription.EMPTY;
        }
        return _super.prototype._subscribe.call(this, subscriber);
    };
    AsyncSubject.prototype.next = function (value) {
        if (!this.hasCompleted) {
            this.value = value;
            this.hasNext = true;
        }
    };
    AsyncSubject.prototype.error = function (error) {
        if (!this.hasCompleted) {
            _super.prototype.error.call(this, error);
        }
    };
    AsyncSubject.prototype.complete = function () {
        this.hasCompleted = true;
        if (this.hasNext) {
            _super.prototype.next.call(this, this.value);
        }
        _super.prototype.complete.call(this);
    };
    return AsyncSubject;
}(Subject_1.Subject));
exports.AsyncSubject = AsyncSubject;

},{"./Subject":291,"./Subscription":294}],283:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Subject_1 = require("./Subject");
var ObjectUnsubscribedError_1 = require("./util/ObjectUnsubscribedError");
/**
 * @class BehaviorSubject<T>
 */
var BehaviorSubject = /** @class */ (function (_super) {
    __extends(BehaviorSubject, _super);
    function BehaviorSubject(_value) {
        var _this = _super.call(this) || this;
        _this._value = _value;
        return _this;
    }
    Object.defineProperty(BehaviorSubject.prototype, "value", {
        get: function () {
            return this.getValue();
        },
        enumerable: true,
        configurable: true
    });
    /** @deprecated This is an internal implementation detail, do not use. */
    BehaviorSubject.prototype._subscribe = function (subscriber) {
        var subscription = _super.prototype._subscribe.call(this, subscriber);
        if (subscription && !subscription.closed) {
            subscriber.next(this._value);
        }
        return subscription;
    };
    BehaviorSubject.prototype.getValue = function () {
        if (this.hasError) {
            throw this.thrownError;
        }
        else if (this.closed) {
            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
        }
        else {
            return this._value;
        }
    };
    BehaviorSubject.prototype.next = function (value) {
        _super.prototype.next.call(this, this._value = value);
    };
    return BehaviorSubject;
}(Subject_1.Subject));
exports.BehaviorSubject = BehaviorSubject;

},{"./Subject":291,"./util/ObjectUnsubscribedError":452}],284:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Subscriber_1 = require("./Subscriber");
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var InnerSubscriber = /** @class */ (function (_super) {
    __extends(InnerSubscriber, _super);
    function InnerSubscriber(parent, outerValue, outerIndex) {
        var _this = _super.call(this) || this;
        _this.parent = parent;
        _this.outerValue = outerValue;
        _this.outerIndex = outerIndex;
        _this.index = 0;
        return _this;
    }
    InnerSubscriber.prototype._next = function (value) {
        this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);
    };
    InnerSubscriber.prototype._error = function (error) {
        this.parent.notifyError(error, this);
        this.unsubscribe();
    };
    InnerSubscriber.prototype._complete = function () {
        this.parent.notifyComplete(this);
        this.unsubscribe();
    };
    return InnerSubscriber;
}(Subscriber_1.Subscriber));
exports.InnerSubscriber = InnerSubscriber;

},{"./Subscriber":293}],285:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var empty_1 = require("./observable/empty");
var of_1 = require("./observable/of");
var throwError_1 = require("./observable/throwError");
/**
 * Represents a push-based event or value that an {@link Observable} can emit.
 * This class is particularly useful for operators that manage notifications,
 * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and
 * others. Besides wrapping the actual delivered value, it also annotates it
 * with metadata of, for instance, what type of push message it is (`next`,
 * `error`, or `complete`).
 *
 * @see {@link materialize}
 * @see {@link dematerialize}
 * @see {@link observeOn}
 *
 * @class Notification<T>
 */
var Notification = /** @class */ (function () {
    function Notification(kind, value, error) {
        this.kind = kind;
        this.value = value;
        this.error = error;
        this.hasValue = kind === 'N';
    }
    /**
     * Delivers to the given `observer` the value wrapped by this Notification.
     * @param {Observer} observer
     * @return
     */
    Notification.prototype.observe = function (observer) {
        switch (this.kind) {
            case 'N':
                return observer.next && observer.next(this.value);
            case 'E':
                return observer.error && observer.error(this.error);
            case 'C':
                return observer.complete && observer.complete();
        }
    };
    /**
     * Given some {@link Observer} callbacks, deliver the value represented by the
     * current Notification to the correctly corresponding callback.
     * @param {function(value: T): void} next An Observer `next` callback.
     * @param {function(err: any): void} [error] An Observer `error` callback.
     * @param {function(): void} [complete] An Observer `complete` callback.
     * @return {any}
     */
    Notification.prototype.do = function (next, error, complete) {
        var kind = this.kind;
        switch (kind) {
            case 'N':
                return next && next(this.value);
            case 'E':
                return error && error(this.error);
            case 'C':
                return complete && complete();
        }
    };
    /**
     * Takes an Observer or its individual callback functions, and calls `observe`
     * or `do` methods accordingly.
     * @param {Observer|function(value: T): void} nextOrObserver An Observer or
     * the `next` callback.
     * @param {function(err: any): void} [error] An Observer `error` callback.
     * @param {function(): void} [complete] An Observer `complete` callback.
     * @return {any}
     */
    Notification.prototype.accept = function (nextOrObserver, error, complete) {
        if (nextOrObserver && typeof nextOrObserver.next === 'function') {
            return this.observe(nextOrObserver);
        }
        else {
            return this.do(nextOrObserver, error, complete);
        }
    };
    /**
     * Returns a simple Observable that just delivers the notification represented
     * by this Notification instance.
     * @return {any}
     */
    Notification.prototype.toObservable = function () {
        var kind = this.kind;
        switch (kind) {
            case 'N':
                return of_1.of(this.value);
            case 'E':
                return throwError_1.throwError(this.error);
            case 'C':
                return empty_1.empty();
        }
        throw new Error('unexpected notification kind value');
    };
    /**
     * A shortcut to create a Notification instance of the type `next` from a
     * given value.
     * @param {T} value The `next` value.
     * @return {Notification<T>} The "next" Notification representing the
     * argument.
     * @nocollapse
     */
    Notification.createNext = function (value) {
        if (typeof value !== 'undefined') {
            return new Notification('N', value);
        }
        return Notification.undefinedValueNotification;
    };
    /**
     * A shortcut to create a Notification instance of the type `error` from a
     * given error.
     * @param {any} [err] The `error` error.
     * @return {Notification<T>} The "error" Notification representing the
     * argument.
     * @nocollapse
     */
    Notification.createError = function (err) {
        return new Notification('E', undefined, err);
    };
    /**
     * A shortcut to create a Notification instance of the type `complete`.
     * @return {Notification<any>} The valueless "complete" Notification.
     * @nocollapse
     */
    Notification.createComplete = function () {
        return Notification.completeNotification;
    };
    Notification.completeNotification = new Notification('C');
    Notification.undefinedValueNotification = new Notification('N', undefined);
    return Notification;
}());
exports.Notification = Notification;

},{"./observable/empty":305,"./observable/of":319,"./observable/throwError":325}],286:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var toSubscriber_1 = require("./util/toSubscriber");
var observable_1 = require("../internal/symbol/observable");
var pipe_1 = require("./util/pipe");
var config_1 = require("./config");
/**
 * A representation of any set of values over any amount of time. This is the most basic building block
 * of RxJS.
 *
 * @class Observable<T>
 */
var Observable = /** @class */ (function () {
    /**
     * @constructor
     * @param {Function} subscribe the function that is called when the Observable is
     * initially subscribed to. This function is given a Subscriber, to which new values
     * can be `next`ed, or an `error` method can be called to raise an error, or
     * `complete` can be called to notify of a successful completion.
     */
    function Observable(subscribe) {
        /** Internal implementation detail, do not use directly. */
        this._isScalar = false;
        if (subscribe) {
            this._subscribe = subscribe;
        }
    }
    /**
     * Creates a new Observable, with this Observable as the source, and the passed
     * operator defined as the new observable's operator.
     * @method lift
     * @param {Operator} operator the operator defining the operation to take on the observable
     * @return {Observable} a new observable with the Operator applied
     */
    Observable.prototype.lift = function (operator) {
        var observable = new Observable();
        observable.source = this;
        observable.operator = operator;
        return observable;
    };
    /**
     * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.
     *
     * <span class="informal">Use it when you have all these Observables, but still nothing is happening.</span>
     *
     * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It
     * might be for example a function that you passed to a {@link create} static factory, but most of the time it is
     * a library implementation, which defines what and when will be emitted by an Observable. This means that calling
     * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often
     * thought.
     *
     * Apart from starting the execution of an Observable, this method allows you to listen for values
     * that an Observable emits, as well as for when it completes or errors. You can achieve this in two
     * following ways.
     *
     * The first way is creating an object that implements {@link Observer} interface. It should have methods
     * defined by that interface, but note that it should be just a regular JavaScript object, which you can create
     * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do
     * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also
     * that your object does not have to implement all methods. If you find yourself creating a method that doesn't
     * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will
     * be left uncaught.
     *
     * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.
     * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent
     * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,
     * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,
     * since `subscribe` recognizes these functions by where they were placed in function call. When it comes
     * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.
     *
     * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.
     * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean
     * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback
     * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.
     *
     * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.
     * It is an Observable itself that decides when these functions will be called. For example {@link of}
     * by default emits all its values synchronously. Always check documentation for how given Observable
     * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.
     *
     * @example <caption>Subscribe with an Observer</caption>
     * const sumObserver = {
     *   sum: 0,
     *   next(value) {
     *     my_console_log('Adding: ' + value);
     *     this.sum = this.sum + value;
     *   },
     *   error() { // We actually could just remove this method,
     *   },        // since we do not really care about errors right now.
     *   complete() {
     *     my_console_log('Sum equals: ' + this.sum);
     *   }
     * };
     *
     * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.
     * .subscribe(sumObserver);
     *
     * // Logs:
     * // "Adding: 1"
     * // "Adding: 2"
     * // "Adding: 3"
     * // "Sum equals: 6"
     *
     *
     * @example <caption>Subscribe with functions</caption>
     * let sum = 0;
     *
     * Rx.Observable.of(1, 2, 3)
     * .subscribe(
     *   function(value) {
     *     my_console_log('Adding: ' + value);
     *     sum = sum + value;
     *   },
     *   undefined,
     *   function() {
     *     my_console_log('Sum equals: ' + sum);
     *   }
     * );
     *
     * // Logs:
     * // "Adding: 1"
     * // "Adding: 2"
     * // "Adding: 3"
     * // "Sum equals: 6"
     *
     *
     * @example <caption>Cancel a subscription</caption>
     * const subscription = Rx.Observable.interval(1000).subscribe(
     *   num => my_console_log(num),
     *   undefined,
     *   () => my_console_log('completed!') // Will not be called, even
     * );                                // when cancelling subscription
     *
     *
     * setTimeout(() => {
     *   subscription.unsubscribe();
     *   my_console_log('unsubscribed!');
     * }, 2500);
     *
     * // Logs:
     * // 0 after 1s
     * // 1 after 2s
     * // "unsubscribed!" after 2.5s
     *
     *
     * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,
     *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed
     *  Observable.
     * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,
     *  the error will be thrown as unhandled.
     * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.
     * @return {ISubscription} a subscription reference to the registered handlers
     * @method subscribe
     */
    Observable.prototype.subscribe = function (observerOrNext, error, complete) {
        var operator = this.operator;
        var sink = toSubscriber_1.toSubscriber(observerOrNext, error, complete);
        if (operator) {
            operator.call(sink, this.source);
        }
        else {
            sink.add(this.source || !sink.syncErrorThrowable ? this._subscribe(sink) : this._trySubscribe(sink));
        }
        if (config_1.config.useDeprecatedSynchronousErrorHandling) {
            if (sink.syncErrorThrowable) {
                sink.syncErrorThrowable = false;
                if (sink.syncErrorThrown) {
                    throw sink.syncErrorValue;
                }
            }
        }
        return sink;
    };
    /** @deprecated This is an internal implementation detail, do not use. */
    Observable.prototype._trySubscribe = function (sink) {
        try {
            return this._subscribe(sink);
        }
        catch (err) {
            if (config_1.config.useDeprecatedSynchronousErrorHandling) {
                sink.syncErrorThrown = true;
                sink.syncErrorValue = err;
            }
            sink.error(err);
        }
    };
    /**
     * @method forEach
     * @param {Function} next a handler for each value emitted by the observable
     * @param {PromiseConstructor} [promiseCtor] a constructor function used to instantiate the Promise
     * @return {Promise} a promise that either resolves on observable completion or
     *  rejects with the handled error
     */
    Observable.prototype.forEach = function (next, promiseCtor) {
        var _this = this;
        promiseCtor = getPromiseCtor(promiseCtor);
        return new promiseCtor(function (resolve, reject) {
            // Must be declared in a separate statement to avoid a RefernceError when
            // accessing subscription below in the closure due to Temporal Dead Zone.
            var subscription;
            subscription = _this.subscribe(function (value) {
                try {
                    next(value);
                }
                catch (err) {
                    reject(err);
                    if (subscription) {
                        subscription.unsubscribe();
                    }
                }
            }, reject, resolve);
        });
    };
    /** @deprecated This is an internal implementation detail, do not use. */
    Observable.prototype._subscribe = function (subscriber) {
        var source = this.source;
        return source && source.subscribe(subscriber);
    };
    /**
     * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable
     * @method Symbol.observable
     * @return {Observable} this instance of the observable
     */
    Observable.prototype[observable_1.observable] = function () {
        return this;
    };
    /* tslint:enable:max-line-length */
    /**
     * Used to stitch together functional operators into a chain.
     * @method pipe
     * @return {Observable} the Observable result of all of the operators having
     * been called in the order they were passed in.
     *
     * @example
     *
     * import { map, filter, scan } from 'rxjs/operators';
     *
     * Rx.Observable.interval(1000)
     *   .pipe(
     *     filter(x => x % 2 === 0),
     *     map(x => x + x),
     *     scan((acc, x) => acc + x)
     *   )
     *   .subscribe(x => my_console_log(x))
     */
    Observable.prototype.pipe = function () {
        var operations = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            operations[_i] = arguments[_i];
        }
        if (operations.length === 0) {
            return this;
        }
        return pipe_1.pipeFromArray(operations)(this);
    };
    /* tslint:enable:max-line-length */
    Observable.prototype.toPromise = function (promiseCtor) {
        var _this = this;
        promiseCtor = getPromiseCtor(promiseCtor);
        return new promiseCtor(function (resolve, reject) {
            var value;
            _this.subscribe(function (x) { return value = x; }, function (err) { return reject(err); }, function () { return resolve(value); });
        });
    };
    // HACK: Since TypeScript inherits static properties too, we have to
    // fight against TypeScript here so Subject can have a different static create signature
    /**
     * Creates a new cold Observable by calling the Observable constructor
     * @static true
     * @owner Observable
     * @method create
     * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor
     * @return {Observable} a new cold observable
     * @nocollapse
     */
    Observable.create = function (subscribe) {
        return new Observable(subscribe);
    };
    return Observable;
}());
exports.Observable = Observable;
/**
 * Decides between a passed promise constructor from consuming code,
 * A default configured promise constructor, and the native promise
 * constructor and returns it. If nothing can be found, it will throw
 * an error.
 * @param promiseCtor The optional promise constructor to passed by consuming code
 */
function getPromiseCtor(promiseCtor) {
    if (!promiseCtor) {
        promiseCtor = config_1.config.Promise || Promise;
    }
    if (!promiseCtor) {
        throw new Error('no Promise impl found');
    }
    return promiseCtor;
}

},{"../internal/symbol/observable":447,"./config":295,"./util/pipe":471,"./util/toSubscriber":479}],287:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var config_1 = require("./config");
var hostReportError_1 = require("./util/hostReportError");
exports.empty = {
    closed: true,
    next: function (value) { },
    error: function (err) {
        if (config_1.config.useDeprecatedSynchronousErrorHandling) {
            throw err;
        }
        else {
            hostReportError_1.hostReportError(err);
        }
    },
    complete: function () { }
};

},{"./config":295,"./util/hostReportError":456}],288:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Subscriber_1 = require("./Subscriber");
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var OuterSubscriber = /** @class */ (function (_super) {
    __extends(OuterSubscriber, _super);
    function OuterSubscriber() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    OuterSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.destination.next(innerValue);
    };
    OuterSubscriber.prototype.notifyError = function (error, innerSub) {
        this.destination.error(error);
    };
    OuterSubscriber.prototype.notifyComplete = function (innerSub) {
        this.destination.complete();
    };
    return OuterSubscriber;
}(Subscriber_1.Subscriber));
exports.OuterSubscriber = OuterSubscriber;

},{"./Subscriber":293}],289:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Subject_1 = require("./Subject");
var queue_1 = require("./scheduler/queue");
var Subscription_1 = require("./Subscription");
var observeOn_1 = require("./operators/observeOn");
var ObjectUnsubscribedError_1 = require("./util/ObjectUnsubscribedError");
var SubjectSubscription_1 = require("./SubjectSubscription");
/**
 * @class ReplaySubject<T>
 */
var ReplaySubject = /** @class */ (function (_super) {
    __extends(ReplaySubject, _super);
    function ReplaySubject(bufferSize, windowTime, scheduler) {
        if (bufferSize === void 0) { bufferSize = Number.POSITIVE_INFINITY; }
        if (windowTime === void 0) { windowTime = Number.POSITIVE_INFINITY; }
        var _this = _super.call(this) || this;
        _this.scheduler = scheduler;
        _this._events = [];
        _this._infiniteTimeWindow = false;
        _this._bufferSize = bufferSize < 1 ? 1 : bufferSize;
        _this._windowTime = windowTime < 1 ? 1 : windowTime;
        if (windowTime === Number.POSITIVE_INFINITY) {
            _this._infiniteTimeWindow = true;
            _this.next = _this.nextInfiniteTimeWindow;
        }
        else {
            _this.next = _this.nextTimeWindow;
        }
        return _this;
    }
    ReplaySubject.prototype.nextInfiniteTimeWindow = function (value) {
        var _events = this._events;
        _events.push(value);
        // Since this method is invoked in every next() call than the buffer
        // can overgrow the max size only by one item
        if (_events.length > this._bufferSize) {
            _events.shift();
        }
        _super.prototype.next.call(this, value);
    };
    ReplaySubject.prototype.nextTimeWindow = function (value) {
        this._events.push(new ReplayEvent(this._getNow(), value));
        this._trimBufferThenGetEvents();
        _super.prototype.next.call(this, value);
    };
    /** @deprecated This is an internal implementation detail, do not use. */
    ReplaySubject.prototype._subscribe = function (subscriber) {
        // When `_infiniteTimeWindow === true` then the buffer is already trimmed
        var _infiniteTimeWindow = this._infiniteTimeWindow;
        var _events = _infiniteTimeWindow ? this._events : this._trimBufferThenGetEvents();
        var scheduler = this.scheduler;
        var len = _events.length;
        var subscription;
        if (this.closed) {
            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
        }
        else if (this.isStopped || this.hasError) {
            subscription = Subscription_1.Subscription.EMPTY;
        }
        else {
            this.observers.push(subscriber);
            subscription = new SubjectSubscription_1.SubjectSubscription(this, subscriber);
        }
        if (scheduler) {
            subscriber.add(subscriber = new observeOn_1.ObserveOnSubscriber(subscriber, scheduler));
        }
        if (_infiniteTimeWindow) {
            for (var i = 0; i < len && !subscriber.closed; i++) {
                subscriber.next(_events[i]);
            }
        }
        else {
            for (var i = 0; i < len && !subscriber.closed; i++) {
                subscriber.next(_events[i].value);
            }
        }
        if (this.hasError) {
            subscriber.error(this.thrownError);
        }
        else if (this.isStopped) {
            subscriber.complete();
        }
        return subscription;
    };
    ReplaySubject.prototype._getNow = function () {
        return (this.scheduler || queue_1.queue).now();
    };
    ReplaySubject.prototype._trimBufferThenGetEvents = function () {
        var now = this._getNow();
        var _bufferSize = this._bufferSize;
        var _windowTime = this._windowTime;
        var _events = this._events;
        var eventsCount = _events.length;
        var spliceCount = 0;
        // Trim events that fall out of the time window.
        // Start at the front of the list. Break early once
        // we encounter an event that falls within the window.
        while (spliceCount < eventsCount) {
            if ((now - _events[spliceCount].time) < _windowTime) {
                break;
            }
            spliceCount++;
        }
        if (eventsCount > _bufferSize) {
            spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);
        }
        if (spliceCount > 0) {
            _events.splice(0, spliceCount);
        }
        return _events;
    };
    return ReplaySubject;
}(Subject_1.Subject));
exports.ReplaySubject = ReplaySubject;
var ReplayEvent = /** @class */ (function () {
    function ReplayEvent(time, value) {
        this.time = time;
        this.value = value;
    }
    return ReplayEvent;
}());

},{"./Subject":291,"./SubjectSubscription":292,"./Subscription":294,"./operators/observeOn":379,"./scheduler/queue":445,"./util/ObjectUnsubscribedError":452}],290:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * An execution context and a data structure to order tasks and schedule their
 * execution. Provides a notion of (potentially virtual) time, through the
 * `now()` getter method.
 *
 * Each unit of work in a Scheduler is called an {@link Action}.
 *
 * ```ts
 * class Scheduler {
 *   now(): number;
 *   schedule(work, delay?, state?): Subscription;
 * }
 * ```
 *
 * @class Scheduler
 * @deprecated Scheduler is an internal implementation detail of RxJS, and
 * should not be used directly. Rather, create your own class and implement
 * {@link SchedulerLike}
 */
var Scheduler = /** @class */ (function () {
    function Scheduler(SchedulerAction, now) {
        if (now === void 0) { now = Scheduler.now; }
        this.SchedulerAction = SchedulerAction;
        this.now = now;
    }
    /**
     * Schedules a function, `work`, for execution. May happen at some point in
     * the future, according to the `delay` parameter, if specified. May be passed
     * some context object, `state`, which will be passed to the `work` function.
     *
     * The given arguments will be processed an stored as an Action object in a
     * queue of actions.
     *
     * @param {function(state: ?T): ?Subscription} work A function representing a
     * task, or some unit of work to be executed by the Scheduler.
     * @param {number} [delay] Time to wait before executing the work, where the
     * time unit is implicit and defined by the Scheduler itself.
     * @param {T} [state] Some contextual data that the `work` function uses when
     * called by the Scheduler.
     * @return {Subscription} A subscription in order to be able to unsubscribe
     * the scheduled work.
     */
    Scheduler.prototype.schedule = function (work, delay, state) {
        if (delay === void 0) { delay = 0; }
        return new this.SchedulerAction(this, work).schedule(state, delay);
    };
    /** @nocollapse */
    Scheduler.now = Date.now ? Date.now : function () { return +new Date(); };
    return Scheduler;
}());
exports.Scheduler = Scheduler;

},{}],291:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Observable_1 = require("./Observable");
var Subscriber_1 = require("./Subscriber");
var Subscription_1 = require("./Subscription");
var ObjectUnsubscribedError_1 = require("./util/ObjectUnsubscribedError");
var SubjectSubscription_1 = require("./SubjectSubscription");
var rxSubscriber_1 = require("../internal/symbol/rxSubscriber");
/**
 * @class SubjectSubscriber<T>
 */
var SubjectSubscriber = /** @class */ (function (_super) {
    __extends(SubjectSubscriber, _super);
    function SubjectSubscriber(destination) {
        var _this = _super.call(this, destination) || this;
        _this.destination = destination;
        return _this;
    }
    return SubjectSubscriber;
}(Subscriber_1.Subscriber));
exports.SubjectSubscriber = SubjectSubscriber;
/**
 * @class Subject<T>
 */
var Subject = /** @class */ (function (_super) {
    __extends(Subject, _super);
    function Subject() {
        var _this = _super.call(this) || this;
        _this.observers = [];
        _this.closed = false;
        _this.isStopped = false;
        _this.hasError = false;
        _this.thrownError = null;
        return _this;
    }
    Subject.prototype[rxSubscriber_1.rxSubscriber] = function () {
        return new SubjectSubscriber(this);
    };
    Subject.prototype.lift = function (operator) {
        var subject = new AnonymousSubject(this, this);
        subject.operator = operator;
        return subject;
    };
    Subject.prototype.next = function (value) {
        if (this.closed) {
            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
        }
        if (!this.isStopped) {
            var observers = this.observers;
            var len = observers.length;
            var copy = observers.slice();
            for (var i = 0; i < len; i++) {
                copy[i].next(value);
            }
        }
    };
    Subject.prototype.error = function (err) {
        if (this.closed) {
            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
        }
        this.hasError = true;
        this.thrownError = err;
        this.isStopped = true;
        var observers = this.observers;
        var len = observers.length;
        var copy = observers.slice();
        for (var i = 0; i < len; i++) {
            copy[i].error(err);
        }
        this.observers.length = 0;
    };
    Subject.prototype.complete = function () {
        if (this.closed) {
            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
        }
        this.isStopped = true;
        var observers = this.observers;
        var len = observers.length;
        var copy = observers.slice();
        for (var i = 0; i < len; i++) {
            copy[i].complete();
        }
        this.observers.length = 0;
    };
    Subject.prototype.unsubscribe = function () {
        this.isStopped = true;
        this.closed = true;
        this.observers = null;
    };
    /** @deprecated This is an internal implementation detail, do not use. */
    Subject.prototype._trySubscribe = function (subscriber) {
        if (this.closed) {
            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
        }
        else {
            return _super.prototype._trySubscribe.call(this, subscriber);
        }
    };
    /** @deprecated This is an internal implementation detail, do not use. */
    Subject.prototype._subscribe = function (subscriber) {
        if (this.closed) {
            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
        }
        else if (this.hasError) {
            subscriber.error(this.thrownError);
            return Subscription_1.Subscription.EMPTY;
        }
        else if (this.isStopped) {
            subscriber.complete();
            return Subscription_1.Subscription.EMPTY;
        }
        else {
            this.observers.push(subscriber);
            return new SubjectSubscription_1.SubjectSubscription(this, subscriber);
        }
    };
    Subject.prototype.asObservable = function () {
        var observable = new Observable_1.Observable();
        observable.source = this;
        return observable;
    };
    /**@nocollapse */
    Subject.create = function (destination, source) {
        return new AnonymousSubject(destination, source);
    };
    return Subject;
}(Observable_1.Observable));
exports.Subject = Subject;
/**
 * @class AnonymousSubject<T>
 */
var AnonymousSubject = /** @class */ (function (_super) {
    __extends(AnonymousSubject, _super);
    function AnonymousSubject(destination, source) {
        var _this = _super.call(this) || this;
        _this.destination = destination;
        _this.source = source;
        return _this;
    }
    AnonymousSubject.prototype.next = function (value) {
        var destination = this.destination;
        if (destination && destination.next) {
            destination.next(value);
        }
    };
    AnonymousSubject.prototype.error = function (err) {
        var destination = this.destination;
        if (destination && destination.error) {
            this.destination.error(err);
        }
    };
    AnonymousSubject.prototype.complete = function () {
        var destination = this.destination;
        if (destination && destination.complete) {
            this.destination.complete();
        }
    };
    /** @deprecated This is an internal implementation detail, do not use. */
    AnonymousSubject.prototype._subscribe = function (subscriber) {
        var source = this.source;
        if (source) {
            return this.source.subscribe(subscriber);
        }
        else {
            return Subscription_1.Subscription.EMPTY;
        }
    };
    return AnonymousSubject;
}(Subject));
exports.AnonymousSubject = AnonymousSubject;

},{"../internal/symbol/rxSubscriber":448,"./Observable":286,"./SubjectSubscription":292,"./Subscriber":293,"./Subscription":294,"./util/ObjectUnsubscribedError":452}],292:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Subscription_1 = require("./Subscription");
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SubjectSubscription = /** @class */ (function (_super) {
    __extends(SubjectSubscription, _super);
    function SubjectSubscription(subject, subscriber) {
        var _this = _super.call(this) || this;
        _this.subject = subject;
        _this.subscriber = subscriber;
        _this.closed = false;
        return _this;
    }
    SubjectSubscription.prototype.unsubscribe = function () {
        if (this.closed) {
            return;
        }
        this.closed = true;
        var subject = this.subject;
        var observers = subject.observers;
        this.subject = null;
        if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {
            return;
        }
        var subscriberIndex = observers.indexOf(this.subscriber);
        if (subscriberIndex !== -1) {
            observers.splice(subscriberIndex, 1);
        }
    };
    return SubjectSubscription;
}(Subscription_1.Subscription));
exports.SubjectSubscription = SubjectSubscription;

},{"./Subscription":294}],293:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var isFunction_1 = require("./util/isFunction");
var Observer_1 = require("./Observer");
var Subscription_1 = require("./Subscription");
var rxSubscriber_1 = require("../internal/symbol/rxSubscriber");
var config_1 = require("./config");
var hostReportError_1 = require("./util/hostReportError");
/**
 * Implements the {@link Observer} interface and extends the
 * {@link Subscription} class. While the {@link Observer} is the public API for
 * consuming the values of an {@link Observable}, all Observers get converted to
 * a Subscriber, in order to provide Subscription-like capabilities such as
 * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for
 * implementing operators, but it is rarely used as a public API.
 *
 * @class Subscriber<T>
 */
var Subscriber = /** @class */ (function (_super) {
    __extends(Subscriber, _super);
    /**
     * @param {Observer|function(value: T): void} [destinationOrNext] A partially
     * defined Observer or a `next` callback function.
     * @param {function(e: ?any): void} [error] The `error` callback of an
     * Observer.
     * @param {function(): void} [complete] The `complete` callback of an
     * Observer.
     */
    function Subscriber(destinationOrNext, error, complete) {
        var _this = _super.call(this) || this;
        /** @internal */ _this.syncErrorValue = null;
        /** @internal */ _this.syncErrorThrown = false;
        /** @internal */ _this.syncErrorThrowable = false;
        _this.isStopped = false;
        switch (arguments.length) {
            case 0:
                _this.destination = Observer_1.empty;
                break;
            case 1:
                if (!destinationOrNext) {
                    _this.destination = Observer_1.empty;
                    break;
                }
                if (typeof destinationOrNext === 'object') {
                    // HACK(benlesh): For situations where Node has multiple copies of rxjs in
                    // node_modules, we cannot rely on `instanceof` checks
                    if (isTrustedSubscriber(destinationOrNext)) {
                        var trustedSubscriber = destinationOrNext[rxSubscriber_1.rxSubscriber]();
                        _this.syncErrorThrowable = trustedSubscriber.syncErrorThrowable;
                        _this.destination = trustedSubscriber;
                        trustedSubscriber.add(_this);
                    }
                    else {
                        _this.syncErrorThrowable = true;
                        _this.destination = new SafeSubscriber(_this, destinationOrNext);
                    }
                    break;
                }
            default:
                _this.syncErrorThrowable = true;
                _this.destination = new SafeSubscriber(_this, destinationOrNext, error, complete);
                break;
        }
        return _this;
    }
    Subscriber.prototype[rxSubscriber_1.rxSubscriber] = function () { return this; };
    /**
     * A static factory for a Subscriber, given a (potentially partial) definition
     * of an Observer.
     * @param {function(x: ?T): void} [next] The `next` callback of an Observer.
     * @param {function(e: ?any): void} [error] The `error` callback of an
     * Observer.
     * @param {function(): void} [complete] The `complete` callback of an
     * Observer.
     * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)
     * Observer represented by the given arguments.
     * @nocollapse
     */
    Subscriber.create = function (next, error, complete) {
        var subscriber = new Subscriber(next, error, complete);
        subscriber.syncErrorThrowable = false;
        return subscriber;
    };
    /**
     * The {@link Observer} callback to receive notifications of type `next` from
     * the Observable, with a value. The Observable may call this method 0 or more
     * times.
     * @param {T} [value] The `next` value.
     * @return {void}
     */
    Subscriber.prototype.next = function (value) {
        if (!this.isStopped) {
            this._next(value);
        }
    };
    /**
     * The {@link Observer} callback to receive notifications of type `error` from
     * the Observable, with an attached {@link Error}. Notifies the Observer that
     * the Observable has experienced an error condition.
     * @param {any} [err] The `error` exception.
     * @return {void}
     */
    Subscriber.prototype.error = function (err) {
        if (!this.isStopped) {
            this.isStopped = true;
            this._error(err);
        }
    };
    /**
     * The {@link Observer} callback to receive a valueless notification of type
     * `complete` from the Observable. Notifies the Observer that the Observable
     * has finished sending push-based notifications.
     * @return {void}
     */
    Subscriber.prototype.complete = function () {
        if (!this.isStopped) {
            this.isStopped = true;
            this._complete();
        }
    };
    Subscriber.prototype.unsubscribe = function () {
        if (this.closed) {
            return;
        }
        this.isStopped = true;
        _super.prototype.unsubscribe.call(this);
    };
    Subscriber.prototype._next = function (value) {
        this.destination.next(value);
    };
    Subscriber.prototype._error = function (err) {
        this.destination.error(err);
        this.unsubscribe();
    };
    Subscriber.prototype._complete = function () {
        this.destination.complete();
        this.unsubscribe();
    };
    /** @deprecated This is an internal implementation detail, do not use. */
    Subscriber.prototype._unsubscribeAndRecycle = function () {
        var _a = this, _parent = _a._parent, _parents = _a._parents;
        this._parent = null;
        this._parents = null;
        this.unsubscribe();
        this.closed = false;
        this.isStopped = false;
        this._parent = _parent;
        this._parents = _parents;
        return this;
    };
    return Subscriber;
}(Subscription_1.Subscription));
exports.Subscriber = Subscriber;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SafeSubscriber = /** @class */ (function (_super) {
    __extends(SafeSubscriber, _super);
    function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {
        var _this = _super.call(this) || this;
        _this._parentSubscriber = _parentSubscriber;
        var next;
        var context = _this;
        if (isFunction_1.isFunction(observerOrNext)) {
            next = observerOrNext;
        }
        else if (observerOrNext) {
            next = observerOrNext.next;
            error = observerOrNext.error;
            complete = observerOrNext.complete;
            if (observerOrNext !== Observer_1.empty) {
                context = Object.create(observerOrNext);
                if (isFunction_1.isFunction(context.unsubscribe)) {
                    _this.add(context.unsubscribe.bind(context));
                }
                context.unsubscribe = _this.unsubscribe.bind(_this);
            }
        }
        _this._context = context;
        _this._next = next;
        _this._error = error;
        _this._complete = complete;
        return _this;
    }
    SafeSubscriber.prototype.next = function (value) {
        if (!this.isStopped && this._next) {
            var _parentSubscriber = this._parentSubscriber;
            if (!config_1.config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
                this.__tryOrUnsub(this._next, value);
            }
            else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {
                this.unsubscribe();
            }
        }
    };
    SafeSubscriber.prototype.error = function (err) {
        if (!this.isStopped) {
            var _parentSubscriber = this._parentSubscriber;
            var useDeprecatedSynchronousErrorHandling = config_1.config.useDeprecatedSynchronousErrorHandling;
            if (this._error) {
                if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
                    this.__tryOrUnsub(this._error, err);
                    this.unsubscribe();
                }
                else {
                    this.__tryOrSetError(_parentSubscriber, this._error, err);
                    this.unsubscribe();
                }
            }
            else if (!_parentSubscriber.syncErrorThrowable) {
                this.unsubscribe();
                if (useDeprecatedSynchronousErrorHandling) {
                    throw err;
                }
                hostReportError_1.hostReportError(err);
            }
            else {
                if (useDeprecatedSynchronousErrorHandling) {
                    _parentSubscriber.syncErrorValue = err;
                    _parentSubscriber.syncErrorThrown = true;
                }
                else {
                    hostReportError_1.hostReportError(err);
                }
                this.unsubscribe();
            }
        }
    };
    SafeSubscriber.prototype.complete = function () {
        var _this = this;
        if (!this.isStopped) {
            var _parentSubscriber = this._parentSubscriber;
            if (this._complete) {
                var wrappedComplete = function () { return _this._complete.call(_this._context); };
                if (!config_1.config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
                    this.__tryOrUnsub(wrappedComplete);
                    this.unsubscribe();
                }
                else {
                    this.__tryOrSetError(_parentSubscriber, wrappedComplete);
                    this.unsubscribe();
                }
            }
            else {
                this.unsubscribe();
            }
        }
    };
    SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {
        try {
            fn.call(this._context, value);
        }
        catch (err) {
            this.unsubscribe();
            if (config_1.config.useDeprecatedSynchronousErrorHandling) {
                throw err;
            }
            else {
                hostReportError_1.hostReportError(err);
            }
        }
    };
    SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {
        if (!config_1.config.useDeprecatedSynchronousErrorHandling) {
            throw new Error('bad call');
        }
        try {
            fn.call(this._context, value);
        }
        catch (err) {
            if (config_1.config.useDeprecatedSynchronousErrorHandling) {
                parent.syncErrorValue = err;
                parent.syncErrorThrown = true;
                return true;
            }
            else {
                hostReportError_1.hostReportError(err);
                return true;
            }
        }
        return false;
    };
    /** @deprecated This is an internal implementation detail, do not use. */
    SafeSubscriber.prototype._unsubscribe = function () {
        var _parentSubscriber = this._parentSubscriber;
        this._context = null;
        this._parentSubscriber = null;
        _parentSubscriber.unsubscribe();
    };
    return SafeSubscriber;
}(Subscriber));
function isTrustedSubscriber(obj) {
    return obj instanceof Subscriber || ('syncErrorThrowable' in obj && obj[rxSubscriber_1.rxSubscriber]);
}

},{"../internal/symbol/rxSubscriber":448,"./Observer":287,"./Subscription":294,"./config":295,"./util/hostReportError":456,"./util/isFunction":461}],294:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var isArray_1 = require("./util/isArray");
var isObject_1 = require("./util/isObject");
var isFunction_1 = require("./util/isFunction");
var tryCatch_1 = require("./util/tryCatch");
var errorObject_1 = require("./util/errorObject");
var UnsubscriptionError_1 = require("./util/UnsubscriptionError");
/**
 * Represents a disposable resource, such as the execution of an Observable. A
 * Subscription has one important method, `unsubscribe`, that takes no argument
 * and just disposes the resource held by the subscription.
 *
 * Additionally, subscriptions may be grouped together through the `add()`
 * method, which will attach a child Subscription to the current Subscription.
 * When a Subscription is unsubscribed, all its children (and its grandchildren)
 * will be unsubscribed as well.
 *
 * @class Subscription
 */
var Subscription = /** @class */ (function () {
    /**
     * @param {function(): void} [unsubscribe] A function describing how to
     * perform the disposal of resources when the `unsubscribe` method is called.
     */
    function Subscription(unsubscribe) {
        /**
         * A flag to indicate whether this Subscription has already been unsubscribed.
         * @type {boolean}
         */
        this.closed = false;
        /** @internal */
        this._parent = null;
        /** @internal */
        this._parents = null;
        /** @internal */
        this._subscriptions = null;
        if (unsubscribe) {
            this._unsubscribe = unsubscribe;
        }
    }
    /**
     * Disposes the resources held by the subscription. May, for instance, cancel
     * an ongoing Observable execution or cancel any other type of work that
     * started when the Subscription was created.
     * @return {void}
     */
    Subscription.prototype.unsubscribe = function () {
        var hasErrors = false;
        var errors;
        if (this.closed) {
            return;
        }
        var _a = this, _parent = _a._parent, _parents = _a._parents, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;
        this.closed = true;
        this._parent = null;
        this._parents = null;
        // null out _subscriptions first so any child subscriptions that attempt
        // to remove themselves from this subscription will noop
        this._subscriptions = null;
        var index = -1;
        var len = _parents ? _parents.length : 0;
        // if this._parent is null, then so is this._parents, and we
        // don't have to remove ourselves from any parent subscriptions.
        while (_parent) {
            _parent.remove(this);
            // if this._parents is null or index >= len,
            // then _parent is set to null, and the loop exits
            _parent = ++index < len && _parents[index] || null;
        }
        if (isFunction_1.isFunction(_unsubscribe)) {
            var trial = tryCatch_1.tryCatch(_unsubscribe).call(this);
            if (trial === errorObject_1.errorObject) {
                hasErrors = true;
                errors = errors || (errorObject_1.errorObject.e instanceof UnsubscriptionError_1.UnsubscriptionError ?
                    flattenUnsubscriptionErrors(errorObject_1.errorObject.e.errors) : [errorObject_1.errorObject.e]);
            }
        }
        if (isArray_1.isArray(_subscriptions)) {
            index = -1;
            len = _subscriptions.length;
            while (++index < len) {
                var sub = _subscriptions[index];
                if (isObject_1.isObject(sub)) {
                    var trial = tryCatch_1.tryCatch(sub.unsubscribe).call(sub);
                    if (trial === errorObject_1.errorObject) {
                        hasErrors = true;
                        errors = errors || [];
                        var err = errorObject_1.errorObject.e;
                        if (err instanceof UnsubscriptionError_1.UnsubscriptionError) {
                            errors = errors.concat(flattenUnsubscriptionErrors(err.errors));
                        }
                        else {
                            errors.push(err);
                        }
                    }
                }
            }
        }
        if (hasErrors) {
            throw new UnsubscriptionError_1.UnsubscriptionError(errors);
        }
    };
    /**
     * Adds a tear down to be called during the unsubscribe() of this
     * Subscription.
     *
     * If the tear down being added is a subscription that is already
     * unsubscribed, is the same reference `add` is being called on, or is
     * `Subscription.EMPTY`, it will not be added.
     *
     * If this subscription is already in an `closed` state, the passed
     * tear down logic will be executed immediately.
     *
     * @param {TeardownLogic} teardown The additional logic to execute on
     * teardown.
     * @return {Subscription} Returns the Subscription used or created to be
     * added to the inner subscriptions list. This Subscription can be used with
     * `remove()` to remove the passed teardown logic from the inner subscriptions
     * list.
     */
    Subscription.prototype.add = function (teardown) {
        if (!teardown || (teardown === Subscription.EMPTY)) {
            return Subscription.EMPTY;
        }
        if (teardown === this) {
            return this;
        }
        var subscription = teardown;
        switch (typeof teardown) {
            case 'function':
                subscription = new Subscription(teardown);
            case 'object':
                if (subscription.closed || typeof subscription.unsubscribe !== 'function') {
                    return subscription;
                }
                else if (this.closed) {
                    subscription.unsubscribe();
                    return subscription;
                }
                else if (typeof subscription._addParent !== 'function' /* quack quack */) {
                    var tmp = subscription;
                    subscription = new Subscription();
                    subscription._subscriptions = [tmp];
                }
                break;
            default:
                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');
        }
        var subscriptions = this._subscriptions || (this._subscriptions = []);
        subscriptions.push(subscription);
        subscription._addParent(this);
        return subscription;
    };
    /**
     * Removes a Subscription from the internal list of subscriptions that will
     * unsubscribe during the unsubscribe process of this Subscription.
     * @param {Subscription} subscription The subscription to remove.
     * @return {void}
     */
    Subscription.prototype.remove = function (subscription) {
        var subscriptions = this._subscriptions;
        if (subscriptions) {
            var subscriptionIndex = subscriptions.indexOf(subscription);
            if (subscriptionIndex !== -1) {
                subscriptions.splice(subscriptionIndex, 1);
            }
        }
    };
    /** @internal */
    Subscription.prototype._addParent = function (parent) {
        var _a = this, _parent = _a._parent, _parents = _a._parents;
        if (!_parent || _parent === parent) {
            // If we don't have a parent, or the new parent is the same as the
            // current parent, then set this._parent to the new parent.
            this._parent = parent;
        }
        else if (!_parents) {
            // If there's already one parent, but not multiple, allocate an Array to
            // store the rest of the parent Subscriptions.
            this._parents = [parent];
        }
        else if (_parents.indexOf(parent) === -1) {
            // Only add the new parent to the _parents list if it's not already there.
            _parents.push(parent);
        }
    };
    /** @nocollapse */
    Subscription.EMPTY = (function (empty) {
        empty.closed = true;
        return empty;
    }(new Subscription()));
    return Subscription;
}());
exports.Subscription = Subscription;
function flattenUnsubscriptionErrors(errors) {
    return errors.reduce(function (errs, err) { return errs.concat((err instanceof UnsubscriptionError_1.UnsubscriptionError) ? err.errors : err); }, []);
}

},{"./util/UnsubscriptionError":454,"./util/errorObject":455,"./util/isArray":458,"./util/isFunction":461,"./util/isObject":465,"./util/tryCatch":480}],295:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var _enable_super_gross_mode_that_will_cause_bad_things = false;
/**
 * The global configuration object for RxJS, used to configure things
 * like what Promise contructor should used to create Promises
 */
exports.config = {
    /**
     * The promise constructor used by default for methods such as
     * {@link toPromise} and {@link forEach}
     */
    Promise: undefined,
    /**
     * If true, turns on synchronous error rethrowing, which is a deprecated behavior
     * in v6 and higher. This behavior enables bad patterns like wrapping a subscribe
     * call in a try/catch block. It also enables producer interference, a nasty bug
     * where a multicast can be broken for all observers by a downstream consumer with
     * an unhandled error. DO NOT USE THIS FLAG UNLESS IT'S NEEDED TO BY TIME
     * FOR MIGRATION REASONS.
     */
    set useDeprecatedSynchronousErrorHandling(value) {
        if (value) {
            var error = new Error();
            console.warn('DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \n' + error.stack);
        }
        else if (_enable_super_gross_mode_that_will_cause_bad_things) {
            my_console_log('RxJS: Back to a better error behavior. Thank you. <3');
        }
        _enable_super_gross_mode_that_will_cause_bad_things = value;
    },
    get useDeprecatedSynchronousErrorHandling() {
        return _enable_super_gross_mode_that_will_cause_bad_things;
    },
};

},{}],296:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Subject_1 = require("../Subject");
var Observable_1 = require("../Observable");
var Subscriber_1 = require("../Subscriber");
var Subscription_1 = require("../Subscription");
var refCount_1 = require("../operators/refCount");
/**
 * @class ConnectableObservable<T>
 */
var ConnectableObservable = /** @class */ (function (_super) {
    __extends(ConnectableObservable, _super);
    function ConnectableObservable(source, subjectFactory) {
        var _this = _super.call(this) || this;
        _this.source = source;
        _this.subjectFactory = subjectFactory;
        _this._refCount = 0;
        /** @internal */
        _this._isComplete = false;
        return _this;
    }
    /** @deprecated This is an internal implementation detail, do not use. */
    ConnectableObservable.prototype._subscribe = function (subscriber) {
        return this.getSubject().subscribe(subscriber);
    };
    ConnectableObservable.prototype.getSubject = function () {
        var subject = this._subject;
        if (!subject || subject.isStopped) {
            this._subject = this.subjectFactory();
        }
        return this._subject;
    };
    ConnectableObservable.prototype.connect = function () {
        var connection = this._connection;
        if (!connection) {
            this._isComplete = false;
            connection = this._connection = new Subscription_1.Subscription();
            connection.add(this.source
                .subscribe(new ConnectableSubscriber(this.getSubject(), this)));
            if (connection.closed) {
                this._connection = null;
                connection = Subscription_1.Subscription.EMPTY;
            }
            else {
                this._connection = connection;
            }
        }
        return connection;
    };
    ConnectableObservable.prototype.refCount = function () {
        return refCount_1.refCount()(this);
    };
    return ConnectableObservable;
}(Observable_1.Observable));
exports.ConnectableObservable = ConnectableObservable;
var connectableProto = ConnectableObservable.prototype;
exports.connectableObservableDescriptor = {
    operator: { value: null },
    _refCount: { value: 0, writable: true },
    _subject: { value: null, writable: true },
    _connection: { value: null, writable: true },
    _subscribe: { value: connectableProto._subscribe },
    _isComplete: { value: connectableProto._isComplete, writable: true },
    getSubject: { value: connectableProto.getSubject },
    connect: { value: connectableProto.connect },
    refCount: { value: connectableProto.refCount }
};
var ConnectableSubscriber = /** @class */ (function (_super) {
    __extends(ConnectableSubscriber, _super);
    function ConnectableSubscriber(destination, connectable) {
        var _this = _super.call(this, destination) || this;
        _this.connectable = connectable;
        return _this;
    }
    ConnectableSubscriber.prototype._error = function (err) {
        this._unsubscribe();
        _super.prototype._error.call(this, err);
    };
    ConnectableSubscriber.prototype._complete = function () {
        this.connectable._isComplete = true;
        this._unsubscribe();
        _super.prototype._complete.call(this);
    };
    ConnectableSubscriber.prototype._unsubscribe = function () {
        var connectable = this.connectable;
        if (connectable) {
            this.connectable = null;
            var connection = connectable._connection;
            connectable._refCount = 0;
            connectable._subject = null;
            connectable._connection = null;
            if (connection) {
                connection.unsubscribe();
            }
        }
    };
    return ConnectableSubscriber;
}(Subject_1.SubjectSubscriber));
var RefCountOperator = /** @class */ (function () {
    function RefCountOperator(connectable) {
        this.connectable = connectable;
    }
    RefCountOperator.prototype.call = function (subscriber, source) {
        var connectable = this.connectable;
        connectable._refCount++;
        var refCounter = new RefCountSubscriber(subscriber, connectable);
        var subscription = source.subscribe(refCounter);
        if (!refCounter.closed) {
            refCounter.connection = connectable.connect();
        }
        return subscription;
    };
    return RefCountOperator;
}());
var RefCountSubscriber = /** @class */ (function (_super) {
    __extends(RefCountSubscriber, _super);
    function RefCountSubscriber(destination, connectable) {
        var _this = _super.call(this, destination) || this;
        _this.connectable = connectable;
        return _this;
    }
    RefCountSubscriber.prototype._unsubscribe = function () {
        var connectable = this.connectable;
        if (!connectable) {
            this.connection = null;
            return;
        }
        this.connectable = null;
        var refCount = connectable._refCount;
        if (refCount <= 0) {
            this.connection = null;
            return;
        }
        connectable._refCount = refCount - 1;
        if (refCount > 1) {
            this.connection = null;
            return;
        }
        ///
        // Compare the local RefCountSubscriber's connection Subscription to the
        // connection Subscription on the shared ConnectableObservable. In cases
        // where the ConnectableObservable source synchronously emits values, and
        // the RefCountSubscriber's downstream Observers synchronously unsubscribe,
        // execution continues to here before the RefCountOperator has a chance to
        // supply the RefCountSubscriber with the shared connection Subscription.
        // For example:
        // ```
        // Observable.range(0, 10)
        //   .publish()
        //   .refCount()
        //   .take(5)
        //   .subscribe();
        // ```
        // In order to account for this case, RefCountSubscriber should only dispose
        // the ConnectableObservable's shared connection Subscription if the
        // connection Subscription exists, *and* either:
        //   a. RefCountSubscriber doesn't have a reference to the shared connection
        //      Subscription yet, or,
        //   b. RefCountSubscriber's connection Subscription reference is identical
        //      to the shared connection Subscription
        ///
        var connection = this.connection;
        var sharedConnection = connectable._connection;
        this.connection = null;
        if (sharedConnection && (!connection || sharedConnection === connection)) {
            sharedConnection.unsubscribe();
        }
    };
    return RefCountSubscriber;
}(Subscriber_1.Subscriber));

},{"../Observable":286,"../Subject":291,"../Subscriber":293,"../Subscription":294,"../operators/refCount":390}],297:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Observable_1 = require("../Observable");
var asap_1 = require("../scheduler/asap");
var isNumeric_1 = require("../util/isNumeric");
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var SubscribeOnObservable = /** @class */ (function (_super) {
    __extends(SubscribeOnObservable, _super);
    function SubscribeOnObservable(source, delayTime, scheduler) {
        if (delayTime === void 0) { delayTime = 0; }
        if (scheduler === void 0) { scheduler = asap_1.asap; }
        var _this = _super.call(this) || this;
        _this.source = source;
        _this.delayTime = delayTime;
        _this.scheduler = scheduler;
        if (!isNumeric_1.isNumeric(delayTime) || delayTime < 0) {
            _this.delayTime = 0;
        }
        if (!scheduler || typeof scheduler.schedule !== 'function') {
            _this.scheduler = asap_1.asap;
        }
        return _this;
    }
    /** @nocollapse */
    SubscribeOnObservable.create = function (source, delay, scheduler) {
        if (delay === void 0) { delay = 0; }
        if (scheduler === void 0) { scheduler = asap_1.asap; }
        return new SubscribeOnObservable(source, delay, scheduler);
    };
    /** @nocollapse */
    SubscribeOnObservable.dispatch = function (arg) {
        var source = arg.source, subscriber = arg.subscriber;
        return this.add(source.subscribe(subscriber));
    };
    /** @deprecated This is an internal implementation detail, do not use. */
    SubscribeOnObservable.prototype._subscribe = function (subscriber) {
        var delay = this.delayTime;
        var source = this.source;
        var scheduler = this.scheduler;
        return scheduler.schedule(SubscribeOnObservable.dispatch, delay, {
            source: source, subscriber: subscriber
        });
    };
    return SubscribeOnObservable;
}(Observable_1.Observable));
exports.SubscribeOnObservable = SubscribeOnObservable;

},{"../Observable":286,"../scheduler/asap":443,"../util/isNumeric":464}],298:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Observable_1 = require("../Observable");
var AsyncSubject_1 = require("../AsyncSubject");
var map_1 = require("../operators/map");
var isArray_1 = require("../util/isArray");
var isScheduler_1 = require("../util/isScheduler");
// tslint:enable:max-line-length
/**
 * Converts a callback API to a function that returns an Observable.
 *
 * <span class="informal">Give it a function `f` of type `f(x, callback)` and
 * it will return a function `g` that when called as `g(x)` will output an
 * Observable.</span>
 *
 * `bindCallback` is not an operator because its input and output are not
 * Observables. The input is a function `func` with some parameters, the
 * last parameter must be a callback function that `func` calls when it is
 * done.
 *
 * The output of `bindCallback` is a function that takes the same parameters
 * as `func`, except the last one (the callback). When the output function
 * is called with arguments it will return an Observable. If function `func`
 * calls its callback with one argument the Observable will emit that value.
 * If on the other hand the callback is called with multiple values the resulting
 * Observable will emit an array with said values as arguments.
 *
 * It is very important to remember that input function `func` is not called
 * when the output function is, but rather when the Observable returned by the output
 * function is subscribed. This means if `func` makes an AJAX request, that request
 * will be made every time someone subscribes to the resulting Observable, but not before.
 *
 * The last optional parameter - {@link Scheduler} - can be used to control when the call
 * to `func` happens after someone subscribes to Observable, as well as when results
 * passed to callback will be emitted. By default, the subscription to  an Observable calls `func`
 * synchronously, but using `Scheduler.async` as the last parameter will defer the call to `func`,
 * just like wrapping the call in `setTimeout` with a timeout of `0` would. If you use the async Scheduler
 * and call `subscribe` on the output Observable all function calls that are currently executing
 * will end before `func` is invoked.
 *
 * By default results passed to the callback are emitted immediately after `func` invokes the callback.
 * In particular, if the callback is called synchronously the subscription of the resulting Observable
 * will call the `next` function synchronously as well.  If you want to defer that call,
 * you may use `Scheduler.async` just as before.  This means that by using `Scheduler.async` you can
 * ensure that `func` always calls its callback asynchronously, thus avoiding terrifying Zalgo.
 *
 * Note that the Observable created by the output function will always emit a single value
 * and then complete immediately. If `func` calls the callback multiple times, values from subsequent
 * calls will not appear in the stream. If you need to listen for multiple calls,
 *  you probably want to use {@link fromEvent} or {@link fromEventPattern} instead.
 *
 * If `func` depends on some context (`this` property) and is not already bound the context of `func`
 * will be the context that the output function has at call time. In particular, if `func`
 * is called as a method of some objec and if `func` is not already bound, in order to preserve the context
 * it is recommended that the context of the output function is set to that object as well.
 *
 * If the input function calls its callback in the "node style" (i.e. first argument to callback is
 * optional error parameter signaling whether the call failed or not), {@link bindNodeCallback}
 * provides convenient error handling and probably is a better choice.
 * `bindCallback` will treat such functions the same as any other and error parameters
 * (whether passed or not) will always be interpreted as regular callback argument.
 *
 *
 * @example <caption>Convert jQuery's getJSON to an Observable API</caption>
 * // Suppose we have jQuery.getJSON('/my/url', callback)
 * var getJSONAsObservable = bindCallback(jQuery.getJSON);
 * var result = getJSONAsObservable('/my/url');
 * result.subscribe(x => my_console_log(x), e => console.error(e));
 *
 *
 * @example <caption>Receive an array of arguments passed to a callback</caption>
 * someFunction((a, b, c) => {
 *   my_console_log(a); // 5
 *   my_console_log(b); // 'some string'
 *   my_console_log(c); // {someProperty: 'someValue'}
 * });
 *
 * const boundSomeFunction = bindCallback(someFunction);
 * boundSomeFunction().subscribe(values => {
 *   my_console_log(values) // [5, 'some string', {someProperty: 'someValue'}]
 * });
 *
 *
 * @example <caption>Compare behaviour with and without async Scheduler</caption>
 * function iCallMyCallbackSynchronously(cb) {
 *   cb();
 * }
 *
 * const boundSyncFn = bindCallback(iCallMyCallbackSynchronously);
 * const boundAsyncFn = bindCallback(iCallMyCallbackSynchronously, null, Rx.Scheduler.async);
 *
 * boundSyncFn().subscribe(() => my_console_log('I was sync!'));
 * boundAsyncFn().subscribe(() => my_console_log('I was async!'));
 * my_console_log('This happened...');
 *
 * // Logs:
 * // I was sync!
 * // This happened...
 * // I was async!
 *
 *
 * @example <caption>Use bindCallback on an object method</caption>
 * const boundMethod = bindCallback(someObject.methodWithCallback);
 * boundMethod.call(someObject) // make sure methodWithCallback has access to someObject
 * .subscribe(subscriber);
 *
 *
 * @see {@link bindNodeCallback}
 * @see {@link from}
 * @see {@link fromPromise}
 *
 * @param {function} func A function with a callback as the last parameter.
 * @param {Scheduler} [scheduler] The scheduler on which to schedule the
 * callbacks.
 * @return {function(...params: *): Observable} A function which returns the
 * Observable that delivers the same values the callback would deliver.
 * @name bindCallback
 */
function bindCallback(callbackFunc, resultSelector, scheduler) {
    if (resultSelector) {
        if (isScheduler_1.isScheduler(resultSelector)) {
            scheduler = resultSelector;
        }
        else {
            // DEPRECATED PATH
            return function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return bindCallback(callbackFunc, scheduler).apply(void 0, args).pipe(map_1.map(function (args) { return isArray_1.isArray(args) ? resultSelector.apply(void 0, args) : resultSelector(args); }));
            };
        }
    }
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var context = this;
        var subject;
        var params = {
            context: context,
            subject: subject,
            callbackFunc: callbackFunc,
            scheduler: scheduler,
        };
        return new Observable_1.Observable(function (subscriber) {
            if (!scheduler) {
                if (!subject) {
                    subject = new AsyncSubject_1.AsyncSubject();
                    var handler = function () {
                        var innerArgs = [];
                        for (var _i = 0; _i < arguments.length; _i++) {
                            innerArgs[_i] = arguments[_i];
                        }
                        subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);
                        subject.complete();
                    };
                    try {
                        callbackFunc.apply(context, args.concat([handler]));
                    }
                    catch (err) {
                        subject.error(err);
                    }
                }
                return subject.subscribe(subscriber);
            }
            else {
                var state = {
                    args: args, subscriber: subscriber, params: params,
                };
                return scheduler.schedule(dispatch, 0, state);
            }
        });
    };
}
exports.bindCallback = bindCallback;
function dispatch(state) {
    var _this = this;
    var self = this;
    var args = state.args, subscriber = state.subscriber, params = state.params;
    var callbackFunc = params.callbackFunc, context = params.context, scheduler = params.scheduler;
    var subject = params.subject;
    if (!subject) {
        subject = params.subject = new AsyncSubject_1.AsyncSubject();
        var handler = function () {
            var innerArgs = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                innerArgs[_i] = arguments[_i];
            }
            var value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;
            _this.add(scheduler.schedule(dispatchNext, 0, { value: value, subject: subject }));
        };
        try {
            callbackFunc.apply(context, args.concat([handler]));
        }
        catch (err) {
            subject.error(err);
        }
    }
    this.add(subject.subscribe(subscriber));
}
function dispatchNext(state) {
    var value = state.value, subject = state.subject;
    subject.next(value);
    subject.complete();
}
function dispatchError(state) {
    var err = state.err, subject = state.subject;
    subject.error(err);
}

},{"../AsyncSubject":282,"../Observable":286,"../operators/map":368,"../util/isArray":458,"../util/isScheduler":468}],299:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Observable_1 = require("../Observable");
var AsyncSubject_1 = require("../AsyncSubject");
var map_1 = require("../operators/map");
var isScheduler_1 = require("../util/isScheduler");
var isArray_1 = require("../util/isArray");
/**
 * Converts a Node.js-style callback API to a function that returns an
 * Observable.
 *
 * <span class="informal">It's just like {@link bindCallback}, but the
 * callback is expected to be of type `callback(error, result)`.</span>
 *
 * `bindNodeCallback` is not an operator because its input and output are not
 * Observables. The input is a function `func` with some parameters, but the
 * last parameter must be a callback function that `func` calls when it is
 * done. The callback function is expected to follow Node.js conventions,
 * where the first argument to the callback is an error object, signaling
 * whether call was successful. If that object is passed to callback, it means
 * something went wrong.
 *
 * The output of `bindNodeCallback` is a function that takes the same
 * parameters as `func`, except the last one (the callback). When the output
 * function is called with arguments, it will return an Observable.
 * If `func` calls its callback with error parameter present, Observable will
 * error with that value as well. If error parameter is not passed, Observable will emit
 * second parameter. If there are more parameters (third and so on),
 * Observable will emit an array with all arguments, except first error argument.
 *
 * Note that `func` will not be called at the same time output function is,
 * but rather whenever resulting Observable is subscribed. By default call to
 * `func` will happen synchronously after subscription, but that can be changed
 * with proper {@link Scheduler} provided as optional third parameter. Scheduler
 * can also control when values from callback will be emitted by Observable.
 * To find out more, check out documentation for {@link bindCallback}, where
 * Scheduler works exactly the same.
 *
 * As in {@link bindCallback}, context (`this` property) of input function will be set to context
 * of returned function, when it is called.
 *
 * After Observable emits value, it will complete immediately. This means
 * even if `func` calls callback again, values from second and consecutive
 * calls will never appear on the stream. If you need to handle functions
 * that call callbacks multiple times, check out {@link fromEvent} or
 * {@link fromEventPattern} instead.
 *
 * Note that `bindNodeCallback` can be used in non-Node.js environments as well.
 * "Node.js-style" callbacks are just a convention, so if you write for
 * browsers or any other environment and API you use implements that callback style,
 * `bindNodeCallback` can be safely used on that API functions as well.
 *
 * Remember that Error object passed to callback does not have to be an instance
 * of JavaScript built-in `Error` object. In fact, it does not even have to an object.
 * Error parameter of callback function is interpreted as "present", when value
 * of that parameter is truthy. It could be, for example, non-zero number, non-empty
 * string or boolean `true`. In all of these cases resulting Observable would error
 * with that value. This means usually regular style callbacks will fail very often when
 * `bindNodeCallback` is used. If your Observable errors much more often then you
 * would expect, check if callback really is called in Node.js-style and, if not,
 * switch to {@link bindCallback} instead.
 *
 * Note that even if error parameter is technically present in callback, but its value
 * is falsy, it still won't appear in array emitted by Observable.
 *
 *
 * @example <caption>Read a file from the filesystem and get the data as an Observable</caption>
 * import * as fs from 'fs';
 * var readFileAsObservable = bindNodeCallback(fs.readFile);
 * var result = readFileAsObservable('./roadNames.txt', 'utf8');
 * result.subscribe(x => my_console_log(x), e => console.error(e));
 *
 *
 * @example <caption>Use on function calling callback with multiple arguments</caption>
 * someFunction((err, a, b) => {
 *   my_console_log(err); // null
 *   my_console_log(a); // 5
 *   my_console_log(b); // "some string"
 * });
 * var boundSomeFunction = bindNodeCallback(someFunction);
 * boundSomeFunction()
 * .subscribe(value => {
 *   my_console_log(value); // [5, "some string"]
 * });
 *
 * @example <caption>Use on function calling callback in regular style</caption>
 * someFunction(a => {
 *   my_console_log(a); // 5
 * });
 * var boundSomeFunction = bindNodeCallback(someFunction);
 * boundSomeFunction()
 * .subscribe(
 *   value => {}             // never gets called
 *   err => my_console_log(err) // 5
 * );
 *
 *
 * @see {@link bindCallback}
 * @see {@link from}
 * @see {@link fromPromise}
 *
 * @param {function} func Function with a Node.js-style callback as the last parameter.
 * @param {Scheduler} [scheduler] The scheduler on which to schedule the
 * callbacks.
 * @return {function(...params: *): Observable} A function which returns the
 * Observable that delivers the same values the Node.js callback would
 * deliver.
 * @name bindNodeCallback
 */
function bindNodeCallback(callbackFunc, resultSelector, scheduler) {
    if (resultSelector) {
        if (isScheduler_1.isScheduler(resultSelector)) {
            scheduler = resultSelector;
        }
        else {
            // DEPRECATED PATH
            return function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return bindNodeCallback(callbackFunc, scheduler).apply(void 0, args).pipe(map_1.map(function (args) { return isArray_1.isArray(args) ? resultSelector.apply(void 0, args) : resultSelector(args); }));
            };
        }
    }
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var params = {
            subject: undefined,
            args: args,
            callbackFunc: callbackFunc,
            scheduler: scheduler,
            context: this,
        };
        return new Observable_1.Observable(function (subscriber) {
            var context = params.context;
            var subject = params.subject;
            if (!scheduler) {
                if (!subject) {
                    subject = params.subject = new AsyncSubject_1.AsyncSubject();
                    var handler = function () {
                        var innerArgs = [];
                        for (var _i = 0; _i < arguments.length; _i++) {
                            innerArgs[_i] = arguments[_i];
                        }
                        var err = innerArgs.shift();
                        if (err) {
                            subject.error(err);
                            return;
                        }
                        subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);
                        subject.complete();
                    };
                    try {
                        callbackFunc.apply(context, args.concat([handler]));
                    }
                    catch (err) {
                        subject.error(err);
                    }
                }
                return subject.subscribe(subscriber);
            }
            else {
                return scheduler.schedule(dispatch, 0, { params: params, subscriber: subscriber, context: context });
            }
        });
    };
}
exports.bindNodeCallback = bindNodeCallback;
function dispatch(state) {
    var _this = this;
    var params = state.params, subscriber = state.subscriber, context = state.context;
    var callbackFunc = params.callbackFunc, args = params.args, scheduler = params.scheduler;
    var subject = params.subject;
    if (!subject) {
        subject = params.subject = new AsyncSubject_1.AsyncSubject();
        var handler = function () {
            var innerArgs = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                innerArgs[_i] = arguments[_i];
            }
            var err = innerArgs.shift();
            if (err) {
                _this.add(scheduler.schedule(dispatchError, 0, { err: err, subject: subject }));
            }
            else {
                var value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;
                _this.add(scheduler.schedule(dispatchNext, 0, { value: value, subject: subject }));
            }
        };
        try {
            callbackFunc.apply(context, args.concat([handler]));
        }
        catch (err) {
            this.add(scheduler.schedule(dispatchError, 0, { err: err, subject: subject }));
        }
    }
    this.add(subject.subscribe(subscriber));
}
function dispatchNext(arg) {
    var value = arg.value, subject = arg.subject;
    subject.next(value);
    subject.complete();
}
function dispatchError(arg) {
    var err = arg.err, subject = arg.subject;
    subject.error(err);
}

},{"../AsyncSubject":282,"../Observable":286,"../operators/map":368,"../util/isArray":458,"../util/isScheduler":468}],300:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var isScheduler_1 = require("../util/isScheduler");
var isArray_1 = require("../util/isArray");
var OuterSubscriber_1 = require("../OuterSubscriber");
var subscribeToResult_1 = require("../util/subscribeToResult");
var fromArray_1 = require("./fromArray");
var NONE = {};
/* tslint:enable:max-line-length */
/**
 * Combines multiple Observables to create an Observable whose values are
 * calculated from the latest values of each of its input Observables.
 *
 * <span class="informal">Whenever any input Observable emits a value, it
 * computes a formula using the latest values from all the inputs, then emits
 * the output of that formula.</span>
 *
 * <img src="./img/combineLatest.png" width="100%">
 *
 * `combineLatest` combines the values from all the Observables passed as
 * arguments. This is done by subscribing to each Observable in order and,
 * whenever any Observable emits, collecting an array of the most recent
 * values from each Observable. So if you pass `n` Observables to operator,
 * returned Observable will always emit an array of `n` values, in order
 * corresponding to order of passed Observables (value from the first Observable
 * on the first place and so on).
 *
 * Static version of `combineLatest` accepts either an array of Observables
 * or each Observable can be put directly as an argument. Note that array of
 * Observables is good choice, if you don't know beforehand how many Observables
 * you will combine. Passing empty array will result in Observable that
 * completes immediately.
 *
 * To ensure output array has always the same length, `combineLatest` will
 * actually wait for all input Observables to emit at least once,
 * before it starts emitting results. This means if some Observable emits
 * values before other Observables started emitting, all that values but last
 * will be lost. On the other hand, is some Observable does not emit value but
 * completes, resulting Observable will complete at the same moment without
 * emitting anything, since it will be now impossible to include value from
 * completed Observable in resulting array. Also, if some input Observable does
 * not emit any value and never completes, `combineLatest` will also never emit
 * and never complete, since, again, it will wait for all streams to emit some
 * value.
 *
 * If at least one Observable was passed to `combineLatest` and all passed Observables
 * emitted something, resulting Observable will complete when all combined
 * streams complete. So even if some Observable completes, result of
 * `combineLatest` will still emit values when other Observables do. In case
 * of completed Observable, its value from now on will always be the last
 * emitted value. On the other hand, if any Observable errors, `combineLatest`
 * will error immediately as well, and all other Observables will be unsubscribed.
 *
 * `combineLatest` accepts as optional parameter `project` function, which takes
 * as arguments all values that would normally be emitted by resulting Observable.
 * `project` can return any kind of value, which will be then emitted by Observable
 * instead of default array. Note that `project` does not take as argument that array
 * of values, but values themselves. That means default `project` can be imagined
 * as function that takes all its arguments and puts them into an array.
 *
 *
 * @example <caption>Combine two timer Observables</caption>
 * const firstTimer = Rx.Observable.timer(0, 1000); // emit 0, 1, 2... after every second, starting from now
 * const secondTimer = Rx.Observable.timer(500, 1000); // emit 0, 1, 2... after every second, starting 0,5s from now
 * const combinedTimers = Rx.Observable.combineLatest(firstTimer, secondTimer);
 * combinedTimers.subscribe(value => my_console_log(value));
 * // Logs
 * // [0, 0] after 0.5s
 * // [1, 0] after 1s
 * // [1, 1] after 1.5s
 * // [2, 1] after 2s
 *
 *
 * @example <caption>Combine an array of Observables</caption>
 * const observables = [1, 5, 10].map(
 *   n => Rx.Observable.of(n).delay(n * 1000).startWith(0) // emit 0 and then emit n after n seconds
 * );
 * const combined = Rx.Observable.combineLatest(observables);
 * combined.subscribe(value => my_console_log(value));
 * // Logs
 * // [0, 0, 0] immediately
 * // [1, 0, 0] after 1s
 * // [1, 5, 0] after 5s
 * // [1, 5, 10] after 10s
 *
 *
 * @example <caption>Use project function to dynamically calculate the Body-Mass Index</caption>
 * var weight = Rx.Observable.of(70, 72, 76, 79, 75);
 * var height = Rx.Observable.of(1.76, 1.77, 1.78);
 * var bmi = Rx.Observable.combineLatest(weight, height, (w, h) => w / (h * h));
 * bmi.subscribe(x => my_console_log('BMI is ' + x));
 *
 * // With output to console:
 * // BMI is 24.212293388429753
 * // BMI is 23.93948099205209
 * // BMI is 23.671253629592222
 *
 *
 * @see {@link combineAll}
 * @see {@link merge}
 * @see {@link withLatestFrom}
 *
 * @param {ObservableInput} observable1 An input Observable to combine with other Observables.
 * @param {ObservableInput} observable2 An input Observable to combine with other Observables.
 * More than one input Observables may be given as arguments
 * or an array of Observables may be given as the first argument.
 * @param {function} [project] An optional function to project the values from
 * the combined latest values into a new value on the output Observable.
 * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to
 * each input Observable.
 * @return {Observable} An Observable of projected values from the most recent
 * values from each input Observable, or an array of the most recent values from
 * each input Observable.
 */
function combineLatest() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i] = arguments[_i];
    }
    var resultSelector = null;
    var scheduler = null;
    if (isScheduler_1.isScheduler(observables[observables.length - 1])) {
        scheduler = observables.pop();
    }
    if (typeof observables[observables.length - 1] === 'function') {
        resultSelector = observables.pop();
    }
    // if the first and only other argument besides the resultSelector is an array
    // assume it's been called with `combineLatest([obs1, obs2, obs3], resultSelector)`
    if (observables.length === 1 && isArray_1.isArray(observables[0])) {
        observables = observables[0];
    }
    return fromArray_1.fromArray(observables, scheduler).lift(new CombineLatestOperator(resultSelector));
}
exports.combineLatest = combineLatest;
var CombineLatestOperator = /** @class */ (function () {
    function CombineLatestOperator(resultSelector) {
        this.resultSelector = resultSelector;
    }
    CombineLatestOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new CombineLatestSubscriber(subscriber, this.resultSelector));
    };
    return CombineLatestOperator;
}());
exports.CombineLatestOperator = CombineLatestOperator;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var CombineLatestSubscriber = /** @class */ (function (_super) {
    __extends(CombineLatestSubscriber, _super);
    function CombineLatestSubscriber(destination, resultSelector) {
        var _this = _super.call(this, destination) || this;
        _this.resultSelector = resultSelector;
        _this.active = 0;
        _this.values = [];
        _this.observables = [];
        return _this;
    }
    CombineLatestSubscriber.prototype._next = function (observable) {
        this.values.push(NONE);
        this.observables.push(observable);
    };
    CombineLatestSubscriber.prototype._complete = function () {
        var observables = this.observables;
        var len = observables.length;
        if (len === 0) {
            this.destination.complete();
        }
        else {
            this.active = len;
            this.toRespond = len;
            for (var i = 0; i < len; i++) {
                var observable = observables[i];
                this.add(subscribeToResult_1.subscribeToResult(this, observable, observable, i));
            }
        }
    };
    CombineLatestSubscriber.prototype.notifyComplete = function (unused) {
        if ((this.active -= 1) === 0) {
            this.destination.complete();
        }
    };
    CombineLatestSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        var values = this.values;
        var oldVal = values[outerIndex];
        var toRespond = !this.toRespond
            ? 0
            : oldVal === NONE ? --this.toRespond : this.toRespond;
        values[outerIndex] = innerValue;
        if (toRespond === 0) {
            if (this.resultSelector) {
                this._tryResultSelector(values);
            }
            else {
                this.destination.next(values.slice());
            }
        }
    };
    CombineLatestSubscriber.prototype._tryResultSelector = function (values) {
        var result;
        try {
            result = this.resultSelector.apply(this, values);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.destination.next(result);
    };
    return CombineLatestSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
exports.CombineLatestSubscriber = CombineLatestSubscriber;

},{"../OuterSubscriber":288,"../util/isArray":458,"../util/isScheduler":468,"../util/subscribeToResult":478,"./fromArray":308}],301:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var isScheduler_1 = require("../util/isScheduler");
var of_1 = require("./of");
var from_1 = require("./from");
var concatAll_1 = require("../operators/concatAll");
/* tslint:enable:max-line-length */
/**
 * Creates an output Observable which sequentially emits all values from given
 * Observable and then moves on to the next.
 *
 * <span class="informal">Concatenates multiple Observables together by
 * sequentially emitting their values, one Observable after the other.</span>
 *
 * <img src="./img/concat.png" width="100%">
 *
 * `concat` joins multiple Observables together, by subscribing to them one at a time and
 * merging their results into the output Observable. You can pass either an array of
 * Observables, or put them directly as arguments. Passing an empty array will result
 * in Observable that completes immediately.
 *
 * `concat` will subscribe to first input Observable and emit all its values, without
 * changing or affecting them in any way. When that Observable completes, it will
 * subscribe to then next Observable passed and, again, emit its values. This will be
 * repeated, until the operator runs out of Observables. When last input Observable completes,
 * `concat` will complete as well. At any given moment only one Observable passed to operator
 * emits values. If you would like to emit values from passed Observables concurrently, check out
 * {@link merge} instead, especially with optional `concurrent` parameter. As a matter of fact,
 * `concat` is an equivalent of `merge` operator with `concurrent` parameter set to `1`.
 *
 * Note that if some input Observable never completes, `concat` will also never complete
 * and Observables following the one that did not complete will never be subscribed. On the other
 * hand, if some Observable simply completes immediately after it is subscribed, it will be
 * invisible for `concat`, which will just move on to the next Observable.
 *
 * If any Observable in chain errors, instead of passing control to the next Observable,
 * `concat` will error immediately as well. Observables that would be subscribed after
 * the one that emitted error, never will.
 *
 * If you pass to `concat` the same Observable many times, its stream of values
 * will be "replayed" on every subscription, which means you can repeat given Observable
 * as many times as you like. If passing the same Observable to `concat` 1000 times becomes tedious,
 * you can always use {@link repeat}.
 *
 * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>
 * var timer = Rx.Observable.interval(1000).take(4);
 * var sequence = Rx.Observable.range(1, 10);
 * var result = Rx.Observable.concat(timer, sequence);
 * result.subscribe(x => my_console_log(x));
 *
 * // results in:
 * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10
 *
 *
 * @example <caption>Concatenate an array of 3 Observables</caption>
 * var timer1 = Rx.Observable.interval(1000).take(10);
 * var timer2 = Rx.Observable.interval(2000).take(6);
 * var timer3 = Rx.Observable.interval(500).take(10);
 * var result = Rx.Observable.concat([timer1, timer2, timer3]); // note that array is passed
 * result.subscribe(x => my_console_log(x));
 *
 * // results in the following:
 * // (Prints to console sequentially)
 * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9
 * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5
 * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9
 *
 *
 * @example <caption>Concatenate the same Observable to repeat it</caption>
 * const timer = Rx.Observable.interval(1000).take(2);
 *
 * Rx.Observable.concat(timer, timer) // concating the same Observable!
 * .subscribe(
 *   value => my_console_log(value),
 *   err => {},
 *   () => my_console_log('...and it is done!')
 * );
 *
 * // Logs:
 * // 0 after 1s
 * // 1 after 2s
 * // 0 after 3s
 * // 1 after 4s
 * // "...and it is done!" also after 4s
 *
 * @see {@link concatAll}
 * @see {@link concatMap}
 * @see {@link concatMapTo}
 *
 * @param {ObservableInput} input1 An input Observable to concatenate with others.
 * @param {ObservableInput} input2 An input Observable to concatenate with others.
 * More than one input Observables may be given as argument.
 * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each
 * Observable subscription on.
 * @return {Observable} All values of each passed Observable merged into a
 * single Observable, in order, in serial fashion.
 * @static true
 * @name concat
 * @owner Observable
 */
function concat() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i] = arguments[_i];
    }
    if (observables.length === 1 || (observables.length === 2 && isScheduler_1.isScheduler(observables[1]))) {
        return from_1.from(observables[0]);
    }
    return concatAll_1.concatAll()(of_1.of.apply(void 0, observables));
}
exports.concat = concat;

},{"../operators/concatAll":340,"../util/isScheduler":468,"./from":307,"./of":319}],302:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Observable_1 = require("../Observable");
var from_1 = require("./from"); // lol
var empty_1 = require("./empty");
/**
 * Creates an Observable that, on subscribe, calls an Observable factory to
 * make an Observable for each new Observer.
 *
 * <span class="informal">Creates the Observable lazily, that is, only when it
 * is subscribed.
 * </span>
 *
 * <img src="./img/defer.png" width="100%">
 *
 * `defer` allows you to create the Observable only when the Observer
 * subscribes, and create a fresh Observable for each Observer. It waits until
 * an Observer subscribes to it, and then it generates an Observable,
 * typically with an Observable factory function. It does this afresh for each
 * subscriber, so although each subscriber may think it is subscribing to the
 * same Observable, in fact each subscriber gets its own individual
 * Observable.
 *
 * @example <caption>Subscribe to either an Observable of clicks or an Observable of interval, at random</caption>
 * var clicksOrInterval = Rx.Observable.defer(function () {
 *   if (Math.random() > 0.5) {
 *     return Rx.Observable.fromEvent(document, 'click');
 *   } else {
 *     return Rx.Observable.interval(1000);
 *   }
 * });
 * clicksOrInterval.subscribe(x => my_console_log(x));
 *
 * // Results in the following behavior:
 * // If the result of Math.random() is greater than 0.5 it will listen
 * // for clicks anywhere on the "document"; when document is clicked it
 * // will log a MouseEvent object to the console. If the result is less
 * // than 0.5 it will emit ascending numbers, one every second(1000ms).
 *
 * @see {@link create}
 *
 * @param {function(): SubscribableOrPromise} observableFactory The Observable
 * factory function to invoke for each Observer that subscribes to the output
 * Observable. May also return a Promise, which will be converted on the fly
 * to an Observable.
 * @return {Observable} An Observable whose Observers' subscriptions trigger
 * an invocation of the given Observable factory function.
 * @static true
 * @name defer
 * @owner Observable
 */
function defer(observableFactory) {
    return new Observable_1.Observable(function (subscriber) {
        var input;
        try {
            input = observableFactory();
        }
        catch (err) {
            subscriber.error(err);
            return undefined;
        }
        var source = input ? from_1.from(input) : empty_1.empty();
        return source.subscribe(subscriber);
    });
}
exports.defer = defer;

},{"../Observable":286,"./empty":305,"./from":307}],303:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var root_1 = require("../../util/root");
var tryCatch_1 = require("../../util/tryCatch");
var errorObject_1 = require("../../util/errorObject");
var Observable_1 = require("../../Observable");
var Subscriber_1 = require("../../Subscriber");
var map_1 = require("../../operators/map");
function getCORSRequest() {
    if (root_1.root.XMLHttpRequest) {
        return new root_1.root.XMLHttpRequest();
    }
    else if (!!root_1.root.XDomainRequest) {
        return new root_1.root.XDomainRequest();
    }
    else {
        throw new Error('CORS is not supported by your browser');
    }
}
function getXMLHttpRequest() {
    if (root_1.root.XMLHttpRequest) {
        return new root_1.root.XMLHttpRequest();
    }
    else {
        var progId = void 0;
        try {
            var progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'];
            for (var i = 0; i < 3; i++) {
                try {
                    progId = progIds[i];
                    if (new root_1.root.ActiveXObject(progId)) {
                        break;
                    }
                }
                catch (e) {
                    //suppress exceptions
                }
            }
            return new root_1.root.ActiveXObject(progId);
        }
        catch (e) {
            throw new Error('XMLHttpRequest is not supported by your browser');
        }
    }
}
function ajaxGet(url, headers) {
    if (headers === void 0) { headers = null; }
    return new AjaxObservable({ method: 'GET', url: url, headers: headers });
}
exports.ajaxGet = ajaxGet;
function ajaxPost(url, body, headers) {
    return new AjaxObservable({ method: 'POST', url: url, body: body, headers: headers });
}
exports.ajaxPost = ajaxPost;
function ajaxDelete(url, headers) {
    return new AjaxObservable({ method: 'DELETE', url: url, headers: headers });
}
exports.ajaxDelete = ajaxDelete;
function ajaxPut(url, body, headers) {
    return new AjaxObservable({ method: 'PUT', url: url, body: body, headers: headers });
}
exports.ajaxPut = ajaxPut;
function ajaxPatch(url, body, headers) {
    return new AjaxObservable({ method: 'PATCH', url: url, body: body, headers: headers });
}
exports.ajaxPatch = ajaxPatch;
var mapResponse = map_1.map(function (x, index) { return x.response; });
function ajaxGetJSON(url, headers) {
    return mapResponse(new AjaxObservable({
        method: 'GET',
        url: url,
        responseType: 'json',
        headers: headers
    }));
}
exports.ajaxGetJSON = ajaxGetJSON;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var AjaxObservable = /** @class */ (function (_super) {
    __extends(AjaxObservable, _super);
    function AjaxObservable(urlOrRequest) {
        var _this = _super.call(this) || this;
        var request = {
            async: true,
            createXHR: function () {
                return this.crossDomain ? getCORSRequest() : getXMLHttpRequest();
            },
            crossDomain: true,
            withCredentials: false,
            headers: {},
            method: 'GET',
            responseType: 'json',
            timeout: 0
        };
        if (typeof urlOrRequest === 'string') {
            request.url = urlOrRequest;
        }
        else {
            for (var prop in urlOrRequest) {
                if (urlOrRequest.hasOwnProperty(prop)) {
                    request[prop] = urlOrRequest[prop];
                }
            }
        }
        _this.request = request;
        return _this;
    }
    /** @deprecated This is an internal implementation detail, do not use. */
    AjaxObservable.prototype._subscribe = function (subscriber) {
        return new AjaxSubscriber(subscriber, this.request);
    };
    /**
     * Creates an observable for an Ajax request with either a request object with
     * url, headers, etc or a string for a URL.
     *
     * @example
     * source = Rx.Observable.ajax('/products');
     * source = Rx.Observable.ajax({ url: 'products', method: 'GET' });
     *
     * @param {string|Object} request Can be one of the following:
     *   A string of the URL to make the Ajax call.
     *   An object with the following properties
     *   - url: URL of the request
     *   - body: The body of the request
     *   - method: Method of the request, such as GET, POST, PUT, PATCH, DELETE
     *   - async: Whether the request is async
     *   - headers: Optional headers
     *   - crossDomain: true if a cross domain request, else false
     *   - createXHR: a function to override if you need to use an alternate
     *   XMLHttpRequest implementation.
     *   - resultSelector: a function to use to alter the output value type of
     *   the Observable. Gets {@link AjaxResponse} as an argument.
     * @return {Observable} An observable sequence containing the XMLHttpRequest.
     * @static true
     * @name ajax
     * @owner Observable
     * @nocollapse
    */
    AjaxObservable.create = (function () {
        var create = function (urlOrRequest) {
            return new AjaxObservable(urlOrRequest);
        };
        create.get = ajaxGet;
        create.post = ajaxPost;
        create.delete = ajaxDelete;
        create.put = ajaxPut;
        create.patch = ajaxPatch;
        create.getJSON = ajaxGetJSON;
        return create;
    })();
    return AjaxObservable;
}(Observable_1.Observable));
exports.AjaxObservable = AjaxObservable;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var AjaxSubscriber = /** @class */ (function (_super) {
    __extends(AjaxSubscriber, _super);
    function AjaxSubscriber(destination, request) {
        var _this = _super.call(this, destination) || this;
        _this.request = request;
        _this.done = false;
        var headers = request.headers = request.headers || {};
        // force CORS if requested
        if (!request.crossDomain && !headers['X-Requested-With']) {
            headers['X-Requested-With'] = 'XMLHttpRequest';
        }
        // ensure content type is set
        if (!('Content-Type' in headers) && !(root_1.root.FormData && request.body instanceof root_1.root.FormData) && typeof request.body !== 'undefined') {
            headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';
        }
        // properly serialize body
        request.body = _this.serializeBody(request.body, request.headers['Content-Type']);
        _this.send();
        return _this;
    }
    AjaxSubscriber.prototype.next = function (e) {
        this.done = true;
        var _a = this, xhr = _a.xhr, request = _a.request, destination = _a.destination;
        var response = new AjaxResponse(e, xhr, request);
        destination.next(response);
    };
    AjaxSubscriber.prototype.send = function () {
        var _a = this, request = _a.request, _b = _a.request, user = _b.user, method = _b.method, url = _b.url, async = _b.async, password = _b.password, headers = _b.headers, body = _b.body;
        var createXHR = request.createXHR;
        var xhr = tryCatch_1.tryCatch(createXHR).call(request);
        if (xhr === errorObject_1.errorObject) {
            this.error(errorObject_1.errorObject.e);
        }
        else {
            this.xhr = xhr;
            // set up the events before open XHR
            // https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest
            // You need to add the event listeners before calling open() on the request.
            // Otherwise the progress events will not fire.
            this.setupEvents(xhr, request);
            // open XHR
            var result = void 0;
            if (user) {
                result = tryCatch_1.tryCatch(xhr.open).call(xhr, method, url, async, user, password);
            }
            else {
                result = tryCatch_1.tryCatch(xhr.open).call(xhr, method, url, async);
            }
            if (result === errorObject_1.errorObject) {
                this.error(errorObject_1.errorObject.e);
                return null;
            }
            // timeout, responseType and withCredentials can be set once the XHR is open
            if (async) {
                xhr.timeout = request.timeout;
                xhr.responseType = request.responseType;
            }
            if ('withCredentials' in xhr) {
                xhr.withCredentials = !!request.withCredentials;
            }
            // set headers
            this.setHeaders(xhr, headers);
            // finally send the request
            result = body ? tryCatch_1.tryCatch(xhr.send).call(xhr, body) : tryCatch_1.tryCatch(xhr.send).call(xhr);
            if (result === errorObject_1.errorObject) {
                this.error(errorObject_1.errorObject.e);
                return null;
            }
        }
        return xhr;
    };
    AjaxSubscriber.prototype.serializeBody = function (body, contentType) {
        if (!body || typeof body === 'string') {
            return body;
        }
        else if (root_1.root.FormData && body instanceof root_1.root.FormData) {
            return body;
        }
        if (contentType) {
            var splitIndex = contentType.indexOf(';');
            if (splitIndex !== -1) {
                contentType = contentType.substring(0, splitIndex);
            }
        }
        switch (contentType) {
            case 'application/x-www-form-urlencoded':
                return Object.keys(body).map(function (key) { return encodeURIComponent(key) + "=" + encodeURIComponent(body[key]); }).join('&');
            case 'application/json':
                return JSON.stringify(body);
            default:
                return body;
        }
    };
    AjaxSubscriber.prototype.setHeaders = function (xhr, headers) {
        for (var key in headers) {
            if (headers.hasOwnProperty(key)) {
                xhr.setRequestHeader(key, headers[key]);
            }
        }
    };
    AjaxSubscriber.prototype.setupEvents = function (xhr, request) {
        var progressSubscriber = request.progressSubscriber;
        function xhrTimeout(e) {
            var _a = xhrTimeout, subscriber = _a.subscriber, progressSubscriber = _a.progressSubscriber, request = _a.request;
            if (progressSubscriber) {
                progressSubscriber.error(e);
            }
            subscriber.error(new AjaxTimeoutError(this, request)); //TODO: Make betterer.
        }
        xhr.ontimeout = xhrTimeout;
        xhrTimeout.request = request;
        xhrTimeout.subscriber = this;
        xhrTimeout.progressSubscriber = progressSubscriber;
        if (xhr.upload && 'withCredentials' in xhr) {
            if (progressSubscriber) {
                var xhrProgress_1;
                xhrProgress_1 = function (e) {
                    var progressSubscriber = xhrProgress_1.progressSubscriber;
                    progressSubscriber.next(e);
                };
                if (root_1.root.XDomainRequest) {
                    xhr.onprogress = xhrProgress_1;
                }
                else {
                    xhr.upload.onprogress = xhrProgress_1;
                }
                xhrProgress_1.progressSubscriber = progressSubscriber;
            }
            var xhrError_1;
            xhrError_1 = function (e) {
                var _a = xhrError_1, progressSubscriber = _a.progressSubscriber, subscriber = _a.subscriber, request = _a.request;
                if (progressSubscriber) {
                    progressSubscriber.error(e);
                }
                subscriber.error(new AjaxError('ajax error', this, request));
            };
            xhr.onerror = xhrError_1;
            xhrError_1.request = request;
            xhrError_1.subscriber = this;
            xhrError_1.progressSubscriber = progressSubscriber;
        }
        function xhrReadyStateChange(e) {
            return;
        }
        xhr.onreadystatechange = xhrReadyStateChange;
        xhrReadyStateChange.subscriber = this;
        xhrReadyStateChange.progressSubscriber = progressSubscriber;
        xhrReadyStateChange.request = request;
        function xhrLoad(e) {
            var _a = xhrLoad, subscriber = _a.subscriber, progressSubscriber = _a.progressSubscriber, request = _a.request;
            if (this.readyState === 4) {
                // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)
                var status_1 = this.status === 1223 ? 204 : this.status;
                var response = (this.responseType === 'text' ? (this.response || this.responseText) : this.response);
                // fix status code when it is 0 (0 status is undocumented).
                // Occurs when accessing file resources or on Android 4.1 stock browser
                // while retrieving files from application cache.
                if (status_1 === 0) {
                    status_1 = response ? 200 : 0;
                }
                // 4xx and 5xx should error (https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html)
                if (status_1 < 400) {
                    if (progressSubscriber) {
                        progressSubscriber.complete();
                    }
                    subscriber.next(e);
                    subscriber.complete();
                }
                else {
                    if (progressSubscriber) {
                        progressSubscriber.error(e);
                    }
                    subscriber.error(new AjaxError('ajax error ' + status_1, this, request));
                }
            }
        }
        xhr.onload = xhrLoad;
        xhrLoad.subscriber = this;
        xhrLoad.progressSubscriber = progressSubscriber;
        xhrLoad.request = request;
    };
    AjaxSubscriber.prototype.unsubscribe = function () {
        var _a = this, done = _a.done, xhr = _a.xhr;
        if (!done && xhr && xhr.readyState !== 4 && typeof xhr.abort === 'function') {
            xhr.abort();
        }
        _super.prototype.unsubscribe.call(this);
    };
    return AjaxSubscriber;
}(Subscriber_1.Subscriber));
exports.AjaxSubscriber = AjaxSubscriber;
/**
 * A normalized AJAX response.
 *
 * @see {@link ajax}
 *
 * @class AjaxResponse
 */
var AjaxResponse = /** @class */ (function () {
    function AjaxResponse(originalEvent, xhr, request) {
        this.originalEvent = originalEvent;
        this.xhr = xhr;
        this.request = request;
        this.status = xhr.status;
        this.responseType = xhr.responseType || request.responseType;
        this.response = parseXhrResponse(this.responseType, xhr);
    }
    return AjaxResponse;
}());
exports.AjaxResponse = AjaxResponse;
/**
 * A normalized AJAX error.
 *
 * @see {@link ajax}
 *
 * @class AjaxError
 */
var AjaxError = /** @class */ (function (_super) {
    __extends(AjaxError, _super);
    function AjaxError(message, xhr, request) {
        var _this = _super.call(this, message) || this;
        _this.name = 'AjaxError';
        _this.message = message;
        _this.xhr = xhr;
        _this.request = request;
        _this.status = xhr.status;
        _this.responseType = xhr.responseType || request.responseType;
        _this.response = parseXhrResponse(_this.responseType, xhr);
        Object.setPrototypeOf(_this, AjaxError.prototype);
        return _this;
    }
    return AjaxError;
}(Error));
exports.AjaxError = AjaxError;
function parseXhrResponse(responseType, xhr) {
    switch (responseType) {
        case 'json':
            // HACK(benlesh): TypeScript shennanigans
            // tslint:disable-next-line:no-any XMLHttpRequest is defined to always have 'response' inferring xhr as never for the else clause.
            if ('response' in xhr) {
                //IE does not support json as responseType, parse it internally
                return xhr.responseType ? xhr.response : JSON.parse(xhr.response || xhr.responseText || 'null');
            }
            else {
                return JSON.parse(xhr.responseText || 'null');
            }
        case 'xml':
            return xhr.responseXML;
        case 'text':
        default:
            // HACK(benlesh): TypeScript shennanigans
            // tslint:disable-next-line:no-any XMLHttpRequest is defined to always have 'response' inferring xhr as never for the else sub-expression.
            return ('response' in xhr) ? xhr.response : xhr.responseText;
    }
}
/**
 * @see {@link ajax}
 *
 * @class AjaxTimeoutError
 */
var AjaxTimeoutError = /** @class */ (function (_super) {
    __extends(AjaxTimeoutError, _super);
    function AjaxTimeoutError(xhr, request) {
        var _this = _super.call(this, 'ajax timeout', xhr, request) || this;
        _this.name = 'AjaxTimeoutError';
        Object.setPrototypeOf(_this, AjaxTimeoutError.prototype);
        return _this;
    }
    return AjaxTimeoutError;
}(AjaxError));
exports.AjaxTimeoutError = AjaxTimeoutError;

},{"../../Observable":286,"../../Subscriber":293,"../../operators/map":368,"../../util/errorObject":455,"../../util/root":472,"../../util/tryCatch":480}],304:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var AjaxObservable_1 = require("./AjaxObservable");
exports.ajax = AjaxObservable_1.AjaxObservable.create;

},{"./AjaxObservable":303}],305:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Observable_1 = require("../Observable");
/**
 * The same Observable instance returned by any call to {@link empty} without a
 * {@link Scheduler}. It is preferrable to use this over `empty()`.
 */
exports.EMPTY = new Observable_1.Observable(function (subscriber) { return subscriber.complete(); });
/**
 * Creates an Observable that emits no items to the Observer and immediately
 * emits a complete notification.
 *
 * <span class="informal">Just emits 'complete', and nothing else.
 * </span>
 *
 * <img src="./img/empty.png" width="100%">
 *
 * This static operator is useful for creating a simple Observable that only
 * emits the complete notification. It can be used for composing with other
 * Observables, such as in a {@link mergeMap}.
 *
 * @example <caption>Emit the number 7, then complete.</caption>
 * var result = Rx.Observable.empty().startWith(7);
 * result.subscribe(x => my_console_log(x));
 *
 * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>
 * var interval = Rx.Observable.interval(1000);
 * var result = interval.mergeMap(x =>
 *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()
 * );
 * result.subscribe(x => my_console_log(x));
 *
 * // Results in the following to the console:
 * // x is equal to the count on the interval eg(0,1,2,3,...)
 * // x will occur every 1000ms
 * // if x % 2 is equal to 1 print abc
 * // if x % 2 is not equal to 1 nothing will be output
 *
 * @see {@link create}
 * @see {@link never}
 * @see {@link of}
 * @see {@link throw}
 *
 * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling
 * the emission of the complete notification.
 * @return {Observable} An "empty" Observable: emits only the complete
 * notification.
 * @static true
 * @name empty
 * @owner Observable
 * @deprecated Deprecated in favor of using EMPTY constant.
 */
function empty(scheduler) {
    return scheduler ? emptyScheduled(scheduler) : exports.EMPTY;
}
exports.empty = empty;
function emptyScheduled(scheduler) {
    return new Observable_1.Observable(function (subscriber) { return scheduler.schedule(function () { return subscriber.complete(); }); });
}
exports.emptyScheduled = emptyScheduled;

},{"../Observable":286}],306:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Observable_1 = require("../Observable");
var isArray_1 = require("../util/isArray");
var empty_1 = require("./empty");
var subscribeToResult_1 = require("../util/subscribeToResult");
var OuterSubscriber_1 = require("../OuterSubscriber");
var map_1 = require("../operators/map");
/* tslint:enable:max-line-length */
/**
 * Joins last values emitted by passed Observables.
 *
 * <span class="informal">Wait for Observables to complete and then combine last values they emitted.</span>
 *
 * <img src="./img/forkJoin.png" width="100%">
 *
 * `forkJoin` is an operator that takes any number of Observables which can be passed either as an array
 * or directly as arguments. If no input Observables are provided, resulting stream will complete
 * immediately.
 *
 * `forkJoin` will wait for all passed Observables to complete and then it will emit an array with last
 * values from corresponding Observables. So if you pass `n` Observables to the operator, resulting
 * array will have `n` values, where first value is the last thing emitted by the first Observable,
 * second value is the last thing emitted by the second Observable and so on. That means `forkJoin` will
 * not emit more than once and it will complete after that. If you need to emit combined values not only
 * at the end of lifecycle of passed Observables, but also throughout it, try out {@link combineLatest}
 * or {@link zip} instead.
 *
 * In order for resulting array to have the same length as the number of input Observables, whenever any of
 * that Observables completes without emitting any value, `forkJoin` will complete at that moment as well
 * and it will not emit anything either, even if it already has some last values from other Observables.
 * Conversely, if there is an Observable that never completes, `forkJoin` will never complete as well,
 * unless at any point some other Observable completes without emitting value, which brings us back to
 * the previous case. Overall, in order for `forkJoin` to emit a value, all Observables passed as arguments
 * have to emit something at least once and complete.
 *
 * If any input Observable errors at some point, `forkJoin` will error as well and all other Observables
 * will be immediately unsubscribed.
 *
 * Optionally `forkJoin` accepts project function, that will be called with values which normally
 * would land in emitted array. Whatever is returned by project function, will appear in output
 * Observable instead. This means that default project can be thought of as a function that takes
 * all its arguments and puts them into an array. Note that project function will be called only
 * when output Observable is supposed to emit a result.
 *
 * @example <caption>Use forkJoin with operator emitting immediately</caption>
 * import { forkJoin, of } from 'rxjs';
 *
 * const observable = forkJoin(
 *   of(1, 2, 3, 4),
 *   of(5, 6, 7, 8)
 * );
 * observable.subscribe(
 *   value => my_console_log(value),
 *   err => {},
 *   () => my_console_log('This is how it ends!')
 * );
 *
 * // Logs:
 * // [4, 8]
 * // "This is how it ends!"
 *
 *
 * @example <caption>Use forkJoin with operator emitting after some time</caption>
 * import { forkJoin, interval } from 'rxjs';
 * import { take } from 'rxjs/operators';
 *
 * const observable = forkJoin(
 *   interval(1000).pipe(take(3)), // emit 0, 1, 2 every second and complete
 *   interval(500).pipe(take(4)) // emit 0, 1, 2, 3 every half a second and complete
 * );
 * observable.subscribe(
 *   value => my_console_log(value),
 *   err => {},
 *   () => my_console_log('This is how it ends!')
 * );
 *
 * // Logs:
 * // [2, 3] after 3 seconds
 * // "This is how it ends!" immediately after
 *
 *
 * @example <caption>Use forkJoin with project function</caption>
 * import { jorkJoin, interval } from 'rxjs';
 * import { take } from 'rxjs/operators';
 *
 * const observable = forkJoin(
 *   interval(1000).pipe(take(3)), // emit 0, 1, 2 every second and complete
 *   interval(500).pipe(take(4)), // emit 0, 1, 2, 3 every half a second and complete
 *   (n, m) => n + m
 * );
 * observable.subscribe(
 *   value => my_console_log(value),
 *   err => {},
 *   () => my_console_log('This is how it ends!')
 * );
 *
 * // Logs:
 * // 5 after 3 seconds
 * // "This is how it ends!" immediately after
 *
 * @see {@link combineLatest}
 * @see {@link zip}
 *
 * @param {...ObservableInput} sources Any number of Observables provided either as an array or as an arguments
 * passed directly to the operator.
 * @param {function} [project] Function that takes values emitted by input Observables and returns value
 * that will appear in resulting Observable instead of default array.
 * @return {Observable} Observable emitting either an array of last values emitted by passed Observables
 * or value from project function.
 */
function forkJoin() {
    var sources = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        sources[_i] = arguments[_i];
    }
    var resultSelector;
    if (typeof sources[sources.length - 1] === 'function') {
        // DEPRECATED PATH
        resultSelector = sources.pop();
    }
    // if the first and only other argument is an array
    // assume it's been called with `forkJoin([obs1, obs2, obs3])`
    if (sources.length === 1 && isArray_1.isArray(sources[0])) {
        sources = sources[0];
    }
    if (sources.length === 0) {
        return empty_1.EMPTY;
    }
    if (resultSelector) {
        // DEPRECATED PATH
        return forkJoin(sources).pipe(map_1.map(function (args) { return resultSelector.apply(void 0, args); }));
    }
    return new Observable_1.Observable(function (subscriber) {
        return new ForkJoinSubscriber(subscriber, sources);
    });
}
exports.forkJoin = forkJoin;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var ForkJoinSubscriber = /** @class */ (function (_super) {
    __extends(ForkJoinSubscriber, _super);
    function ForkJoinSubscriber(destination, sources) {
        var _this = _super.call(this, destination) || this;
        _this.sources = sources;
        _this.completed = 0;
        _this.haveValues = 0;
        var len = sources.length;
        _this.values = new Array(len);
        for (var i = 0; i < len; i++) {
            var source = sources[i];
            var innerSubscription = subscribeToResult_1.subscribeToResult(_this, source, null, i);
            if (innerSubscription) {
                _this.add(innerSubscription);
            }
        }
        return _this;
    }
    ForkJoinSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.values[outerIndex] = innerValue;
        if (!innerSub._hasValue) {
            innerSub._hasValue = true;
            this.haveValues++;
        }
    };
    ForkJoinSubscriber.prototype.notifyComplete = function (innerSub) {
        var _a = this, destination = _a.destination, haveValues = _a.haveValues, values = _a.values;
        var len = values.length;
        if (!innerSub._hasValue) {
            destination.complete();
            return;
        }
        this.completed++;
        if (this.completed !== len) {
            return;
        }
        if (haveValues === len) {
            destination.next(values);
        }
        destination.complete();
    };
    return ForkJoinSubscriber;
}(OuterSubscriber_1.OuterSubscriber));

},{"../Observable":286,"../OuterSubscriber":288,"../operators/map":368,"../util/isArray":458,"../util/subscribeToResult":478,"./empty":305}],307:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Observable_1 = require("../Observable");
var isPromise_1 = require("../util/isPromise");
var isArrayLike_1 = require("../util/isArrayLike");
var isInteropObservable_1 = require("../util/isInteropObservable");
var isIterable_1 = require("../util/isIterable");
var fromArray_1 = require("./fromArray");
var fromPromise_1 = require("./fromPromise");
var fromIterable_1 = require("./fromIterable");
var fromObservable_1 = require("./fromObservable");
var subscribeTo_1 = require("../util/subscribeTo");
function from(input, scheduler) {
    if (!scheduler) {
        if (input instanceof Observable_1.Observable) {
            return input;
        }
        return new Observable_1.Observable(subscribeTo_1.subscribeTo(input));
    }
    if (input != null) {
        if (isInteropObservable_1.isInteropObservable(input)) {
            return fromObservable_1.fromObservable(input, scheduler);
        }
        else if (isPromise_1.isPromise(input)) {
            return fromPromise_1.fromPromise(input, scheduler);
        }
        else if (isArrayLike_1.isArrayLike(input)) {
            return fromArray_1.fromArray(input, scheduler);
        }
        else if (isIterable_1.isIterable(input) || typeof input === 'string') {
            return fromIterable_1.fromIterable(input, scheduler);
        }
    }
    throw new TypeError((input !== null && typeof input || input) + ' is not observable');
}
exports.from = from;

},{"../Observable":286,"../util/isArrayLike":459,"../util/isInteropObservable":462,"../util/isIterable":463,"../util/isPromise":467,"../util/subscribeTo":473,"./fromArray":308,"./fromIterable":311,"./fromObservable":312,"./fromPromise":313}],308:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Observable_1 = require("../Observable");
var Subscription_1 = require("../Subscription");
var subscribeToArray_1 = require("../util/subscribeToArray");
function fromArray(input, scheduler) {
    if (!scheduler) {
        return new Observable_1.Observable(subscribeToArray_1.subscribeToArray(input));
    }
    else {
        return new Observable_1.Observable(function (subscriber) {
            var sub = new Subscription_1.Subscription();
            var i = 0;
            sub.add(scheduler.schedule(function () {
                if (i === input.length) {
                    subscriber.complete();
                    return;
                }
                subscriber.next(input[i++]);
                if (!subscriber.closed) {
                    sub.add(this.schedule());
                }
            }));
            return sub;
        });
    }
}
exports.fromArray = fromArray;

},{"../Observable":286,"../Subscription":294,"../util/subscribeToArray":474}],309:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Observable_1 = require("../Observable");
var isArray_1 = require("../util/isArray");
var isFunction_1 = require("../util/isFunction");
var map_1 = require("../operators/map");
var toString = Object.prototype.toString;
/* tslint:enable:max-line-length */
/**
 * Creates an Observable that emits events of a specific type coming from the
 * given event target.
 *
 * <span class="informal">Creates an Observable from DOM events, or Node.js
 * EventEmitter events or others.</span>
 *
 * <img src="./img/fromEvent.png" width="100%">
 *
 * `fromEvent` accepts as a first argument event target, which is an object with methods
 * for registering event handler functions. As a second argument it takes string that indicates
 * type of event we want to listen for. `fromEvent` supports selected types of event targets,
 * which are described in detail below. If your event target does not match any of the ones listed,
 * you should use {@link fromEventPattern}, which can be used on arbitrary APIs.
 * When it comes to APIs supported by `fromEvent`, their methods for adding and removing event
 * handler functions have different names, but they all accept a string describing event type
 * and function itself, which will be called whenever said event happens.
 *
 * Every time resulting Observable is subscribed, event handler function will be registered
 * to event target on given event type. When that event fires, value
 * passed as a first argument to registered function will be emitted by output Observable.
 * When Observable is unsubscribed, function will be unregistered from event target.
 *
 * Note that if event target calls registered function with more than one argument, second
 * and following arguments will not appear in resulting stream. In order to get access to them,
 * you can pass to `fromEvent` optional project function, which will be called with all arguments
 * passed to event handler. Output Observable will then emit value returned by project function,
 * instead of the usual value.
 *
 * Remember that event targets listed below are checked via duck typing. It means that
 * no matter what kind of object you have and no matter what environment you work in,
 * you can safely use `fromEvent` on that object if it exposes described methods (provided
 * of course they behave as was described above). So for example if Node.js library exposes
 * event target which has the same method names as DOM EventTarget, `fromEvent` is still
 * a good choice.
 *
 * If the API you use is more callback then event handler oriented (subscribed
 * callback function fires only once and thus there is no need to manually
 * unregister it), you should use {@link bindCallback} or {@link bindNodeCallback}
 * instead.
 *
 * `fromEvent` supports following types of event targets:
 *
 * **DOM EventTarget**
 *
 * This is an object with `addEventListener` and `removeEventListener` methods.
 *
 * In the browser, `addEventListener` accepts - apart from event type string and event
 * handler function arguments - optional third parameter, which is either an object or boolean,
 * both used for additional configuration how and when passed function will be called. When
 * `fromEvent` is used with event target of that type, you can provide this values
 * as third parameter as well.
 *
 * **Node.js EventEmitter**
 *
 * An object with `addListener` and `removeListener` methods.
 *
 * **JQuery-style event target**
 *
 * An object with `on` and `off` methods
 *
 * **DOM NodeList**
 *
 * List of DOM Nodes, returned for example by `document.querySelectorAll` or `Node.childNodes`.
 *
 * Although this collection is not event target in itself, `fromEvent` will iterate over all Nodes
 * it contains and install event handler function in every of them. When returned Observable
 * is unsubscribed, function will be removed from all Nodes.
 *
 * **DOM HtmlCollection**
 *
 * Just as in case of NodeList it is a collection of DOM nodes. Here as well event handler function is
 * installed and removed in each of elements.
 *
 *
 * @example <caption>Emits clicks happening on the DOM document</caption>
 * var clicks = fromEvent(document, 'click');
 * clicks.subscribe(x => my_console_log(x));
 *
 * // Results in:
 * // MouseEvent object logged to console every time a click
 * // occurs on the document.
 *
 *
 * @example <caption>Use addEventListener with capture option</caption>
 * var clicksInDocument = fromEvent(document, 'click', true); // note optional configuration parameter
 *                                                                          // which will be passed to addEventListener
 * var clicksInDiv = fromEvent(someDivInDocument, 'click');
 *
 * clicksInDocument.subscribe(() => my_console_log('document'));
 * clicksInDiv.subscribe(() => my_console_log('div'));
 *
 * // By default events bubble UP in DOM tree, so normally
 * // when we would click on div in document
 * // "div" would be logged first and then "document".
 * // Since we specified optional `capture` option, document
 * // will catch event when it goes DOWN DOM tree, so console
 * // will log "document" and then "div".
 *
 * @see {@link bindCallback}
 * @see {@link bindNodeCallback}
 * @see {@link fromEventPattern}
 *
 * @param {FromEventTarget<T>} target The DOM EventTarget, Node.js
 * EventEmitter, JQuery-like event target, NodeList or HTMLCollection to attach the event handler to.
 * @param {string} eventName The event name of interest, being emitted by the
 * `target`.
 * @param {EventListenerOptions} [options] Options to pass through to addEventListener
 * @return {Observable<T>}
 * @name fromEvent
 */
function fromEvent(target, eventName, options, resultSelector) {
    if (isFunction_1.isFunction(options)) {
        // DEPRECATED PATH
        resultSelector = options;
        options = undefined;
    }
    if (resultSelector) {
        // DEPRECATED PATH
        return fromEvent(target, eventName, options).pipe(map_1.map(function (args) { return isArray_1.isArray(args) ? resultSelector.apply(void 0, args) : resultSelector(args); }));
    }
    return new Observable_1.Observable(function (subscriber) {
        function handler(e) {
            if (arguments.length > 1) {
                subscriber.next(Array.prototype.slice.call(arguments));
            }
            else {
                subscriber.next(e);
            }
        }
        setupSubscription(target, eventName, handler, subscriber, options);
    });
}
exports.fromEvent = fromEvent;
function setupSubscription(sourceObj, eventName, handler, subscriber, options) {
    var unsubscribe;
    if (isEventTarget(sourceObj)) {
        var source_1 = sourceObj;
        sourceObj.addEventListener(eventName, handler, options);
        unsubscribe = function () { return source_1.removeEventListener(eventName, handler, options); };
    }
    else if (isJQueryStyleEventEmitter(sourceObj)) {
        var source_2 = sourceObj;
        sourceObj.on(eventName, handler);
        unsubscribe = function () { return source_2.off(eventName, handler); };
    }
    else if (isNodeStyleEventEmitter(sourceObj)) {
        var source_3 = sourceObj;
        sourceObj.addListener(eventName, handler);
        unsubscribe = function () { return source_3.removeListener(eventName, handler); };
    }
    else if (sourceObj && sourceObj.length) {
        for (var i = 0, len = sourceObj.length; i < len; i++) {
            setupSubscription(sourceObj[i], eventName, handler, subscriber, options);
        }
    }
    else {
        throw new TypeError('Invalid event target');
    }
    subscriber.add(unsubscribe);
}
function isNodeStyleEventEmitter(sourceObj) {
    return sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';
}
function isJQueryStyleEventEmitter(sourceObj) {
    return sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';
}
function isEventTarget(sourceObj) {
    return sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';
}

},{"../Observable":286,"../operators/map":368,"../util/isArray":458,"../util/isFunction":461}],310:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Observable_1 = require("../Observable");
var isArray_1 = require("../util/isArray");
var isFunction_1 = require("../util/isFunction");
var map_1 = require("../operators/map");
/* tslint:enable:max-line-length */
/**
 * Creates an Observable from an API based on addHandler/removeHandler
 * functions.
 *
 * <span class="informal">Converts any addHandler/removeHandler API to an
 * Observable.</span>
 *
 * <img src="./img/fromEventPattern.png" width="100%">
 *
 * Creates an Observable by using the `addHandler` and `removeHandler`
 * functions to add and remove the handlers. The `addHandler` is
 * called when the output Observable is subscribed, and `removeHandler` is
 * called when the Subscription is unsubscribed.
 *
 * @example <caption>Emits clicks happening on the DOM document</caption>
 * function addClickHandler(handler) {
 *   document.addEventListener('click', handler);
 * }
 *
 * function removeClickHandler(handler) {
 *   document.removeEventListener('click', handler);
 * }
 *
 * var clicks = fromEventPattern(
 *   addClickHandler,
 *   removeClickHandler
 * );
 * clicks.subscribe(x => my_console_log(x));
 *
 * @see {@link from}
 * @see {@link fromEvent}
 *
 * @param {function(handler: Function): any} addHandler A function that takes
 * a `handler` function as argument and attaches it somehow to the actual
 * source of events.
 * @param {function(handler: Function, signal?: any): void} [removeHandler] An optional function that
 * takes a `handler` function as argument and removes it in case it was
 * previously attached using `addHandler`. if addHandler returns signal to teardown when remove,
 * removeHandler function will forward it.
 * @return {Observable<T>}
 * @name fromEventPattern
 */
function fromEventPattern(addHandler, removeHandler, resultSelector) {
    if (resultSelector) {
        // DEPRECATED PATH
        return fromEventPattern(addHandler, removeHandler).pipe(map_1.map(function (args) { return isArray_1.isArray(args) ? resultSelector.apply(void 0, args) : resultSelector(args); }));
    }
    return new Observable_1.Observable(function (subscriber) {
        var handler = function () {
            var e = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                e[_i] = arguments[_i];
            }
            return subscriber.next(e.length === 1 ? e[0] : e);
        };
        var retValue;
        try {
            retValue = addHandler(handler);
        }
        catch (err) {
            subscriber.error(err);
            return undefined;
        }
        if (!isFunction_1.isFunction(removeHandler)) {
            return undefined;
        }
        return function () { return removeHandler(handler, retValue); };
    });
}
exports.fromEventPattern = fromEventPattern;

},{"../Observable":286,"../operators/map":368,"../util/isArray":458,"../util/isFunction":461}],311:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Observable_1 = require("../Observable");
var Subscription_1 = require("../Subscription");
var iterator_1 = require("../symbol/iterator");
var subscribeToIterable_1 = require("../util/subscribeToIterable");
function fromIterable(input, scheduler) {
    if (!input) {
        throw new Error('Iterable cannot be null');
    }
    if (!scheduler) {
        return new Observable_1.Observable(subscribeToIterable_1.subscribeToIterable(input));
    }
    else {
        return new Observable_1.Observable(function (subscriber) {
            var sub = new Subscription_1.Subscription();
            var iterator;
            sub.add(function () {
                // Finalize generators
                if (iterator && typeof iterator.return === 'function') {
                    iterator.return();
                }
            });
            sub.add(scheduler.schedule(function () {
                iterator = input[iterator_1.iterator]();
                sub.add(scheduler.schedule(function () {
                    if (subscriber.closed) {
                        return;
                    }
                    var value;
                    var done;
                    try {
                        var result = iterator.next();
                        value = result.value;
                        done = result.done;
                    }
                    catch (err) {
                        subscriber.error(err);
                        return;
                    }
                    if (done) {
                        subscriber.complete();
                    }
                    else {
                        subscriber.next(value);
                        this.schedule();
                    }
                }));
            }));
            return sub;
        });
    }
}
exports.fromIterable = fromIterable;

},{"../Observable":286,"../Subscription":294,"../symbol/iterator":446,"../util/subscribeToIterable":475}],312:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Observable_1 = require("../Observable");
var Subscription_1 = require("../Subscription");
var observable_1 = require("../symbol/observable");
var subscribeToObservable_1 = require("../util/subscribeToObservable");
function fromObservable(input, scheduler) {
    if (!scheduler) {
        return new Observable_1.Observable(subscribeToObservable_1.subscribeToObservable(input));
    }
    else {
        return new Observable_1.Observable(function (subscriber) {
            var sub = new Subscription_1.Subscription();
            sub.add(scheduler.schedule(function () {
                var observable = input[observable_1.observable]();
                sub.add(observable.subscribe({
                    next: function (value) { sub.add(scheduler.schedule(function () { return subscriber.next(value); })); },
                    error: function (err) { sub.add(scheduler.schedule(function () { return subscriber.error(err); })); },
                    complete: function () { sub.add(scheduler.schedule(function () { return subscriber.complete(); })); },
                }));
            }));
            return sub;
        });
    }
}
exports.fromObservable = fromObservable;

},{"../Observable":286,"../Subscription":294,"../symbol/observable":447,"../util/subscribeToObservable":476}],313:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Observable_1 = require("../Observable");
var Subscription_1 = require("../Subscription");
var subscribeToPromise_1 = require("../util/subscribeToPromise");
function fromPromise(input, scheduler) {
    if (!scheduler) {
        return new Observable_1.Observable(subscribeToPromise_1.subscribeToPromise(input));
    }
    else {
        return new Observable_1.Observable(function (subscriber) {
            var sub = new Subscription_1.Subscription();
            sub.add(scheduler.schedule(function () { return input.then(function (value) {
                sub.add(scheduler.schedule(function () {
                    subscriber.next(value);
                    sub.add(scheduler.schedule(function () { return subscriber.complete(); }));
                }));
            }, function (err) {
                sub.add(scheduler.schedule(function () { return subscriber.error(err); }));
            }); }));
            return sub;
        });
    }
}
exports.fromPromise = fromPromise;

},{"../Observable":286,"../Subscription":294,"../util/subscribeToPromise":477}],314:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Observable_1 = require("../Observable");
var identity_1 = require("../util/identity");
var isScheduler_1 = require("../util/isScheduler");
function generate(initialStateOrOptions, condition, iterate, resultSelectorOrObservable, scheduler) {
    var resultSelector;
    var initialState;
    if (arguments.length == 1) {
        var options = initialStateOrOptions;
        initialState = options.initialState;
        condition = options.condition;
        iterate = options.iterate;
        resultSelector = options.resultSelector || identity_1.identity;
        scheduler = options.scheduler;
    }
    else if (resultSelectorOrObservable === undefined || isScheduler_1.isScheduler(resultSelectorOrObservable)) {
        initialState = initialStateOrOptions;
        resultSelector = identity_1.identity;
        scheduler = resultSelectorOrObservable;
    }
    else {
        initialState = initialStateOrOptions;
        resultSelector = resultSelectorOrObservable;
    }
    return new Observable_1.Observable(function (subscriber) {
        var state = initialState;
        if (scheduler) {
            return scheduler.schedule(dispatch, 0, {
                subscriber: subscriber,
                iterate: iterate,
                condition: condition,
                resultSelector: resultSelector,
                state: state
            });
        }
        do {
            if (condition) {
                var conditionResult = void 0;
                try {
                    conditionResult = condition(state);
                }
                catch (err) {
                    subscriber.error(err);
                    return undefined;
                }
                if (!conditionResult) {
                    subscriber.complete();
                    break;
                }
            }
            var value = void 0;
            try {
                value = resultSelector(state);
            }
            catch (err) {
                subscriber.error(err);
                return undefined;
            }
            subscriber.next(value);
            if (subscriber.closed) {
                break;
            }
            try {
                state = iterate(state);
            }
            catch (err) {
                subscriber.error(err);
                return undefined;
            }
        } while (true);
        return undefined;
    });
}
exports.generate = generate;
function dispatch(state) {
    var subscriber = state.subscriber, condition = state.condition;
    if (subscriber.closed) {
        return undefined;
    }
    if (state.needIterate) {
        try {
            state.state = state.iterate(state.state);
        }
        catch (err) {
            subscriber.error(err);
            return undefined;
        }
    }
    else {
        state.needIterate = true;
    }
    if (condition) {
        var conditionResult = void 0;
        try {
            conditionResult = condition(state.state);
        }
        catch (err) {
            subscriber.error(err);
            return undefined;
        }
        if (!conditionResult) {
            subscriber.complete();
            return undefined;
        }
        if (subscriber.closed) {
            return undefined;
        }
    }
    var value;
    try {
        value = state.resultSelector(state.state);
    }
    catch (err) {
        subscriber.error(err);
        return undefined;
    }
    if (subscriber.closed) {
        return undefined;
    }
    subscriber.next(value);
    if (subscriber.closed) {
        return undefined;
    }
    return this.schedule(state);
}

},{"../Observable":286,"../util/identity":457,"../util/isScheduler":468}],315:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var defer_1 = require("./defer");
var empty_1 = require("./empty");
/**
 * Decides at subscription time which Observable will actually be subscribed.
 *
 * <span class="informal">`If` statement for Observables.</span>
 *
 * `if` accepts a condition function and two Observables. When
 * an Observable returned by the operator is subscribed, condition function will be called.
 * Based on what boolean it returns at that moment, consumer will subscribe either to
 * the first Observable (if condition was true) or to the second (if condition was false). Condition
 * function may also not return anything - in that case condition will be evaluated as false and
 * second Observable will be subscribed.
 *
 * Note that Observables for both cases (true and false) are optional. If condition points to an Observable that
 * was left undefined, resulting stream will simply complete immediately. That allows you to, rather
 * then controlling which Observable will be subscribed, decide at runtime if consumer should have access
 * to given Observable or not.
 *
 * If you have more complex logic that requires decision between more than two Observables, {@link defer}
 * will probably be a better choice. Actually `if` can be easily implemented with {@link defer}
 * and exists only for convenience and readability reasons.
 *
 *
 * @example <caption>Change at runtime which Observable will be subscribed</caption>
 * let subscribeToFirst;
 * const firstOrSecond = Rx.Observable.if(
 *   () => subscribeToFirst,
 *   Rx.Observable.of('first'),
 *   Rx.Observable.of('second')
 * );
 *
 * subscribeToFirst = true;
 * firstOrSecond.subscribe(value => my_console_log(value));
 *
 * // Logs:
 * // "first"
 *
 * subscribeToFirst = false;
 * firstOrSecond.subscribe(value => my_console_log(value));
 *
 * // Logs:
 * // "second"
 *
 *
 * @example <caption>Control an access to an Observable</caption>
 * let accessGranted;
 * const observableIfYouHaveAccess = Rx.Observable.if(
 *   () => accessGranted,
 *   Rx.Observable.of('It seems you have an access...') // Note that only one Observable is passed to the operator.
 * );
 *
 * accessGranted = true;
 * observableIfYouHaveAccess.subscribe(
 *   value => my_console_log(value),
 *   err => {},
 *   () => my_console_log('The end')
 * );
 *
 * // Logs:
 * // "It seems you have an access..."
 * // "The end"
 *
 * accessGranted = false;
 * observableIfYouHaveAccess.subscribe(
 *   value => my_console_log(value),
 *   err => {},
 *   () => my_console_log('The end')
 * );
 *
 * // Logs:
 * // "The end"
 *
 * @see {@link defer}
 *
 * @param {function(): boolean} condition Condition which Observable should be chosen.
 * @param {Observable} [trueObservable] An Observable that will be subscribed if condition is true.
 * @param {Observable} [falseObservable] An Observable that will be subscribed if condition is false.
 * @return {Observable} Either first or second Observable, depending on condition.
 * @static true
 * @name iif
 * @owner Observable
 */
function iif(condition, trueResult, falseResult) {
    if (trueResult === void 0) { trueResult = empty_1.EMPTY; }
    if (falseResult === void 0) { falseResult = empty_1.EMPTY; }
    return defer_1.defer(function () { return condition() ? trueResult : falseResult; });
}
exports.iif = iif;

},{"./defer":302,"./empty":305}],316:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Observable_1 = require("../Observable");
var async_1 = require("../scheduler/async");
var isNumeric_1 = require("../util/isNumeric");
/**
 * Creates an Observable that emits sequential numbers every specified
 * interval of time, on a specified IScheduler.
 *
 * <span class="informal">Emits incremental numbers periodically in time.
 * </span>
 *
 * <img src="./img/interval.png" width="100%">
 *
 * `interval` returns an Observable that emits an infinite sequence of
 * ascending integers, with a constant interval of time of your choosing
 * between those emissions. The first emission is not sent immediately, but
 * only after the first period has passed. By default, this operator uses the
 * `async` IScheduler to provide a notion of time, but you may pass any
 * IScheduler to it.
 *
 * @example <caption>Emits ascending numbers, one every second (1000ms)</caption>
 * var numbers = Rx.Observable.interval(1000);
 * numbers.subscribe(x => my_console_log(x));
 *
 * @see {@link timer}
 * @see {@link delay}
 *
 * @param {number} [period=0] The interval size in milliseconds (by default)
 * or the time unit determined by the scheduler's clock.
 * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling
 * the emission of values, and providing a notion of "time".
 * @return {Observable} An Observable that emits a sequential number each time
 * interval.
 * @static true
 * @name interval
 * @owner Observable
 */
function interval(period, scheduler) {
    if (period === void 0) { period = 0; }
    if (scheduler === void 0) { scheduler = async_1.async; }
    if (!isNumeric_1.isNumeric(period) || period < 0) {
        period = 0;
    }
    if (!scheduler || typeof scheduler.schedule !== 'function') {
        scheduler = async_1.async;
    }
    return new Observable_1.Observable(function (subscriber) {
        subscriber.add(scheduler.schedule(dispatch, period, { subscriber: subscriber, counter: 0, period: period }));
        return subscriber;
    });
}
exports.interval = interval;
function dispatch(state) {
    var subscriber = state.subscriber, counter = state.counter, period = state.period;
    subscriber.next(counter);
    this.schedule({ subscriber: subscriber, counter: counter + 1, period: period }, period);
}

},{"../Observable":286,"../scheduler/async":444,"../util/isNumeric":464}],317:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Observable_1 = require("../Observable");
var isScheduler_1 = require("../util/isScheduler");
var mergeAll_1 = require("../operators/mergeAll");
var fromArray_1 = require("./fromArray");
/* tslint:enable:max-line-length */
/**
 * Creates an output Observable which concurrently emits all values from every
 * given input Observable.
 *
 * <span class="informal">Flattens multiple Observables together by blending
 * their values into one Observable.</span>
 *
 * <img src="./img/merge.png" width="100%">
 *
 * `merge` subscribes to each given input Observable (as arguments), and simply
 * forwards (without doing any transformation) all the values from all the input
 * Observables to the output Observable. The output Observable only completes
 * once all input Observables have completed. Any error delivered by an input
 * Observable will be immediately emitted on the output Observable.
 *
 * @example <caption>Merge together two Observables: 1s interval and clicks</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var timer = Rx.Observable.interval(1000);
 * var clicksOrTimer = Rx.Observable.merge(clicks, timer);
 * clicksOrTimer.subscribe(x => my_console_log(x));
 *
 * // Results in the following:
 * // timer will emit ascending values, one every second(1000ms) to console
 * // clicks logs MouseEvents to console everytime the "document" is clicked
 * // Since the two streams are merged you see these happening
 * // as they occur.
 *
 * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>
 * var timer1 = Rx.Observable.interval(1000).take(10);
 * var timer2 = Rx.Observable.interval(2000).take(6);
 * var timer3 = Rx.Observable.interval(500).take(10);
 * var concurrent = 2; // the argument
 * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);
 * merged.subscribe(x => my_console_log(x));
 *
 * // Results in the following:
 * // - First timer1 and timer2 will run concurrently
 * // - timer1 will emit a value every 1000ms for 10 iterations
 * // - timer2 will emit a value every 2000ms for 6 iterations
 * // - after timer1 hits it's max iteration, timer2 will
 * //   continue, and timer3 will start to run concurrently with timer2
 * // - when timer2 hits it's max iteration it terminates, and
 * //   timer3 will continue to emit a value every 500ms until it is complete
 *
 * @see {@link mergeAll}
 * @see {@link mergeMap}
 * @see {@link mergeMapTo}
 * @see {@link mergeScan}
 *
 * @param {...ObservableInput} observables Input Observables to merge together.
 * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input
 * Observables being subscribed to concurrently.
 * @param {Scheduler} [scheduler=null] The IScheduler to use for managing
 * concurrency of input Observables.
 * @return {Observable} an Observable that emits items that are the result of
 * every input Observable.
 * @static true
 * @name merge
 * @owner Observable
 */
function merge() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i] = arguments[_i];
    }
    var concurrent = Number.POSITIVE_INFINITY;
    var scheduler = null;
    var last = observables[observables.length - 1];
    if (isScheduler_1.isScheduler(last)) {
        scheduler = observables.pop();
        if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {
            concurrent = observables.pop();
        }
    }
    else if (typeof last === 'number') {
        concurrent = observables.pop();
    }
    if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable_1.Observable) {
        return observables[0];
    }
    return mergeAll_1.mergeAll(concurrent)(fromArray_1.fromArray(observables, scheduler));
}
exports.merge = merge;

},{"../Observable":286,"../operators/mergeAll":373,"../util/isScheduler":468,"./fromArray":308}],318:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Observable_1 = require("../Observable");
var noop_1 = require("../util/noop");
/**
 * An Observable that emits no items to the Observer and never completes.
 *
 * <img src="./img/never.png" width="100%">
 *
 * A simple Observable that emits neither values nor errors nor the completion
 * notification. It can be used for testing purposes or for composing with other
 * Observables. Please note that by never emitting a complete notification, this
 * Observable keeps the subscription from being disposed automatically.
 * Subscriptions need to be manually disposed.
 *
 * @example <caption>Emit the number 7, then never emit anything else (not even complete).</caption>
 * function info() {
 *   my_console_log('Will not be called');
 * }
 * var result = NEVER.startWith(7);
 * result.subscribe(x => my_console_log(x), info, info);
 *
 * @see {@link create}
 * @see {@link EMPTY}
 * @see {@link of}
 * @see {@link throwError}
 */
exports.NEVER = new Observable_1.Observable(noop_1.noop);
/**
 * @deprecated Deprecated in favor of using NEVER constant.
 */
function never() {
    return exports.NEVER;
}
exports.never = never;

},{"../Observable":286,"../util/noop":469}],319:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var isScheduler_1 = require("../util/isScheduler");
var fromArray_1 = require("./fromArray");
var empty_1 = require("./empty");
var scalar_1 = require("./scalar");
function of() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var scheduler = args[args.length - 1];
    if (isScheduler_1.isScheduler(scheduler)) {
        args.pop();
    }
    else {
        scheduler = undefined;
    }
    switch (args.length) {
        case 0:
            return empty_1.empty(scheduler);
        case 1:
            return scheduler ? fromArray_1.fromArray(args, scheduler) : scalar_1.scalar(args[0]);
        default:
            return fromArray_1.fromArray(args, scheduler);
    }
}
exports.of = of;

},{"../util/isScheduler":468,"./empty":305,"./fromArray":308,"./scalar":324}],320:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Observable_1 = require("../Observable");
var from_1 = require("./from");
var isArray_1 = require("../util/isArray");
var empty_1 = require("./empty");
/* tslint:enable:max-line-length */
/**
 * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one
 * that was passed.
 *
 * <span class="informal">Execute series of Observables no matter what, even if it means swallowing errors.</span>
 *
 * <img src="./img/onErrorResumeNext.png" width="100%">
 *
 * `onErrorResumeNext` Will subscribe to each observable source it is provided, in order.
 * If the source it's subscribed to emits an error or completes, it will move to the next source
 * without error.
 *
 * If `onErrorResumeNext` is provided no arguments, or a single, empty array, it will return {@link EMPTY}.
 *
 * `onErrorResumeNext` is basically {@link concat}, only it will continue, even if one of its
 * sources emits an error.
 *
 * Note that there is no way to handle any errors thrown by sources via the resuult of
 * `onErrorResumeNext`. If you want to handle errors thrown in any given source, you can
 * always use the {@link catchError} operator on them before passing them into `onErrorResumeNext`.
 *
 * @example <caption>Subscribe to the next Observable after map fails</caption>
 * import { onErrorResumeNext, of } from 'rxjs/create';
 * import { map } from 'rxjs/operators';
 *
 * onErrorResumeNext(
 *  of(1, 2, 3, 0).pipe(
 *    map(x => {
 *      if (x === 0) throw Error();
 *      return 10 / x;
 *    })
 *  ),
 *  of(1, 2, 3),
 * )
 * .subscribe(
 *   val => my_console_log(val),
 *   err => my_console_log(err),          // Will never be called.
 *   () => my_console_log('done')
 * );
 *
 * // Logs:
 * // 10
 * // 5
 * // 3.3333333333333335
 * // 1
 * // 2
 * // 3
 * // "done"
 *
 * @see {@link concat}
 * @see {@link catch}
 *
 * @param {...ObservableInput} sources Observables (or anything that *is* observable) passed either directly or as an array.
 * @return {Observable} An Observable that concatenates all sources, one after the other,
 * ignoring all errors, such that any error causes it to move on to the next source.
 */
function onErrorResumeNext() {
    var sources = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        sources[_i] = arguments[_i];
    }
    if (sources.length === 0) {
        return empty_1.EMPTY;
    }
    var first = sources[0], remainder = sources.slice(1);
    if (sources.length === 1 && isArray_1.isArray(first)) {
        return onErrorResumeNext.apply(void 0, first);
    }
    return new Observable_1.Observable(function (subscriber) {
        var subNext = function () { return subscriber.add(onErrorResumeNext.apply(void 0, remainder).subscribe(subscriber)); };
        return from_1.from(first).subscribe({
            next: function (value) { subscriber.next(value); },
            error: subNext,
            complete: subNext,
        });
    });
}
exports.onErrorResumeNext = onErrorResumeNext;

},{"../Observable":286,"../util/isArray":458,"./empty":305,"./from":307}],321:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Observable_1 = require("../Observable");
var Subscription_1 = require("../Subscription");
/**
 * Convert an object into an observable sequence of [key, value] pairs
 * using an optional IScheduler to enumerate the object.
 *
 * @example <caption>Converts a javascript object to an Observable</caption>
 * var obj = {
 *   foo: 42,
 *   bar: 56,
 *   baz: 78
 * };
 *
 * var source = Rx.Observable.pairs(obj);
 *
 * var subscription = source.subscribe(
 *   function (x) {
 *     my_console_log('Next: %s', x);
 *   },
 *   function (err) {
 *     my_console_log('Error: %s', err);
 *   },
 *   function () {
 *     my_console_log('Completed');
 *   });
 *
 * @param {Object} obj The object to inspect and turn into an
 * Observable sequence.
 * @param {Scheduler} [scheduler] An optional IScheduler to run the
 * enumeration of the input sequence on.
 * @returns {(Observable<[string, T]>)} An observable sequence of
 * [key, value] pairs from the object.
 */
function pairs(obj, scheduler) {
    if (!scheduler) {
        return new Observable_1.Observable(function (subscriber) {
            var keys = Object.keys(obj);
            for (var i = 0; i < keys.length && !subscriber.closed; i++) {
                var key = keys[i];
                if (obj.hasOwnProperty(key)) {
                    subscriber.next([key, obj[key]]);
                }
            }
            subscriber.complete();
        });
    }
    else {
        return new Observable_1.Observable(function (subscriber) {
            var keys = Object.keys(obj);
            var subscription = new Subscription_1.Subscription();
            subscription.add(scheduler.schedule(dispatch, 0, { keys: keys, index: 0, subscriber: subscriber, subscription: subscription, obj: obj }));
            return subscription;
        });
    }
}
exports.pairs = pairs;
/** @internal */
function dispatch(state) {
    var keys = state.keys, index = state.index, subscriber = state.subscriber, subscription = state.subscription, obj = state.obj;
    if (!subscriber.closed) {
        if (index < keys.length) {
            var key = keys[index];
            subscriber.next([key, obj[key]]);
            subscription.add(this.schedule({ keys: keys, index: index + 1, subscriber: subscriber, subscription: subscription, obj: obj }));
        }
        else {
            subscriber.complete();
        }
    }
}
exports.dispatch = dispatch;

},{"../Observable":286,"../Subscription":294}],322:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var isArray_1 = require("../util/isArray");
var fromArray_1 = require("./fromArray");
var OuterSubscriber_1 = require("../OuterSubscriber");
var subscribeToResult_1 = require("../util/subscribeToResult");
function race() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i] = arguments[_i];
    }
    // if the only argument is an array, it was most likely called with
    // `race([obs1, obs2, ...])`
    if (observables.length === 1) {
        if (isArray_1.isArray(observables[0])) {
            observables = observables[0];
        }
        else {
            return observables[0];
        }
    }
    return fromArray_1.fromArray(observables, undefined).lift(new RaceOperator());
}
exports.race = race;
var RaceOperator = /** @class */ (function () {
    function RaceOperator() {
    }
    RaceOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new RaceSubscriber(subscriber));
    };
    return RaceOperator;
}());
exports.RaceOperator = RaceOperator;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var RaceSubscriber = /** @class */ (function (_super) {
    __extends(RaceSubscriber, _super);
    function RaceSubscriber(destination) {
        var _this = _super.call(this, destination) || this;
        _this.hasFirst = false;
        _this.observables = [];
        _this.subscriptions = [];
        return _this;
    }
    RaceSubscriber.prototype._next = function (observable) {
        this.observables.push(observable);
    };
    RaceSubscriber.prototype._complete = function () {
        var observables = this.observables;
        var len = observables.length;
        if (len === 0) {
            this.destination.complete();
        }
        else {
            for (var i = 0; i < len && !this.hasFirst; i++) {
                var observable = observables[i];
                var subscription = subscribeToResult_1.subscribeToResult(this, observable, observable, i);
                if (this.subscriptions) {
                    this.subscriptions.push(subscription);
                }
                this.add(subscription);
            }
            this.observables = null;
        }
    };
    RaceSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        if (!this.hasFirst) {
            this.hasFirst = true;
            for (var i = 0; i < this.subscriptions.length; i++) {
                if (i !== outerIndex) {
                    var subscription = this.subscriptions[i];
                    subscription.unsubscribe();
                    this.remove(subscription);
                }
            }
            this.subscriptions = null;
        }
        this.destination.next(innerValue);
    };
    return RaceSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
exports.RaceSubscriber = RaceSubscriber;

},{"../OuterSubscriber":288,"../util/isArray":458,"../util/subscribeToResult":478,"./fromArray":308}],323:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Observable_1 = require("../Observable");
/**
 * Creates an Observable that emits a sequence of numbers within a specified
 * range.
 *
 * <span class="informal">Emits a sequence of numbers in a range.</span>
 *
 * <img src="./img/range.png" width="100%">
 *
 * `range` operator emits a range of sequential integers, in order, where you
 * select the `start` of the range and its `length`. By default, uses no
 * IScheduler and just delivers the notifications synchronously, but may use
 * an optional IScheduler to regulate those deliveries.
 *
 * @example <caption>Emits the numbers 1 to 10</caption>
 * var numbers = Rx.Observable.range(1, 10);
 * numbers.subscribe(x => my_console_log(x));
 *
 * @see {@link timer}
 * @see {@link interval}
 *
 * @param {number} [start=0] The value of the first integer in the sequence.
 * @param {number} [count=0] The number of sequential integers to generate.
 * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling
 * the emissions of the notifications.
 * @return {Observable} An Observable of numbers that emits a finite range of
 * sequential integers.
 * @static true
 * @name range
 * @owner Observable
 */
function range(start, count, scheduler) {
    if (start === void 0) { start = 0; }
    if (count === void 0) { count = 0; }
    return new Observable_1.Observable(function (subscriber) {
        var index = 0;
        var current = start;
        if (scheduler) {
            return scheduler.schedule(dispatch, 0, {
                index: index, count: count, start: start, subscriber: subscriber
            });
        }
        else {
            do {
                if (index++ >= count) {
                    subscriber.complete();
                    break;
                }
                subscriber.next(current++);
                if (subscriber.closed) {
                    break;
                }
            } while (true);
        }
        return undefined;
    });
}
exports.range = range;
/** @internal */
function dispatch(state) {
    var start = state.start, index = state.index, count = state.count, subscriber = state.subscriber;
    if (index >= count) {
        subscriber.complete();
        return;
    }
    subscriber.next(start);
    if (subscriber.closed) {
        return;
    }
    state.index = index + 1;
    state.start = start + 1;
    this.schedule(state);
}
exports.dispatch = dispatch;

},{"../Observable":286}],324:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Observable_1 = require("../Observable");
function scalar(value) {
    var result = new Observable_1.Observable(function (subscriber) {
        subscriber.next(value);
        subscriber.complete();
    });
    result._isScalar = true;
    result.value = value;
    return result;
}
exports.scalar = scalar;

},{"../Observable":286}],325:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Observable_1 = require("../Observable");
/**
 * Creates an Observable that emits no items to the Observer and immediately
 * emits an error notification.
 *
 * <span class="informal">Just emits 'error', and nothing else.
 * </span>
 *
 * <img src="./img/throw.png" width="100%">
 *
 * This static operator is useful for creating a simple Observable that only
 * emits the error notification. It can be used for composing with other
 * Observables, such as in a {@link mergeMap}.
 *
 * @example <caption>Emit the number 7, then emit an error.</caption>
 * import { throwError, concat, of } from 'rxjs/create';
 *
 * const result = concat(of(7), throwError(new Error('oops!')));
 * result.subscribe(x => my_console_log(x), e => console.error(e));
 *
 * @example <caption>Map and flatten numbers to the sequence 'a', 'b', 'c', but throw an error for 13</caption>
 * import { throwError, interval, of } from 'rxjs/create';
 * import { mergeMap } from 'rxjs/operators';
 *
 * interval(1000).pipe(
 *   mergeMap(x => x === 13 ?
 *     throwError('Thirteens are bad') :
 *     of('a', 'b', 'c')
 *   )
 * ).subscribe(x => my_console_log(x), e => console.error(e));
 *
 * @see {@link create}
 * @see {@link empty}
 * @see {@link never}
 * @see {@link of}
 *
 * @param {any} error The particular Error to pass to the error notification.
 * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling
 * the emission of the error notification.
 * @return {Observable} An error Observable: emits only the error notification
 * using the given error argument.
 * @static true
 * @name throw
 * @owner Observable
 */
function throwError(error, scheduler) {
    if (!scheduler) {
        return new Observable_1.Observable(function (subscriber) { return subscriber.error(error); });
    }
    else {
        return new Observable_1.Observable(function (subscriber) { return scheduler.schedule(dispatch, 0, { error: error, subscriber: subscriber }); });
    }
}
exports.throwError = throwError;
function dispatch(_a) {
    var error = _a.error, subscriber = _a.subscriber;
    subscriber.error(error);
}

},{"../Observable":286}],326:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Observable_1 = require("../Observable");
var async_1 = require("../scheduler/async");
var isNumeric_1 = require("../util/isNumeric");
var isScheduler_1 = require("../util/isScheduler");
/**
 * Creates an Observable that starts emitting after an `initialDelay` and
 * emits ever increasing numbers after each `period` of time thereafter.
 *
 * <span class="informal">Its like {@link interval}, but you can specify when
 * should the emissions start.</span>
 *
 * <img src="./img/timer.png" width="100%">
 *
 * `timer` returns an Observable that emits an infinite sequence of ascending
 * integers, with a constant interval of time, `period` of your choosing
 * between those emissions. The first emission happens after the specified
 * `initialDelay`. The initial delay may be a {@link Date}. By default, this
 * operator uses the `async` IScheduler to provide a notion of time, but you
 * may pass any IScheduler to it. If `period` is not specified, the output
 * Observable emits only one value, `0`. Otherwise, it emits an infinite
 * sequence.
 *
 * @example <caption>Emits ascending numbers, one every second (1000ms), starting after 3 seconds</caption>
 * var numbers = Rx.Observable.timer(3000, 1000);
 * numbers.subscribe(x => my_console_log(x));
 *
 * @example <caption>Emits one number after five seconds</caption>
 * var numbers = Rx.Observable.timer(5000);
 * numbers.subscribe(x => my_console_log(x));
 *
 * @see {@link interval}
 * @see {@link delay}
 *
 * @param {number|Date} [dueTime] The initial delay time to wait before
 * emitting the first value of `0`.
 * @param {number|SchedulerLike} [periodOrScheduler] The period of time between emissions of the
 * subsequent numbers.
 * @param {SchedulerLike} [scheduler=async] The IScheduler to use for scheduling
 * the emission of values, and providing a notion of "time".
 * @return {Observable} An Observable that emits a `0` after the
 * `initialDelay` and ever increasing numbers after each `period` of time
 * thereafter.
 * @static true
 * @name timer
 * @owner Observable
 */
function timer(dueTime, periodOrScheduler, scheduler) {
    if (dueTime === void 0) { dueTime = 0; }
    var period = -1;
    if (isNumeric_1.isNumeric(periodOrScheduler)) {
        period = Number(periodOrScheduler) < 1 && 1 || Number(periodOrScheduler);
    }
    else if (isScheduler_1.isScheduler(periodOrScheduler)) {
        scheduler = periodOrScheduler;
    }
    if (!isScheduler_1.isScheduler(scheduler)) {
        scheduler = async_1.async;
    }
    return new Observable_1.Observable(function (subscriber) {
        var due = isNumeric_1.isNumeric(dueTime)
            ? dueTime
            : (+dueTime - scheduler.now());
        return scheduler.schedule(dispatch, due, {
            index: 0, period: period, subscriber: subscriber
        });
    });
}
exports.timer = timer;
function dispatch(state) {
    var index = state.index, period = state.period, subscriber = state.subscriber;
    subscriber.next(index);
    if (subscriber.closed) {
        return;
    }
    else if (period === -1) {
        return subscriber.complete();
    }
    state.index = index + 1;
    this.schedule(state, period);
}

},{"../Observable":286,"../scheduler/async":444,"../util/isNumeric":464,"../util/isScheduler":468}],327:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Observable_1 = require("../Observable");
var from_1 = require("./from"); // from from from! LAWL
var empty_1 = require("./empty");
/**
 * Creates an Observable that uses a resource which will be disposed at the same time as the Observable.
 *
 * <span class="informal">Use it when you catch yourself cleaning up after an Observable.</span>
 *
 * `using` is a factory operator, which accepts two functions. First function returns a disposable resource.
 * It can be an arbitrary object that implements `unsubscribe` method. Second function will be injected with
 * that object and should return an Observable. That Observable can use resource object during its execution.
 * Both functions passed to `using` will be called every time someone subscribes - neither an Observable nor
 * resource object will be shared in any way between subscriptions.
 *
 * When Observable returned by `using` is subscribed, Observable returned from the second function will be subscribed
 * as well. All its notifications (nexted values, completion and error events) will be emitted unchanged by the output
 * Observable. If however someone unsubscribes from the Observable or source Observable completes or errors by itself,
 * the `unsubscribe` method on resource object will be called. This can be used to do any necessary clean up, which
 * otherwise would have to be handled by hand. Note that complete or error notifications are not emitted when someone
 * cancels subscription to an Observable via `unsubscribe`, so `using` can be used as a hook, allowing you to make
 * sure that all resources which need to exist during an Observable execution will be disposed at appropriate time.
 *
 * @see {@link defer}
 *
 * @param {function(): ISubscription} resourceFactory A function which creates any resource object
 * that implements `unsubscribe` method.
 * @param {function(resource: ISubscription): Observable<T>} observableFactory A function which
 * creates an Observable, that can use injected resource object.
 * @return {Observable<T>} An Observable that behaves the same as Observable returned by `observableFactory`, but
 * which - when completed, errored or unsubscribed - will also call `unsubscribe` on created resource object.
 */
function using(resourceFactory, observableFactory) {
    return new Observable_1.Observable(function (subscriber) {
        var resource;
        try {
            resource = resourceFactory();
        }
        catch (err) {
            subscriber.error(err);
            return undefined;
        }
        var result;
        try {
            result = observableFactory(resource);
        }
        catch (err) {
            subscriber.error(err);
            return undefined;
        }
        var source = result ? from_1.from(result) : empty_1.EMPTY;
        var subscription = source.subscribe(subscriber);
        return function () {
            subscription.unsubscribe();
            if (resource) {
                resource.unsubscribe();
            }
        };
    });
}
exports.using = using;

},{"../Observable":286,"./empty":305,"./from":307}],328:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var fromArray_1 = require("./fromArray");
var isArray_1 = require("../util/isArray");
var Subscriber_1 = require("../Subscriber");
var OuterSubscriber_1 = require("../OuterSubscriber");
var subscribeToResult_1 = require("../util/subscribeToResult");
var iterator_1 = require("../../internal/symbol/iterator");
/* tslint:enable:max-line-length */
/**
 * Combines multiple Observables to create an Observable whose values are calculated from the values, in order, of each
 * of its input Observables.
 *
 * If the latest parameter is a function, this function is used to compute the created value from the input values.
 * Otherwise, an array of the input values is returned.
 *
 * @example <caption>Combine age and name from different sources</caption>
 *
 * let age$ = Observable.of<number>(27, 25, 29);
 * let name$ = Observable.of<string>('Foo', 'Bar', 'Beer');
 * let isDev$ = Observable.of<boolean>(true, true, false);
 *
 * Observable
 *     .zip(age$,
 *          name$,
 *          isDev$,
 *          (age: number, name: string, isDev: boolean) => ({ age, name, isDev }))
 *     .subscribe(x => my_console_log(x));
 *
 * // outputs
 * // { age: 27, name: 'Foo', isDev: true }
 * // { age: 25, name: 'Bar', isDev: true }
 * // { age: 29, name: 'Beer', isDev: false }
 *
 * @param observables
 * @return {Observable<R>}
 * @static true
 * @name zip
 * @owner Observable
 */
function zip() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i] = arguments[_i];
    }
    var resultSelector = observables[observables.length - 1];
    if (typeof resultSelector === 'function') {
        observables.pop();
    }
    return fromArray_1.fromArray(observables, undefined).lift(new ZipOperator(resultSelector));
}
exports.zip = zip;
var ZipOperator = /** @class */ (function () {
    function ZipOperator(resultSelector) {
        this.resultSelector = resultSelector;
    }
    ZipOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new ZipSubscriber(subscriber, this.resultSelector));
    };
    return ZipOperator;
}());
exports.ZipOperator = ZipOperator;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var ZipSubscriber = /** @class */ (function (_super) {
    __extends(ZipSubscriber, _super);
    function ZipSubscriber(destination, resultSelector, values) {
        if (values === void 0) { values = Object.create(null); }
        var _this = _super.call(this, destination) || this;
        _this.iterators = [];
        _this.active = 0;
        _this.resultSelector = (typeof resultSelector === 'function') ? resultSelector : null;
        _this.values = values;
        return _this;
    }
    ZipSubscriber.prototype._next = function (value) {
        var iterators = this.iterators;
        if (isArray_1.isArray(value)) {
            iterators.push(new StaticArrayIterator(value));
        }
        else if (typeof value[iterator_1.iterator] === 'function') {
            iterators.push(new StaticIterator(value[iterator_1.iterator]()));
        }
        else {
            iterators.push(new ZipBufferIterator(this.destination, this, value));
        }
    };
    ZipSubscriber.prototype._complete = function () {
        var iterators = this.iterators;
        var len = iterators.length;
        if (len === 0) {
            this.destination.complete();
            return;
        }
        this.active = len;
        for (var i = 0; i < len; i++) {
            var iterator = iterators[i];
            if (iterator.stillUnsubscribed) {
                this.add(iterator.subscribe(iterator, i));
            }
            else {
                this.active--; // not an observable
            }
        }
    };
    ZipSubscriber.prototype.notifyInactive = function () {
        this.active--;
        if (this.active === 0) {
            this.destination.complete();
        }
    };
    ZipSubscriber.prototype.checkIterators = function () {
        var iterators = this.iterators;
        var len = iterators.length;
        var destination = this.destination;
        // abort if not all of them have values
        for (var i = 0; i < len; i++) {
            var iterator = iterators[i];
            if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {
                return;
            }
        }
        var shouldComplete = false;
        var args = [];
        for (var i = 0; i < len; i++) {
            var iterator = iterators[i];
            var result = iterator.next();
            // check to see if it's completed now that you've gotten
            // the next value.
            if (iterator.hasCompleted()) {
                shouldComplete = true;
            }
            if (result.done) {
                destination.complete();
                return;
            }
            args.push(result.value);
        }
        if (this.resultSelector) {
            this._tryresultSelector(args);
        }
        else {
            destination.next(args);
        }
        if (shouldComplete) {
            destination.complete();
        }
    };
    ZipSubscriber.prototype._tryresultSelector = function (args) {
        var result;
        try {
            result = this.resultSelector.apply(this, args);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.destination.next(result);
    };
    return ZipSubscriber;
}(Subscriber_1.Subscriber));
exports.ZipSubscriber = ZipSubscriber;
var StaticIterator = /** @class */ (function () {
    function StaticIterator(iterator) {
        this.iterator = iterator;
        this.nextResult = iterator.next();
    }
    StaticIterator.prototype.hasValue = function () {
        return true;
    };
    StaticIterator.prototype.next = function () {
        var result = this.nextResult;
        this.nextResult = this.iterator.next();
        return result;
    };
    StaticIterator.prototype.hasCompleted = function () {
        var nextResult = this.nextResult;
        return nextResult && nextResult.done;
    };
    return StaticIterator;
}());
var StaticArrayIterator = /** @class */ (function () {
    function StaticArrayIterator(array) {
        this.array = array;
        this.index = 0;
        this.length = 0;
        this.length = array.length;
    }
    StaticArrayIterator.prototype[iterator_1.iterator] = function () {
        return this;
    };
    StaticArrayIterator.prototype.next = function (value) {
        var i = this.index++;
        var array = this.array;
        return i < this.length ? { value: array[i], done: false } : { value: null, done: true };
    };
    StaticArrayIterator.prototype.hasValue = function () {
        return this.array.length > this.index;
    };
    StaticArrayIterator.prototype.hasCompleted = function () {
        return this.array.length === this.index;
    };
    return StaticArrayIterator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var ZipBufferIterator = /** @class */ (function (_super) {
    __extends(ZipBufferIterator, _super);
    function ZipBufferIterator(destination, parent, observable) {
        var _this = _super.call(this, destination) || this;
        _this.parent = parent;
        _this.observable = observable;
        _this.stillUnsubscribed = true;
        _this.buffer = [];
        _this.isComplete = false;
        return _this;
    }
    ZipBufferIterator.prototype[iterator_1.iterator] = function () {
        return this;
    };
    // NOTE: there is actually a name collision here with Subscriber.next and Iterator.next
    //    this is legit because `next()` will never be called by a subscription in this case.
    ZipBufferIterator.prototype.next = function () {
        var buffer = this.buffer;
        if (buffer.length === 0 && this.isComplete) {
            return { value: null, done: true };
        }
        else {
            return { value: buffer.shift(), done: false };
        }
    };
    ZipBufferIterator.prototype.hasValue = function () {
        return this.buffer.length > 0;
    };
    ZipBufferIterator.prototype.hasCompleted = function () {
        return this.buffer.length === 0 && this.isComplete;
    };
    ZipBufferIterator.prototype.notifyComplete = function () {
        if (this.buffer.length > 0) {
            this.isComplete = true;
            this.parent.notifyInactive();
        }
        else {
            this.destination.complete();
        }
    };
    ZipBufferIterator.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.buffer.push(innerValue);
        this.parent.checkIterators();
    };
    ZipBufferIterator.prototype.subscribe = function (value, index) {
        return subscribeToResult_1.subscribeToResult(this, this.observable, this, index);
    };
    return ZipBufferIterator;
}(OuterSubscriber_1.OuterSubscriber));

},{"../../internal/symbol/iterator":446,"../OuterSubscriber":288,"../Subscriber":293,"../util/isArray":458,"../util/subscribeToResult":478,"./fromArray":308}],329:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var tryCatch_1 = require("../util/tryCatch");
var errorObject_1 = require("../util/errorObject");
var OuterSubscriber_1 = require("../OuterSubscriber");
var subscribeToResult_1 = require("../util/subscribeToResult");
/**
 * Ignores source values for a duration determined by another Observable, then
 * emits the most recent value from the source Observable, then repeats this
 * process.
 *
 * <span class="informal">It's like {@link auditTime}, but the silencing
 * duration is determined by a second Observable.</span>
 *
 * <img src="./img/audit.png" width="100%">
 *
 * `audit` is similar to `throttle`, but emits the last value from the silenced
 * time window, instead of the first value. `audit` emits the most recent value
 * from the source Observable on the output Observable as soon as its internal
 * timer becomes disabled, and ignores source values while the timer is enabled.
 * Initially, the timer is disabled. As soon as the first source value arrives,
 * the timer is enabled by calling the `durationSelector` function with the
 * source value, which returns the "duration" Observable. When the duration
 * Observable emits a value or completes, the timer is disabled, then the most
 * recent source value is emitted on the output Observable, and this process
 * repeats for the next source value.
 *
 * @example <caption>Emit clicks at a rate of at most one click per second</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.audit(ev => Rx.Observable.interval(1000));
 * result.subscribe(x => my_console_log(x));
 *
 * @see {@link auditTime}
 * @see {@link debounce}
 * @see {@link delayWhen}
 * @see {@link sample}
 * @see {@link throttle}
 *
 * @param {function(value: T): SubscribableOrPromise} durationSelector A function
 * that receives a value from the source Observable, for computing the silencing
 * duration, returned as an Observable or a Promise.
 * @return {Observable<T>} An Observable that performs rate-limiting of
 * emissions from the source Observable.
 * @method audit
 * @owner Observable
 */
function audit(durationSelector) {
    return function auditOperatorFunction(source) {
        return source.lift(new AuditOperator(durationSelector));
    };
}
exports.audit = audit;
var AuditOperator = /** @class */ (function () {
    function AuditOperator(durationSelector) {
        this.durationSelector = durationSelector;
    }
    AuditOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new AuditSubscriber(subscriber, this.durationSelector));
    };
    return AuditOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var AuditSubscriber = /** @class */ (function (_super) {
    __extends(AuditSubscriber, _super);
    function AuditSubscriber(destination, durationSelector) {
        var _this = _super.call(this, destination) || this;
        _this.durationSelector = durationSelector;
        _this.hasValue = false;
        return _this;
    }
    AuditSubscriber.prototype._next = function (value) {
        this.value = value;
        this.hasValue = true;
        if (!this.throttled) {
            var duration = tryCatch_1.tryCatch(this.durationSelector)(value);
            if (duration === errorObject_1.errorObject) {
                this.destination.error(errorObject_1.errorObject.e);
            }
            else {
                var innerSubscription = subscribeToResult_1.subscribeToResult(this, duration);
                if (!innerSubscription || innerSubscription.closed) {
                    this.clearThrottle();
                }
                else {
                    this.add(this.throttled = innerSubscription);
                }
            }
        }
    };
    AuditSubscriber.prototype.clearThrottle = function () {
        var _a = this, value = _a.value, hasValue = _a.hasValue, throttled = _a.throttled;
        if (throttled) {
            this.remove(throttled);
            this.throttled = null;
            throttled.unsubscribe();
        }
        if (hasValue) {
            this.value = null;
            this.hasValue = false;
            this.destination.next(value);
        }
    };
    AuditSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex) {
        this.clearThrottle();
    };
    AuditSubscriber.prototype.notifyComplete = function () {
        this.clearThrottle();
    };
    return AuditSubscriber;
}(OuterSubscriber_1.OuterSubscriber));

},{"../OuterSubscriber":288,"../util/errorObject":455,"../util/subscribeToResult":478,"../util/tryCatch":480}],330:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var async_1 = require("../scheduler/async");
var audit_1 = require("./audit");
var timer_1 = require("../observable/timer");
/**
 * Ignores source values for `duration` milliseconds, then emits the most recent
 * value from the source Observable, then repeats this process.
 *
 * <span class="informal">When it sees a source values, it ignores that plus
 * the next ones for `duration` milliseconds, and then it emits the most recent
 * value from the source.</span>
 *
 * <img src="./img/auditTime.png" width="100%">
 *
 * `auditTime` is similar to `throttleTime`, but emits the last value from the
 * silenced time window, instead of the first value. `auditTime` emits the most
 * recent value from the source Observable on the output Observable as soon as
 * its internal timer becomes disabled, and ignores source values while the
 * timer is enabled. Initially, the timer is disabled. As soon as the first
 * source value arrives, the timer is enabled. After `duration` milliseconds (or
 * the time unit determined internally by the optional `scheduler`) has passed,
 * the timer is disabled, then the most recent source value is emitted on the
 * output Observable, and this process repeats for the next source value.
 * Optionally takes a {@link IScheduler} for managing timers.
 *
 * @example <caption>Emit clicks at a rate of at most one click per second</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.auditTime(1000);
 * result.subscribe(x => my_console_log(x));
 *
 * @see {@link audit}
 * @see {@link debounceTime}
 * @see {@link delay}
 * @see {@link sampleTime}
 * @see {@link throttleTime}
 *
 * @param {number} duration Time to wait before emitting the most recent source
 * value, measured in milliseconds or the time unit determined internally
 * by the optional `scheduler`.
 * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for
 * managing the timers that handle the rate-limiting behavior.
 * @return {Observable<T>} An Observable that performs rate-limiting of
 * emissions from the source Observable.
 * @method auditTime
 * @owner Observable
 */
function auditTime(duration, scheduler) {
    if (scheduler === void 0) { scheduler = async_1.async; }
    return audit_1.audit(function () { return timer_1.timer(duration, scheduler); });
}
exports.auditTime = auditTime;

},{"../observable/timer":326,"../scheduler/async":444,"./audit":329}],331:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var OuterSubscriber_1 = require("../OuterSubscriber");
var subscribeToResult_1 = require("../util/subscribeToResult");
/**
 * Buffers the source Observable values until `closingNotifier` emits.
 *
 * <span class="informal">Collects values from the past as an array, and emits
 * that array only when another Observable emits.</span>
 *
 * <img src="./img/buffer.png" width="100%">
 *
 * Buffers the incoming Observable values until the given `closingNotifier`
 * Observable emits a value, at which point it emits the buffer on the output
 * Observable and starts a new buffer internally, awaiting the next time
 * `closingNotifier` emits.
 *
 * @example <caption>On every click, emit array of most recent interval events</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var interval = Rx.Observable.interval(1000);
 * var buffered = interval.buffer(clicks);
 * buffered.subscribe(x => my_console_log(x));
 *
 * @see {@link bufferCount}
 * @see {@link bufferTime}
 * @see {@link bufferToggle}
 * @see {@link bufferWhen}
 * @see {@link window}
 *
 * @param {Observable<any>} closingNotifier An Observable that signals the
 * buffer to be emitted on the output Observable.
 * @return {Observable<T[]>} An Observable of buffers, which are arrays of
 * values.
 * @method buffer
 * @owner Observable
 */
function buffer(closingNotifier) {
    return function bufferOperatorFunction(source) {
        return source.lift(new BufferOperator(closingNotifier));
    };
}
exports.buffer = buffer;
var BufferOperator = /** @class */ (function () {
    function BufferOperator(closingNotifier) {
        this.closingNotifier = closingNotifier;
    }
    BufferOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new BufferSubscriber(subscriber, this.closingNotifier));
    };
    return BufferOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var BufferSubscriber = /** @class */ (function (_super) {
    __extends(BufferSubscriber, _super);
    function BufferSubscriber(destination, closingNotifier) {
        var _this = _super.call(this, destination) || this;
        _this.buffer = [];
        _this.add(subscribeToResult_1.subscribeToResult(_this, closingNotifier));
        return _this;
    }
    BufferSubscriber.prototype._next = function (value) {
        this.buffer.push(value);
    };
    BufferSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        var buffer = this.buffer;
        this.buffer = [];
        this.destination.next(buffer);
    };
    return BufferSubscriber;
}(OuterSubscriber_1.OuterSubscriber));

},{"../OuterSubscriber":288,"../util/subscribeToResult":478}],332:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Subscriber_1 = require("../Subscriber");
/**
 * Buffers the source Observable values until the size hits the maximum
 * `bufferSize` given.
 *
 * <span class="informal">Collects values from the past as an array, and emits
 * that array only when its size reaches `bufferSize`.</span>
 *
 * <img src="./img/bufferCount.png" width="100%">
 *
 * Buffers a number of values from the source Observable by `bufferSize` then
 * emits the buffer and clears it, and starts a new buffer each
 * `startBufferEvery` values. If `startBufferEvery` is not provided or is
 * `null`, then new buffers are started immediately at the start of the source
 * and when each buffer closes and is emitted.
 *
 * @example <caption>Emit the last two click events as an array</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var buffered = clicks.bufferCount(2);
 * buffered.subscribe(x => my_console_log(x));
 *
 * @example <caption>On every click, emit the last two click events as an array</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var buffered = clicks.bufferCount(2, 1);
 * buffered.subscribe(x => my_console_log(x));
 *
 * @see {@link buffer}
 * @see {@link bufferTime}
 * @see {@link bufferToggle}
 * @see {@link bufferWhen}
 * @see {@link pairwise}
 * @see {@link windowCount}
 *
 * @param {number} bufferSize The maximum size of the buffer emitted.
 * @param {number} [startBufferEvery] Interval at which to start a new buffer.
 * For example if `startBufferEvery` is `2`, then a new buffer will be started
 * on every other value from the source. A new buffer is started at the
 * beginning of the source by default.
 * @return {Observable<T[]>} An Observable of arrays of buffered values.
 * @method bufferCount
 * @owner Observable
 */
function bufferCount(bufferSize, startBufferEvery) {
    if (startBufferEvery === void 0) { startBufferEvery = null; }
    return function bufferCountOperatorFunction(source) {
        return source.lift(new BufferCountOperator(bufferSize, startBufferEvery));
    };
}
exports.bufferCount = bufferCount;
var BufferCountOperator = /** @class */ (function () {
    function BufferCountOperator(bufferSize, startBufferEvery) {
        this.bufferSize = bufferSize;
        this.startBufferEvery = startBufferEvery;
        if (!startBufferEvery || bufferSize === startBufferEvery) {
            this.subscriberClass = BufferCountSubscriber;
        }
        else {
            this.subscriberClass = BufferSkipCountSubscriber;
        }
    }
    BufferCountOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new this.subscriberClass(subscriber, this.bufferSize, this.startBufferEvery));
    };
    return BufferCountOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var BufferCountSubscriber = /** @class */ (function (_super) {
    __extends(BufferCountSubscriber, _super);
    function BufferCountSubscriber(destination, bufferSize) {
        var _this = _super.call(this, destination) || this;
        _this.bufferSize = bufferSize;
        _this.buffer = [];
        return _this;
    }
    BufferCountSubscriber.prototype._next = function (value) {
        var buffer = this.buffer;
        buffer.push(value);
        if (buffer.length == this.bufferSize) {
            this.destination.next(buffer);
            this.buffer = [];
        }
    };
    BufferCountSubscriber.prototype._complete = function () {
        var buffer = this.buffer;
        if (buffer.length > 0) {
            this.destination.next(buffer);
        }
        _super.prototype._complete.call(this);
    };
    return BufferCountSubscriber;
}(Subscriber_1.Subscriber));
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var BufferSkipCountSubscriber = /** @class */ (function (_super) {
    __extends(BufferSkipCountSubscriber, _super);
    function BufferSkipCountSubscriber(destination, bufferSize, startBufferEvery) {
        var _this = _super.call(this, destination) || this;
        _this.bufferSize = bufferSize;
        _this.startBufferEvery = startBufferEvery;
        _this.buffers = [];
        _this.count = 0;
        return _this;
    }
    BufferSkipCountSubscriber.prototype._next = function (value) {
        var _a = this, bufferSize = _a.bufferSize, startBufferEvery = _a.startBufferEvery, buffers = _a.buffers, count = _a.count;
        this.count++;
        if (count % startBufferEvery === 0) {
            buffers.push([]);
        }
        for (var i = buffers.length; i--;) {
            var buffer = buffers[i];
            buffer.push(value);
            if (buffer.length === bufferSize) {
                buffers.splice(i, 1);
                this.destination.next(buffer);
            }
        }
    };
    BufferSkipCountSubscriber.prototype._complete = function () {
        var _a = this, buffers = _a.buffers, destination = _a.destination;
        while (buffers.length > 0) {
            var buffer = buffers.shift();
            if (buffer.length > 0) {
                destination.next(buffer);
            }
        }
        _super.prototype._complete.call(this);
    };
    return BufferSkipCountSubscriber;
}(Subscriber_1.Subscriber));

},{"../Subscriber":293}],333:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var async_1 = require("../scheduler/async");
var Subscriber_1 = require("../Subscriber");
var isScheduler_1 = require("../util/isScheduler");
/* tslint:enable:max-line-length */
/**
 * Buffers the source Observable values for a specific time period.
 *
 * <span class="informal">Collects values from the past as an array, and emits
 * those arrays periodically in time.</span>
 *
 * <img src="./img/bufferTime.png" width="100%">
 *
 * Buffers values from the source for a specific time duration `bufferTimeSpan`.
 * Unless the optional argument `bufferCreationInterval` is given, it emits and
 * resets the buffer every `bufferTimeSpan` milliseconds. If
 * `bufferCreationInterval` is given, this operator opens the buffer every
 * `bufferCreationInterval` milliseconds and closes (emits and resets) the
 * buffer every `bufferTimeSpan` milliseconds. When the optional argument
 * `maxBufferSize` is specified, the buffer will be closed either after
 * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.
 *
 * @example <caption>Every second, emit an array of the recent click events</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var buffered = clicks.bufferTime(1000);
 * buffered.subscribe(x => my_console_log(x));
 *
 * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var buffered = clicks.bufferTime(2000, 5000);
 * buffered.subscribe(x => my_console_log(x));
 *
 * @see {@link buffer}
 * @see {@link bufferCount}
 * @see {@link bufferToggle}
 * @see {@link bufferWhen}
 * @see {@link windowTime}
 *
 * @param {number} bufferTimeSpan The amount of time to fill each buffer array.
 * @param {number} [bufferCreationInterval] The interval at which to start new
 * buffers.
 * @param {number} [maxBufferSize] The maximum buffer size.
 * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the
 * intervals that determine buffer boundaries.
 * @return {Observable<T[]>} An observable of arrays of buffered values.
 * @method bufferTime
 * @owner Observable
 */
function bufferTime(bufferTimeSpan) {
    var length = arguments.length;
    var scheduler = async_1.async;
    if (isScheduler_1.isScheduler(arguments[arguments.length - 1])) {
        scheduler = arguments[arguments.length - 1];
        length--;
    }
    var bufferCreationInterval = null;
    if (length >= 2) {
        bufferCreationInterval = arguments[1];
    }
    var maxBufferSize = Number.POSITIVE_INFINITY;
    if (length >= 3) {
        maxBufferSize = arguments[2];
    }
    return function bufferTimeOperatorFunction(source) {
        return source.lift(new BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));
    };
}
exports.bufferTime = bufferTime;
var BufferTimeOperator = /** @class */ (function () {
    function BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {
        this.bufferTimeSpan = bufferTimeSpan;
        this.bufferCreationInterval = bufferCreationInterval;
        this.maxBufferSize = maxBufferSize;
        this.scheduler = scheduler;
    }
    BufferTimeOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new BufferTimeSubscriber(subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler));
    };
    return BufferTimeOperator;
}());
var Context = /** @class */ (function () {
    function Context() {
        this.buffer = [];
    }
    return Context;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var BufferTimeSubscriber = /** @class */ (function (_super) {
    __extends(BufferTimeSubscriber, _super);
    function BufferTimeSubscriber(destination, bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {
        var _this = _super.call(this, destination) || this;
        _this.bufferTimeSpan = bufferTimeSpan;
        _this.bufferCreationInterval = bufferCreationInterval;
        _this.maxBufferSize = maxBufferSize;
        _this.scheduler = scheduler;
        _this.contexts = [];
        var context = _this.openContext();
        _this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;
        if (_this.timespanOnly) {
            var timeSpanOnlyState = { subscriber: _this, context: context, bufferTimeSpan: bufferTimeSpan };
            _this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));
        }
        else {
            var closeState = { subscriber: _this, context: context };
            var creationState = { bufferTimeSpan: bufferTimeSpan, bufferCreationInterval: bufferCreationInterval, subscriber: _this, scheduler: scheduler };
            _this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));
            _this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));
        }
        return _this;
    }
    BufferTimeSubscriber.prototype._next = function (value) {
        var contexts = this.contexts;
        var len = contexts.length;
        var filledBufferContext;
        for (var i = 0; i < len; i++) {
            var context_1 = contexts[i];
            var buffer = context_1.buffer;
            buffer.push(value);
            if (buffer.length == this.maxBufferSize) {
                filledBufferContext = context_1;
            }
        }
        if (filledBufferContext) {
            this.onBufferFull(filledBufferContext);
        }
    };
    BufferTimeSubscriber.prototype._error = function (err) {
        this.contexts.length = 0;
        _super.prototype._error.call(this, err);
    };
    BufferTimeSubscriber.prototype._complete = function () {
        var _a = this, contexts = _a.contexts, destination = _a.destination;
        while (contexts.length > 0) {
            var context_2 = contexts.shift();
            destination.next(context_2.buffer);
        }
        _super.prototype._complete.call(this);
    };
    /** @deprecated This is an internal implementation detail, do not use. */
    BufferTimeSubscriber.prototype._unsubscribe = function () {
        this.contexts = null;
    };
    BufferTimeSubscriber.prototype.onBufferFull = function (context) {
        this.closeContext(context);
        var closeAction = context.closeAction;
        closeAction.unsubscribe();
        this.remove(closeAction);
        if (!this.closed && this.timespanOnly) {
            context = this.openContext();
            var bufferTimeSpan = this.bufferTimeSpan;
            var timeSpanOnlyState = { subscriber: this, context: context, bufferTimeSpan: bufferTimeSpan };
            this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));
        }
    };
    BufferTimeSubscriber.prototype.openContext = function () {
        var context = new Context();
        this.contexts.push(context);
        return context;
    };
    BufferTimeSubscriber.prototype.closeContext = function (context) {
        this.destination.next(context.buffer);
        var contexts = this.contexts;
        var spliceIndex = contexts ? contexts.indexOf(context) : -1;
        if (spliceIndex >= 0) {
            contexts.splice(contexts.indexOf(context), 1);
        }
    };
    return BufferTimeSubscriber;
}(Subscriber_1.Subscriber));
function dispatchBufferTimeSpanOnly(state) {
    var subscriber = state.subscriber;
    var prevContext = state.context;
    if (prevContext) {
        subscriber.closeContext(prevContext);
    }
    if (!subscriber.closed) {
        state.context = subscriber.openContext();
        state.context.closeAction = this.schedule(state, state.bufferTimeSpan);
    }
}
function dispatchBufferCreation(state) {
    var bufferCreationInterval = state.bufferCreationInterval, bufferTimeSpan = state.bufferTimeSpan, subscriber = state.subscriber, scheduler = state.scheduler;
    var context = subscriber.openContext();
    var action = this;
    if (!subscriber.closed) {
        subscriber.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, { subscriber: subscriber, context: context }));
        action.schedule(state, bufferCreationInterval);
    }
}
function dispatchBufferClose(arg) {
    var subscriber = arg.subscriber, context = arg.context;
    subscriber.closeContext(context);
}

},{"../Subscriber":293,"../scheduler/async":444,"../util/isScheduler":468}],334:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Subscription_1 = require("../Subscription");
var subscribeToResult_1 = require("../util/subscribeToResult");
var OuterSubscriber_1 = require("../OuterSubscriber");
/**
 * Buffers the source Observable values starting from an emission from
 * `openings` and ending when the output of `closingSelector` emits.
 *
 * <span class="informal">Collects values from the past as an array. Starts
 * collecting only when `opening` emits, and calls the `closingSelector`
 * function to get an Observable that tells when to close the buffer.</span>
 *
 * <img src="./img/bufferToggle.png" width="100%">
 *
 * Buffers values from the source by opening the buffer via signals from an
 * Observable provided to `openings`, and closing and sending the buffers when
 * a Subscribable or Promise returned by the `closingSelector` function emits.
 *
 * @example <caption>Every other second, emit the click events from the next 500ms</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var openings = Rx.Observable.interval(1000);
 * var buffered = clicks.bufferToggle(openings, i =>
 *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()
 * );
 * buffered.subscribe(x => my_console_log(x));
 *
 * @see {@link buffer}
 * @see {@link bufferCount}
 * @see {@link bufferTime}
 * @see {@link bufferWhen}
 * @see {@link windowToggle}
 *
 * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new
 * buffers.
 * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes
 * the value emitted by the `openings` observable and returns a Subscribable or Promise,
 * which, when it emits, signals that the associated buffer should be emitted
 * and cleared.
 * @return {Observable<T[]>} An observable of arrays of buffered values.
 * @method bufferToggle
 * @owner Observable
 */
function bufferToggle(openings, closingSelector) {
    return function bufferToggleOperatorFunction(source) {
        return source.lift(new BufferToggleOperator(openings, closingSelector));
    };
}
exports.bufferToggle = bufferToggle;
var BufferToggleOperator = /** @class */ (function () {
    function BufferToggleOperator(openings, closingSelector) {
        this.openings = openings;
        this.closingSelector = closingSelector;
    }
    BufferToggleOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));
    };
    return BufferToggleOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var BufferToggleSubscriber = /** @class */ (function (_super) {
    __extends(BufferToggleSubscriber, _super);
    function BufferToggleSubscriber(destination, openings, closingSelector) {
        var _this = _super.call(this, destination) || this;
        _this.openings = openings;
        _this.closingSelector = closingSelector;
        _this.contexts = [];
        _this.add(subscribeToResult_1.subscribeToResult(_this, openings));
        return _this;
    }
    BufferToggleSubscriber.prototype._next = function (value) {
        var contexts = this.contexts;
        var len = contexts.length;
        for (var i = 0; i < len; i++) {
            contexts[i].buffer.push(value);
        }
    };
    BufferToggleSubscriber.prototype._error = function (err) {
        var contexts = this.contexts;
        while (contexts.length > 0) {
            var context_1 = contexts.shift();
            context_1.subscription.unsubscribe();
            context_1.buffer = null;
            context_1.subscription = null;
        }
        this.contexts = null;
        _super.prototype._error.call(this, err);
    };
    BufferToggleSubscriber.prototype._complete = function () {
        var contexts = this.contexts;
        while (contexts.length > 0) {
            var context_2 = contexts.shift();
            this.destination.next(context_2.buffer);
            context_2.subscription.unsubscribe();
            context_2.buffer = null;
            context_2.subscription = null;
        }
        this.contexts = null;
        _super.prototype._complete.call(this);
    };
    BufferToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);
    };
    BufferToggleSubscriber.prototype.notifyComplete = function (innerSub) {
        this.closeBuffer(innerSub.context);
    };
    BufferToggleSubscriber.prototype.openBuffer = function (value) {
        try {
            var closingSelector = this.closingSelector;
            var closingNotifier = closingSelector.call(this, value);
            if (closingNotifier) {
                this.trySubscribe(closingNotifier);
            }
        }
        catch (err) {
            this._error(err);
        }
    };
    BufferToggleSubscriber.prototype.closeBuffer = function (context) {
        var contexts = this.contexts;
        if (contexts && context) {
            var buffer = context.buffer, subscription = context.subscription;
            this.destination.next(buffer);
            contexts.splice(contexts.indexOf(context), 1);
            this.remove(subscription);
            subscription.unsubscribe();
        }
    };
    BufferToggleSubscriber.prototype.trySubscribe = function (closingNotifier) {
        var contexts = this.contexts;
        var buffer = [];
        var subscription = new Subscription_1.Subscription();
        var context = { buffer: buffer, subscription: subscription };
        contexts.push(context);
        var innerSubscription = subscribeToResult_1.subscribeToResult(this, closingNotifier, context);
        if (!innerSubscription || innerSubscription.closed) {
            this.closeBuffer(context);
        }
        else {
            innerSubscription.context = context;
            this.add(innerSubscription);
            subscription.add(innerSubscription);
        }
    };
    return BufferToggleSubscriber;
}(OuterSubscriber_1.OuterSubscriber));

},{"../OuterSubscriber":288,"../Subscription":294,"../util/subscribeToResult":478}],335:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Subscription_1 = require("../Subscription");
var tryCatch_1 = require("../util/tryCatch");
var errorObject_1 = require("../util/errorObject");
var OuterSubscriber_1 = require("../OuterSubscriber");
var subscribeToResult_1 = require("../util/subscribeToResult");
/**
 * Buffers the source Observable values, using a factory function of closing
 * Observables to determine when to close, emit, and reset the buffer.
 *
 * <span class="informal">Collects values from the past as an array. When it
 * starts collecting values, it calls a function that returns an Observable that
 * tells when to close the buffer and restart collecting.</span>
 *
 * <img src="./img/bufferWhen.png" width="100%">
 *
 * Opens a buffer immediately, then closes the buffer when the observable
 * returned by calling `closingSelector` function emits a value. When it closes
 * the buffer, it immediately opens a new buffer and repeats the process.
 *
 * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var buffered = clicks.bufferWhen(() =>
 *   Rx.Observable.interval(1000 + Math.random() * 4000)
 * );
 * buffered.subscribe(x => my_console_log(x));
 *
 * @see {@link buffer}
 * @see {@link bufferCount}
 * @see {@link bufferTime}
 * @see {@link bufferToggle}
 * @see {@link windowWhen}
 *
 * @param {function(): Observable} closingSelector A function that takes no
 * arguments and returns an Observable that signals buffer closure.
 * @return {Observable<T[]>} An observable of arrays of buffered values.
 * @method bufferWhen
 * @owner Observable
 */
function bufferWhen(closingSelector) {
    return function (source) {
        return source.lift(new BufferWhenOperator(closingSelector));
    };
}
exports.bufferWhen = bufferWhen;
var BufferWhenOperator = /** @class */ (function () {
    function BufferWhenOperator(closingSelector) {
        this.closingSelector = closingSelector;
    }
    BufferWhenOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));
    };
    return BufferWhenOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var BufferWhenSubscriber = /** @class */ (function (_super) {
    __extends(BufferWhenSubscriber, _super);
    function BufferWhenSubscriber(destination, closingSelector) {
        var _this = _super.call(this, destination) || this;
        _this.closingSelector = closingSelector;
        _this.subscribing = false;
        _this.openBuffer();
        return _this;
    }
    BufferWhenSubscriber.prototype._next = function (value) {
        this.buffer.push(value);
    };
    BufferWhenSubscriber.prototype._complete = function () {
        var buffer = this.buffer;
        if (buffer) {
            this.destination.next(buffer);
        }
        _super.prototype._complete.call(this);
    };
    /** @deprecated This is an internal implementation detail, do not use. */
    BufferWhenSubscriber.prototype._unsubscribe = function () {
        this.buffer = null;
        this.subscribing = false;
    };
    BufferWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.openBuffer();
    };
    BufferWhenSubscriber.prototype.notifyComplete = function () {
        if (this.subscribing) {
            this.complete();
        }
        else {
            this.openBuffer();
        }
    };
    BufferWhenSubscriber.prototype.openBuffer = function () {
        var closingSubscription = this.closingSubscription;
        if (closingSubscription) {
            this.remove(closingSubscription);
            closingSubscription.unsubscribe();
        }
        var buffer = this.buffer;
        if (this.buffer) {
            this.destination.next(buffer);
        }
        this.buffer = [];
        var closingNotifier = tryCatch_1.tryCatch(this.closingSelector)();
        if (closingNotifier === errorObject_1.errorObject) {
            this.error(errorObject_1.errorObject.e);
        }
        else {
            closingSubscription = new Subscription_1.Subscription();
            this.closingSubscription = closingSubscription;
            this.add(closingSubscription);
            this.subscribing = true;
            closingSubscription.add(subscribeToResult_1.subscribeToResult(this, closingNotifier));
            this.subscribing = false;
        }
    };
    return BufferWhenSubscriber;
}(OuterSubscriber_1.OuterSubscriber));

},{"../OuterSubscriber":288,"../Subscription":294,"../util/errorObject":455,"../util/subscribeToResult":478,"../util/tryCatch":480}],336:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var OuterSubscriber_1 = require("../OuterSubscriber");
var subscribeToResult_1 = require("../util/subscribeToResult");
function catchError(selector) {
    return function catchErrorOperatorFunction(source) {
        var operator = new CatchOperator(selector);
        var caught = source.lift(operator);
        return (operator.caught = caught);
    };
}
exports.catchError = catchError;
var CatchOperator = /** @class */ (function () {
    function CatchOperator(selector) {
        this.selector = selector;
    }
    CatchOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));
    };
    return CatchOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var CatchSubscriber = /** @class */ (function (_super) {
    __extends(CatchSubscriber, _super);
    function CatchSubscriber(destination, selector, caught) {
        var _this = _super.call(this, destination) || this;
        _this.selector = selector;
        _this.caught = caught;
        return _this;
    }
    // NOTE: overriding `error` instead of `_error` because we don't want
    // to have this flag this subscriber as `isStopped`. We can mimic the
    // behavior of the RetrySubscriber (from the `retry` operator), where
    // we unsubscribe from our source chain, reset our Subscriber flags,
    // then subscribe to the selector result.
    CatchSubscriber.prototype.error = function (err) {
        if (!this.isStopped) {
            var result = void 0;
            try {
                result = this.selector(err, this.caught);
            }
            catch (err2) {
                _super.prototype.error.call(this, err2);
                return;
            }
            this._unsubscribeAndRecycle();
            this.add(subscribeToResult_1.subscribeToResult(this, result));
        }
    };
    return CatchSubscriber;
}(OuterSubscriber_1.OuterSubscriber));

},{"../OuterSubscriber":288,"../util/subscribeToResult":478}],337:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var combineLatest_1 = require("../observable/combineLatest");
function combineAll(project) {
    return function (source) { return source.lift(new combineLatest_1.CombineLatestOperator(project)); };
}
exports.combineAll = combineAll;

},{"../observable/combineLatest":300}],338:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var isArray_1 = require("../util/isArray");
var combineLatest_1 = require("../observable/combineLatest");
var from_1 = require("../observable/from");
var none = {};
/* tslint:enable:max-line-length */
/**
 * @deprecated Deprecated in favor of static combineLatest.
 */
function combineLatest() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i] = arguments[_i];
    }
    var project = null;
    if (typeof observables[observables.length - 1] === 'function') {
        project = observables.pop();
    }
    // if the first and only other argument besides the resultSelector is an array
    // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`
    if (observables.length === 1 && isArray_1.isArray(observables[0])) {
        observables = observables[0].slice();
    }
    return function (source) { return source.lift.call(from_1.from([source].concat(observables)), new combineLatest_1.CombineLatestOperator(project)); };
}
exports.combineLatest = combineLatest;

},{"../observable/combineLatest":300,"../observable/from":307,"../util/isArray":458}],339:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var concat_1 = require("../observable/concat");
/* tslint:enable:max-line-length */
/**
 * @deprecated Deprecated in favor of static concat.
 */
function concat() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i] = arguments[_i];
    }
    return function (source) { return source.lift.call(concat_1.concat.apply(void 0, [source].concat(observables))); };
}
exports.concat = concat;

},{"../observable/concat":301}],340:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var mergeAll_1 = require("./mergeAll");
/**
 * Converts a higher-order Observable into a first-order Observable by
 * concatenating the inner Observables in order.
 *
 * <span class="informal">Flattens an Observable-of-Observables by putting one
 * inner Observable after the other.</span>
 *
 * <img src="./img/concatAll.png" width="100%">
 *
 * Joins every Observable emitted by the source (a higher-order Observable), in
 * a serial fashion. It subscribes to each inner Observable only after the
 * previous inner Observable has completed, and merges all of their values into
 * the returned observable.
 *
 * __Warning:__ If the source Observable emits Observables quickly and
 * endlessly, and the inner Observables it emits generally complete slower than
 * the source emits, you can run into memory issues as the incoming Observables
 * collect in an unbounded buffer.
 *
 * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set
 * to `1`.
 *
 * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));
 * var firstOrder = higherOrder.concatAll();
 * firstOrder.subscribe(x => my_console_log(x));
 *
 * // Results in the following:
 * // (results are not concurrent)
 * // For every click on the "document" it will emit values 0 to 3 spaced
 * // on a 1000ms interval
 * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3
 *
 * @see {@link combineAll}
 * @see {@link concat}
 * @see {@link concatMap}
 * @see {@link concatMapTo}
 * @see {@link exhaust}
 * @see {@link mergeAll}
 * @see {@link switch}
 * @see {@link zipAll}
 *
 * @return {Observable} An Observable emitting values from all the inner
 * Observables concatenated.
 * @method concatAll
 * @owner Observable
 */
function concatAll() {
    return mergeAll_1.mergeAll(1);
}
exports.concatAll = concatAll;

},{"./mergeAll":373}],341:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var mergeMap_1 = require("./mergeMap");
/* tslint:enable:max-line-length */
/**
 * Projects each source value to an Observable which is merged in the output
 * Observable, in a serialized fashion waiting for each one to complete before
 * merging the next.
 *
 * <span class="informal">Maps each value to an Observable, then flattens all of
 * these inner Observables using {@link concatAll}.</span>
 *
 * <img src="./img/concatMap.png" width="100%">
 *
 * Returns an Observable that emits items based on applying a function that you
 * supply to each item emitted by the source Observable, where that function
 * returns an (so-called "inner") Observable. Each new inner Observable is
 * concatenated with the previous inner Observable.
 *
 * __Warning:__ if source values arrive endlessly and faster than their
 * corresponding inner Observables can complete, it will result in memory issues
 * as inner Observables amass in an unbounded buffer waiting for their turn to
 * be subscribed to.
 *
 * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set
 * to `1`.
 *
 * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));
 * result.subscribe(x => my_console_log(x));
 *
 * // Results in the following:
 * // (results are not concurrent)
 * // For every click on the "document" it will emit values 0 to 3 spaced
 * // on a 1000ms interval
 * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3
 *
 * @see {@link concat}
 * @see {@link concatAll}
 * @see {@link concatMapTo}
 * @see {@link exhaustMap}
 * @see {@link mergeMap}
 * @see {@link switchMap}
 *
 * @param {function(value: T, ?index: number): ObservableInput} project A function
 * that, when applied to an item emitted by the source Observable, returns an
 * Observable.
 * @return {Observable} An Observable that emits the result of applying the
 * projection function (and the optional `resultSelector`) to each item emitted
 * by the source Observable and taking values from each projected inner
 * Observable sequentially.
 * @method concatMap
 * @owner Observable
 */
function concatMap(project, resultSelector) {
    return mergeMap_1.mergeMap(project, resultSelector, 1);
}
exports.concatMap = concatMap;

},{"./mergeMap":374}],342:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var concatMap_1 = require("./concatMap");
/* tslint:enable:max-line-length */
/**
 * Projects each source value to the same Observable which is merged multiple
 * times in a serialized fashion on the output Observable.
 *
 * <span class="informal">It's like {@link concatMap}, but maps each value
 * always to the same inner Observable.</span>
 *
 * <img src="./img/concatMapTo.png" width="100%">
 *
 * Maps each source value to the given Observable `innerObservable` regardless
 * of the source value, and then flattens those resulting Observables into one
 * single Observable, which is the output Observable. Each new `innerObservable`
 * instance emitted on the output Observable is concatenated with the previous
 * `innerObservable` instance.
 *
 * __Warning:__ if source values arrive endlessly and faster than their
 * corresponding inner Observables can complete, it will result in memory issues
 * as inner Observables amass in an unbounded buffer waiting for their turn to
 * be subscribed to.
 *
 * Note: `concatMapTo` is equivalent to `mergeMapTo` with concurrency parameter
 * set to `1`.
 *
 * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.concatMapTo(Rx.Observable.interval(1000).take(4));
 * result.subscribe(x => my_console_log(x));
 *
 * // Results in the following:
 * // (results are not concurrent)
 * // For every click on the "document" it will emit values 0 to 3 spaced
 * // on a 1000ms interval
 * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3
 *
 * @see {@link concat}
 * @see {@link concatAll}
 * @see {@link concatMap}
 * @see {@link mergeMapTo}
 * @see {@link switchMapTo}
 *
 * @param {ObservableInput} innerObservable An Observable to replace each value from
 * the source Observable.
 * @return {Observable} An observable of values merged together by joining the
 * passed observable with itself, one after the other, for each value emitted
 * from the source.
 * @method concatMapTo
 * @owner Observable
 */
function concatMapTo(innerObservable, resultSelector) {
    return concatMap_1.concatMap(function () { return innerObservable; }, resultSelector);
}
exports.concatMapTo = concatMapTo;

},{"./concatMap":341}],343:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Subscriber_1 = require("../Subscriber");
/**
 * Counts the number of emissions on the source and emits that number when the
 * source completes.
 *
 * <span class="informal">Tells how many values were emitted, when the source
 * completes.</span>
 *
 * <img src="./img/count.png" width="100%">
 *
 * `count` transforms an Observable that emits values into an Observable that
 * emits a single value that represents the number of values emitted by the
 * source Observable. If the source Observable terminates with an error, `count`
 * will pass this error notification along without emitting a value first. If
 * the source Observable does not terminate at all, `count` will neither emit
 * a value nor terminate. This operator takes an optional `predicate` function
 * as argument, in which case the output emission will represent the number of
 * source values that matched `true` with the `predicate`.
 *
 * @example <caption>Counts how many seconds have passed before the first click happened</caption>
 * var seconds = Rx.Observable.interval(1000);
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var secondsBeforeClick = seconds.takeUntil(clicks);
 * var result = secondsBeforeClick.count();
 * result.subscribe(x => my_console_log(x));
 *
 * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>
 * var numbers = Rx.Observable.range(1, 7);
 * var result = numbers.count(i => i % 2 === 1);
 * result.subscribe(x => my_console_log(x));
 *
 * // Results in:
 * // 4
 *
 * @see {@link max}
 * @see {@link min}
 * @see {@link reduce}
 *
 * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A
 * boolean function to select what values are to be counted. It is provided with
 * arguments of:
 * - `value`: the value from the source Observable.
 * - `index`: the (zero-based) "index" of the value from the source Observable.
 * - `source`: the source Observable instance itself.
 * @return {Observable} An Observable of one number that represents the count as
 * described above.
 * @method count
 * @owner Observable
 */
function count(predicate) {
    return function (source) { return source.lift(new CountOperator(predicate, source)); };
}
exports.count = count;
var CountOperator = /** @class */ (function () {
    function CountOperator(predicate, source) {
        this.predicate = predicate;
        this.source = source;
    }
    CountOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));
    };
    return CountOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var CountSubscriber = /** @class */ (function (_super) {
    __extends(CountSubscriber, _super);
    function CountSubscriber(destination, predicate, source) {
        var _this = _super.call(this, destination) || this;
        _this.predicate = predicate;
        _this.source = source;
        _this.count = 0;
        _this.index = 0;
        return _this;
    }
    CountSubscriber.prototype._next = function (value) {
        if (this.predicate) {
            this._tryPredicate(value);
        }
        else {
            this.count++;
        }
    };
    CountSubscriber.prototype._tryPredicate = function (value) {
        var result;
        try {
            result = this.predicate(value, this.index++, this.source);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        if (result) {
            this.count++;
        }
    };
    CountSubscriber.prototype._complete = function () {
        this.destination.next(this.count);
        this.destination.complete();
    };
    return CountSubscriber;
}(Subscriber_1.Subscriber));

},{"../Subscriber":293}],344:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var OuterSubscriber_1 = require("../OuterSubscriber");
var subscribeToResult_1 = require("../util/subscribeToResult");
/**
 * Emits a value from the source Observable only after a particular time span
 * determined by another Observable has passed without another source emission.
 *
 * <span class="informal">It's like {@link debounceTime}, but the time span of
 * emission silence is determined by a second Observable.</span>
 *
 * <img src="./img/debounce.png" width="100%">
 *
 * `debounce` delays values emitted by the source Observable, but drops previous
 * pending delayed emissions if a new value arrives on the source Observable.
 * This operator keeps track of the most recent value from the source
 * Observable, and spawns a duration Observable by calling the
 * `durationSelector` function. The value is emitted only when the duration
 * Observable emits a value or completes, and if no other value was emitted on
 * the source Observable since the duration Observable was spawned. If a new
 * value appears before the duration Observable emits, the previous value will
 * be dropped and will not be emitted on the output Observable.
 *
 * Like {@link debounceTime}, this is a rate-limiting operator, and also a
 * delay-like operator since output emissions do not necessarily occur at the
 * same time as they did on the source Observable.
 *
 * @example <caption>Emit the most recent click after a burst of clicks</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.debounce(() => Rx.Observable.interval(1000));
 * result.subscribe(x => my_console_log(x));
 *
 * @see {@link audit}
 * @see {@link debounceTime}
 * @see {@link delayWhen}
 * @see {@link throttle}
 *
 * @param {function(value: T): SubscribableOrPromise} durationSelector A function
 * that receives a value from the source Observable, for computing the timeout
 * duration for each source value, returned as an Observable or a Promise.
 * @return {Observable} An Observable that delays the emissions of the source
 * Observable by the specified duration Observable returned by
 * `durationSelector`, and may drop some values if they occur too frequently.
 * @method debounce
 * @owner Observable
 */
function debounce(durationSelector) {
    return function (source) { return source.lift(new DebounceOperator(durationSelector)); };
}
exports.debounce = debounce;
var DebounceOperator = /** @class */ (function () {
    function DebounceOperator(durationSelector) {
        this.durationSelector = durationSelector;
    }
    DebounceOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new DebounceSubscriber(subscriber, this.durationSelector));
    };
    return DebounceOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var DebounceSubscriber = /** @class */ (function (_super) {
    __extends(DebounceSubscriber, _super);
    function DebounceSubscriber(destination, durationSelector) {
        var _this = _super.call(this, destination) || this;
        _this.durationSelector = durationSelector;
        _this.hasValue = false;
        _this.durationSubscription = null;
        return _this;
    }
    DebounceSubscriber.prototype._next = function (value) {
        try {
            var result = this.durationSelector.call(this, value);
            if (result) {
                this._tryNext(value, result);
            }
        }
        catch (err) {
            this.destination.error(err);
        }
    };
    DebounceSubscriber.prototype._complete = function () {
        this.emitValue();
        this.destination.complete();
    };
    DebounceSubscriber.prototype._tryNext = function (value, duration) {
        var subscription = this.durationSubscription;
        this.value = value;
        this.hasValue = true;
        if (subscription) {
            subscription.unsubscribe();
            this.remove(subscription);
        }
        subscription = subscribeToResult_1.subscribeToResult(this, duration);
        if (subscription && !subscription.closed) {
            this.add(this.durationSubscription = subscription);
        }
    };
    DebounceSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.emitValue();
    };
    DebounceSubscriber.prototype.notifyComplete = function () {
        this.emitValue();
    };
    DebounceSubscriber.prototype.emitValue = function () {
        if (this.hasValue) {
            var value = this.value;
            var subscription = this.durationSubscription;
            if (subscription) {
                this.durationSubscription = null;
                subscription.unsubscribe();
                this.remove(subscription);
            }
            // This must be done *before* passing the value
            // along to the destination because it's possible for
            // the value to synchronously re-enter this operator
            // recursively if the duration selector Observable
            // emits synchronously
            this.value = null;
            this.hasValue = false;
            _super.prototype._next.call(this, value);
        }
    };
    return DebounceSubscriber;
}(OuterSubscriber_1.OuterSubscriber));

},{"../OuterSubscriber":288,"../util/subscribeToResult":478}],345:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Subscriber_1 = require("../Subscriber");
var async_1 = require("../scheduler/async");
/**
 * Emits a value from the source Observable only after a particular time span
 * has passed without another source emission.
 *
 * <span class="informal">It's like {@link delay}, but passes only the most
 * recent value from each burst of emissions.</span>
 *
 * <img src="./img/debounceTime.png" width="100%">
 *
 * `debounceTime` delays values emitted by the source Observable, but drops
 * previous pending delayed emissions if a new value arrives on the source
 * Observable. This operator keeps track of the most recent value from the
 * source Observable, and emits that only when `dueTime` enough time has passed
 * without any other value appearing on the source Observable. If a new value
 * appears before `dueTime` silence occurs, the previous value will be dropped
 * and will not be emitted on the output Observable.
 *
 * This is a rate-limiting operator, because it is impossible for more than one
 * value to be emitted in any time window of duration `dueTime`, but it is also
 * a delay-like operator since output emissions do not occur at the same time as
 * they did on the source Observable. Optionally takes a {@link IScheduler} for
 * managing timers.
 *
 * @example <caption>Emit the most recent click after a burst of clicks</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.debounceTime(1000);
 * result.subscribe(x => my_console_log(x));
 *
 * @see {@link auditTime}
 * @see {@link debounce}
 * @see {@link delay}
 * @see {@link sampleTime}
 * @see {@link throttleTime}
 *
 * @param {number} dueTime The timeout duration in milliseconds (or the time
 * unit determined internally by the optional `scheduler`) for the window of
 * time required to wait for emission silence before emitting the most recent
 * source value.
 * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for
 * managing the timers that handle the timeout for each value.
 * @return {Observable} An Observable that delays the emissions of the source
 * Observable by the specified `dueTime`, and may drop some values if they occur
 * too frequently.
 * @method debounceTime
 * @owner Observable
 */
function debounceTime(dueTime, scheduler) {
    if (scheduler === void 0) { scheduler = async_1.async; }
    return function (source) { return source.lift(new DebounceTimeOperator(dueTime, scheduler)); };
}
exports.debounceTime = debounceTime;
var DebounceTimeOperator = /** @class */ (function () {
    function DebounceTimeOperator(dueTime, scheduler) {
        this.dueTime = dueTime;
        this.scheduler = scheduler;
    }
    DebounceTimeOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));
    };
    return DebounceTimeOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var DebounceTimeSubscriber = /** @class */ (function (_super) {
    __extends(DebounceTimeSubscriber, _super);
    function DebounceTimeSubscriber(destination, dueTime, scheduler) {
        var _this = _super.call(this, destination) || this;
        _this.dueTime = dueTime;
        _this.scheduler = scheduler;
        _this.debouncedSubscription = null;
        _this.lastValue = null;
        _this.hasValue = false;
        return _this;
    }
    DebounceTimeSubscriber.prototype._next = function (value) {
        this.clearDebounce();
        this.lastValue = value;
        this.hasValue = true;
        this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));
    };
    DebounceTimeSubscriber.prototype._complete = function () {
        this.debouncedNext();
        this.destination.complete();
    };
    DebounceTimeSubscriber.prototype.debouncedNext = function () {
        this.clearDebounce();
        if (this.hasValue) {
            var lastValue = this.lastValue;
            // This must be done *before* passing the value
            // along to the destination because it's possible for
            // the value to synchronously re-enter this operator
            // recursively when scheduled with things like
            // VirtualScheduler/TestScheduler.
            this.lastValue = null;
            this.hasValue = false;
            this.destination.next(lastValue);
        }
    };
    DebounceTimeSubscriber.prototype.clearDebounce = function () {
        var debouncedSubscription = this.debouncedSubscription;
        if (debouncedSubscription !== null) {
            this.remove(debouncedSubscription);
            debouncedSubscription.unsubscribe();
            this.debouncedSubscription = null;
        }
    };
    return DebounceTimeSubscriber;
}(Subscriber_1.Subscriber));
function dispatchNext(subscriber) {
    subscriber.debouncedNext();
}

},{"../Subscriber":293,"../scheduler/async":444}],346:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Subscriber_1 = require("../Subscriber");
/* tslint:enable:max-line-length */
/**
 * Emits a given value if the source Observable completes without emitting any
 * `next` value, otherwise mirrors the source Observable.
 *
 * <span class="informal">If the source Observable turns out to be empty, then
 * this operator will emit a default value.</span>
 *
 * <img src="./img/defaultIfEmpty.png" width="100%">
 *
 * `defaultIfEmpty` emits the values emitted by the source Observable or a
 * specified default value if the source Observable is empty (completes without
 * having emitted any `next` value).
 *
 * @example <caption>If no clicks happen in 5 seconds, then emit "no clicks"</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));
 * var result = clicksBeforeFive.defaultIfEmpty('no clicks');
 * result.subscribe(x => my_console_log(x));
 *
 * @see {@link empty}
 * @see {@link last}
 *
 * @param {any} [defaultValue=null] The default value used if the source
 * Observable is empty.
 * @return {Observable} An Observable that emits either the specified
 * `defaultValue` if the source Observable emits no items, or the values emitted
 * by the source Observable.
 * @method defaultIfEmpty
 * @owner Observable
 */
function defaultIfEmpty(defaultValue) {
    if (defaultValue === void 0) { defaultValue = null; }
    return function (source) { return source.lift(new DefaultIfEmptyOperator(defaultValue)); };
}
exports.defaultIfEmpty = defaultIfEmpty;
var DefaultIfEmptyOperator = /** @class */ (function () {
    function DefaultIfEmptyOperator(defaultValue) {
        this.defaultValue = defaultValue;
    }
    DefaultIfEmptyOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));
    };
    return DefaultIfEmptyOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var DefaultIfEmptySubscriber = /** @class */ (function (_super) {
    __extends(DefaultIfEmptySubscriber, _super);
    function DefaultIfEmptySubscriber(destination, defaultValue) {
        var _this = _super.call(this, destination) || this;
        _this.defaultValue = defaultValue;
        _this.isEmpty = true;
        return _this;
    }
    DefaultIfEmptySubscriber.prototype._next = function (value) {
        this.isEmpty = false;
        this.destination.next(value);
    };
    DefaultIfEmptySubscriber.prototype._complete = function () {
        if (this.isEmpty) {
            this.destination.next(this.defaultValue);
        }
        this.destination.complete();
    };
    return DefaultIfEmptySubscriber;
}(Subscriber_1.Subscriber));

},{"../Subscriber":293}],347:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var async_1 = require("../scheduler/async");
var isDate_1 = require("../util/isDate");
var Subscriber_1 = require("../Subscriber");
var Notification_1 = require("../Notification");
/**
 * Delays the emission of items from the source Observable by a given timeout or
 * until a given Date.
 *
 * <span class="informal">Time shifts each item by some specified amount of
 * milliseconds.</span>
 *
 * <img src="./img/delay.png" width="100%">
 *
 * If the delay argument is a Number, this operator time shifts the source
 * Observable by that amount of time expressed in milliseconds. The relative
 * time intervals between the values are preserved.
 *
 * If the delay argument is a Date, this operator time shifts the start of the
 * Observable execution until the given date occurs.
 *
 * @example <caption>Delay each click by one second</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second
 * delayedClicks.subscribe(x => my_console_log(x));
 *
 * @example <caption>Delay all clicks until a future date happens</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var date = new Date('March 15, 2050 12:00:00'); // in the future
 * var delayedClicks = clicks.delay(date); // click emitted only after that date
 * delayedClicks.subscribe(x => my_console_log(x));
 *
 * @see {@link debounceTime}
 * @see {@link delayWhen}
 *
 * @param {number|Date} delay The delay duration in milliseconds (a `number`) or
 * a `Date` until which the emission of the source items is delayed.
 * @param {Scheduler} [scheduler=async] The IScheduler to use for
 * managing the timers that handle the time-shift for each item.
 * @return {Observable} An Observable that delays the emissions of the source
 * Observable by the specified timeout or Date.
 * @method delay
 * @owner Observable
 */
function delay(delay, scheduler) {
    if (scheduler === void 0) { scheduler = async_1.async; }
    var absoluteDelay = isDate_1.isDate(delay);
    var delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(delay);
    return function (source) { return source.lift(new DelayOperator(delayFor, scheduler)); };
}
exports.delay = delay;
var DelayOperator = /** @class */ (function () {
    function DelayOperator(delay, scheduler) {
        this.delay = delay;
        this.scheduler = scheduler;
    }
    DelayOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));
    };
    return DelayOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var DelaySubscriber = /** @class */ (function (_super) {
    __extends(DelaySubscriber, _super);
    function DelaySubscriber(destination, delay, scheduler) {
        var _this = _super.call(this, destination) || this;
        _this.delay = delay;
        _this.scheduler = scheduler;
        _this.queue = [];
        _this.active = false;
        _this.errored = false;
        return _this;
    }
    DelaySubscriber.dispatch = function (state) {
        var source = state.source;
        var queue = source.queue;
        var scheduler = state.scheduler;
        var destination = state.destination;
        while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {
            queue.shift().notification.observe(destination);
        }
        if (queue.length > 0) {
            var delay_1 = Math.max(0, queue[0].time - scheduler.now());
            this.schedule(state, delay_1);
        }
        else {
            this.unsubscribe();
            source.active = false;
        }
    };
    DelaySubscriber.prototype._schedule = function (scheduler) {
        this.active = true;
        this.add(scheduler.schedule(DelaySubscriber.dispatch, this.delay, {
            source: this, destination: this.destination, scheduler: scheduler
        }));
    };
    DelaySubscriber.prototype.scheduleNotification = function (notification) {
        if (this.errored === true) {
            return;
        }
        var scheduler = this.scheduler;
        var message = new DelayMessage(scheduler.now() + this.delay, notification);
        this.queue.push(message);
        if (this.active === false) {
            this._schedule(scheduler);
        }
    };
    DelaySubscriber.prototype._next = function (value) {
        this.scheduleNotification(Notification_1.Notification.createNext(value));
    };
    DelaySubscriber.prototype._error = function (err) {
        this.errored = true;
        this.queue = [];
        this.destination.error(err);
    };
    DelaySubscriber.prototype._complete = function () {
        this.scheduleNotification(Notification_1.Notification.createComplete());
    };
    return DelaySubscriber;
}(Subscriber_1.Subscriber));
var DelayMessage = /** @class */ (function () {
    function DelayMessage(time, notification) {
        this.time = time;
        this.notification = notification;
    }
    return DelayMessage;
}());

},{"../Notification":285,"../Subscriber":293,"../scheduler/async":444,"../util/isDate":460}],348:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Subscriber_1 = require("../Subscriber");
var Observable_1 = require("../Observable");
var OuterSubscriber_1 = require("../OuterSubscriber");
var subscribeToResult_1 = require("../util/subscribeToResult");
/**
 * Delays the emission of items from the source Observable by a given time span
 * determined by the emissions of another Observable.
 *
 * <span class="informal">It's like {@link delay}, but the time span of the
 * delay duration is determined by a second Observable.</span>
 *
 * <img src="./img/delayWhen.png" width="100%">
 *
 * `delayWhen` time shifts each emitted value from the source Observable by a
 * time span determined by another Observable. When the source emits a value,
 * the `delayDurationSelector` function is called with the source value as
 * argument, and should return an Observable, called the "duration" Observable.
 * The source value is emitted on the output Observable only when the duration
 * Observable emits a value or completes.
 *
 * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which
 * is an Observable. When `subscriptionDelay` emits its first value or
 * completes, the source Observable is subscribed to and starts behaving like
 * described in the previous paragraph. If `subscriptionDelay` is not provided,
 * `delayWhen` will subscribe to the source Observable as soon as the output
 * Observable is subscribed.
 *
 * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var delayedClicks = clicks.delayWhen(event =>
 *   Rx.Observable.interval(Math.random() * 5000)
 * );
 * delayedClicks.subscribe(x => my_console_log(x));
 *
 * @see {@link debounce}
 * @see {@link delay}
 *
 * @param {function(value: T): Observable} delayDurationSelector A function that
 * returns an Observable for each value emitted by the source Observable, which
 * is then used to delay the emission of that item on the output Observable
 * until the Observable returned from this function emits a value.
 * @param {Observable} subscriptionDelay An Observable that triggers the
 * subscription to the source Observable once it emits any value.
 * @return {Observable} An Observable that delays the emissions of the source
 * Observable by an amount of time specified by the Observable returned by
 * `delayDurationSelector`.
 * @method delayWhen
 * @owner Observable
 */
function delayWhen(delayDurationSelector, subscriptionDelay) {
    if (subscriptionDelay) {
        return function (source) {
            return new SubscriptionDelayObservable(source, subscriptionDelay)
                .lift(new DelayWhenOperator(delayDurationSelector));
        };
    }
    return function (source) { return source.lift(new DelayWhenOperator(delayDurationSelector)); };
}
exports.delayWhen = delayWhen;
var DelayWhenOperator = /** @class */ (function () {
    function DelayWhenOperator(delayDurationSelector) {
        this.delayDurationSelector = delayDurationSelector;
    }
    DelayWhenOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));
    };
    return DelayWhenOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var DelayWhenSubscriber = /** @class */ (function (_super) {
    __extends(DelayWhenSubscriber, _super);
    function DelayWhenSubscriber(destination, delayDurationSelector) {
        var _this = _super.call(this, destination) || this;
        _this.delayDurationSelector = delayDurationSelector;
        _this.completed = false;
        _this.delayNotifierSubscriptions = [];
        _this.values = [];
        return _this;
    }
    DelayWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.destination.next(outerValue);
        this.removeSubscription(innerSub);
        this.tryComplete();
    };
    DelayWhenSubscriber.prototype.notifyError = function (error, innerSub) {
        this._error(error);
    };
    DelayWhenSubscriber.prototype.notifyComplete = function (innerSub) {
        var value = this.removeSubscription(innerSub);
        if (value) {
            this.destination.next(value);
        }
        this.tryComplete();
    };
    DelayWhenSubscriber.prototype._next = function (value) {
        try {
            var delayNotifier = this.delayDurationSelector(value);
            if (delayNotifier) {
                this.tryDelay(delayNotifier, value);
            }
        }
        catch (err) {
            this.destination.error(err);
        }
    };
    DelayWhenSubscriber.prototype._complete = function () {
        this.completed = true;
        this.tryComplete();
    };
    DelayWhenSubscriber.prototype.removeSubscription = function (subscription) {
        subscription.unsubscribe();
        var subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);
        var value = null;
        if (subscriptionIdx !== -1) {
            value = this.values[subscriptionIdx];
            this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);
            this.values.splice(subscriptionIdx, 1);
        }
        return value;
    };
    DelayWhenSubscriber.prototype.tryDelay = function (delayNotifier, value) {
        var notifierSubscription = subscribeToResult_1.subscribeToResult(this, delayNotifier, value);
        if (notifierSubscription && !notifierSubscription.closed) {
            this.add(notifierSubscription);
            this.delayNotifierSubscriptions.push(notifierSubscription);
        }
        this.values.push(value);
    };
    DelayWhenSubscriber.prototype.tryComplete = function () {
        if (this.completed && this.delayNotifierSubscriptions.length === 0) {
            this.destination.complete();
        }
    };
    return DelayWhenSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SubscriptionDelayObservable = /** @class */ (function (_super) {
    __extends(SubscriptionDelayObservable, _super);
    function SubscriptionDelayObservable(source, subscriptionDelay) {
        var _this = _super.call(this) || this;
        _this.source = source;
        _this.subscriptionDelay = subscriptionDelay;
        return _this;
    }
    /** @deprecated This is an internal implementation detail, do not use. */
    SubscriptionDelayObservable.prototype._subscribe = function (subscriber) {
        this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));
    };
    return SubscriptionDelayObservable;
}(Observable_1.Observable));
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SubscriptionDelaySubscriber = /** @class */ (function (_super) {
    __extends(SubscriptionDelaySubscriber, _super);
    function SubscriptionDelaySubscriber(parent, source) {
        var _this = _super.call(this) || this;
        _this.parent = parent;
        _this.source = source;
        _this.sourceSubscribed = false;
        return _this;
    }
    SubscriptionDelaySubscriber.prototype._next = function (unused) {
        this.subscribeToSource();
    };
    SubscriptionDelaySubscriber.prototype._error = function (err) {
        this.unsubscribe();
        this.parent.error(err);
    };
    SubscriptionDelaySubscriber.prototype._complete = function () {
        this.subscribeToSource();
    };
    SubscriptionDelaySubscriber.prototype.subscribeToSource = function () {
        if (!this.sourceSubscribed) {
            this.sourceSubscribed = true;
            this.unsubscribe();
            this.source.subscribe(this.parent);
        }
    };
    return SubscriptionDelaySubscriber;
}(Subscriber_1.Subscriber));

},{"../Observable":286,"../OuterSubscriber":288,"../Subscriber":293,"../util/subscribeToResult":478}],349:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Subscriber_1 = require("../Subscriber");
/**
 * Converts an Observable of {@link Notification} objects into the emissions
 * that they represent.
 *
 * <span class="informal">Unwraps {@link Notification} objects as actual `next`,
 * `error` and `complete` emissions. The opposite of {@link materialize}.</span>
 *
 * <img src="./img/dematerialize.png" width="100%">
 *
 * `dematerialize` is assumed to operate an Observable that only emits
 * {@link Notification} objects as `next` emissions, and does not emit any
 * `error`. Such Observable is the output of a `materialize` operation. Those
 * notifications are then unwrapped using the metadata they contain, and emitted
 * as `next`, `error`, and `complete` on the output Observable.
 *
 * Use this operator in conjunction with {@link materialize}.
 *
 * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>
 * var notifA = new Rx.Notification('N', 'A');
 * var notifB = new Rx.Notification('N', 'B');
 * var notifE = new Rx.Notification('E', void 0,
 *   new TypeError('x.toUpperCase is not a function')
 * );
 * var materialized = Rx.Observable.of(notifA, notifB, notifE);
 * var upperCase = materialized.dematerialize();
 * upperCase.subscribe(x => my_console_log(x), e => console.error(e));
 *
 * // Results in:
 * // A
 * // B
 * // TypeError: x.toUpperCase is not a function
 *
 * @see {@link Notification}
 * @see {@link materialize}
 *
 * @return {Observable} An Observable that emits items and notifications
 * embedded in Notification objects emitted by the source Observable.
 * @method dematerialize
 * @owner Observable
 */
function dematerialize() {
    return function dematerializeOperatorFunction(source) {
        return source.lift(new DeMaterializeOperator());
    };
}
exports.dematerialize = dematerialize;
var DeMaterializeOperator = /** @class */ (function () {
    function DeMaterializeOperator() {
    }
    DeMaterializeOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new DeMaterializeSubscriber(subscriber));
    };
    return DeMaterializeOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var DeMaterializeSubscriber = /** @class */ (function (_super) {
    __extends(DeMaterializeSubscriber, _super);
    function DeMaterializeSubscriber(destination) {
        return _super.call(this, destination) || this;
    }
    DeMaterializeSubscriber.prototype._next = function (value) {
        value.observe(this.destination);
    };
    return DeMaterializeSubscriber;
}(Subscriber_1.Subscriber));

},{"../Subscriber":293}],350:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var OuterSubscriber_1 = require("../OuterSubscriber");
var subscribeToResult_1 = require("../util/subscribeToResult");
/**
 * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.
 *
 * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will
 * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the
 * source observable directly with an equality check against previous values.
 *
 * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.
 *
 * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the
 * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`
 * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so
 * that the internal `Set` can be "flushed", basically clearing it of values.
 *
 * @example <caption>A simple example with numbers</caption>
 * Observable.of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1)
 *   .distinct()
 *   .subscribe(x => my_console_log(x)); // 1, 2, 3, 4
 *
 * @example <caption>An example using a keySelector function</caption>
 * interface Person {
 *    age: number,
 *    name: string
 * }
 *
 * Observable.of<Person>(
 *     { age: 4, name: 'Foo'},
 *     { age: 7, name: 'Bar'},
 *     { age: 5, name: 'Foo'})
 *     .distinct((p: Person) => p.name)
 *     .subscribe(x => my_console_log(x));
 *
 * // displays:
 * // { age: 4, name: 'Foo' }
 * // { age: 7, name: 'Bar' }
 *
 * @see {@link distinctUntilChanged}
 * @see {@link distinctUntilKeyChanged}
 *
 * @param {function} [keySelector] Optional function to select which value you want to check as distinct.
 * @param {Observable} [flushes] Optional Observable for flushing the internal HashSet of the operator.
 * @return {Observable} An Observable that emits items from the source Observable with distinct values.
 * @method distinct
 * @owner Observable
 */
function distinct(keySelector, flushes) {
    return function (source) { return source.lift(new DistinctOperator(keySelector, flushes)); };
}
exports.distinct = distinct;
var DistinctOperator = /** @class */ (function () {
    function DistinctOperator(keySelector, flushes) {
        this.keySelector = keySelector;
        this.flushes = flushes;
    }
    DistinctOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new DistinctSubscriber(subscriber, this.keySelector, this.flushes));
    };
    return DistinctOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var DistinctSubscriber = /** @class */ (function (_super) {
    __extends(DistinctSubscriber, _super);
    function DistinctSubscriber(destination, keySelector, flushes) {
        var _this = _super.call(this, destination) || this;
        _this.keySelector = keySelector;
        _this.values = new Set();
        if (flushes) {
            _this.add(subscribeToResult_1.subscribeToResult(_this, flushes));
        }
        return _this;
    }
    DistinctSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.values.clear();
    };
    DistinctSubscriber.prototype.notifyError = function (error, innerSub) {
        this._error(error);
    };
    DistinctSubscriber.prototype._next = function (value) {
        if (this.keySelector) {
            this._useKeySelector(value);
        }
        else {
            this._finalizeNext(value, value);
        }
    };
    DistinctSubscriber.prototype._useKeySelector = function (value) {
        var key;
        var destination = this.destination;
        try {
            key = this.keySelector(value);
        }
        catch (err) {
            destination.error(err);
            return;
        }
        this._finalizeNext(key, value);
    };
    DistinctSubscriber.prototype._finalizeNext = function (key, value) {
        var values = this.values;
        if (!values.has(key)) {
            values.add(key);
            this.destination.next(value);
        }
    };
    return DistinctSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
exports.DistinctSubscriber = DistinctSubscriber;

},{"../OuterSubscriber":288,"../util/subscribeToResult":478}],351:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Subscriber_1 = require("../Subscriber");
var tryCatch_1 = require("../util/tryCatch");
var errorObject_1 = require("../util/errorObject");
/* tslint:enable:max-line-length */
/**
 * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.
 *
 * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.
 *
 * If a comparator function is not provided, an equality check is used by default.
 *
 * @example <caption>A simple example with numbers</caption>
 * Observable.of(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4)
 *   .distinctUntilChanged()
 *   .subscribe(x => my_console_log(x)); // 1, 2, 1, 2, 3, 4
 *
 * @example <caption>An example using a compare function</caption>
 * interface Person {
 *    age: number,
 *    name: string
 * }
 *
 * Observable.of<Person>(
 *     { age: 4, name: 'Foo'},
 *     { age: 7, name: 'Bar'},
 *     { age: 5, name: 'Foo'})
 *     { age: 6, name: 'Foo'})
 *     .distinctUntilChanged((p: Person, q: Person) => p.name === q.name)
 *     .subscribe(x => my_console_log(x));
 *
 * // displays:
 * // { age: 4, name: 'Foo' }
 * // { age: 7, name: 'Bar' }
 * // { age: 5, name: 'Foo' }
 *
 * @see {@link distinct}
 * @see {@link distinctUntilKeyChanged}
 *
 * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.
 * @return {Observable} An Observable that emits items from the source Observable with distinct values.
 * @method distinctUntilChanged
 * @owner Observable
 */
function distinctUntilChanged(compare, keySelector) {
    return function (source) { return source.lift(new DistinctUntilChangedOperator(compare, keySelector)); };
}
exports.distinctUntilChanged = distinctUntilChanged;
var DistinctUntilChangedOperator = /** @class */ (function () {
    function DistinctUntilChangedOperator(compare, keySelector) {
        this.compare = compare;
        this.keySelector = keySelector;
    }
    DistinctUntilChangedOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));
    };
    return DistinctUntilChangedOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var DistinctUntilChangedSubscriber = /** @class */ (function (_super) {
    __extends(DistinctUntilChangedSubscriber, _super);
    function DistinctUntilChangedSubscriber(destination, compare, keySelector) {
        var _this = _super.call(this, destination) || this;
        _this.keySelector = keySelector;
        _this.hasKey = false;
        if (typeof compare === 'function') {
            _this.compare = compare;
        }
        return _this;
    }
    DistinctUntilChangedSubscriber.prototype.compare = function (x, y) {
        return x === y;
    };
    DistinctUntilChangedSubscriber.prototype._next = function (value) {
        var keySelector = this.keySelector;
        var key = value;
        if (keySelector) {
            key = tryCatch_1.tryCatch(this.keySelector)(value);
            if (key === errorObject_1.errorObject) {
                return this.destination.error(errorObject_1.errorObject.e);
            }
        }
        var result = false;
        if (this.hasKey) {
            result = tryCatch_1.tryCatch(this.compare)(this.key, key);
            if (result === errorObject_1.errorObject) {
                return this.destination.error(errorObject_1.errorObject.e);
            }
        }
        else {
            this.hasKey = true;
        }
        if (Boolean(result) === false) {
            this.key = key;
            this.destination.next(value);
        }
    };
    return DistinctUntilChangedSubscriber;
}(Subscriber_1.Subscriber));

},{"../Subscriber":293,"../util/errorObject":455,"../util/tryCatch":480}],352:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var distinctUntilChanged_1 = require("./distinctUntilChanged");
/* tslint:enable:max-line-length */
/**
 * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item,
 * using a property accessed by using the key provided to check if the two items are distinct.
 *
 * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.
 *
 * If a comparator function is not provided, an equality check is used by default.
 *
 * @example <caption>An example comparing the name of persons</caption>
 *
 *  interface Person {
 *     age: number,
 *     name: string
 *  }
 *
 * Observable.of<Person>(
 *     { age: 4, name: 'Foo'},
 *     { age: 7, name: 'Bar'},
 *     { age: 5, name: 'Foo'},
 *     { age: 6, name: 'Foo'})
 *     .distinctUntilKeyChanged('name')
 *     .subscribe(x => my_console_log(x));
 *
 * // displays:
 * // { age: 4, name: 'Foo' }
 * // { age: 7, name: 'Bar' }
 * // { age: 5, name: 'Foo' }
 *
 * @example <caption>An example comparing the first letters of the name</caption>
 *
 * interface Person {
 *     age: number,
 *     name: string
 *  }
 *
 * Observable.of<Person>(
 *     { age: 4, name: 'Foo1'},
 *     { age: 7, name: 'Bar'},
 *     { age: 5, name: 'Foo2'},
 *     { age: 6, name: 'Foo3'})
 *     .distinctUntilKeyChanged('name', (x: string, y: string) => x.substring(0, 3) === y.substring(0, 3))
 *     .subscribe(x => my_console_log(x));
 *
 * // displays:
 * // { age: 4, name: 'Foo1' }
 * // { age: 7, name: 'Bar' }
 * // { age: 5, name: 'Foo2' }
 *
 * @see {@link distinct}
 * @see {@link distinctUntilChanged}
 *
 * @param {string} key String key for object property lookup on each item.
 * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.
 * @return {Observable} An Observable that emits items from the source Observable with distinct values based on the key specified.
 * @method distinctUntilKeyChanged
 * @owner Observable
 */
function distinctUntilKeyChanged(key, compare) {
    return distinctUntilChanged_1.distinctUntilChanged(function (x, y) { return compare ? compare(x[key], y[key]) : x[key] === y[key]; });
}
exports.distinctUntilKeyChanged = distinctUntilKeyChanged;

},{"./distinctUntilChanged":351}],353:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ArgumentOutOfRangeError_1 = require("../util/ArgumentOutOfRangeError");
var filter_1 = require("./filter");
var throwIfEmpty_1 = require("./throwIfEmpty");
var defaultIfEmpty_1 = require("./defaultIfEmpty");
var take_1 = require("./take");
/**
 * Emits the single value at the specified `index` in a sequence of emissions
 * from the source Observable.
 *
 * <span class="informal">Emits only the i-th value, then completes.</span>
 *
 * <img src="./img/elementAt.png" width="100%">
 *
 * `elementAt` returns an Observable that emits the item at the specified
 * `index` in the source Observable, or a default value if that `index` is out
 * of range and the `default` argument is provided. If the `default` argument is
 * not given and the `index` is out of range, the output Observable will emit an
 * `ArgumentOutOfRangeError` error.
 *
 * @example <caption>Emit only the third click event</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.elementAt(2);
 * result.subscribe(x => my_console_log(x));
 *
 * // Results in:
 * // click 1 = nothing
 * // click 2 = nothing
 * // click 3 = MouseEvent object logged to console
 *
 * @see {@link first}
 * @see {@link last}
 * @see {@link skip}
 * @see {@link single}
 * @see {@link take}
 *
 * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an
 * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the
 * Observable has completed before emitting the i-th `next` notification.
 *
 * @param {number} index Is the number `i` for the i-th source emission that has
 * happened since the subscription, starting from the number `0`.
 * @param {T} [defaultValue] The default value returned for missing indices.
 * @return {Observable} An Observable that emits a single item, if it is found.
 * Otherwise, will emit the default value if given. If not, then emits an error.
 * @method elementAt
 * @owner Observable
 */
function elementAt(index, defaultValue) {
    if (index < 0) {
        throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError();
    }
    var hasDefaultValue = arguments.length >= 2;
    return function (source) { return source.pipe(filter_1.filter(function (v, i) { return i === index; }), take_1.take(1), hasDefaultValue
        ? defaultIfEmpty_1.defaultIfEmpty(defaultValue)
        : throwIfEmpty_1.throwIfEmpty(function () { return new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError(); })); };
}
exports.elementAt = elementAt;

},{"../util/ArgumentOutOfRangeError":449,"./defaultIfEmpty":346,"./filter":359,"./take":411,"./throwIfEmpty":418}],354:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var fromArray_1 = require("../observable/fromArray");
var scalar_1 = require("../observable/scalar");
var empty_1 = require("../observable/empty");
var concat_1 = require("../observable/concat");
var isScheduler_1 = require("../util/isScheduler");
/* tslint:enable:max-line-length */
/**
 * Returns an Observable that emits the items you specify as arguments after it finishes emitting
 * items emitted by the source Observable.
 *
 * @param {...T} values - Items you want the modified Observable to emit last.
 * @param {Scheduler} [scheduler] - A {@link IScheduler} to use for scheduling
 * the emissions of the `next` notifications.
 * @return {Observable} An Observable that emits the items emitted by the source Observable
 *  and then emits the items in the specified Iterable.
 * @method endWith
 * @owner Observable
 */
function endWith() {
    var array = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        array[_i] = arguments[_i];
    }
    return function (source) {
        var scheduler = array[array.length - 1];
        if (isScheduler_1.isScheduler(scheduler)) {
            array.pop();
        }
        else {
            scheduler = null;
        }
        var len = array.length;
        if (len === 1 && !scheduler) {
            return concat_1.concat(source, scalar_1.scalar(array[0]));
        }
        else if (len > 0) {
            return concat_1.concat(source, fromArray_1.fromArray(array, scheduler));
        }
        else {
            return concat_1.concat(source, empty_1.empty(scheduler));
        }
    };
}
exports.endWith = endWith;

},{"../observable/concat":301,"../observable/empty":305,"../observable/fromArray":308,"../observable/scalar":324,"../util/isScheduler":468}],355:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Subscriber_1 = require("../Subscriber");
/**
 * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.
 *
 * @example <caption>A simple example emitting true if all elements are less than 5, false otherwise</caption>
 *  Observable.of(1, 2, 3, 4, 5, 6)
 *     .every(x => x < 5)
 *     .subscribe(x => my_console_log(x)); // -> false
 *
 * @param {function} predicate A function for determining if an item meets a specified condition.
 * @param {any} [thisArg] Optional object to use for `this` in the callback.
 * @return {Observable} An Observable of booleans that determines if all items of the source Observable meet the condition specified.
 * @method every
 * @owner Observable
 */
function every(predicate, thisArg) {
    return function (source) { return source.lift(new EveryOperator(predicate, thisArg, source)); };
}
exports.every = every;
var EveryOperator = /** @class */ (function () {
    function EveryOperator(predicate, thisArg, source) {
        this.predicate = predicate;
        this.thisArg = thisArg;
        this.source = source;
    }
    EveryOperator.prototype.call = function (observer, source) {
        return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));
    };
    return EveryOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var EverySubscriber = /** @class */ (function (_super) {
    __extends(EverySubscriber, _super);
    function EverySubscriber(destination, predicate, thisArg, source) {
        var _this = _super.call(this, destination) || this;
        _this.predicate = predicate;
        _this.thisArg = thisArg;
        _this.source = source;
        _this.index = 0;
        _this.thisArg = thisArg || _this;
        return _this;
    }
    EverySubscriber.prototype.notifyComplete = function (everyValueMatch) {
        this.destination.next(everyValueMatch);
        this.destination.complete();
    };
    EverySubscriber.prototype._next = function (value) {
        var result = false;
        try {
            result = this.predicate.call(this.thisArg, value, this.index++, this.source);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        if (!result) {
            this.notifyComplete(false);
        }
    };
    EverySubscriber.prototype._complete = function () {
        this.notifyComplete(true);
    };
    return EverySubscriber;
}(Subscriber_1.Subscriber));

},{"../Subscriber":293}],356:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var OuterSubscriber_1 = require("../OuterSubscriber");
var subscribeToResult_1 = require("../util/subscribeToResult");
/**
 * Converts a higher-order Observable into a first-order Observable by dropping
 * inner Observables while the previous inner Observable has not yet completed.
 *
 * <span class="informal">Flattens an Observable-of-Observables by dropping the
 * next inner Observables while the current inner is still executing.</span>
 *
 * <img src="./img/exhaust.png" width="100%">
 *
 * `exhaust` subscribes to an Observable that emits Observables, also known as a
 * higher-order Observable. Each time it observes one of these emitted inner
 * Observables, the output Observable begins emitting the items emitted by that
 * inner Observable. So far, it behaves like {@link mergeAll}. However,
 * `exhaust` ignores every new inner Observable if the previous Observable has
 * not yet completed. Once that one completes, it will accept and flatten the
 * next inner Observable and repeat this process.
 *
 * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(5));
 * var result = higherOrder.exhaust();
 * result.subscribe(x => my_console_log(x));
 *
 * @see {@link combineAll}
 * @see {@link concatAll}
 * @see {@link switch}
 * @see {@link mergeAll}
 * @see {@link exhaustMap}
 * @see {@link zipAll}
 *
 * @return {Observable} An Observable that takes a source of Observables and propagates the first observable
 * exclusively until it completes before subscribing to the next.
 * @method exhaust
 * @owner Observable
 */
function exhaust() {
    return function (source) { return source.lift(new SwitchFirstOperator()); };
}
exports.exhaust = exhaust;
var SwitchFirstOperator = /** @class */ (function () {
    function SwitchFirstOperator() {
    }
    SwitchFirstOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new SwitchFirstSubscriber(subscriber));
    };
    return SwitchFirstOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SwitchFirstSubscriber = /** @class */ (function (_super) {
    __extends(SwitchFirstSubscriber, _super);
    function SwitchFirstSubscriber(destination) {
        var _this = _super.call(this, destination) || this;
        _this.hasCompleted = false;
        _this.hasSubscription = false;
        return _this;
    }
    SwitchFirstSubscriber.prototype._next = function (value) {
        if (!this.hasSubscription) {
            this.hasSubscription = true;
            this.add(subscribeToResult_1.subscribeToResult(this, value));
        }
    };
    SwitchFirstSubscriber.prototype._complete = function () {
        this.hasCompleted = true;
        if (!this.hasSubscription) {
            this.destination.complete();
        }
    };
    SwitchFirstSubscriber.prototype.notifyComplete = function (innerSub) {
        this.remove(innerSub);
        this.hasSubscription = false;
        if (this.hasCompleted) {
            this.destination.complete();
        }
    };
    return SwitchFirstSubscriber;
}(OuterSubscriber_1.OuterSubscriber));

},{"../OuterSubscriber":288,"../util/subscribeToResult":478}],357:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var OuterSubscriber_1 = require("../OuterSubscriber");
var subscribeToResult_1 = require("../util/subscribeToResult");
var map_1 = require("./map");
var from_1 = require("../observable/from");
/* tslint:enable:max-line-length */
/**
 * Projects each source value to an Observable which is merged in the output
 * Observable only if the previous projected Observable has completed.
 *
 * <span class="informal">Maps each value to an Observable, then flattens all of
 * these inner Observables using {@link exhaust}.</span>
 *
 * <img src="./img/exhaustMap.png" width="100%">
 *
 * Returns an Observable that emits items based on applying a function that you
 * supply to each item emitted by the source Observable, where that function
 * returns an (so-called "inner") Observable. When it projects a source value to
 * an Observable, the output Observable begins emitting the items emitted by
 * that projected Observable. However, `exhaustMap` ignores every new projected
 * Observable if the previous projected Observable has not yet completed. Once
 * that one completes, it will accept and flatten the next projected Observable
 * and repeat this process.
 *
 * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000).take(5));
 * result.subscribe(x => my_console_log(x));
 *
 * @see {@link concatMap}
 * @see {@link exhaust}
 * @see {@link mergeMap}
 * @see {@link switchMap}
 *
 * @param {function(value: T, ?index: number): ObservableInput} project A function
 * that, when applied to an item emitted by the source Observable, returns an
 * Observable.
 * @return {Observable} An Observable containing projected Observables
 * of each item of the source, ignoring projected Observables that start before
 * their preceding Observable has completed.
 * @method exhaustMap
 * @owner Observable
 */
function exhaustMap(project, resultSelector) {
    if (resultSelector) {
        // DEPRECATED PATH
        return function (source) { return source.pipe(exhaustMap(function (a, i) { return from_1.from(project(a, i)).pipe(map_1.map(function (b, ii) { return resultSelector(a, b, i, ii); })); })); };
    }
    return function (source) {
        return source.lift(new ExhauseMapOperator(project));
    };
}
exports.exhaustMap = exhaustMap;
var ExhauseMapOperator = /** @class */ (function () {
    function ExhauseMapOperator(project) {
        this.project = project;
    }
    ExhauseMapOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new ExhaustMapSubscriber(subscriber, this.project));
    };
    return ExhauseMapOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var ExhaustMapSubscriber = /** @class */ (function (_super) {
    __extends(ExhaustMapSubscriber, _super);
    function ExhaustMapSubscriber(destination, project) {
        var _this = _super.call(this, destination) || this;
        _this.project = project;
        _this.hasSubscription = false;
        _this.hasCompleted = false;
        _this.index = 0;
        return _this;
    }
    ExhaustMapSubscriber.prototype._next = function (value) {
        if (!this.hasSubscription) {
            this.tryNext(value);
        }
    };
    ExhaustMapSubscriber.prototype.tryNext = function (value) {
        var index = this.index++;
        var destination = this.destination;
        try {
            var result = this.project(value, index);
            this.hasSubscription = true;
            this.add(subscribeToResult_1.subscribeToResult(this, result, value, index));
        }
        catch (err) {
            destination.error(err);
        }
    };
    ExhaustMapSubscriber.prototype._complete = function () {
        this.hasCompleted = true;
        if (!this.hasSubscription) {
            this.destination.complete();
        }
    };
    ExhaustMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.destination.next(innerValue);
    };
    ExhaustMapSubscriber.prototype.notifyError = function (err) {
        this.destination.error(err);
    };
    ExhaustMapSubscriber.prototype.notifyComplete = function (innerSub) {
        this.remove(innerSub);
        this.hasSubscription = false;
        if (this.hasCompleted) {
            this.destination.complete();
        }
    };
    return ExhaustMapSubscriber;
}(OuterSubscriber_1.OuterSubscriber));

},{"../OuterSubscriber":288,"../observable/from":307,"../util/subscribeToResult":478,"./map":368}],358:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var tryCatch_1 = require("../util/tryCatch");
var errorObject_1 = require("../util/errorObject");
var OuterSubscriber_1 = require("../OuterSubscriber");
var subscribeToResult_1 = require("../util/subscribeToResult");
/* tslint:enable:max-line-length */
/**
 * Recursively projects each source value to an Observable which is merged in
 * the output Observable.
 *
 * <span class="informal">It's similar to {@link mergeMap}, but applies the
 * projection function to every source value as well as every output value.
 * It's recursive.</span>
 *
 * <img src="./img/expand.png" width="100%">
 *
 * Returns an Observable that emits items based on applying a function that you
 * supply to each item emitted by the source Observable, where that function
 * returns an Observable, and then merging those resulting Observables and
 * emitting the results of this merger. *Expand* will re-emit on the output
 * Observable every source value. Then, each output value is given to the
 * `project` function which returns an inner Observable to be merged on the
 * output Observable. Those output values resulting from the projection are also
 * given to the `project` function to produce new output values. This is how
 * *expand* behaves recursively.
 *
 * @example <caption>Start emitting the powers of two on every click, at most 10 of them</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var powersOfTwo = clicks
 *   .mapTo(1)
 *   .expand(x => Rx.Observable.of(2 * x).delay(1000))
 *   .take(10);
 * powersOfTwo.subscribe(x => my_console_log(x));
 *
 * @see {@link mergeMap}
 * @see {@link mergeScan}
 *
 * @param {function(value: T, index: number) => Observable} project A function
 * that, when applied to an item emitted by the source or the output Observable,
 * returns an Observable.
 * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input
 * Observables being subscribed to concurrently.
 * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to
 * each projected inner Observable.
 * @return {Observable} An Observable that emits the source values and also
 * result of applying the projection function to each value emitted on the
 * output Observable and and merging the results of the Observables obtained
 * from this transformation.
 * @method expand
 * @owner Observable
 */
function expand(project, concurrent, scheduler) {
    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
    if (scheduler === void 0) { scheduler = undefined; }
    concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;
    return function (source) { return source.lift(new ExpandOperator(project, concurrent, scheduler)); };
}
exports.expand = expand;
var ExpandOperator = /** @class */ (function () {
    function ExpandOperator(project, concurrent, scheduler) {
        this.project = project;
        this.concurrent = concurrent;
        this.scheduler = scheduler;
    }
    ExpandOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));
    };
    return ExpandOperator;
}());
exports.ExpandOperator = ExpandOperator;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var ExpandSubscriber = /** @class */ (function (_super) {
    __extends(ExpandSubscriber, _super);
    function ExpandSubscriber(destination, project, concurrent, scheduler) {
        var _this = _super.call(this, destination) || this;
        _this.project = project;
        _this.concurrent = concurrent;
        _this.scheduler = scheduler;
        _this.index = 0;
        _this.active = 0;
        _this.hasCompleted = false;
        if (concurrent < Number.POSITIVE_INFINITY) {
            _this.buffer = [];
        }
        return _this;
    }
    ExpandSubscriber.dispatch = function (arg) {
        var subscriber = arg.subscriber, result = arg.result, value = arg.value, index = arg.index;
        subscriber.subscribeToProjection(result, value, index);
    };
    ExpandSubscriber.prototype._next = function (value) {
        var destination = this.destination;
        if (destination.closed) {
            this._complete();
            return;
        }
        var index = this.index++;
        if (this.active < this.concurrent) {
            destination.next(value);
            var result = tryCatch_1.tryCatch(this.project)(value, index);
            if (result === errorObject_1.errorObject) {
                destination.error(errorObject_1.errorObject.e);
            }
            else if (!this.scheduler) {
                this.subscribeToProjection(result, value, index);
            }
            else {
                var state = { subscriber: this, result: result, value: value, index: index };
                this.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));
            }
        }
        else {
            this.buffer.push(value);
        }
    };
    ExpandSubscriber.prototype.subscribeToProjection = function (result, value, index) {
        this.active++;
        this.add(subscribeToResult_1.subscribeToResult(this, result, value, index));
    };
    ExpandSubscriber.prototype._complete = function () {
        this.hasCompleted = true;
        if (this.hasCompleted && this.active === 0) {
            this.destination.complete();
        }
    };
    ExpandSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this._next(innerValue);
    };
    ExpandSubscriber.prototype.notifyComplete = function (innerSub) {
        var buffer = this.buffer;
        this.remove(innerSub);
        this.active--;
        if (buffer && buffer.length > 0) {
            this._next(buffer.shift());
        }
        if (this.hasCompleted && this.active === 0) {
            this.destination.complete();
        }
    };
    return ExpandSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
exports.ExpandSubscriber = ExpandSubscriber;

},{"../OuterSubscriber":288,"../util/errorObject":455,"../util/subscribeToResult":478,"../util/tryCatch":480}],359:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Subscriber_1 = require("../Subscriber");
/* tslint:enable:max-line-length */
/**
 * Filter items emitted by the source Observable by only emitting those that
 * satisfy a specified predicate.
 *
 * <span class="informal">Like
 * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),
 * it only emits a value from the source if it passes a criterion function.</span>
 *
 * <img src="./img/filter.png" width="100%">
 *
 * Similar to the well-known `Array.prototype.filter` method, this operator
 * takes values from the source Observable, passes them through a `predicate`
 * function and only emits those values that yielded `true`.
 *
 * @example <caption>Emit only click events whose target was a DIV element</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');
 * clicksOnDivs.subscribe(x => my_console_log(x));
 *
 * @see {@link distinct}
 * @see {@link distinctUntilChanged}
 * @see {@link distinctUntilKeyChanged}
 * @see {@link ignoreElements}
 * @see {@link partition}
 * @see {@link skip}
 *
 * @param {function(value: T, index: number): boolean} predicate A function that
 * evaluates each value emitted by the source Observable. If it returns `true`,
 * the value is emitted, if `false` the value is not passed to the output
 * Observable. The `index` parameter is the number `i` for the i-th source
 * emission that has happened since the subscription, starting from the number
 * `0`.
 * @param {any} [thisArg] An optional argument to determine the value of `this`
 * in the `predicate` function.
 * @return {Observable} An Observable of values from the source that were
 * allowed by the `predicate` function.
 * @method filter
 * @owner Observable
 */
function filter(predicate, thisArg) {
    return function filterOperatorFunction(source) {
        return source.lift(new FilterOperator(predicate, thisArg));
    };
}
exports.filter = filter;
var FilterOperator = /** @class */ (function () {
    function FilterOperator(predicate, thisArg) {
        this.predicate = predicate;
        this.thisArg = thisArg;
    }
    FilterOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));
    };
    return FilterOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var FilterSubscriber = /** @class */ (function (_super) {
    __extends(FilterSubscriber, _super);
    function FilterSubscriber(destination, predicate, thisArg) {
        var _this = _super.call(this, destination) || this;
        _this.predicate = predicate;
        _this.thisArg = thisArg;
        _this.count = 0;
        return _this;
    }
    // the try catch block below is left specifically for
    // optimization and perf reasons. a tryCatcher is not necessary here.
    FilterSubscriber.prototype._next = function (value) {
        var result;
        try {
            result = this.predicate.call(this.thisArg, value, this.count++);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        if (result) {
            this.destination.next(value);
        }
    };
    return FilterSubscriber;
}(Subscriber_1.Subscriber));

},{"../Subscriber":293}],360:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Subscriber_1 = require("../Subscriber");
var Subscription_1 = require("../Subscription");
/**
 * Returns an Observable that mirrors the source Observable, but will call a specified function when
 * the source terminates on complete or error.
 * @param {function} callback Function to be called when source terminates.
 * @return {Observable} An Observable that mirrors the source, but will call the specified function on termination.
 * @method finally
 * @owner Observable
 */
function finalize(callback) {
    return function (source) { return source.lift(new FinallyOperator(callback)); };
}
exports.finalize = finalize;
var FinallyOperator = /** @class */ (function () {
    function FinallyOperator(callback) {
        this.callback = callback;
    }
    FinallyOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new FinallySubscriber(subscriber, this.callback));
    };
    return FinallyOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var FinallySubscriber = /** @class */ (function (_super) {
    __extends(FinallySubscriber, _super);
    function FinallySubscriber(destination, callback) {
        var _this = _super.call(this, destination) || this;
        _this.add(new Subscription_1.Subscription(callback));
        return _this;
    }
    return FinallySubscriber;
}(Subscriber_1.Subscriber));

},{"../Subscriber":293,"../Subscription":294}],361:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Subscriber_1 = require("../Subscriber");
/**
 * Emits only the first value emitted by the source Observable that meets some
 * condition.
 *
 * <span class="informal">Finds the first value that passes some test and emits
 * that.</span>
 *
 * <img src="./img/find.png" width="100%">
 *
 * `find` searches for the first item in the source Observable that matches the
 * specified condition embodied by the `predicate`, and returns the first
 * occurrence in the source. Unlike {@link first}, the `predicate` is required
 * in `find`, and does not emit an error if a valid value is not found.
 *
 * @example <caption>Find and emit the first click that happens on a DIV element</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.find(ev => ev.target.tagName === 'DIV');
 * result.subscribe(x => my_console_log(x));
 *
 * @see {@link filter}
 * @see {@link first}
 * @see {@link findIndex}
 * @see {@link take}
 *
 * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate
 * A function called with each item to test for condition matching.
 * @param {any} [thisArg] An optional argument to determine the value of `this`
 * in the `predicate` function.
 * @return {Observable<T>} An Observable of the first item that matches the
 * condition.
 * @method find
 * @owner Observable
 */
function find(predicate, thisArg) {
    if (typeof predicate !== 'function') {
        throw new TypeError('predicate is not a function');
    }
    return function (source) { return source.lift(new FindValueOperator(predicate, source, false, thisArg)); };
}
exports.find = find;
var FindValueOperator = /** @class */ (function () {
    function FindValueOperator(predicate, source, yieldIndex, thisArg) {
        this.predicate = predicate;
        this.source = source;
        this.yieldIndex = yieldIndex;
        this.thisArg = thisArg;
    }
    FindValueOperator.prototype.call = function (observer, source) {
        return source.subscribe(new FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));
    };
    return FindValueOperator;
}());
exports.FindValueOperator = FindValueOperator;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var FindValueSubscriber = /** @class */ (function (_super) {
    __extends(FindValueSubscriber, _super);
    function FindValueSubscriber(destination, predicate, source, yieldIndex, thisArg) {
        var _this = _super.call(this, destination) || this;
        _this.predicate = predicate;
        _this.source = source;
        _this.yieldIndex = yieldIndex;
        _this.thisArg = thisArg;
        _this.index = 0;
        return _this;
    }
    FindValueSubscriber.prototype.notifyComplete = function (value) {
        var destination = this.destination;
        destination.next(value);
        destination.complete();
    };
    FindValueSubscriber.prototype._next = function (value) {
        var _a = this, predicate = _a.predicate, thisArg = _a.thisArg;
        var index = this.index++;
        try {
            var result = predicate.call(thisArg || this, value, index, this.source);
            if (result) {
                this.notifyComplete(this.yieldIndex ? index : value);
            }
        }
        catch (err) {
            this.destination.error(err);
        }
    };
    FindValueSubscriber.prototype._complete = function () {
        this.notifyComplete(this.yieldIndex ? -1 : undefined);
    };
    return FindValueSubscriber;
}(Subscriber_1.Subscriber));
exports.FindValueSubscriber = FindValueSubscriber;

},{"../Subscriber":293}],362:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var find_1 = require("../operators/find");
/**
 * Emits only the index of the first value emitted by the source Observable that
 * meets some condition.
 *
 * <span class="informal">It's like {@link find}, but emits the index of the
 * found value, not the value itself.</span>
 *
 * <img src="./img/findIndex.png" width="100%">
 *
 * `findIndex` searches for the first item in the source Observable that matches
 * the specified condition embodied by the `predicate`, and returns the
 * (zero-based) index of the first occurrence in the source. Unlike
 * {@link first}, the `predicate` is required in `findIndex`, and does not emit
 * an error if a valid value is not found.
 *
 * @example <caption>Emit the index of first click that happens on a DIV element</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.findIndex(ev => ev.target.tagName === 'DIV');
 * result.subscribe(x => my_console_log(x));
 *
 * @see {@link filter}
 * @see {@link find}
 * @see {@link first}
 * @see {@link take}
 *
 * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate
 * A function called with each item to test for condition matching.
 * @param {any} [thisArg] An optional argument to determine the value of `this`
 * in the `predicate` function.
 * @return {Observable} An Observable of the index of the first item that
 * matches the condition.
 * @method find
 * @owner Observable
 */
function findIndex(predicate, thisArg) {
    return function (source) { return source.lift(new find_1.FindValueOperator(predicate, source, true, thisArg)); };
}
exports.findIndex = findIndex;

},{"../operators/find":361}],363:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var EmptyError_1 = require("../util/EmptyError");
var filter_1 = require("./filter");
var take_1 = require("./take");
var defaultIfEmpty_1 = require("./defaultIfEmpty");
var throwIfEmpty_1 = require("./throwIfEmpty");
var identity_1 = require("../util/identity");
/**
 * Emits only the first value (or the first value that meets some condition)
 * emitted by the source Observable.
 *
 * <span class="informal">Emits only the first value. Or emits only the first
 * value that passes some test.</span>
 *
 * <img src="./img/first.png" width="100%">
 *
 * If called with no arguments, `first` emits the first value of the source
 * Observable, then completes. If called with a `predicate` function, `first`
 * emits the first value of the source that matches the specified condition. It
 * may also take a `resultSelector` function to produce the output value from
 * the input value, and a `defaultValue` to emit in case the source completes
 * before it is able to emit a valid value. Throws an error if `defaultValue`
 * was not provided and a matching element is not found.
 *
 * @example <caption>Emit only the first click that happens on the DOM</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.first();
 * result.subscribe(x => my_console_log(x));
 *
 * @example <caption>Emits the first click that happens on a DIV</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.first(ev => ev.target.tagName === 'DIV');
 * result.subscribe(x => my_console_log(x));
 *
 * @see {@link filter}
 * @see {@link find}
 * @see {@link take}
 *
 * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`
 * callback if the Observable completes before any `next` notification was sent.
 *
 * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]
 * An optional function called with each item to test for condition matching.
 * @param {R} [defaultValue] The default value emitted in case no valid value
 * was found on the source.
 * @return {Observable<T|R>} An Observable of the first item that matches the
 * condition.
 * @method first
 * @owner Observable
 */
function first(predicate, defaultValue) {
    var hasDefaultValue = arguments.length >= 2;
    return function (source) { return source.pipe(predicate ? filter_1.filter(function (v, i) { return predicate(v, i, source); }) : identity_1.identity, take_1.take(1), hasDefaultValue ? defaultIfEmpty_1.defaultIfEmpty(defaultValue) : throwIfEmpty_1.throwIfEmpty(function () { return new EmptyError_1.EmptyError(); })); };
}
exports.first = first;

},{"../util/EmptyError":450,"../util/identity":457,"./defaultIfEmpty":346,"./filter":359,"./take":411,"./throwIfEmpty":418}],364:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Subscriber_1 = require("../Subscriber");
var Subscription_1 = require("../Subscription");
var Observable_1 = require("../Observable");
var Subject_1 = require("../Subject");
/* tslint:enable:max-line-length */
/**
 * Groups the items emitted by an Observable according to a specified criterion,
 * and emits these grouped items as `GroupedObservables`, one
 * {@link GroupedObservable} per group.
 *
 * <img src="./img/groupBy.png" width="100%">
 *
 * @example <caption>Group objects by id and return as array</caption>
 * Observable.of<Obj>({id: 1, name: 'aze1'},
 *                    {id: 2, name: 'sf2'},
 *                    {id: 2, name: 'dg2'},
 *                    {id: 1, name: 'erg1'},
 *                    {id: 1, name: 'df1'},
 *                    {id: 2, name: 'sfqfb2'},
 *                    {id: 3, name: 'qfs3'},
 *                    {id: 2, name: 'qsgqsfg2'}
 *     )
 *     .groupBy(p => p.id)
 *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], []))
 *     .subscribe(p => my_console_log(p));
 *
 * // displays:
 * // [ { id: 1, name: 'aze1' },
 * //   { id: 1, name: 'erg1' },
 * //   { id: 1, name: 'df1' } ]
 * //
 * // [ { id: 2, name: 'sf2' },
 * //   { id: 2, name: 'dg2' },
 * //   { id: 2, name: 'sfqfb2' },
 * //   { id: 2, name: 'qsgqsfg2' } ]
 * //
 * // [ { id: 3, name: 'qfs3' } ]
 *
 * @example <caption>Pivot data on the id field</caption>
 * Observable.of<Obj>({id: 1, name: 'aze1'},
 *                    {id: 2, name: 'sf2'},
 *                    {id: 2, name: 'dg2'},
 *                    {id: 1, name: 'erg1'},
 *                    {id: 1, name: 'df1'},
 *                    {id: 2, name: 'sfqfb2'},
 *                    {id: 3, name: 'qfs1'},
 *                    {id: 2, name: 'qsgqsfg2'}
 *                   )
 *     .groupBy(p => p.id, p => p.name)
 *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], ["" + group$.key]))
 *     .map(arr => ({'id': parseInt(arr[0]), 'values': arr.slice(1)}))
 *     .subscribe(p => my_console_log(p));
 *
 * // displays:
 * // { id: 1, values: [ 'aze1', 'erg1', 'df1' ] }
 * // { id: 2, values: [ 'sf2', 'dg2', 'sfqfb2', 'qsgqsfg2' ] }
 * // { id: 3, values: [ 'qfs1' ] }
 *
 * @param {function(value: T): K} keySelector A function that extracts the key
 * for each item.
 * @param {function(value: T): R} [elementSelector] A function that extracts the
 * return element for each item.
 * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]
 * A function that returns an Observable to determine how long each group should
 * exist.
 * @return {Observable<GroupedObservable<K,R>>} An Observable that emits
 * GroupedObservables, each of which corresponds to a unique key value and each
 * of which emits those items from the source Observable that share that key
 * value.
 * @method groupBy
 * @owner Observable
 */
function groupBy(keySelector, elementSelector, durationSelector, subjectSelector) {
    return function (source) {
        return source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));
    };
}
exports.groupBy = groupBy;
var GroupByOperator = /** @class */ (function () {
    function GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector) {
        this.keySelector = keySelector;
        this.elementSelector = elementSelector;
        this.durationSelector = durationSelector;
        this.subjectSelector = subjectSelector;
    }
    GroupByOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new GroupBySubscriber(subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector));
    };
    return GroupByOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var GroupBySubscriber = /** @class */ (function (_super) {
    __extends(GroupBySubscriber, _super);
    function GroupBySubscriber(destination, keySelector, elementSelector, durationSelector, subjectSelector) {
        var _this = _super.call(this, destination) || this;
        _this.keySelector = keySelector;
        _this.elementSelector = elementSelector;
        _this.durationSelector = durationSelector;
        _this.subjectSelector = subjectSelector;
        _this.groups = null;
        _this.attemptedToUnsubscribe = false;
        _this.count = 0;
        return _this;
    }
    GroupBySubscriber.prototype._next = function (value) {
        var key;
        try {
            key = this.keySelector(value);
        }
        catch (err) {
            this.error(err);
            return;
        }
        this._group(value, key);
    };
    GroupBySubscriber.prototype._group = function (value, key) {
        var groups = this.groups;
        if (!groups) {
            groups = this.groups = new Map();
        }
        var group = groups.get(key);
        var element;
        if (this.elementSelector) {
            try {
                element = this.elementSelector(value);
            }
            catch (err) {
                this.error(err);
            }
        }
        else {
            element = value;
        }
        if (!group) {
            group = (this.subjectSelector ? this.subjectSelector() : new Subject_1.Subject());
            groups.set(key, group);
            var groupedObservable = new GroupedObservable(key, group, this);
            this.destination.next(groupedObservable);
            if (this.durationSelector) {
                var duration = void 0;
                try {
                    duration = this.durationSelector(new GroupedObservable(key, group));
                }
                catch (err) {
                    this.error(err);
                    return;
                }
                this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));
            }
        }
        if (!group.closed) {
            group.next(element);
        }
    };
    GroupBySubscriber.prototype._error = function (err) {
        var groups = this.groups;
        if (groups) {
            groups.forEach(function (group, key) {
                group.error(err);
            });
            groups.clear();
        }
        this.destination.error(err);
    };
    GroupBySubscriber.prototype._complete = function () {
        var groups = this.groups;
        if (groups) {
            groups.forEach(function (group, key) {
                group.complete();
            });
            groups.clear();
        }
        this.destination.complete();
    };
    GroupBySubscriber.prototype.removeGroup = function (key) {
        this.groups.delete(key);
    };
    GroupBySubscriber.prototype.unsubscribe = function () {
        if (!this.closed) {
            this.attemptedToUnsubscribe = true;
            if (this.count === 0) {
                _super.prototype.unsubscribe.call(this);
            }
        }
    };
    return GroupBySubscriber;
}(Subscriber_1.Subscriber));
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var GroupDurationSubscriber = /** @class */ (function (_super) {
    __extends(GroupDurationSubscriber, _super);
    function GroupDurationSubscriber(key, group, parent) {
        var _this = _super.call(this, group) || this;
        _this.key = key;
        _this.group = group;
        _this.parent = parent;
        return _this;
    }
    GroupDurationSubscriber.prototype._next = function (value) {
        this.complete();
    };
    /** @deprecated This is an internal implementation detail, do not use. */
    GroupDurationSubscriber.prototype._unsubscribe = function () {
        var _a = this, parent = _a.parent, key = _a.key;
        this.key = this.parent = null;
        if (parent) {
            parent.removeGroup(key);
        }
    };
    return GroupDurationSubscriber;
}(Subscriber_1.Subscriber));
/**
 * An Observable representing values belonging to the same group represented by
 * a common key. The values emitted by a GroupedObservable come from the source
 * Observable. The common key is available as the field `key` on a
 * GroupedObservable instance.
 *
 * @class GroupedObservable<K, T>
 */
var GroupedObservable = /** @class */ (function (_super) {
    __extends(GroupedObservable, _super);
    /** @deprecated Do not construct this type. Internal use only */
    function GroupedObservable(key, groupSubject, refCountSubscription) {
        var _this = _super.call(this) || this;
        _this.key = key;
        _this.groupSubject = groupSubject;
        _this.refCountSubscription = refCountSubscription;
        return _this;
    }
    /** @deprecated This is an internal implementation detail, do not use. */
    GroupedObservable.prototype._subscribe = function (subscriber) {
        var subscription = new Subscription_1.Subscription();
        var _a = this, refCountSubscription = _a.refCountSubscription, groupSubject = _a.groupSubject;
        if (refCountSubscription && !refCountSubscription.closed) {
            subscription.add(new InnerRefCountSubscription(refCountSubscription));
        }
        subscription.add(groupSubject.subscribe(subscriber));
        return subscription;
    };
    return GroupedObservable;
}(Observable_1.Observable));
exports.GroupedObservable = GroupedObservable;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var InnerRefCountSubscription = /** @class */ (function (_super) {
    __extends(InnerRefCountSubscription, _super);
    function InnerRefCountSubscription(parent) {
        var _this = _super.call(this) || this;
        _this.parent = parent;
        parent.count++;
        return _this;
    }
    InnerRefCountSubscription.prototype.unsubscribe = function () {
        var parent = this.parent;
        if (!parent.closed && !this.closed) {
            _super.prototype.unsubscribe.call(this);
            parent.count -= 1;
            if (parent.count === 0 && parent.attemptedToUnsubscribe) {
                parent.unsubscribe();
            }
        }
    };
    return InnerRefCountSubscription;
}(Subscription_1.Subscription));

},{"../Observable":286,"../Subject":291,"../Subscriber":293,"../Subscription":294}],365:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Subscriber_1 = require("../Subscriber");
/**
 * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.
 *
 * <img src="./img/ignoreElements.png" width="100%">
 *
 * @return {Observable} An empty Observable that only calls `complete`
 * or `error`, based on which one is called by the source Observable.
 * @method ignoreElements
 * @owner Observable
 */
function ignoreElements() {
    return function ignoreElementsOperatorFunction(source) {
        return source.lift(new IgnoreElementsOperator());
    };
}
exports.ignoreElements = ignoreElements;
var IgnoreElementsOperator = /** @class */ (function () {
    function IgnoreElementsOperator() {
    }
    IgnoreElementsOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new IgnoreElementsSubscriber(subscriber));
    };
    return IgnoreElementsOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var IgnoreElementsSubscriber = /** @class */ (function (_super) {
    __extends(IgnoreElementsSubscriber, _super);
    function IgnoreElementsSubscriber() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    IgnoreElementsSubscriber.prototype._next = function (unused) {
        // Do nothing
    };
    return IgnoreElementsSubscriber;
}(Subscriber_1.Subscriber));

},{"../Subscriber":293}],366:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Subscriber_1 = require("../Subscriber");
function isEmpty() {
    return function (source) { return source.lift(new IsEmptyOperator()); };
}
exports.isEmpty = isEmpty;
var IsEmptyOperator = /** @class */ (function () {
    function IsEmptyOperator() {
    }
    IsEmptyOperator.prototype.call = function (observer, source) {
        return source.subscribe(new IsEmptySubscriber(observer));
    };
    return IsEmptyOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var IsEmptySubscriber = /** @class */ (function (_super) {
    __extends(IsEmptySubscriber, _super);
    function IsEmptySubscriber(destination) {
        return _super.call(this, destination) || this;
    }
    IsEmptySubscriber.prototype.notifyComplete = function (isEmpty) {
        var destination = this.destination;
        destination.next(isEmpty);
        destination.complete();
    };
    IsEmptySubscriber.prototype._next = function (value) {
        this.notifyComplete(false);
    };
    IsEmptySubscriber.prototype._complete = function () {
        this.notifyComplete(true);
    };
    return IsEmptySubscriber;
}(Subscriber_1.Subscriber));

},{"../Subscriber":293}],367:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var EmptyError_1 = require("../util/EmptyError");
var filter_1 = require("./filter");
var takeLast_1 = require("./takeLast");
var throwIfEmpty_1 = require("./throwIfEmpty");
var defaultIfEmpty_1 = require("./defaultIfEmpty");
var identity_1 = require("../util/identity");
/**
 * Returns an Observable that emits only the last item emitted by the source Observable.
 * It optionally takes a predicate function as a parameter, in which case, rather than emitting
 * the last item from the source Observable, the resulting Observable will emit the last item
 * from the source Observable that satisfies the predicate.
 *
 * <img src="./img/last.png" width="100%">
 *
 * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`
 * callback if the Observable completes before any `next` notification was sent.
 * @param {function} [predicate] - The condition any source emitted item has to satisfy.
 * @param {any} [defaultValue] - An optional default value to provide if last
 * predicate isn't met or no values were emitted.
 * @return {Observable} An Observable that emits only the last item satisfying the given condition
 * from the source, or an NoSuchElementException if no such items are emitted.
 * @throws - Throws if no items that match the predicate are emitted by the source Observable.
 */
function last(predicate, defaultValue) {
    var hasDefaultValue = arguments.length >= 2;
    return function (source) { return source.pipe(predicate ? filter_1.filter(function (v, i) { return predicate(v, i, source); }) : identity_1.identity, takeLast_1.takeLast(1), hasDefaultValue ? defaultIfEmpty_1.defaultIfEmpty(defaultValue) : throwIfEmpty_1.throwIfEmpty(function () { return new EmptyError_1.EmptyError(); })); };
}
exports.last = last;

},{"../util/EmptyError":450,"../util/identity":457,"./defaultIfEmpty":346,"./filter":359,"./takeLast":412,"./throwIfEmpty":418}],368:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Subscriber_1 = require("../Subscriber");
/**
 * Applies a given `project` function to each value emitted by the source
 * Observable, and emits the resulting values as an Observable.
 *
 * <span class="informal">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),
 * it passes each source value through a transformation function to get
 * corresponding output values.</span>
 *
 * <img src="./img/map.png" width="100%">
 *
 * Similar to the well known `Array.prototype.map` function, this operator
 * applies a projection to each value and emits that projection in the output
 * Observable.
 *
 * @example <caption>Map every click to the clientX position of that click</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var positions = clicks.map(ev => ev.clientX);
 * positions.subscribe(x => my_console_log(x));
 *
 * @see {@link mapTo}
 * @see {@link pluck}
 *
 * @param {function(value: T, index: number): R} project The function to apply
 * to each `value` emitted by the source Observable. The `index` parameter is
 * the number `i` for the i-th emission that has happened since the
 * subscription, starting from the number `0`.
 * @param {any} [thisArg] An optional argument to define what `this` is in the
 * `project` function.
 * @return {Observable<R>} An Observable that emits the values from the source
 * Observable transformed by the given `project` function.
 * @method map
 * @owner Observable
 */
function map(project, thisArg) {
    return function mapOperation(source) {
        if (typeof project !== 'function') {
            throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');
        }
        return source.lift(new MapOperator(project, thisArg));
    };
}
exports.map = map;
var MapOperator = /** @class */ (function () {
    function MapOperator(project, thisArg) {
        this.project = project;
        this.thisArg = thisArg;
    }
    MapOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));
    };
    return MapOperator;
}());
exports.MapOperator = MapOperator;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var MapSubscriber = /** @class */ (function (_super) {
    __extends(MapSubscriber, _super);
    function MapSubscriber(destination, project, thisArg) {
        var _this = _super.call(this, destination) || this;
        _this.project = project;
        _this.count = 0;
        _this.thisArg = thisArg || _this;
        return _this;
    }
    // NOTE: This looks unoptimized, but it's actually purposefully NOT
    // using try/catch optimizations.
    MapSubscriber.prototype._next = function (value) {
        var result;
        try {
            result = this.project.call(this.thisArg, value, this.count++);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.destination.next(result);
    };
    return MapSubscriber;
}(Subscriber_1.Subscriber));

},{"../Subscriber":293}],369:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Subscriber_1 = require("../Subscriber");
/**
 * Emits the given constant value on the output Observable every time the source
 * Observable emits a value.
 *
 * <span class="informal">Like {@link map}, but it maps every source value to
 * the same output value every time.</span>
 *
 * <img src="./img/mapTo.png" width="100%">
 *
 * Takes a constant `value` as argument, and emits that whenever the source
 * Observable emits a value. In other words, ignores the actual source value,
 * and simply uses the emission moment to know when to emit the given `value`.
 *
 * @example <caption>Map every click to the string 'Hi'</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var greetings = clicks.mapTo('Hi');
 * greetings.subscribe(x => my_console_log(x));
 *
 * @see {@link map}
 *
 * @param {any} value The value to map each source value to.
 * @return {Observable} An Observable that emits the given `value` every time
 * the source Observable emits something.
 * @method mapTo
 * @owner Observable
 */
function mapTo(value) {
    return function (source) { return source.lift(new MapToOperator(value)); };
}
exports.mapTo = mapTo;
var MapToOperator = /** @class */ (function () {
    function MapToOperator(value) {
        this.value = value;
    }
    MapToOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new MapToSubscriber(subscriber, this.value));
    };
    return MapToOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var MapToSubscriber = /** @class */ (function (_super) {
    __extends(MapToSubscriber, _super);
    function MapToSubscriber(destination, value) {
        var _this = _super.call(this, destination) || this;
        _this.value = value;
        return _this;
    }
    MapToSubscriber.prototype._next = function (x) {
        this.destination.next(this.value);
    };
    return MapToSubscriber;
}(Subscriber_1.Subscriber));

},{"../Subscriber":293}],370:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Subscriber_1 = require("../Subscriber");
var Notification_1 = require("../Notification");
/**
 * Represents all of the notifications from the source Observable as `next`
 * emissions marked with their original types within {@link Notification}
 * objects.
 *
 * <span class="informal">Wraps `next`, `error` and `complete` emissions in
 * {@link Notification} objects, emitted as `next` on the output Observable.
 * </span>
 *
 * <img src="./img/materialize.png" width="100%">
 *
 * `materialize` returns an Observable that emits a `next` notification for each
 * `next`, `error`, or `complete` emission of the source Observable. When the
 * source Observable emits `complete`, the output Observable will emit `next` as
 * a Notification of type "complete", and then it will emit `complete` as well.
 * When the source Observable emits `error`, the output will emit `next` as a
 * Notification of type "error", and then `complete`.
 *
 * This operator is useful for producing metadata of the source Observable, to
 * be consumed as `next` emissions. Use it in conjunction with
 * {@link dematerialize}.
 *
 * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>
 * var letters = Rx.Observable.of('a', 'b', 13, 'd');
 * var upperCase = letters.map(x => x.toUpperCase());
 * var materialized = upperCase.materialize();
 * materialized.subscribe(x => my_console_log(x));
 *
 * // Results in the following:
 * // - Notification {kind: "N", value: "A", error: undefined, hasValue: true}
 * // - Notification {kind: "N", value: "B", error: undefined, hasValue: true}
 * // - Notification {kind: "E", value: undefined, error: TypeError:
 * //   x.toUpperCase is not a function at MapSubscriber.letters.map.x
 * //   [as project] (http://1…, hasValue: false}
 *
 * @see {@link Notification}
 * @see {@link dematerialize}
 *
 * @return {Observable<Notification<T>>} An Observable that emits
 * {@link Notification} objects that wrap the original emissions from the source
 * Observable with metadata.
 * @method materialize
 * @owner Observable
 */
function materialize() {
    return function materializeOperatorFunction(source) {
        return source.lift(new MaterializeOperator());
    };
}
exports.materialize = materialize;
var MaterializeOperator = /** @class */ (function () {
    function MaterializeOperator() {
    }
    MaterializeOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new MaterializeSubscriber(subscriber));
    };
    return MaterializeOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var MaterializeSubscriber = /** @class */ (function (_super) {
    __extends(MaterializeSubscriber, _super);
    function MaterializeSubscriber(destination) {
        return _super.call(this, destination) || this;
    }
    MaterializeSubscriber.prototype._next = function (value) {
        this.destination.next(Notification_1.Notification.createNext(value));
    };
    MaterializeSubscriber.prototype._error = function (err) {
        var destination = this.destination;
        destination.next(Notification_1.Notification.createError(err));
        destination.complete();
    };
    MaterializeSubscriber.prototype._complete = function () {
        var destination = this.destination;
        destination.next(Notification_1.Notification.createComplete());
        destination.complete();
    };
    return MaterializeSubscriber;
}(Subscriber_1.Subscriber));

},{"../Notification":285,"../Subscriber":293}],371:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var reduce_1 = require("./reduce");
/**
 * The Max operator operates on an Observable that emits numbers (or items that can be compared with a provided function),
 * and when source Observable completes it emits a single item: the item with the largest value.
 *
 * <img src="./img/max.png" width="100%">
 *
 * @example <caption>Get the maximal value of a series of numbers</caption>
 * Rx.Observable.of(5, 4, 7, 2, 8)
 *   .max()
 *   .subscribe(x => my_console_log(x)); // -> 8
 *
 * @example <caption>Use a comparer function to get the maximal item</caption>
 * interface Person {
 *   age: number,
 *   name: string
 * }
 * Observable.of<Person>({age: 7, name: 'Foo'},
 *                       {age: 5, name: 'Bar'},
 *                       {age: 9, name: 'Beer'})
 *           .max<Person>((a: Person, b: Person) => a.age < b.age ? -1 : 1)
 *           .subscribe((x: Person) => my_console_log(x.name)); // -> 'Beer'
 * }
 *
 * @see {@link min}
 *
 * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the
 * value of two items.
 * @return {Observable} An Observable that emits item with the largest value.
 * @method max
 * @owner Observable
 */
function max(comparer) {
    var max = (typeof comparer === 'function')
        ? function (x, y) { return comparer(x, y) > 0 ? x : y; }
        : function (x, y) { return x > y ? x : y; };
    return reduce_1.reduce(max);
}
exports.max = max;

},{"./reduce":389}],372:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var merge_1 = require("../observable/merge");
/* tslint:enable:max-line-length */
/**
 * @deprecated Deprecated in favor of static merge.
 */
function merge() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i] = arguments[_i];
    }
    return function (source) { return source.lift.call(merge_1.merge.apply(void 0, [source].concat(observables))); };
}
exports.merge = merge;

},{"../observable/merge":317}],373:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var mergeMap_1 = require("./mergeMap");
var identity_1 = require("../util/identity");
/**
 * Converts a higher-order Observable into a first-order Observable which
 * concurrently delivers all values that are emitted on the inner Observables.
 *
 * <span class="informal">Flattens an Observable-of-Observables.</span>
 *
 * <img src="./img/mergeAll.png" width="100%">
 *
 * `mergeAll` subscribes to an Observable that emits Observables, also known as
 * a higher-order Observable. Each time it observes one of these emitted inner
 * Observables, it subscribes to that and delivers all the values from the
 * inner Observable on the output Observable. The output Observable only
 * completes once all inner Observables have completed. Any error delivered by
 * a inner Observable will be immediately emitted on the output Observable.
 *
 * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));
 * var firstOrder = higherOrder.mergeAll();
 * firstOrder.subscribe(x => my_console_log(x));
 *
 * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));
 * var firstOrder = higherOrder.mergeAll(2);
 * firstOrder.subscribe(x => my_console_log(x));
 *
 * @see {@link combineAll}
 * @see {@link concatAll}
 * @see {@link exhaust}
 * @see {@link merge}
 * @see {@link mergeMap}
 * @see {@link mergeMapTo}
 * @see {@link mergeScan}
 * @see {@link switch}
 * @see {@link zipAll}
 *
 * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner
 * Observables being subscribed to concurrently.
 * @return {Observable} An Observable that emits values coming from all the
 * inner Observables emitted by the source Observable.
 * @method mergeAll
 * @owner Observable
 */
function mergeAll(concurrent) {
    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
    return mergeMap_1.mergeMap(identity_1.identity, concurrent);
}
exports.mergeAll = mergeAll;

},{"../util/identity":457,"./mergeMap":374}],374:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var subscribeToResult_1 = require("../util/subscribeToResult");
var OuterSubscriber_1 = require("../OuterSubscriber");
var map_1 = require("./map");
var from_1 = require("../observable/from");
/* tslint:enable:max-line-length */
/**
 * Projects each source value to an Observable which is merged in the output
 * Observable.
 *
 * <span class="informal">Maps each value to an Observable, then flattens all of
 * these inner Observables using {@link mergeAll}.</span>
 *
 * <img src="./img/mergeMap.png" width="100%">
 *
 * Returns an Observable that emits items based on applying a function that you
 * supply to each item emitted by the source Observable, where that function
 * returns an Observable, and then merging those resulting Observables and
 * emitting the results of this merger.
 *
 * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>
 * var letters = Rx.Observable.of('a', 'b', 'c');
 * var result = letters.mergeMap(x =>
 *   Rx.Observable.interval(1000).map(i => x+i)
 * );
 * result.subscribe(x => my_console_log(x));
 *
 * // Results in the following:
 * // a0
 * // b0
 * // c0
 * // a1
 * // b1
 * // c1
 * // continues to list a,b,c with respective ascending integers
 *
 * @see {@link concatMap}
 * @see {@link exhaustMap}
 * @see {@link merge}
 * @see {@link mergeAll}
 * @see {@link mergeMapTo}
 * @see {@link mergeScan}
 * @see {@link switchMap}
 *
 * @param {function(value: T, ?index: number): ObservableInput} project A function
 * that, when applied to an item emitted by the source Observable, returns an
 * Observable.
 * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input
 * Observables being subscribed to concurrently.
 * @return {Observable} An Observable that emits the result of applying the
 * projection function (and the optional `resultSelector`) to each item emitted
 * by the source Observable and merging the results of the Observables obtained
 * from this transformation.
 * @method mergeMap
 * @owner Observable
 */
function mergeMap(project, resultSelector, concurrent) {
    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
    if (typeof resultSelector === 'function') {
        // DEPRECATED PATH
        return function (source) { return source.pipe(mergeMap(function (a, i) { return from_1.from(project(a, i)).pipe(map_1.map(function (b, ii) { return resultSelector(a, b, i, ii); })); }, concurrent)); };
    }
    else if (typeof resultSelector === 'number') {
        concurrent = resultSelector;
    }
    return function (source) { return source.lift(new MergeMapOperator(project, concurrent)); };
}
exports.mergeMap = mergeMap;
var MergeMapOperator = /** @class */ (function () {
    function MergeMapOperator(project, concurrent) {
        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
        this.project = project;
        this.concurrent = concurrent;
    }
    MergeMapOperator.prototype.call = function (observer, source) {
        return source.subscribe(new MergeMapSubscriber(observer, this.project, this.concurrent));
    };
    return MergeMapOperator;
}());
exports.MergeMapOperator = MergeMapOperator;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var MergeMapSubscriber = /** @class */ (function (_super) {
    __extends(MergeMapSubscriber, _super);
    function MergeMapSubscriber(destination, project, concurrent) {
        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
        var _this = _super.call(this, destination) || this;
        _this.project = project;
        _this.concurrent = concurrent;
        _this.hasCompleted = false;
        _this.buffer = [];
        _this.active = 0;
        _this.index = 0;
        return _this;
    }
    MergeMapSubscriber.prototype._next = function (value) {
        if (this.active < this.concurrent) {
            this._tryNext(value);
        }
        else {
            this.buffer.push(value);
        }
    };
    MergeMapSubscriber.prototype._tryNext = function (value) {
        var result;
        var index = this.index++;
        try {
            result = this.project(value, index);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.active++;
        this._innerSub(result, value, index);
    };
    MergeMapSubscriber.prototype._innerSub = function (ish, value, index) {
        this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));
    };
    MergeMapSubscriber.prototype._complete = function () {
        this.hasCompleted = true;
        if (this.active === 0 && this.buffer.length === 0) {
            this.destination.complete();
        }
    };
    MergeMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.destination.next(innerValue);
    };
    MergeMapSubscriber.prototype.notifyComplete = function (innerSub) {
        var buffer = this.buffer;
        this.remove(innerSub);
        this.active--;
        if (buffer.length > 0) {
            this._next(buffer.shift());
        }
        else if (this.active === 0 && this.hasCompleted) {
            this.destination.complete();
        }
    };
    return MergeMapSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
exports.MergeMapSubscriber = MergeMapSubscriber;

},{"../OuterSubscriber":288,"../observable/from":307,"../util/subscribeToResult":478,"./map":368}],375:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var mergeMap_1 = require("./mergeMap");
/* tslint:enable:max-line-length */
/**
 * Projects each source value to the same Observable which is merged multiple
 * times in the output Observable.
 *
 * <span class="informal">It's like {@link mergeMap}, but maps each value always
 * to the same inner Observable.</span>
 *
 * <img src="./img/mergeMapTo.png" width="100%">
 *
 * Maps each source value to the given Observable `innerObservable` regardless
 * of the source value, and then merges those resulting Observables into one
 * single Observable, which is the output Observable.
 *
 * @example <caption>For each click event, start an interval Observable ticking every 1 second</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.mergeMapTo(Rx.Observable.interval(1000));
 * result.subscribe(x => my_console_log(x));
 *
 * @see {@link concatMapTo}
 * @see {@link merge}
 * @see {@link mergeAll}
 * @see {@link mergeMap}
 * @see {@link mergeScan}
 * @see {@link switchMapTo}
 *
 * @param {ObservableInput} innerObservable An Observable to replace each value from
 * the source Observable.
 * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input
 * Observables being subscribed to concurrently.
 * @return {Observable} An Observable that emits items from the given
 * `innerObservable`
 * @method mergeMapTo
 * @owner Observable
 */
function mergeMapTo(innerObservable, resultSelector, concurrent) {
    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
    if (typeof resultSelector === 'function') {
        return mergeMap_1.mergeMap(function () { return innerObservable; }, resultSelector, concurrent);
    }
    if (typeof resultSelector === 'number') {
        concurrent = resultSelector;
    }
    return mergeMap_1.mergeMap(function () { return innerObservable; }, concurrent);
}
exports.mergeMapTo = mergeMapTo;

},{"./mergeMap":374}],376:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var tryCatch_1 = require("../util/tryCatch");
var errorObject_1 = require("../util/errorObject");
var subscribeToResult_1 = require("../util/subscribeToResult");
var OuterSubscriber_1 = require("../OuterSubscriber");
/**
 * Applies an accumulator function over the source Observable where the
 * accumulator function itself returns an Observable, then each intermediate
 * Observable returned is merged into the output Observable.
 *
 * <span class="informal">It's like {@link scan}, but the Observables returned
 * by the accumulator are merged into the outer Observable.</span>
 *
 * @example <caption>Count the number of click events</caption>
 * const click$ = Rx.Observable.fromEvent(document, 'click');
 * const one$ = click$.mapTo(1);
 * const seed = 0;
 * const count$ = one$.mergeScan((acc, one) => Rx.Observable.of(acc + one), seed);
 * count$.subscribe(x => my_console_log(x));
 *
 * // Results:
 * 1
 * 2
 * 3
 * 4
 * // ...and so on for each click
 *
 * @param {function(acc: R, value: T): Observable<R>} accumulator
 * The accumulator function called on each source value.
 * @param seed The initial accumulation value.
 * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of
 * input Observables being subscribed to concurrently.
 * @return {Observable<R>} An observable of the accumulated values.
 * @method mergeScan
 * @owner Observable
 */
function mergeScan(accumulator, seed, concurrent) {
    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
    return function (source) { return source.lift(new MergeScanOperator(accumulator, seed, concurrent)); };
}
exports.mergeScan = mergeScan;
var MergeScanOperator = /** @class */ (function () {
    function MergeScanOperator(accumulator, seed, concurrent) {
        this.accumulator = accumulator;
        this.seed = seed;
        this.concurrent = concurrent;
    }
    MergeScanOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new MergeScanSubscriber(subscriber, this.accumulator, this.seed, this.concurrent));
    };
    return MergeScanOperator;
}());
exports.MergeScanOperator = MergeScanOperator;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var MergeScanSubscriber = /** @class */ (function (_super) {
    __extends(MergeScanSubscriber, _super);
    function MergeScanSubscriber(destination, accumulator, acc, concurrent) {
        var _this = _super.call(this, destination) || this;
        _this.accumulator = accumulator;
        _this.acc = acc;
        _this.concurrent = concurrent;
        _this.hasValue = false;
        _this.hasCompleted = false;
        _this.buffer = [];
        _this.active = 0;
        _this.index = 0;
        return _this;
    }
    MergeScanSubscriber.prototype._next = function (value) {
        if (this.active < this.concurrent) {
            var index = this.index++;
            var ish = tryCatch_1.tryCatch(this.accumulator)(this.acc, value);
            var destination = this.destination;
            if (ish === errorObject_1.errorObject) {
                destination.error(errorObject_1.errorObject.e);
            }
            else {
                this.active++;
                this._innerSub(ish, value, index);
            }
        }
        else {
            this.buffer.push(value);
        }
    };
    MergeScanSubscriber.prototype._innerSub = function (ish, value, index) {
        this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));
    };
    MergeScanSubscriber.prototype._complete = function () {
        this.hasCompleted = true;
        if (this.active === 0 && this.buffer.length === 0) {
            if (this.hasValue === false) {
                this.destination.next(this.acc);
            }
            this.destination.complete();
        }
    };
    MergeScanSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        var destination = this.destination;
        this.acc = innerValue;
        this.hasValue = true;
        destination.next(innerValue);
    };
    MergeScanSubscriber.prototype.notifyComplete = function (innerSub) {
        var buffer = this.buffer;
        this.remove(innerSub);
        this.active--;
        if (buffer.length > 0) {
            this._next(buffer.shift());
        }
        else if (this.active === 0 && this.hasCompleted) {
            if (this.hasValue === false) {
                this.destination.next(this.acc);
            }
            this.destination.complete();
        }
    };
    return MergeScanSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
exports.MergeScanSubscriber = MergeScanSubscriber;

},{"../OuterSubscriber":288,"../util/errorObject":455,"../util/subscribeToResult":478,"../util/tryCatch":480}],377:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var reduce_1 = require("./reduce");
/**
 * The Min operator operates on an Observable that emits numbers (or items that can be compared with a provided function),
 * and when source Observable completes it emits a single item: the item with the smallest value.
 *
 * <img src="./img/min.png" width="100%">
 *
 * @example <caption>Get the minimal value of a series of numbers</caption>
 * Rx.Observable.of(5, 4, 7, 2, 8)
 *   .min()
 *   .subscribe(x => my_console_log(x)); // -> 2
 *
 * @example <caption>Use a comparer function to get the minimal item</caption>
 * interface Person {
 *   age: number,
 *   name: string
 * }
 * Observable.of<Person>({age: 7, name: 'Foo'},
 *                       {age: 5, name: 'Bar'},
 *                       {age: 9, name: 'Beer'})
 *           .min<Person>( (a: Person, b: Person) => a.age < b.age ? -1 : 1)
 *           .subscribe((x: Person) => my_console_log(x.name)); // -> 'Bar'
 * }
 *
 * @see {@link max}
 *
 * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the
 * value of two items.
 * @return {Observable<R>} An Observable that emits item with the smallest value.
 * @method min
 * @owner Observable
 */
function min(comparer) {
    var min = (typeof comparer === 'function')
        ? function (x, y) { return comparer(x, y) < 0 ? x : y; }
        : function (x, y) { return x < y ? x : y; };
    return reduce_1.reduce(min);
}
exports.min = min;

},{"./reduce":389}],378:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ConnectableObservable_1 = require("../observable/ConnectableObservable");
/* tslint:enable:max-line-length */
/**
 * Returns an Observable that emits the results of invoking a specified selector on items
 * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.
 *
 * <img src="./img/multicast.png" width="100%">
 *
 * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate subject through
 * which the source sequence's elements will be multicast to the selector function
 * or Subject to push source elements into.
 * @param {Function} [selector] - Optional selector function that can use the multicasted source stream
 * as many times as needed, without causing multiple subscriptions to the source stream.
 * Subscribers to the given source will receive all notifications of the source from the
 * time of the subscription forward.
 * @return {Observable} An Observable that emits the results of invoking the selector
 * on the items emitted by a `ConnectableObservable` that shares a single subscription to
 * the underlying stream.
 * @method multicast
 * @owner Observable
 */
function multicast(subjectOrSubjectFactory, selector) {
    return function multicastOperatorFunction(source) {
        var subjectFactory;
        if (typeof subjectOrSubjectFactory === 'function') {
            subjectFactory = subjectOrSubjectFactory;
        }
        else {
            subjectFactory = function subjectFactory() {
                return subjectOrSubjectFactory;
            };
        }
        if (typeof selector === 'function') {
            return source.lift(new MulticastOperator(subjectFactory, selector));
        }
        var connectable = Object.create(source, ConnectableObservable_1.connectableObservableDescriptor);
        connectable.source = source;
        connectable.subjectFactory = subjectFactory;
        return connectable;
    };
}
exports.multicast = multicast;
var MulticastOperator = /** @class */ (function () {
    function MulticastOperator(subjectFactory, selector) {
        this.subjectFactory = subjectFactory;
        this.selector = selector;
    }
    MulticastOperator.prototype.call = function (subscriber, source) {
        var selector = this.selector;
        var subject = this.subjectFactory();
        var subscription = selector(subject).subscribe(subscriber);
        subscription.add(source.subscribe(subject));
        return subscription;
    };
    return MulticastOperator;
}());
exports.MulticastOperator = MulticastOperator;

},{"../observable/ConnectableObservable":296}],379:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Subscriber_1 = require("../Subscriber");
var Notification_1 = require("../Notification");
/**
 *
 * Re-emits all notifications from source Observable with specified scheduler.
 *
 * <span class="informal">Ensure a specific scheduler is used, from outside of an Observable.</span>
 *
 * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule
 * notifications emitted by the source Observable. It might be useful, if you do not have control over
 * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.
 *
 * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,
 * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal
 * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits
 * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.
 * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split
 * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source
 * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a
 * little bit more, to ensure that they are emitted at expected moments.
 *
 * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications
 * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`
 * will delay all notifications - including error notifications - while `delay` will pass through error
 * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator
 * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used
 * for notification emissions in general.
 *
 * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>
 * const intervals = Rx.Observable.interval(10); // Intervals are scheduled
 *                                               // with async scheduler by default...
 *
 * intervals
 * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame
 * .subscribe(val => {                           // scheduler to ensure smooth animation.
 *   someDiv.style.height = val + 'px';
 * });
 *
 * @see {@link delay}
 *
 * @param {SchedulerLike} scheduler Scheduler that will be used to reschedule notifications from source Observable.
 * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.
 * @return {Observable<T>} Observable that emits the same notifications as the source Observable,
 * but with provided scheduler.
 *
 * @method observeOn
 * @owner Observable
 */
function observeOn(scheduler, delay) {
    if (delay === void 0) { delay = 0; }
    return function observeOnOperatorFunction(source) {
        return source.lift(new ObserveOnOperator(scheduler, delay));
    };
}
exports.observeOn = observeOn;
var ObserveOnOperator = /** @class */ (function () {
    function ObserveOnOperator(scheduler, delay) {
        if (delay === void 0) { delay = 0; }
        this.scheduler = scheduler;
        this.delay = delay;
    }
    ObserveOnOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));
    };
    return ObserveOnOperator;
}());
exports.ObserveOnOperator = ObserveOnOperator;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var ObserveOnSubscriber = /** @class */ (function (_super) {
    __extends(ObserveOnSubscriber, _super);
    function ObserveOnSubscriber(destination, scheduler, delay) {
        if (delay === void 0) { delay = 0; }
        var _this = _super.call(this, destination) || this;
        _this.scheduler = scheduler;
        _this.delay = delay;
        return _this;
    }
    /** @nocollapse */
    ObserveOnSubscriber.dispatch = function (arg) {
        var notification = arg.notification, destination = arg.destination;
        notification.observe(destination);
        this.unsubscribe();
    };
    ObserveOnSubscriber.prototype.scheduleMessage = function (notification) {
        this.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));
    };
    ObserveOnSubscriber.prototype._next = function (value) {
        this.scheduleMessage(Notification_1.Notification.createNext(value));
    };
    ObserveOnSubscriber.prototype._error = function (err) {
        this.scheduleMessage(Notification_1.Notification.createError(err));
    };
    ObserveOnSubscriber.prototype._complete = function () {
        this.scheduleMessage(Notification_1.Notification.createComplete());
    };
    return ObserveOnSubscriber;
}(Subscriber_1.Subscriber));
exports.ObserveOnSubscriber = ObserveOnSubscriber;
var ObserveOnMessage = /** @class */ (function () {
    function ObserveOnMessage(notification, destination) {
        this.notification = notification;
        this.destination = destination;
    }
    return ObserveOnMessage;
}());
exports.ObserveOnMessage = ObserveOnMessage;

},{"../Notification":285,"../Subscriber":293}],380:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var from_1 = require("../observable/from");
var isArray_1 = require("../util/isArray");
var OuterSubscriber_1 = require("../OuterSubscriber");
var subscribeToResult_1 = require("../util/subscribeToResult");
/* tslint:enable:max-line-length */
/**
 * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one
 * that was passed.
 *
 * <span class="informal">Execute series of Observables no matter what, even if it means swallowing errors.</span>
 *
 * <img src="./img/onErrorResumeNext.png" width="100%">
 *
 * `onErrorResumeNext` is an operator that accepts a series of Observables, provided either directly as
 * arguments or as an array. If no single Observable is provided, returned Observable will simply behave the same
 * as the source.
 *
 * `onErrorResumeNext` returns an Observable that starts by subscribing and re-emitting values from the source Observable.
 * When its stream of values ends - no matter if Observable completed or emitted an error - `onErrorResumeNext`
 * will subscribe to the first Observable that was passed as an argument to the method. It will start re-emitting
 * its values as well and - again - when that stream ends, `onErrorResumeNext` will proceed to subscribing yet another
 * Observable in provided series, no matter if previous Observable completed or ended with an error. This will
 * be happening until there is no more Observables left in the series, at which point returned Observable will
 * complete - even if the last subscribed stream ended with an error.
 *
 * `onErrorResumeNext` can be therefore thought of as version of {@link concat} operator, which is more permissive
 * when it comes to the errors emitted by its input Observables. While `concat` subscribes to the next Observable
 * in series only if previous one successfully completed, `onErrorResumeNext` subscribes even if it ended with
 * an error.
 *
 * Note that you do not get any access to errors emitted by the Observables. In particular do not
 * expect these errors to appear in error callback passed to {@link subscribe}. If you want to take
 * specific actions based on what error was emitted by an Observable, you should try out {@link catch} instead.
 *
 *
 * @example <caption>Subscribe to the next Observable after map fails</caption>
 * Rx.Observable.of(1, 2, 3, 0)
 *   .map(x => {
 *       if (x === 0) { throw Error(); }
         return 10 / x;
 *   })
 *   .onErrorResumeNext(Rx.Observable.of(1, 2, 3))
 *   .subscribe(
 *     val => my_console_log(val),
 *     err => my_console_log(err),          // Will never be called.
 *     () => my_console_log('that\'s it!')
 *   );
 *
 * // Logs:
 * // 10
 * // 5
 * // 3.3333333333333335
 * // 1
 * // 2
 * // 3
 * // "that's it!"
 *
 * @see {@link concat}
 * @see {@link catch}
 *
 * @param {...ObservableInput} observables Observables passed either directly or as an array.
 * @return {Observable} An Observable that emits values from source Observable, but - if it errors - subscribes
 * to the next passed Observable and so on, until it completes or runs out of Observables.
 * @method onErrorResumeNext
 * @owner Observable
 */
function onErrorResumeNext() {
    var nextSources = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        nextSources[_i] = arguments[_i];
    }
    if (nextSources.length === 1 && isArray_1.isArray(nextSources[0])) {
        nextSources = nextSources[0];
    }
    return function (source) { return source.lift(new OnErrorResumeNextOperator(nextSources)); };
}
exports.onErrorResumeNext = onErrorResumeNext;
/* tslint:enable:max-line-length */
function onErrorResumeNextStatic() {
    var nextSources = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        nextSources[_i] = arguments[_i];
    }
    var source = null;
    if (nextSources.length === 1 && isArray_1.isArray(nextSources[0])) {
        nextSources = nextSources[0];
    }
    source = nextSources.shift();
    return from_1.from(source, null).lift(new OnErrorResumeNextOperator(nextSources));
}
exports.onErrorResumeNextStatic = onErrorResumeNextStatic;
var OnErrorResumeNextOperator = /** @class */ (function () {
    function OnErrorResumeNextOperator(nextSources) {
        this.nextSources = nextSources;
    }
    OnErrorResumeNextOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));
    };
    return OnErrorResumeNextOperator;
}());
var OnErrorResumeNextSubscriber = /** @class */ (function (_super) {
    __extends(OnErrorResumeNextSubscriber, _super);
    function OnErrorResumeNextSubscriber(destination, nextSources) {
        var _this = _super.call(this, destination) || this;
        _this.destination = destination;
        _this.nextSources = nextSources;
        return _this;
    }
    OnErrorResumeNextSubscriber.prototype.notifyError = function (error, innerSub) {
        this.subscribeToNextSource();
    };
    OnErrorResumeNextSubscriber.prototype.notifyComplete = function (innerSub) {
        this.subscribeToNextSource();
    };
    OnErrorResumeNextSubscriber.prototype._error = function (err) {
        this.subscribeToNextSource();
    };
    OnErrorResumeNextSubscriber.prototype._complete = function () {
        this.subscribeToNextSource();
    };
    OnErrorResumeNextSubscriber.prototype.subscribeToNextSource = function () {
        var next = this.nextSources.shift();
        if (next) {
            this.add(subscribeToResult_1.subscribeToResult(this, next));
        }
        else {
            this.destination.complete();
        }
    };
    return OnErrorResumeNextSubscriber;
}(OuterSubscriber_1.OuterSubscriber));

},{"../OuterSubscriber":288,"../observable/from":307,"../util/isArray":458,"../util/subscribeToResult":478}],381:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Subscriber_1 = require("../Subscriber");
/**
 * Groups pairs of consecutive emissions together and emits them as an array of
 * two values.
 *
 * <span class="informal">Puts the current value and previous value together as
 * an array, and emits that.</span>
 *
 * <img src="./img/pairwise.png" width="100%">
 *
 * The Nth emission from the source Observable will cause the output Observable
 * to emit an array [(N-1)th, Nth] of the previous and the current value, as a
 * pair. For this reason, `pairwise` emits on the second and subsequent
 * emissions from the source Observable, but not on the first emission, because
 * there is no previous value in that case.
 *
 * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var pairs = clicks.pairwise();
 * var distance = pairs.map(pair => {
 *   var x0 = pair[0].clientX;
 *   var y0 = pair[0].clientY;
 *   var x1 = pair[1].clientX;
 *   var y1 = pair[1].clientY;
 *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));
 * });
 * distance.subscribe(x => my_console_log(x));
 *
 * @see {@link buffer}
 * @see {@link bufferCount}
 *
 * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of
 * consecutive values from the source Observable.
 * @method pairwise
 * @owner Observable
 */
function pairwise() {
    return function (source) { return source.lift(new PairwiseOperator()); };
}
exports.pairwise = pairwise;
var PairwiseOperator = /** @class */ (function () {
    function PairwiseOperator() {
    }
    PairwiseOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new PairwiseSubscriber(subscriber));
    };
    return PairwiseOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var PairwiseSubscriber = /** @class */ (function (_super) {
    __extends(PairwiseSubscriber, _super);
    function PairwiseSubscriber(destination) {
        var _this = _super.call(this, destination) || this;
        _this.hasPrev = false;
        return _this;
    }
    PairwiseSubscriber.prototype._next = function (value) {
        if (this.hasPrev) {
            this.destination.next([this.prev, value]);
        }
        else {
            this.hasPrev = true;
        }
        this.prev = value;
    };
    return PairwiseSubscriber;
}(Subscriber_1.Subscriber));

},{"../Subscriber":293}],382:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var not_1 = require("../util/not");
var filter_1 = require("./filter");
/**
 * Splits the source Observable into two, one with values that satisfy a
 * predicate, and another with values that don't satisfy the predicate.
 *
 * <span class="informal">It's like {@link filter}, but returns two Observables:
 * one like the output of {@link filter}, and the other with values that did not
 * pass the condition.</span>
 *
 * <img src="./img/partition.png" width="100%">
 *
 * `partition` outputs an array with two Observables that partition the values
 * from the source Observable through the given `predicate` function. The first
 * Observable in that array emits source values for which the predicate argument
 * returns true. The second Observable emits source values for which the
 * predicate returns false. The first behaves like {@link filter} and the second
 * behaves like {@link filter} with the predicate negated.
 *
 * @example <caption>Partition click events into those on DIV elements and those elsewhere</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var parts = clicks.partition(ev => ev.target.tagName === 'DIV');
 * var clicksOnDivs = parts[0];
 * var clicksElsewhere = parts[1];
 * clicksOnDivs.subscribe(x => my_console_log('DIV clicked: ', x));
 * clicksElsewhere.subscribe(x => my_console_log('Other clicked: ', x));
 *
 * @see {@link filter}
 *
 * @param {function(value: T, index: number): boolean} predicate A function that
 * evaluates each value emitted by the source Observable. If it returns `true`,
 * the value is emitted on the first Observable in the returned array, if
 * `false` the value is emitted on the second Observable in the array. The
 * `index` parameter is the number `i` for the i-th source emission that has
 * happened since the subscription, starting from the number `0`.
 * @param {any} [thisArg] An optional argument to determine the value of `this`
 * in the `predicate` function.
 * @return {[Observable<T>, Observable<T>]} An array with two Observables: one
 * with values that passed the predicate, and another with values that did not
 * pass the predicate.
 * @method partition
 * @owner Observable
 */
function partition(predicate, thisArg) {
    return function (source) { return [
        filter_1.filter(predicate, thisArg)(source),
        filter_1.filter(not_1.not(predicate, thisArg))(source)
    ]; };
}
exports.partition = partition;

},{"../util/not":470,"./filter":359}],383:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var map_1 = require("./map");
/**
 * Maps each source value (an object) to its specified nested property.
 *
 * <span class="informal">Like {@link map}, but meant only for picking one of
 * the nested properties of every emitted object.</span>
 *
 * <img src="./img/pluck.png" width="100%">
 *
 * Given a list of strings describing a path to an object property, retrieves
 * the value of a specified nested property from all values in the source
 * Observable. If a property can't be resolved, it will return `undefined` for
 * that value.
 *
 * @example <caption>Map every click to the tagName of the clicked target element</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var tagNames = clicks.pluck('target', 'tagName');
 * tagNames.subscribe(x => my_console_log(x));
 *
 * @see {@link map}
 *
 * @param {...string} properties The nested properties to pluck from each source
 * value (an object).
 * @return {Observable} A new Observable of property values from the source values.
 * @method pluck
 * @owner Observable
 */
function pluck() {
    var properties = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        properties[_i] = arguments[_i];
    }
    var length = properties.length;
    if (length === 0) {
        throw new Error('list of properties cannot be empty.');
    }
    return function (source) { return map_1.map(plucker(properties, length))(source); };
}
exports.pluck = pluck;
function plucker(props, length) {
    var mapper = function (x) {
        var currentProp = x;
        for (var i = 0; i < length; i++) {
            var p = currentProp[props[i]];
            if (typeof p !== 'undefined') {
                currentProp = p;
            }
            else {
                return undefined;
            }
        }
        return currentProp;
    };
    return mapper;
}

},{"./map":368}],384:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Subject_1 = require("../Subject");
var multicast_1 = require("./multicast");
/* tslint:enable:max-line-length */
/**
 * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called
 * before it begins emitting items to those Observers that have subscribed to it.
 *
 * <img src="./img/publish.png" width="100%">
 *
 * @param {Function} [selector] - Optional selector function which can use the multicasted source sequence as many times
 * as needed, without causing multiple subscriptions to the source sequence.
 * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.
 * @return A ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.
 * @method publish
 * @owner Observable
 */
function publish(selector) {
    return selector ?
        multicast_1.multicast(function () { return new Subject_1.Subject(); }, selector) :
        multicast_1.multicast(new Subject_1.Subject());
}
exports.publish = publish;

},{"../Subject":291,"./multicast":378}],385:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var BehaviorSubject_1 = require("../BehaviorSubject");
var multicast_1 = require("./multicast");
/**
 * @param value
 * @return {ConnectableObservable<T>}
 * @method publishBehavior
 * @owner Observable
 */
function publishBehavior(value) {
    return function (source) { return multicast_1.multicast(new BehaviorSubject_1.BehaviorSubject(value))(source); };
}
exports.publishBehavior = publishBehavior;

},{"../BehaviorSubject":283,"./multicast":378}],386:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var AsyncSubject_1 = require("../AsyncSubject");
var multicast_1 = require("./multicast");
function publishLast() {
    return function (source) { return multicast_1.multicast(new AsyncSubject_1.AsyncSubject())(source); };
}
exports.publishLast = publishLast;

},{"../AsyncSubject":282,"./multicast":378}],387:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ReplaySubject_1 = require("../ReplaySubject");
var multicast_1 = require("./multicast");
/* tslint:enable:max-line-length */
function publishReplay(bufferSize, windowTime, selectorOrScheduler, scheduler) {
    if (selectorOrScheduler && typeof selectorOrScheduler !== 'function') {
        scheduler = selectorOrScheduler;
    }
    var selector = typeof selectorOrScheduler === 'function' ? selectorOrScheduler : undefined;
    var subject = new ReplaySubject_1.ReplaySubject(bufferSize, windowTime, scheduler);
    return function (source) { return multicast_1.multicast(function () { return subject; }, selector)(source); };
}
exports.publishReplay = publishReplay;

},{"../ReplaySubject":289,"./multicast":378}],388:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var isArray_1 = require("../util/isArray");
var race_1 = require("../observable/race");
/* tslint:enable:max-line-length */
/**
 * Returns an Observable that mirrors the first source Observable to emit an item
 * from the combination of this Observable and supplied Observables.
 * @param {...Observables} ...observables Sources used to race for which Observable emits first.
 * @return {Observable} An Observable that mirrors the output of the first Observable to emit an item.
 * @method race
 * @owner Observable
 * @deprecated Deprecated in favor of static race.
 */
function race() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i] = arguments[_i];
    }
    return function raceOperatorFunction(source) {
        // if the only argument is an array, it was most likely called with
        // `pair([obs1, obs2, ...])`
        if (observables.length === 1 && isArray_1.isArray(observables[0])) {
            observables = observables[0];
        }
        return source.lift.call(race_1.race.apply(void 0, [source].concat(observables)));
    };
}
exports.race = race;

},{"../observable/race":322,"../util/isArray":458}],389:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var scan_1 = require("./scan");
var takeLast_1 = require("./takeLast");
var defaultIfEmpty_1 = require("./defaultIfEmpty");
var pipe_1 = require("../util/pipe");
/* tslint:enable:max-line-length */
/**
 * Applies an accumulator function over the source Observable, and returns the
 * accumulated result when the source completes, given an optional seed value.
 *
 * <span class="informal">Combines together all values emitted on the source,
 * using an accumulator function that knows how to join a new source value into
 * the accumulation from the past.</span>
 *
 * <img src="./img/reduce.png" width="100%">
 *
 * Like
 * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),
 * `reduce` applies an `accumulator` function against an accumulation and each
 * value of the source Observable (from the past) to reduce it to a single
 * value, emitted on the output Observable. Note that `reduce` will only emit
 * one value, only when the source Observable completes. It is equivalent to
 * applying operator {@link scan} followed by operator {@link last}.
 *
 * Returns an Observable that applies a specified `accumulator` function to each
 * item emitted by the source Observable. If a `seed` value is specified, then
 * that value will be used as the initial value for the accumulator. If no seed
 * value is specified, the first item of the source is used as the seed.
 *
 * @example <caption>Count the number of click events that happened in 5 seconds</caption>
 * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')
 *   .takeUntil(Rx.Observable.interval(5000));
 * var ones = clicksInFiveSeconds.mapTo(1);
 * var seed = 0;
 * var count = ones.reduce((acc, one) => acc + one, seed);
 * count.subscribe(x => my_console_log(x));
 *
 * @see {@link count}
 * @see {@link expand}
 * @see {@link mergeScan}
 * @see {@link scan}
 *
 * @param {function(acc: R, value: T, index: number): R} accumulator The accumulator function
 * called on each source value.
 * @param {R} [seed] The initial accumulation value.
 * @return {Observable<R>} An Observable that emits a single value that is the
 * result of accumulating the values emitted by the source Observable.
 * @method reduce
 * @owner Observable
 */
function reduce(accumulator, seed) {
    // providing a seed of `undefined` *should* be valid and trigger
    // hasSeed! so don't use `seed !== undefined` checks!
    // For this reason, we have to check it here at the original call site
    // otherwise inside Operator/Subscriber we won't know if `undefined`
    // means they didn't provide anything or if they literally provided `undefined`
    if (arguments.length >= 2) {
        return function reduceOperatorFunctionWithSeed(source) {
            return pipe_1.pipe(scan_1.scan(accumulator, seed), takeLast_1.takeLast(1), defaultIfEmpty_1.defaultIfEmpty(seed))(source);
        };
    }
    return function reduceOperatorFunction(source) {
        return pipe_1.pipe(scan_1.scan(function (acc, value, index) {
            return accumulator(acc, value, index + 1);
        }), takeLast_1.takeLast(1))(source);
    };
}
exports.reduce = reduce;

},{"../util/pipe":471,"./defaultIfEmpty":346,"./scan":397,"./takeLast":412}],390:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Subscriber_1 = require("../Subscriber");
function refCount() {
    return function refCountOperatorFunction(source) {
        return source.lift(new RefCountOperator(source));
    };
}
exports.refCount = refCount;
var RefCountOperator = /** @class */ (function () {
    function RefCountOperator(connectable) {
        this.connectable = connectable;
    }
    RefCountOperator.prototype.call = function (subscriber, source) {
        var connectable = this.connectable;
        connectable._refCount++;
        var refCounter = new RefCountSubscriber(subscriber, connectable);
        var subscription = source.subscribe(refCounter);
        if (!refCounter.closed) {
            refCounter.connection = connectable.connect();
        }
        return subscription;
    };
    return RefCountOperator;
}());
var RefCountSubscriber = /** @class */ (function (_super) {
    __extends(RefCountSubscriber, _super);
    function RefCountSubscriber(destination, connectable) {
        var _this = _super.call(this, destination) || this;
        _this.connectable = connectable;
        return _this;
    }
    RefCountSubscriber.prototype._unsubscribe = function () {
        var connectable = this.connectable;
        if (!connectable) {
            this.connection = null;
            return;
        }
        this.connectable = null;
        var refCount = connectable._refCount;
        if (refCount <= 0) {
            this.connection = null;
            return;
        }
        connectable._refCount = refCount - 1;
        if (refCount > 1) {
            this.connection = null;
            return;
        }
        ///
        // Compare the local RefCountSubscriber's connection Subscription to the
        // connection Subscription on the shared ConnectableObservable. In cases
        // where the ConnectableObservable source synchronously emits values, and
        // the RefCountSubscriber's downstream Observers synchronously unsubscribe,
        // execution continues to here before the RefCountOperator has a chance to
        // supply the RefCountSubscriber with the shared connection Subscription.
        // For example:
        // ```
        // Observable.range(0, 10)
        //   .publish()
        //   .refCount()
        //   .take(5)
        //   .subscribe();
        // ```
        // In order to account for this case, RefCountSubscriber should only dispose
        // the ConnectableObservable's shared connection Subscription if the
        // connection Subscription exists, *and* either:
        //   a. RefCountSubscriber doesn't have a reference to the shared connection
        //      Subscription yet, or,
        //   b. RefCountSubscriber's connection Subscription reference is identical
        //      to the shared connection Subscription
        ///
        var connection = this.connection;
        var sharedConnection = connectable._connection;
        this.connection = null;
        if (sharedConnection && (!connection || sharedConnection === connection)) {
            sharedConnection.unsubscribe();
        }
    };
    return RefCountSubscriber;
}(Subscriber_1.Subscriber));

},{"../Subscriber":293}],391:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Subscriber_1 = require("../Subscriber");
var empty_1 = require("../observable/empty");
/**
 * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times.
 *
 * <img src="./img/repeat.png" width="100%">
 *
 * @param {number} [count] The number of times the source Observable items are repeated, a count of 0 will yield
 * an empty Observable.
 * @return {Observable} An Observable that repeats the stream of items emitted by the source Observable at most
 * count times.
 * @method repeat
 * @owner Observable
 */
function repeat(count) {
    if (count === void 0) { count = -1; }
    return function (source) {
        if (count === 0) {
            return empty_1.empty();
        }
        else if (count < 0) {
            return source.lift(new RepeatOperator(-1, source));
        }
        else {
            return source.lift(new RepeatOperator(count - 1, source));
        }
    };
}
exports.repeat = repeat;
var RepeatOperator = /** @class */ (function () {
    function RepeatOperator(count, source) {
        this.count = count;
        this.source = source;
    }
    RepeatOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new RepeatSubscriber(subscriber, this.count, this.source));
    };
    return RepeatOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var RepeatSubscriber = /** @class */ (function (_super) {
    __extends(RepeatSubscriber, _super);
    function RepeatSubscriber(destination, count, source) {
        var _this = _super.call(this, destination) || this;
        _this.count = count;
        _this.source = source;
        return _this;
    }
    RepeatSubscriber.prototype.complete = function () {
        if (!this.isStopped) {
            var _a = this, source = _a.source, count = _a.count;
            if (count === 0) {
                return _super.prototype.complete.call(this);
            }
            else if (count > -1) {
                this.count = count - 1;
            }
            source.subscribe(this._unsubscribeAndRecycle());
        }
    };
    return RepeatSubscriber;
}(Subscriber_1.Subscriber));

},{"../Subscriber":293,"../observable/empty":305}],392:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Subject_1 = require("../Subject");
var tryCatch_1 = require("../util/tryCatch");
var errorObject_1 = require("../util/errorObject");
var OuterSubscriber_1 = require("../OuterSubscriber");
var subscribeToResult_1 = require("../util/subscribeToResult");
/**
 * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source
 * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable
 * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise
 * this method will resubscribe to the source Observable.
 *
 * <img src="./img/repeatWhen.png" width="100%">
 *
 * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with
 * which a user can `complete` or `error`, aborting the repetition.
 * @return {Observable} The source Observable modified with repeat logic.
 * @method repeatWhen
 * @owner Observable
 */
function repeatWhen(notifier) {
    return function (source) { return source.lift(new RepeatWhenOperator(notifier)); };
}
exports.repeatWhen = repeatWhen;
var RepeatWhenOperator = /** @class */ (function () {
    function RepeatWhenOperator(notifier) {
        this.notifier = notifier;
    }
    RepeatWhenOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));
    };
    return RepeatWhenOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var RepeatWhenSubscriber = /** @class */ (function (_super) {
    __extends(RepeatWhenSubscriber, _super);
    function RepeatWhenSubscriber(destination, notifier, source) {
        var _this = _super.call(this, destination) || this;
        _this.notifier = notifier;
        _this.source = source;
        _this.sourceIsBeingSubscribedTo = true;
        return _this;
    }
    RepeatWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.sourceIsBeingSubscribedTo = true;
        this.source.subscribe(this);
    };
    RepeatWhenSubscriber.prototype.notifyComplete = function (innerSub) {
        if (this.sourceIsBeingSubscribedTo === false) {
            return _super.prototype.complete.call(this);
        }
    };
    RepeatWhenSubscriber.prototype.complete = function () {
        this.sourceIsBeingSubscribedTo = false;
        if (!this.isStopped) {
            if (!this.retries) {
                this.subscribeToRetries();
            }
            if (!this.retriesSubscription || this.retriesSubscription.closed) {
                return _super.prototype.complete.call(this);
            }
            this._unsubscribeAndRecycle();
            this.notifications.next();
        }
    };
    /** @deprecated This is an internal implementation detail, do not use. */
    RepeatWhenSubscriber.prototype._unsubscribe = function () {
        var _a = this, notifications = _a.notifications, retriesSubscription = _a.retriesSubscription;
        if (notifications) {
            notifications.unsubscribe();
            this.notifications = null;
        }
        if (retriesSubscription) {
            retriesSubscription.unsubscribe();
            this.retriesSubscription = null;
        }
        this.retries = null;
    };
    /** @deprecated This is an internal implementation detail, do not use. */
    RepeatWhenSubscriber.prototype._unsubscribeAndRecycle = function () {
        var _unsubscribe = this._unsubscribe;
        this._unsubscribe = null;
        _super.prototype._unsubscribeAndRecycle.call(this);
        this._unsubscribe = _unsubscribe;
        return this;
    };
    RepeatWhenSubscriber.prototype.subscribeToRetries = function () {
        this.notifications = new Subject_1.Subject();
        var retries = tryCatch_1.tryCatch(this.notifier)(this.notifications);
        if (retries === errorObject_1.errorObject) {
            return _super.prototype.complete.call(this);
        }
        this.retries = retries;
        this.retriesSubscription = subscribeToResult_1.subscribeToResult(this, retries);
    };
    return RepeatWhenSubscriber;
}(OuterSubscriber_1.OuterSubscriber));

},{"../OuterSubscriber":288,"../Subject":291,"../util/errorObject":455,"../util/subscribeToResult":478,"../util/tryCatch":480}],393:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Subscriber_1 = require("../Subscriber");
/**
 * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable
 * calls `error`, this method will resubscribe to the source Observable for a maximum of `count` resubscriptions (given
 * as a number parameter) rather than propagating the `error` call.
 *
 * <img src="./img/retry.png" width="100%">
 *
 * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted
 * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second
 * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications
 * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].
 * @param {number} count - Number of retry attempts before failing.
 * @return {Observable} The source Observable modified with the retry logic.
 * @method retry
 * @owner Observable
 */
function retry(count) {
    if (count === void 0) { count = -1; }
    return function (source) { return source.lift(new RetryOperator(count, source)); };
}
exports.retry = retry;
var RetryOperator = /** @class */ (function () {
    function RetryOperator(count, source) {
        this.count = count;
        this.source = source;
    }
    RetryOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));
    };
    return RetryOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var RetrySubscriber = /** @class */ (function (_super) {
    __extends(RetrySubscriber, _super);
    function RetrySubscriber(destination, count, source) {
        var _this = _super.call(this, destination) || this;
        _this.count = count;
        _this.source = source;
        return _this;
    }
    RetrySubscriber.prototype.error = function (err) {
        if (!this.isStopped) {
            var _a = this, source = _a.source, count = _a.count;
            if (count === 0) {
                return _super.prototype.error.call(this, err);
            }
            else if (count > -1) {
                this.count = count - 1;
            }
            source.subscribe(this._unsubscribeAndRecycle());
        }
    };
    return RetrySubscriber;
}(Subscriber_1.Subscriber));

},{"../Subscriber":293}],394:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Subject_1 = require("../Subject");
var tryCatch_1 = require("../util/tryCatch");
var errorObject_1 = require("../util/errorObject");
var OuterSubscriber_1 = require("../OuterSubscriber");
var subscribeToResult_1 = require("../util/subscribeToResult");
/**
 * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable
 * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.
 * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child
 * subscription. Otherwise this method will resubscribe to the source Observable.
 *
 * <img src="./img/retryWhen.png" width="100%">
 *
 * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a
 * user can `complete` or `error`, aborting the retry.
 * @return {Observable} The source Observable modified with retry logic.
 * @method retryWhen
 * @owner Observable
 */
function retryWhen(notifier) {
    return function (source) { return source.lift(new RetryWhenOperator(notifier, source)); };
}
exports.retryWhen = retryWhen;
var RetryWhenOperator = /** @class */ (function () {
    function RetryWhenOperator(notifier, source) {
        this.notifier = notifier;
        this.source = source;
    }
    RetryWhenOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));
    };
    return RetryWhenOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var RetryWhenSubscriber = /** @class */ (function (_super) {
    __extends(RetryWhenSubscriber, _super);
    function RetryWhenSubscriber(destination, notifier, source) {
        var _this = _super.call(this, destination) || this;
        _this.notifier = notifier;
        _this.source = source;
        return _this;
    }
    RetryWhenSubscriber.prototype.error = function (err) {
        if (!this.isStopped) {
            var errors = this.errors;
            var retries = this.retries;
            var retriesSubscription = this.retriesSubscription;
            if (!retries) {
                errors = new Subject_1.Subject();
                retries = tryCatch_1.tryCatch(this.notifier)(errors);
                if (retries === errorObject_1.errorObject) {
                    return _super.prototype.error.call(this, errorObject_1.errorObject.e);
                }
                retriesSubscription = subscribeToResult_1.subscribeToResult(this, retries);
            }
            else {
                this.errors = null;
                this.retriesSubscription = null;
            }
            this._unsubscribeAndRecycle();
            this.errors = errors;
            this.retries = retries;
            this.retriesSubscription = retriesSubscription;
            errors.next(err);
        }
    };
    /** @deprecated This is an internal implementation detail, do not use. */
    RetryWhenSubscriber.prototype._unsubscribe = function () {
        var _a = this, errors = _a.errors, retriesSubscription = _a.retriesSubscription;
        if (errors) {
            errors.unsubscribe();
            this.errors = null;
        }
        if (retriesSubscription) {
            retriesSubscription.unsubscribe();
            this.retriesSubscription = null;
        }
        this.retries = null;
    };
    RetryWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        var _unsubscribe = this._unsubscribe;
        this._unsubscribe = null;
        this._unsubscribeAndRecycle();
        this._unsubscribe = _unsubscribe;
        this.source.subscribe(this);
    };
    return RetryWhenSubscriber;
}(OuterSubscriber_1.OuterSubscriber));

},{"../OuterSubscriber":288,"../Subject":291,"../util/errorObject":455,"../util/subscribeToResult":478,"../util/tryCatch":480}],395:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var OuterSubscriber_1 = require("../OuterSubscriber");
var subscribeToResult_1 = require("../util/subscribeToResult");
/**
 * Emits the most recently emitted value from the source Observable whenever
 * another Observable, the `notifier`, emits.
 *
 * <span class="informal">It's like {@link sampleTime}, but samples whenever
 * the `notifier` Observable emits something.</span>
 *
 * <img src="./img/sample.png" width="100%">
 *
 * Whenever the `notifier` Observable emits a value or completes, `sample`
 * looks at the source Observable and emits whichever value it has most recently
 * emitted since the previous sampling, unless the source has not emitted
 * anything since the previous sampling. The `notifier` is subscribed to as soon
 * as the output Observable is subscribed.
 *
 * @example <caption>On every click, sample the most recent "seconds" timer</caption>
 * var seconds = Rx.Observable.interval(1000);
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = seconds.sample(clicks);
 * result.subscribe(x => my_console_log(x));
 *
 * @see {@link audit}
 * @see {@link debounce}
 * @see {@link sampleTime}
 * @see {@link throttle}
 *
 * @param {Observable<any>} notifier The Observable to use for sampling the
 * source Observable.
 * @return {Observable<T>} An Observable that emits the results of sampling the
 * values emitted by the source Observable whenever the notifier Observable
 * emits value or completes.
 * @method sample
 * @owner Observable
 */
function sample(notifier) {
    return function (source) { return source.lift(new SampleOperator(notifier)); };
}
exports.sample = sample;
var SampleOperator = /** @class */ (function () {
    function SampleOperator(notifier) {
        this.notifier = notifier;
    }
    SampleOperator.prototype.call = function (subscriber, source) {
        var sampleSubscriber = new SampleSubscriber(subscriber);
        var subscription = source.subscribe(sampleSubscriber);
        subscription.add(subscribeToResult_1.subscribeToResult(sampleSubscriber, this.notifier));
        return subscription;
    };
    return SampleOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SampleSubscriber = /** @class */ (function (_super) {
    __extends(SampleSubscriber, _super);
    function SampleSubscriber() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.hasValue = false;
        return _this;
    }
    SampleSubscriber.prototype._next = function (value) {
        this.value = value;
        this.hasValue = true;
    };
    SampleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.emitValue();
    };
    SampleSubscriber.prototype.notifyComplete = function () {
        this.emitValue();
    };
    SampleSubscriber.prototype.emitValue = function () {
        if (this.hasValue) {
            this.hasValue = false;
            this.destination.next(this.value);
        }
    };
    return SampleSubscriber;
}(OuterSubscriber_1.OuterSubscriber));

},{"../OuterSubscriber":288,"../util/subscribeToResult":478}],396:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Subscriber_1 = require("../Subscriber");
var async_1 = require("../scheduler/async");
/**
 * Emits the most recently emitted value from the source Observable within
 * periodic time intervals.
 *
 * <span class="informal">Samples the source Observable at periodic time
 * intervals, emitting what it samples.</span>
 *
 * <img src="./img/sampleTime.png" width="100%">
 *
 * `sampleTime` periodically looks at the source Observable and emits whichever
 * value it has most recently emitted since the previous sampling, unless the
 * source has not emitted anything since the previous sampling. The sampling
 * happens periodically in time every `period` milliseconds (or the time unit
 * defined by the optional `scheduler` argument). The sampling starts as soon as
 * the output Observable is subscribed.
 *
 * @example <caption>Every second, emit the most recent click at most once</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.sampleTime(1000);
 * result.subscribe(x => my_console_log(x));
 *
 * @see {@link auditTime}
 * @see {@link debounceTime}
 * @see {@link delay}
 * @see {@link sample}
 * @see {@link throttleTime}
 *
 * @param {number} period The sampling period expressed in milliseconds or the
 * time unit determined internally by the optional `scheduler`.
 * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for
 * managing the timers that handle the sampling.
 * @return {Observable<T>} An Observable that emits the results of sampling the
 * values emitted by the source Observable at the specified time interval.
 * @method sampleTime
 * @owner Observable
 */
function sampleTime(period, scheduler) {
    if (scheduler === void 0) { scheduler = async_1.async; }
    return function (source) { return source.lift(new SampleTimeOperator(period, scheduler)); };
}
exports.sampleTime = sampleTime;
var SampleTimeOperator = /** @class */ (function () {
    function SampleTimeOperator(period, scheduler) {
        this.period = period;
        this.scheduler = scheduler;
    }
    SampleTimeOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));
    };
    return SampleTimeOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SampleTimeSubscriber = /** @class */ (function (_super) {
    __extends(SampleTimeSubscriber, _super);
    function SampleTimeSubscriber(destination, period, scheduler) {
        var _this = _super.call(this, destination) || this;
        _this.period = period;
        _this.scheduler = scheduler;
        _this.hasValue = false;
        _this.add(scheduler.schedule(dispatchNotification, period, { subscriber: _this, period: period }));
        return _this;
    }
    SampleTimeSubscriber.prototype._next = function (value) {
        this.lastValue = value;
        this.hasValue = true;
    };
    SampleTimeSubscriber.prototype.notifyNext = function () {
        if (this.hasValue) {
            this.hasValue = false;
            this.destination.next(this.lastValue);
        }
    };
    return SampleTimeSubscriber;
}(Subscriber_1.Subscriber));
function dispatchNotification(state) {
    var subscriber = state.subscriber, period = state.period;
    subscriber.notifyNext();
    this.schedule(state, period);
}

},{"../Subscriber":293,"../scheduler/async":444}],397:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Subscriber_1 = require("../Subscriber");
/* tslint:enable:max-line-length */
/**
 * Applies an accumulator function over the source Observable, and returns each
 * intermediate result, with an optional seed value.
 *
 * <span class="informal">It's like {@link reduce}, but emits the current
 * accumulation whenever the source emits a value.</span>
 *
 * <img src="./img/scan.png" width="100%">
 *
 * Combines together all values emitted on the source, using an accumulator
 * function that knows how to join a new source value into the accumulation from
 * the past. Is similar to {@link reduce}, but emits the intermediate
 * accumulations.
 *
 * Returns an Observable that applies a specified `accumulator` function to each
 * item emitted by the source Observable. If a `seed` value is specified, then
 * that value will be used as the initial value for the accumulator. If no seed
 * value is specified, the first item of the source is used as the seed.
 *
 * @example <caption>Count the number of click events</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var ones = clicks.mapTo(1);
 * var seed = 0;
 * var count = ones.scan((acc, one) => acc + one, seed);
 * count.subscribe(x => my_console_log(x));
 *
 * @see {@link expand}
 * @see {@link mergeScan}
 * @see {@link reduce}
 *
 * @param {function(acc: R, value: T, index: number): R} accumulator
 * The accumulator function called on each source value.
 * @param {T|R} [seed] The initial accumulation value.
 * @return {Observable<R>} An observable of the accumulated values.
 * @method scan
 * @owner Observable
 */
function scan(accumulator, seed) {
    var hasSeed = false;
    // providing a seed of `undefined` *should* be valid and trigger
    // hasSeed! so don't use `seed !== undefined` checks!
    // For this reason, we have to check it here at the original call site
    // otherwise inside Operator/Subscriber we won't know if `undefined`
    // means they didn't provide anything or if they literally provided `undefined`
    if (arguments.length >= 2) {
        hasSeed = true;
    }
    return function scanOperatorFunction(source) {
        return source.lift(new ScanOperator(accumulator, seed, hasSeed));
    };
}
exports.scan = scan;
var ScanOperator = /** @class */ (function () {
    function ScanOperator(accumulator, seed, hasSeed) {
        if (hasSeed === void 0) { hasSeed = false; }
        this.accumulator = accumulator;
        this.seed = seed;
        this.hasSeed = hasSeed;
    }
    ScanOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));
    };
    return ScanOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var ScanSubscriber = /** @class */ (function (_super) {
    __extends(ScanSubscriber, _super);
    function ScanSubscriber(destination, accumulator, _seed, hasSeed) {
        var _this = _super.call(this, destination) || this;
        _this.accumulator = accumulator;
        _this._seed = _seed;
        _this.hasSeed = hasSeed;
        _this.index = 0;
        return _this;
    }
    Object.defineProperty(ScanSubscriber.prototype, "seed", {
        get: function () {
            return this._seed;
        },
        set: function (value) {
            this.hasSeed = true;
            this._seed = value;
        },
        enumerable: true,
        configurable: true
    });
    ScanSubscriber.prototype._next = function (value) {
        if (!this.hasSeed) {
            this.seed = value;
            this.destination.next(value);
        }
        else {
            return this._tryNext(value);
        }
    };
    ScanSubscriber.prototype._tryNext = function (value) {
        var index = this.index++;
        var result;
        try {
            result = this.accumulator(this.seed, value, index);
        }
        catch (err) {
            this.destination.error(err);
        }
        this.seed = result;
        this.destination.next(result);
    };
    return ScanSubscriber;
}(Subscriber_1.Subscriber));

},{"../Subscriber":293}],398:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Subscriber_1 = require("../Subscriber");
var tryCatch_1 = require("../util/tryCatch");
var errorObject_1 = require("../util/errorObject");
/**
 * Compares all values of two observables in sequence using an optional comparor function
 * and returns an observable of a single boolean value representing whether or not the two sequences
 * are equal.
 *
 * <span class="informal">Checks to see of all values emitted by both observables are equal, in order.</span>
 *
 * <img src="./img/sequenceEqual.png" width="100%">
 *
 * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either
 * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom
 * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the
 * observables completes, the operator will wait for the other observable to complete; If the other
 * observable emits before completing, the returned observable will emit `false` and complete. If one observable never
 * completes or emits after the other complets, the returned observable will never complete.
 *
 * @example <caption>figure out if the Konami code matches</caption>
 * var code = Rx.Observable.from([
 *  "ArrowUp",
 *  "ArrowUp",
 *  "ArrowDown",
 *  "ArrowDown",
 *  "ArrowLeft",
 *  "ArrowRight",
 *  "ArrowLeft",
 *  "ArrowRight",
 *  "KeyB",
 *  "KeyA",
 *  "Enter" // no start key, clearly.
 * ]);
 *
 * var keys = Rx.Observable.fromEvent(document, 'keyup')
 *  .map(e => e.code);
 * var matches = keys.bufferCount(11, 1)
 *  .mergeMap(
 *    last11 =>
 *      Rx.Observable.from(last11)
 *        .sequenceEqual(code)
 *   );
 * matches.subscribe(matched => my_console_log('Successful cheat at Contra? ', matched));
 *
 * @see {@link combineLatest}
 * @see {@link zip}
 * @see {@link withLatestFrom}
 *
 * @param {Observable} compareTo The observable sequence to compare the source sequence to.
 * @param {function} [comparor] An optional function to compare each value pair
 * @return {Observable} An Observable of a single boolean value representing whether or not
 * the values emitted by both observables were equal in sequence.
 * @method sequenceEqual
 * @owner Observable
 */
function sequenceEqual(compareTo, comparor) {
    return function (source) { return source.lift(new SequenceEqualOperator(compareTo, comparor)); };
}
exports.sequenceEqual = sequenceEqual;
var SequenceEqualOperator = /** @class */ (function () {
    function SequenceEqualOperator(compareTo, comparor) {
        this.compareTo = compareTo;
        this.comparor = comparor;
    }
    SequenceEqualOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparor));
    };
    return SequenceEqualOperator;
}());
exports.SequenceEqualOperator = SequenceEqualOperator;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SequenceEqualSubscriber = /** @class */ (function (_super) {
    __extends(SequenceEqualSubscriber, _super);
    function SequenceEqualSubscriber(destination, compareTo, comparor) {
        var _this = _super.call(this, destination) || this;
        _this.compareTo = compareTo;
        _this.comparor = comparor;
        _this._a = [];
        _this._b = [];
        _this._oneComplete = false;
        _this.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, _this)));
        return _this;
    }
    SequenceEqualSubscriber.prototype._next = function (value) {
        if (this._oneComplete && this._b.length === 0) {
            this.emit(false);
        }
        else {
            this._a.push(value);
            this.checkValues();
        }
    };
    SequenceEqualSubscriber.prototype._complete = function () {
        if (this._oneComplete) {
            this.emit(this._a.length === 0 && this._b.length === 0);
        }
        else {
            this._oneComplete = true;
        }
    };
    SequenceEqualSubscriber.prototype.checkValues = function () {
        var _c = this, _a = _c._a, _b = _c._b, comparor = _c.comparor;
        while (_a.length > 0 && _b.length > 0) {
            var a = _a.shift();
            var b = _b.shift();
            var areEqual = false;
            if (comparor) {
                areEqual = tryCatch_1.tryCatch(comparor)(a, b);
                if (areEqual === errorObject_1.errorObject) {
                    this.destination.error(errorObject_1.errorObject.e);
                }
            }
            else {
                areEqual = a === b;
            }
            if (!areEqual) {
                this.emit(false);
            }
        }
    };
    SequenceEqualSubscriber.prototype.emit = function (value) {
        var destination = this.destination;
        destination.next(value);
        destination.complete();
    };
    SequenceEqualSubscriber.prototype.nextB = function (value) {
        if (this._oneComplete && this._a.length === 0) {
            this.emit(false);
        }
        else {
            this._b.push(value);
            this.checkValues();
        }
    };
    return SequenceEqualSubscriber;
}(Subscriber_1.Subscriber));
exports.SequenceEqualSubscriber = SequenceEqualSubscriber;
var SequenceEqualCompareToSubscriber = /** @class */ (function (_super) {
    __extends(SequenceEqualCompareToSubscriber, _super);
    function SequenceEqualCompareToSubscriber(destination, parent) {
        var _this = _super.call(this, destination) || this;
        _this.parent = parent;
        return _this;
    }
    SequenceEqualCompareToSubscriber.prototype._next = function (value) {
        this.parent.nextB(value);
    };
    SequenceEqualCompareToSubscriber.prototype._error = function (err) {
        this.parent.error(err);
    };
    SequenceEqualCompareToSubscriber.prototype._complete = function () {
        this.parent._complete();
    };
    return SequenceEqualCompareToSubscriber;
}(Subscriber_1.Subscriber));

},{"../Subscriber":293,"../util/errorObject":455,"../util/tryCatch":480}],399:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var multicast_1 = require("./multicast");
var refCount_1 = require("./refCount");
var Subject_1 = require("../Subject");
function shareSubjectFactory() {
    return new Subject_1.Subject();
}
/**
 * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one
 * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will
 * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.
 * This is an alias for .multicast(() => new Subject()).refCount().
 *
 * <img src="./img/share.png" width="100%">
 *
 * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.
 * @method share
 * @owner Observable
 */
function share() {
    return function (source) { return refCount_1.refCount()(multicast_1.multicast(shareSubjectFactory)(source)); };
}
exports.share = share;

},{"../Subject":291,"./multicast":378,"./refCount":390}],400:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ReplaySubject_1 = require("../ReplaySubject");
/**
 * @method shareReplay
 * @owner Observable
 */
function shareReplay(bufferSize, windowTime, scheduler) {
    return function (source) { return source.lift(shareReplayOperator(bufferSize, windowTime, scheduler)); };
}
exports.shareReplay = shareReplay;
function shareReplayOperator(bufferSize, windowTime, scheduler) {
    var subject;
    var refCount = 0;
    var subscription;
    var hasError = false;
    var isComplete = false;
    return function shareReplayOperation(source) {
        refCount++;
        if (!subject || hasError) {
            hasError = false;
            subject = new ReplaySubject_1.ReplaySubject(bufferSize, windowTime, scheduler);
            subscription = source.subscribe({
                next: function (value) { subject.next(value); },
                error: function (err) {
                    hasError = true;
                    subject.error(err);
                },
                complete: function () {
                    isComplete = true;
                    subject.complete();
                },
            });
        }
        var innerSub = subject.subscribe(this);
        return function () {
            refCount--;
            innerSub.unsubscribe();
            if (subscription && refCount === 0 && isComplete) {
                subscription.unsubscribe();
            }
        };
    };
}

},{"../ReplaySubject":289}],401:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Subscriber_1 = require("../Subscriber");
var EmptyError_1 = require("../util/EmptyError");
/**
 * Returns an Observable that emits the single item emitted by the source Observable that matches a specified
 * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no
 * items, notify of an IllegalArgumentException or NoSuchElementException respectively. If the source Observable
 * emits items but none match the specified predicate then `undefined` is emiited.
 *
 * <img src="./img/single.png" width="100%">
 *
 * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`
 * callback if the Observable completes before any `next` notification was sent.
 * @param {Function} predicate - A predicate function to evaluate items emitted by the source Observable.
 * @return {Observable<T>} An Observable that emits the single item emitted by the source Observable that matches
 * the predicate or `undefined` when no items match.
 *
 * @method single
 * @owner Observable
 */
function single(predicate) {
    return function (source) { return source.lift(new SingleOperator(predicate, source)); };
}
exports.single = single;
var SingleOperator = /** @class */ (function () {
    function SingleOperator(predicate, source) {
        this.predicate = predicate;
        this.source = source;
    }
    SingleOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));
    };
    return SingleOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SingleSubscriber = /** @class */ (function (_super) {
    __extends(SingleSubscriber, _super);
    function SingleSubscriber(destination, predicate, source) {
        var _this = _super.call(this, destination) || this;
        _this.predicate = predicate;
        _this.source = source;
        _this.seenValue = false;
        _this.index = 0;
        return _this;
    }
    SingleSubscriber.prototype.applySingleValue = function (value) {
        if (this.seenValue) {
            this.destination.error('Sequence contains more than one element');
        }
        else {
            this.seenValue = true;
            this.singleValue = value;
        }
    };
    SingleSubscriber.prototype._next = function (value) {
        var index = this.index++;
        if (this.predicate) {
            this.tryNext(value, index);
        }
        else {
            this.applySingleValue(value);
        }
    };
    SingleSubscriber.prototype.tryNext = function (value, index) {
        try {
            if (this.predicate(value, index, this.source)) {
                this.applySingleValue(value);
            }
        }
        catch (err) {
            this.destination.error(err);
        }
    };
    SingleSubscriber.prototype._complete = function () {
        var destination = this.destination;
        if (this.index > 0) {
            destination.next(this.seenValue ? this.singleValue : undefined);
            destination.complete();
        }
        else {
            destination.error(new EmptyError_1.EmptyError);
        }
    };
    return SingleSubscriber;
}(Subscriber_1.Subscriber));

},{"../Subscriber":293,"../util/EmptyError":450}],402:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Subscriber_1 = require("../Subscriber");
/**
 * Returns an Observable that skips the first `count` items emitted by the source Observable.
 *
 * <img src="./img/skip.png" width="100%">
 *
 * @param {Number} count - The number of times, items emitted by source Observable should be skipped.
 * @return {Observable} An Observable that skips values emitted by the source Observable.
 *
 * @method skip
 * @owner Observable
 */
function skip(count) {
    return function (source) { return source.lift(new SkipOperator(count)); };
}
exports.skip = skip;
var SkipOperator = /** @class */ (function () {
    function SkipOperator(total) {
        this.total = total;
    }
    SkipOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new SkipSubscriber(subscriber, this.total));
    };
    return SkipOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SkipSubscriber = /** @class */ (function (_super) {
    __extends(SkipSubscriber, _super);
    function SkipSubscriber(destination, total) {
        var _this = _super.call(this, destination) || this;
        _this.total = total;
        _this.count = 0;
        return _this;
    }
    SkipSubscriber.prototype._next = function (x) {
        if (++this.count > this.total) {
            this.destination.next(x);
        }
    };
    return SkipSubscriber;
}(Subscriber_1.Subscriber));

},{"../Subscriber":293}],403:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Subscriber_1 = require("../Subscriber");
var ArgumentOutOfRangeError_1 = require("../util/ArgumentOutOfRangeError");
/**
 * Skip the last `count` values emitted by the source Observable.
 *
 * <img src="./img/skipLast.png" width="100%">
 *
 * `skipLast` returns an Observable that accumulates a queue with a length
 * enough to store the first `count` values. As more values are received,
 * values are taken from the front of the queue and produced on the result
 * sequence. This causes values to be delayed.
 *
 * @example <caption>Skip the last 2 values of an Observable with many values</caption>
 * var many = Rx.Observable.range(1, 5);
 * var skipLastTwo = many.skipLast(2);
 * skipLastTwo.subscribe(x => my_console_log(x));
 *
 * // Results in:
 * // 1 2 3
 *
 * @see {@link skip}
 * @see {@link skipUntil}
 * @see {@link skipWhile}
 * @see {@link take}
 *
 * @throws {ArgumentOutOfRangeError} When using `skipLast(i)`, it throws
 * ArgumentOutOrRangeError if `i < 0`.
 *
 * @param {number} count Number of elements to skip from the end of the source Observable.
 * @returns {Observable<T>} An Observable that skips the last count values
 * emitted by the source Observable.
 * @method skipLast
 * @owner Observable
 */
function skipLast(count) {
    return function (source) { return source.lift(new SkipLastOperator(count)); };
}
exports.skipLast = skipLast;
var SkipLastOperator = /** @class */ (function () {
    function SkipLastOperator(_skipCount) {
        this._skipCount = _skipCount;
        if (this._skipCount < 0) {
            throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;
        }
    }
    SkipLastOperator.prototype.call = function (subscriber, source) {
        if (this._skipCount === 0) {
            // If we don't want to skip any values then just subscribe
            // to Subscriber without any further logic.
            return source.subscribe(new Subscriber_1.Subscriber(subscriber));
        }
        else {
            return source.subscribe(new SkipLastSubscriber(subscriber, this._skipCount));
        }
    };
    return SkipLastOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SkipLastSubscriber = /** @class */ (function (_super) {
    __extends(SkipLastSubscriber, _super);
    function SkipLastSubscriber(destination, _skipCount) {
        var _this = _super.call(this, destination) || this;
        _this._skipCount = _skipCount;
        _this._count = 0;
        _this._ring = new Array(_skipCount);
        return _this;
    }
    SkipLastSubscriber.prototype._next = function (value) {
        var skipCount = this._skipCount;
        var count = this._count++;
        if (count < skipCount) {
            this._ring[count] = value;
        }
        else {
            var currentIndex = count % skipCount;
            var ring = this._ring;
            var oldValue = ring[currentIndex];
            ring[currentIndex] = value;
            this.destination.next(oldValue);
        }
    };
    return SkipLastSubscriber;
}(Subscriber_1.Subscriber));

},{"../Subscriber":293,"../util/ArgumentOutOfRangeError":449}],404:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var OuterSubscriber_1 = require("../OuterSubscriber");
var subscribeToResult_1 = require("../util/subscribeToResult");
/**
 * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.
 *
 * <img src="./img/skipUntil.png" width="100%">
 *
 * @param {Observable} notifier - The second Observable that has to emit an item before the source Observable's elements begin to
 * be mirrored by the resulting Observable.
 * @return {Observable<T>} An Observable that skips items from the source Observable until the second Observable emits
 * an item, then emits the remaining items.
 * @method skipUntil
 * @owner Observable
 */
function skipUntil(notifier) {
    return function (source) { return source.lift(new SkipUntilOperator(notifier)); };
}
exports.skipUntil = skipUntil;
var SkipUntilOperator = /** @class */ (function () {
    function SkipUntilOperator(notifier) {
        this.notifier = notifier;
    }
    SkipUntilOperator.prototype.call = function (destination, source) {
        return source.subscribe(new SkipUntilSubscriber(destination, this.notifier));
    };
    return SkipUntilOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SkipUntilSubscriber = /** @class */ (function (_super) {
    __extends(SkipUntilSubscriber, _super);
    function SkipUntilSubscriber(destination, notifier) {
        var _this = _super.call(this, destination) || this;
        _this.hasValue = false;
        _this.add(_this.innerSubscription = subscribeToResult_1.subscribeToResult(_this, notifier));
        return _this;
    }
    SkipUntilSubscriber.prototype._next = function (value) {
        if (this.hasValue) {
            _super.prototype._next.call(this, value);
        }
    };
    SkipUntilSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.hasValue = true;
        if (this.innerSubscription) {
            this.innerSubscription.unsubscribe();
        }
    };
    SkipUntilSubscriber.prototype.notifyComplete = function () {
        /* do nothing */
    };
    return SkipUntilSubscriber;
}(OuterSubscriber_1.OuterSubscriber));

},{"../OuterSubscriber":288,"../util/subscribeToResult":478}],405:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Subscriber_1 = require("../Subscriber");
/**
 * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds
 * true, but emits all further source items as soon as the condition becomes false.
 *
 * <img src="./img/skipWhile.png" width="100%">
 *
 * @param {Function} predicate - A function to test each item emitted from the source Observable.
 * @return {Observable<T>} An Observable that begins emitting items emitted by the source Observable when the
 * specified predicate becomes false.
 * @method skipWhile
 * @owner Observable
 */
function skipWhile(predicate) {
    return function (source) { return source.lift(new SkipWhileOperator(predicate)); };
}
exports.skipWhile = skipWhile;
var SkipWhileOperator = /** @class */ (function () {
    function SkipWhileOperator(predicate) {
        this.predicate = predicate;
    }
    SkipWhileOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));
    };
    return SkipWhileOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SkipWhileSubscriber = /** @class */ (function (_super) {
    __extends(SkipWhileSubscriber, _super);
    function SkipWhileSubscriber(destination, predicate) {
        var _this = _super.call(this, destination) || this;
        _this.predicate = predicate;
        _this.skipping = true;
        _this.index = 0;
        return _this;
    }
    SkipWhileSubscriber.prototype._next = function (value) {
        var destination = this.destination;
        if (this.skipping) {
            this.tryCallPredicate(value);
        }
        if (!this.skipping) {
            destination.next(value);
        }
    };
    SkipWhileSubscriber.prototype.tryCallPredicate = function (value) {
        try {
            var result = this.predicate(value, this.index++);
            this.skipping = Boolean(result);
        }
        catch (err) {
            this.destination.error(err);
        }
    };
    return SkipWhileSubscriber;
}(Subscriber_1.Subscriber));

},{"../Subscriber":293}],406:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var fromArray_1 = require("../observable/fromArray");
var scalar_1 = require("../observable/scalar");
var empty_1 = require("../observable/empty");
var concat_1 = require("../observable/concat");
var isScheduler_1 = require("../util/isScheduler");
/* tslint:enable:max-line-length */
/**
 * Returns an Observable that emits the items you specify as arguments before it begins to emit
 * items emitted by the source Observable.
 *
 * <img src="./img/startWith.png" width="100%">
 *
 * @param {...T} values - Items you want the modified Observable to emit first.
 * @param {Scheduler} [scheduler] - A {@link IScheduler} to use for scheduling
 * the emissions of the `next` notifications.
 * @return {Observable} An Observable that emits the items in the specified Iterable and then emits the items
 * emitted by the source Observable.
 * @method startWith
 * @owner Observable
 */
function startWith() {
    var array = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        array[_i] = arguments[_i];
    }
    return function (source) {
        var scheduler = array[array.length - 1];
        if (isScheduler_1.isScheduler(scheduler)) {
            array.pop();
        }
        else {
            scheduler = null;
        }
        var len = array.length;
        if (len === 1 && !scheduler) {
            return concat_1.concat(scalar_1.scalar(array[0]), source);
        }
        else if (len > 0) {
            return concat_1.concat(fromArray_1.fromArray(array, scheduler), source);
        }
        else {
            return concat_1.concat(empty_1.empty(scheduler), source);
        }
    };
}
exports.startWith = startWith;

},{"../observable/concat":301,"../observable/empty":305,"../observable/fromArray":308,"../observable/scalar":324,"../util/isScheduler":468}],407:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var SubscribeOnObservable_1 = require("../observable/SubscribeOnObservable");
/**
 * Asynchronously subscribes Observers to this Observable on the specified IScheduler.
 *
 * <img src="./img/subscribeOn.png" width="100%">
 *
 * @param {Scheduler} scheduler - The IScheduler to perform subscription actions on.
 * @return {Observable<T>} The source Observable modified so that its subscriptions happen on the specified IScheduler.
 .
 * @method subscribeOn
 * @owner Observable
 */
function subscribeOn(scheduler, delay) {
    if (delay === void 0) { delay = 0; }
    return function subscribeOnOperatorFunction(source) {
        return source.lift(new SubscribeOnOperator(scheduler, delay));
    };
}
exports.subscribeOn = subscribeOn;
var SubscribeOnOperator = /** @class */ (function () {
    function SubscribeOnOperator(scheduler, delay) {
        this.scheduler = scheduler;
        this.delay = delay;
    }
    SubscribeOnOperator.prototype.call = function (subscriber, source) {
        return new SubscribeOnObservable_1.SubscribeOnObservable(source, this.delay, this.scheduler).subscribe(subscriber);
    };
    return SubscribeOnOperator;
}());

},{"../observable/SubscribeOnObservable":297}],408:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var switchMap_1 = require("./switchMap");
var identity_1 = require("../util/identity");
function switchAll() {
    return switchMap_1.switchMap(identity_1.identity);
}
exports.switchAll = switchAll;

},{"../util/identity":457,"./switchMap":409}],409:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var OuterSubscriber_1 = require("../OuterSubscriber");
var subscribeToResult_1 = require("../util/subscribeToResult");
var map_1 = require("./map");
var from_1 = require("../observable/from");
/* tslint:enable:max-line-length */
/**
 * Projects each source value to an Observable which is merged in the output
 * Observable, emitting values only from the most recently projected Observable.
 *
 * <span class="informal">Maps each value to an Observable, then flattens all of
 * these inner Observables using {@link switch}.</span>
 *
 * <img src="./img/switchMap.png" width="100%">
 *
 * Returns an Observable that emits items based on applying a function that you
 * supply to each item emitted by the source Observable, where that function
 * returns an (so-called "inner") Observable. Each time it observes one of these
 * inner Observables, the output Observable begins emitting the items emitted by
 * that inner Observable. When a new inner Observable is emitted, `switchMap`
 * stops emitting items from the earlier-emitted inner Observable and begins
 * emitting items from the new one. It continues to behave like this for
 * subsequent inner Observables.
 *
 * @example <caption>Rerun an interval Observable on every click event</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));
 * result.subscribe(x => my_console_log(x));
 *
 * @see {@link concatMap}
 * @see {@link exhaustMap}
 * @see {@link mergeMap}
 * @see {@link switch}
 * @see {@link switchMapTo}
 *
 * @param {function(value: T, ?index: number): ObservableInput} project A function
 * that, when applied to an item emitted by the source Observable, returns an
 * Observable.
 * @return {Observable} An Observable that emits the result of applying the
 * projection function (and the optional `resultSelector`) to each item emitted
 * by the source Observable and taking only the values from the most recently
 * projected inner Observable.
 * @method switchMap
 * @owner Observable
 */
function switchMap(project, resultSelector) {
    if (typeof resultSelector === 'function') {
        return function (source) { return source.pipe(switchMap(function (a, i) { return from_1.from(project(a, i)).pipe(map_1.map(function (b, ii) { return resultSelector(a, b, i, ii); })); })); };
    }
    return function (source) { return source.lift(new SwitchMapOperator(project)); };
}
exports.switchMap = switchMap;
var SwitchMapOperator = /** @class */ (function () {
    function SwitchMapOperator(project) {
        this.project = project;
    }
    SwitchMapOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new SwitchMapSubscriber(subscriber, this.project));
    };
    return SwitchMapOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SwitchMapSubscriber = /** @class */ (function (_super) {
    __extends(SwitchMapSubscriber, _super);
    function SwitchMapSubscriber(destination, project) {
        var _this = _super.call(this, destination) || this;
        _this.project = project;
        _this.index = 0;
        return _this;
    }
    SwitchMapSubscriber.prototype._next = function (value) {
        var result;
        var index = this.index++;
        try {
            result = this.project(value, index);
        }
        catch (error) {
            this.destination.error(error);
            return;
        }
        this._innerSub(result, value, index);
    };
    SwitchMapSubscriber.prototype._innerSub = function (result, value, index) {
        var innerSubscription = this.innerSubscription;
        if (innerSubscription) {
            innerSubscription.unsubscribe();
        }
        this.add(this.innerSubscription = subscribeToResult_1.subscribeToResult(this, result, value, index));
    };
    SwitchMapSubscriber.prototype._complete = function () {
        var innerSubscription = this.innerSubscription;
        if (!innerSubscription || innerSubscription.closed) {
            _super.prototype._complete.call(this);
        }
    };
    SwitchMapSubscriber.prototype._unsubscribe = function () {
        this.innerSubscription = null;
    };
    SwitchMapSubscriber.prototype.notifyComplete = function (innerSub) {
        this.remove(innerSub);
        this.innerSubscription = null;
        if (this.isStopped) {
            _super.prototype._complete.call(this);
        }
    };
    SwitchMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.destination.next(innerValue);
    };
    return SwitchMapSubscriber;
}(OuterSubscriber_1.OuterSubscriber));

},{"../OuterSubscriber":288,"../observable/from":307,"../util/subscribeToResult":478,"./map":368}],410:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var switchMap_1 = require("./switchMap");
/* tslint:enable:max-line-length */
/**
 * Projects each source value to the same Observable which is flattened multiple
 * times with {@link switch} in the output Observable.
 *
 * <span class="informal">It's like {@link switchMap}, but maps each value
 * always to the same inner Observable.</span>
 *
 * <img src="./img/switchMapTo.png" width="100%">
 *
 * Maps each source value to the given Observable `innerObservable` regardless
 * of the source value, and then flattens those resulting Observables into one
 * single Observable, which is the output Observable. The output Observables
 * emits values only from the most recently emitted instance of
 * `innerObservable`.
 *
 * @example <caption>Rerun an interval Observable on every click event</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.switchMapTo(Rx.Observable.interval(1000));
 * result.subscribe(x => my_console_log(x));
 *
 * @see {@link concatMapTo}
 * @see {@link switch}
 * @see {@link switchMap}
 * @see {@link mergeMapTo}
 *
 * @param {ObservableInput} innerObservable An Observable to replace each value from
 * the source Observable.
 * @return {Observable} An Observable that emits items from the given
 * `innerObservable` (and optionally transformed through `resultSelector`) every
 * time a value is emitted on the source Observable, and taking only the values
 * from the most recently projected inner Observable.
 * @method switchMapTo
 * @owner Observable
 */
function switchMapTo(innerObservable, resultSelector) {
    return resultSelector ? switchMap_1.switchMap(function () { return innerObservable; }, resultSelector) : switchMap_1.switchMap(function () { return innerObservable; });
}
exports.switchMapTo = switchMapTo;

},{"./switchMap":409}],411:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Subscriber_1 = require("../Subscriber");
var ArgumentOutOfRangeError_1 = require("../util/ArgumentOutOfRangeError");
var empty_1 = require("../observable/empty");
/**
 * Emits only the first `count` values emitted by the source Observable.
 *
 * <span class="informal">Takes the first `count` values from the source, then
 * completes.</span>
 *
 * <img src="./img/take.png" width="100%">
 *
 * `take` returns an Observable that emits only the first `count` values emitted
 * by the source Observable. If the source emits fewer than `count` values then
 * all of its values are emitted. After that, it completes, regardless if the
 * source completes.
 *
 * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>
 * var interval = Rx.Observable.interval(1000);
 * var five = interval.take(5);
 * five.subscribe(x => my_console_log(x));
 *
 * @see {@link takeLast}
 * @see {@link takeUntil}
 * @see {@link takeWhile}
 * @see {@link skip}
 *
 * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an
 * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.
 *
 * @param {number} count The maximum number of `next` values to emit.
 * @return {Observable<T>} An Observable that emits only the first `count`
 * values emitted by the source Observable, or all of the values from the source
 * if the source emits fewer than `count` values.
 * @method take
 * @owner Observable
 */
function take(count) {
    return function (source) {
        if (count === 0) {
            return empty_1.empty();
        }
        else {
            return source.lift(new TakeOperator(count));
        }
    };
}
exports.take = take;
var TakeOperator = /** @class */ (function () {
    function TakeOperator(total) {
        this.total = total;
        if (this.total < 0) {
            throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;
        }
    }
    TakeOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new TakeSubscriber(subscriber, this.total));
    };
    return TakeOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var TakeSubscriber = /** @class */ (function (_super) {
    __extends(TakeSubscriber, _super);
    function TakeSubscriber(destination, total) {
        var _this = _super.call(this, destination) || this;
        _this.total = total;
        _this.count = 0;
        return _this;
    }
    TakeSubscriber.prototype._next = function (value) {
        var total = this.total;
        var count = ++this.count;
        if (count <= total) {
            this.destination.next(value);
            if (count === total) {
                this.destination.complete();
                this.unsubscribe();
            }
        }
    };
    return TakeSubscriber;
}(Subscriber_1.Subscriber));

},{"../Subscriber":293,"../observable/empty":305,"../util/ArgumentOutOfRangeError":449}],412:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Subscriber_1 = require("../Subscriber");
var ArgumentOutOfRangeError_1 = require("../util/ArgumentOutOfRangeError");
var empty_1 = require("../observable/empty");
/**
 * Emits only the last `count` values emitted by the source Observable.
 *
 * <span class="informal">Remembers the latest `count` values, then emits those
 * only when the source completes.</span>
 *
 * <img src="./img/takeLast.png" width="100%">
 *
 * `takeLast` returns an Observable that emits at most the last `count` values
 * emitted by the source Observable. If the source emits fewer than `count`
 * values then all of its values are emitted. This operator must wait until the
 * `complete` notification emission from the source in order to emit the `next`
 * values on the output Observable, because otherwise it is impossible to know
 * whether or not more values will be emitted on the source. For this reason,
 * all values are emitted synchronously, followed by the complete notification.
 *
 * @example <caption>Take the last 3 values of an Observable with many values</caption>
 * var many = Rx.Observable.range(1, 100);
 * var lastThree = many.pipe(takeLast(3));
 * lastThree.subscribe(x => my_console_log(x));
 *
 * @see {@link take}
 * @see {@link takeUntil}
 * @see {@link takeWhile}
 * @see {@link skip}
 *
 * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an
 * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.
 *
 * @param {number} count The maximum number of values to emit from the end of
 * the sequence of values emitted by the source Observable.
 * @return {Observable<T>} An Observable that emits at most the last count
 * values emitted by the source Observable.
 * @method takeLast
 * @owner Observable
 */
function takeLast(count) {
    return function takeLastOperatorFunction(source) {
        if (count === 0) {
            return empty_1.empty();
        }
        else {
            return source.lift(new TakeLastOperator(count));
        }
    };
}
exports.takeLast = takeLast;
var TakeLastOperator = /** @class */ (function () {
    function TakeLastOperator(total) {
        this.total = total;
        if (this.total < 0) {
            throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;
        }
    }
    TakeLastOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new TakeLastSubscriber(subscriber, this.total));
    };
    return TakeLastOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var TakeLastSubscriber = /** @class */ (function (_super) {
    __extends(TakeLastSubscriber, _super);
    function TakeLastSubscriber(destination, total) {
        var _this = _super.call(this, destination) || this;
        _this.total = total;
        _this.ring = new Array();
        _this.count = 0;
        return _this;
    }
    TakeLastSubscriber.prototype._next = function (value) {
        var ring = this.ring;
        var total = this.total;
        var count = this.count++;
        if (ring.length < total) {
            ring.push(value);
        }
        else {
            var index = count % total;
            ring[index] = value;
        }
    };
    TakeLastSubscriber.prototype._complete = function () {
        var destination = this.destination;
        var count = this.count;
        if (count > 0) {
            var total = this.count >= this.total ? this.total : this.count;
            var ring = this.ring;
            for (var i = 0; i < total; i++) {
                var idx = (count++) % total;
                destination.next(ring[idx]);
            }
        }
        destination.complete();
    };
    return TakeLastSubscriber;
}(Subscriber_1.Subscriber));

},{"../Subscriber":293,"../observable/empty":305,"../util/ArgumentOutOfRangeError":449}],413:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var OuterSubscriber_1 = require("../OuterSubscriber");
var subscribeToResult_1 = require("../util/subscribeToResult");
/**
 * Emits the values emitted by the source Observable until a `notifier`
 * Observable emits a value.
 *
 * <span class="informal">Lets values pass until a second Observable,
 * `notifier`, emits a value. Then, it completes.</span>
 *
 * <img src="./img/takeUntil.png" width="100%">
 *
 * `takeUntil` subscribes and begins mirroring the source Observable. It also
 * monitors a second Observable, `notifier` that you provide. If the `notifier`
 * emits a value, the output Observable stops mirroring the source Observable
 * and completes. If the `notifier` doesn't emit any value and completes
 * then `takeUntil` will pass all values.
 *
 * @example <caption>Tick every second until the first click happens</caption>
 * var interval = Rx.Observable.interval(1000);
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = interval.takeUntil(clicks);
 * result.subscribe(x => my_console_log(x));
 *
 * @see {@link take}
 * @see {@link takeLast}
 * @see {@link takeWhile}
 * @see {@link skip}
 *
 * @param {Observable} notifier The Observable whose first emitted value will
 * cause the output Observable of `takeUntil` to stop emitting values from the
 * source Observable.
 * @return {Observable<T>} An Observable that emits the values from the source
 * Observable until such time as `notifier` emits its first value.
 * @method takeUntil
 * @owner Observable
 */
function takeUntil(notifier) {
    return function (source) { return source.lift(new TakeUntilOperator(notifier)); };
}
exports.takeUntil = takeUntil;
var TakeUntilOperator = /** @class */ (function () {
    function TakeUntilOperator(notifier) {
        this.notifier = notifier;
    }
    TakeUntilOperator.prototype.call = function (subscriber, source) {
        var takeUntilSubscriber = new TakeUntilSubscriber(subscriber);
        var notifierSubscription = subscribeToResult_1.subscribeToResult(takeUntilSubscriber, this.notifier);
        if (notifierSubscription && !notifierSubscription.closed) {
            takeUntilSubscriber.add(notifierSubscription);
            return source.subscribe(takeUntilSubscriber);
        }
        return takeUntilSubscriber;
    };
    return TakeUntilOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var TakeUntilSubscriber = /** @class */ (function (_super) {
    __extends(TakeUntilSubscriber, _super);
    function TakeUntilSubscriber(destination) {
        return _super.call(this, destination) || this;
    }
    TakeUntilSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.complete();
    };
    TakeUntilSubscriber.prototype.notifyComplete = function () {
        // noop
    };
    return TakeUntilSubscriber;
}(OuterSubscriber_1.OuterSubscriber));

},{"../OuterSubscriber":288,"../util/subscribeToResult":478}],414:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Subscriber_1 = require("../Subscriber");
/**
 * Emits values emitted by the source Observable so long as each value satisfies
 * the given `predicate`, and then completes as soon as this `predicate` is not
 * satisfied.
 *
 * <span class="informal">Takes values from the source only while they pass the
 * condition given. When the first value does not satisfy, it completes.</span>
 *
 * <img src="./img/takeWhile.png" width="100%">
 *
 * `takeWhile` subscribes and begins mirroring the source Observable. Each value
 * emitted on the source is given to the `predicate` function which returns a
 * boolean, representing a condition to be satisfied by the source values. The
 * output Observable emits the source values until such time as the `predicate`
 * returns false, at which point `takeWhile` stops mirroring the source
 * Observable and completes the output Observable.
 *
 * @example <caption>Emit click events only while the clientX property is greater than 200</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.takeWhile(ev => ev.clientX > 200);
 * result.subscribe(x => my_console_log(x));
 *
 * @see {@link take}
 * @see {@link takeLast}
 * @see {@link takeUntil}
 * @see {@link skip}
 *
 * @param {function(value: T, index: number): boolean} predicate A function that
 * evaluates a value emitted by the source Observable and returns a boolean.
 * Also takes the (zero-based) index as the second argument.
 * @return {Observable<T>} An Observable that emits the values from the source
 * Observable so long as each value satisfies the condition defined by the
 * `predicate`, then completes.
 * @method takeWhile
 * @owner Observable
 */
function takeWhile(predicate) {
    return function (source) { return source.lift(new TakeWhileOperator(predicate)); };
}
exports.takeWhile = takeWhile;
var TakeWhileOperator = /** @class */ (function () {
    function TakeWhileOperator(predicate) {
        this.predicate = predicate;
    }
    TakeWhileOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate));
    };
    return TakeWhileOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var TakeWhileSubscriber = /** @class */ (function (_super) {
    __extends(TakeWhileSubscriber, _super);
    function TakeWhileSubscriber(destination, predicate) {
        var _this = _super.call(this, destination) || this;
        _this.predicate = predicate;
        _this.index = 0;
        return _this;
    }
    TakeWhileSubscriber.prototype._next = function (value) {
        var destination = this.destination;
        var result;
        try {
            result = this.predicate(value, this.index++);
        }
        catch (err) {
            destination.error(err);
            return;
        }
        this.nextOrComplete(value, result);
    };
    TakeWhileSubscriber.prototype.nextOrComplete = function (value, predicateResult) {
        var destination = this.destination;
        if (Boolean(predicateResult)) {
            destination.next(value);
        }
        else {
            destination.complete();
        }
    };
    return TakeWhileSubscriber;
}(Subscriber_1.Subscriber));

},{"../Subscriber":293}],415:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Subscriber_1 = require("../Subscriber");
var noop_1 = require("../util/noop");
var isFunction_1 = require("../util/isFunction");
/* tslint:enable:max-line-length */
/**
 * Perform a side effect for every emission on the source Observable, but return
 * an Observable that is identical to the source.
 *
 * <span class="informal">Intercepts each emission on the source and runs a
 * function, but returns an output which is identical to the source as long as errors don't occur.</span>
 *
 * <img src="./img/do.png" width="100%">
 *
 * Returns a mirrored Observable of the source Observable, but modified so that
 * the provided Observer is called to perform a side effect for every value,
 * error, and completion emitted by the source. Any errors that are thrown in
 * the aforementioned Observer or handlers are safely sent down the error path
 * of the output Observable.
 *
 * This operator is useful for debugging your Observables for the correct values
 * or performing other side effects.
 *
 * Note: this is different to a `subscribe` on the Observable. If the Observable
 * returned by `do` is not subscribed, the side effects specified by the
 * Observer will never happen. `do` therefore simply spies on existing
 * execution, it does not trigger an execution to happen like `subscribe` does.
 *
 * @example <caption>Map every click to the clientX position of that click, while also logging the click event</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var positions = clicks
 *   .do(ev => my_console_log(ev))
 *   .map(ev => ev.clientX);
 * positions.subscribe(x => my_console_log(x));
 *
 * @see {@link map}
 * @see {@link subscribe}
 *
 * @param {Observer|function} [nextOrObserver] A normal Observer object or a
 * callback for `next`.
 * @param {function} [error] Callback for errors in the source.
 * @param {function} [complete] Callback for the completion of the source.
 * @return {Observable} An Observable identical to the source, but runs the
 * specified Observer or callback(s) for each item.
 * @name tap
 */
function tap(nextOrObserver, error, complete) {
    return function tapOperatorFunction(source) {
        return source.lift(new DoOperator(nextOrObserver, error, complete));
    };
}
exports.tap = tap;
var DoOperator = /** @class */ (function () {
    function DoOperator(nextOrObserver, error, complete) {
        this.nextOrObserver = nextOrObserver;
        this.error = error;
        this.complete = complete;
    }
    DoOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new TapSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));
    };
    return DoOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var TapSubscriber = /** @class */ (function (_super) {
    __extends(TapSubscriber, _super);
    function TapSubscriber(destination, observerOrNext, error, complete) {
        var _this = _super.call(this, destination) || this;
        _this._tapNext = noop_1.noop;
        _this._tapError = noop_1.noop;
        _this._tapComplete = noop_1.noop;
        _this._tapError = error || noop_1.noop;
        _this._tapComplete = complete || noop_1.noop;
        if (isFunction_1.isFunction(observerOrNext)) {
            _this._context = _this;
            _this._tapNext = observerOrNext;
        }
        else if (observerOrNext) {
            _this._context = observerOrNext;
            _this._tapNext = observerOrNext.next || noop_1.noop;
            _this._tapError = observerOrNext.error || noop_1.noop;
            _this._tapComplete = observerOrNext.complete || noop_1.noop;
        }
        return _this;
    }
    TapSubscriber.prototype._next = function (value) {
        try {
            this._tapNext.call(this._context, value);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.destination.next(value);
    };
    TapSubscriber.prototype._error = function (err) {
        try {
            this._tapError.call(this._context, err);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.destination.error(err);
    };
    TapSubscriber.prototype._complete = function () {
        try {
            this._tapComplete.call(this._context);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        return this.destination.complete();
    };
    return TapSubscriber;
}(Subscriber_1.Subscriber));

},{"../Subscriber":293,"../util/isFunction":461,"../util/noop":469}],416:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var OuterSubscriber_1 = require("../OuterSubscriber");
var subscribeToResult_1 = require("../util/subscribeToResult");
exports.defaultThrottleConfig = {
    leading: true,
    trailing: false
};
/**
 * Emits a value from the source Observable, then ignores subsequent source
 * values for a duration determined by another Observable, then repeats this
 * process.
 *
 * <span class="informal">It's like {@link throttleTime}, but the silencing
 * duration is determined by a second Observable.</span>
 *
 * <img src="./img/throttle.png" width="100%">
 *
 * `throttle` emits the source Observable values on the output Observable
 * when its internal timer is disabled, and ignores source values when the timer
 * is enabled. Initially, the timer is disabled. As soon as the first source
 * value arrives, it is forwarded to the output Observable, and then the timer
 * is enabled by calling the `durationSelector` function with the source value,
 * which returns the "duration" Observable. When the duration Observable emits a
 * value or completes, the timer is disabled, and this process repeats for the
 * next source value.
 *
 * @example <caption>Emit clicks at a rate of at most one click per second</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.throttle(ev => Rx.Observable.interval(1000));
 * result.subscribe(x => my_console_log(x));
 *
 * @see {@link audit}
 * @see {@link debounce}
 * @see {@link delayWhen}
 * @see {@link sample}
 * @see {@link throttleTime}
 *
 * @param {function(value: T): SubscribableOrPromise} durationSelector A function
 * that receives a value from the source Observable, for computing the silencing
 * duration for each source value, returned as an Observable or a Promise.
 * @param {Object} config a configuration object to define `leading` and `trailing` behavior. Defaults
 * to `{ leading: true, trailing: false }`.
 * @return {Observable<T>} An Observable that performs the throttle operation to
 * limit the rate of emissions from the source.
 * @method throttle
 * @owner Observable
 */
function throttle(durationSelector, config) {
    if (config === void 0) { config = exports.defaultThrottleConfig; }
    return function (source) { return source.lift(new ThrottleOperator(durationSelector, config.leading, config.trailing)); };
}
exports.throttle = throttle;
var ThrottleOperator = /** @class */ (function () {
    function ThrottleOperator(durationSelector, leading, trailing) {
        this.durationSelector = durationSelector;
        this.leading = leading;
        this.trailing = trailing;
    }
    ThrottleOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new ThrottleSubscriber(subscriber, this.durationSelector, this.leading, this.trailing));
    };
    return ThrottleOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc
 * @ignore
 * @extends {Ignored}
 */
var ThrottleSubscriber = /** @class */ (function (_super) {
    __extends(ThrottleSubscriber, _super);
    function ThrottleSubscriber(destination, durationSelector, _leading, _trailing) {
        var _this = _super.call(this, destination) || this;
        _this.destination = destination;
        _this.durationSelector = durationSelector;
        _this._leading = _leading;
        _this._trailing = _trailing;
        _this._hasValue = false;
        return _this;
    }
    ThrottleSubscriber.prototype._next = function (value) {
        this._hasValue = true;
        this._sendValue = value;
        if (!this._throttled) {
            if (this._leading) {
                this.send();
            }
            else {
                this.throttle(value);
            }
        }
    };
    ThrottleSubscriber.prototype.send = function () {
        var _a = this, _hasValue = _a._hasValue, _sendValue = _a._sendValue;
        if (_hasValue) {
            this.destination.next(_sendValue);
            this.throttle(_sendValue);
        }
        this._hasValue = false;
        this._sendValue = null;
    };
    ThrottleSubscriber.prototype.throttle = function (value) {
        var duration = this.tryDurationSelector(value);
        if (duration) {
            this.add(this._throttled = subscribeToResult_1.subscribeToResult(this, duration));
        }
    };
    ThrottleSubscriber.prototype.tryDurationSelector = function (value) {
        try {
            return this.durationSelector(value);
        }
        catch (err) {
            this.destination.error(err);
            return null;
        }
    };
    ThrottleSubscriber.prototype.throttlingDone = function () {
        var _a = this, _throttled = _a._throttled, _trailing = _a._trailing;
        if (_throttled) {
            _throttled.unsubscribe();
        }
        this._throttled = null;
        if (_trailing) {
            this.send();
        }
    };
    ThrottleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.throttlingDone();
    };
    ThrottleSubscriber.prototype.notifyComplete = function () {
        this.throttlingDone();
    };
    return ThrottleSubscriber;
}(OuterSubscriber_1.OuterSubscriber));

},{"../OuterSubscriber":288,"../util/subscribeToResult":478}],417:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Subscriber_1 = require("../Subscriber");
var async_1 = require("../scheduler/async");
var throttle_1 = require("./throttle");
/**
 * Emits a value from the source Observable, then ignores subsequent source
 * values for `duration` milliseconds, then repeats this process.
 *
 * <span class="informal">Lets a value pass, then ignores source values for the
 * next `duration` milliseconds.</span>
 *
 * <img src="./img/throttleTime.png" width="100%">
 *
 * `throttleTime` emits the source Observable values on the output Observable
 * when its internal timer is disabled, and ignores source values when the timer
 * is enabled. Initially, the timer is disabled. As soon as the first source
 * value arrives, it is forwarded to the output Observable, and then the timer
 * is enabled. After `duration` milliseconds (or the time unit determined
 * internally by the optional `scheduler`) has passed, the timer is disabled,
 * and this process repeats for the next source value. Optionally takes a
 * {@link IScheduler} for managing timers.
 *
 * @example <caption>Emit clicks at a rate of at most one click per second</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.throttleTime(1000);
 * result.subscribe(x => my_console_log(x));
 *
 * @see {@link auditTime}
 * @see {@link debounceTime}
 * @see {@link delay}
 * @see {@link sampleTime}
 * @see {@link throttle}
 *
 * @param {number} duration Time to wait before emitting another value after
 * emitting the last value, measured in milliseconds or the time unit determined
 * internally by the optional `scheduler`.
 * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for
 * managing the timers that handle the throttling.
 * @param {Object} config a configuration object to define `leading` and
 * `trailing` behavior. Defaults to `{ leading: true, trailing: false }`.
 * @return {Observable<T>} An Observable that performs the throttle operation to
 * limit the rate of emissions from the source.
 * @method throttleTime
 * @owner Observable
 */
function throttleTime(duration, scheduler, config) {
    if (scheduler === void 0) { scheduler = async_1.async; }
    if (config === void 0) { config = throttle_1.defaultThrottleConfig; }
    return function (source) { return source.lift(new ThrottleTimeOperator(duration, scheduler, config.leading, config.trailing)); };
}
exports.throttleTime = throttleTime;
var ThrottleTimeOperator = /** @class */ (function () {
    function ThrottleTimeOperator(duration, scheduler, leading, trailing) {
        this.duration = duration;
        this.scheduler = scheduler;
        this.leading = leading;
        this.trailing = trailing;
    }
    ThrottleTimeOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler, this.leading, this.trailing));
    };
    return ThrottleTimeOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var ThrottleTimeSubscriber = /** @class */ (function (_super) {
    __extends(ThrottleTimeSubscriber, _super);
    function ThrottleTimeSubscriber(destination, duration, scheduler, leading, trailing) {
        var _this = _super.call(this, destination) || this;
        _this.duration = duration;
        _this.scheduler = scheduler;
        _this.leading = leading;
        _this.trailing = trailing;
        _this._hasTrailingValue = false;
        _this._trailingValue = null;
        return _this;
    }
    ThrottleTimeSubscriber.prototype._next = function (value) {
        if (this.throttled) {
            if (this.trailing) {
                this._trailingValue = value;
                this._hasTrailingValue = true;
            }
        }
        else {
            this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, { subscriber: this }));
            if (this.leading) {
                this.destination.next(value);
            }
        }
    };
    ThrottleTimeSubscriber.prototype._complete = function () {
        if (this._hasTrailingValue) {
            this.destination.next(this._trailingValue);
            this.destination.complete();
        }
        else {
            this.destination.complete();
        }
    };
    ThrottleTimeSubscriber.prototype.clearThrottle = function () {
        var throttled = this.throttled;
        if (throttled) {
            if (this.trailing && this._hasTrailingValue) {
                this.destination.next(this._trailingValue);
                this._trailingValue = null;
                this._hasTrailingValue = false;
            }
            throttled.unsubscribe();
            this.remove(throttled);
            this.throttled = null;
        }
    };
    return ThrottleTimeSubscriber;
}(Subscriber_1.Subscriber));
function dispatchNext(arg) {
    var subscriber = arg.subscriber;
    subscriber.clearThrottle();
}

},{"../Subscriber":293,"../scheduler/async":444,"./throttle":416}],418:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tap_1 = require("./tap");
var EmptyError_1 = require("../util/EmptyError");
/**
 * If the source observable completes without emitting a value, it will emit
 * an error. The error will be created at that time by the optional
 * `errorFactory` argument, otherwise, the error will be {@link ErrorEmpty}.
 *
 * @example
 *
 * const click$ = fromEvent(button, 'click');
 *
 * clicks$.pipe(
 *   takeUntil(timer(1000)),
 *   throwIfEmpty(
 *     () => new Error('the button was not clicked within 1 second')
 *   ),
 * )
 * .subscribe({
 *   next() { my_console_log('The button was clicked'); },
 *   error(err) { console.error(err); },
 * });
 * @param {Function} [errorFactory] A factory function called to produce the
 * error to be thrown when the source observable completes without emitting a
 * value.
 */
exports.throwIfEmpty = function (errorFactory) {
    if (errorFactory === void 0) { errorFactory = defaultErrorFactory; }
    return tap_1.tap({
        hasValue: false,
        next: function () { this.hasValue = true; },
        complete: function () {
            if (!this.hasValue) {
                throw errorFactory();
            }
        }
    });
};
function defaultErrorFactory() {
    return new EmptyError_1.EmptyError();
}

},{"../util/EmptyError":450,"./tap":415}],419:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var async_1 = require("../scheduler/async");
var scan_1 = require("./scan");
var defer_1 = require("../observable/defer");
var map_1 = require("./map");
function timeInterval(scheduler) {
    if (scheduler === void 0) { scheduler = async_1.async; }
    return function (source) { return defer_1.defer(function () {
        return source.pipe(
        // HACK: the typings seem off with scan
        scan_1.scan(function (_a, value) {
            var current = _a.current;
            return ({ value: value, current: scheduler.now(), last: current });
        }, { current: scheduler.now(), value: undefined, last: undefined }), map_1.map(function (_a) {
            var current = _a.current, last = _a.last, value = _a.value;
            return new TimeInterval(value, current - last);
        }));
    }); };
}
exports.timeInterval = timeInterval;
var TimeInterval = /** @class */ (function () {
    function TimeInterval(value, interval) {
        this.value = value;
        this.interval = interval;
    }
    return TimeInterval;
}());
exports.TimeInterval = TimeInterval;

},{"../observable/defer":302,"../scheduler/async":444,"./map":368,"./scan":397}],420:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var async_1 = require("../scheduler/async");
var TimeoutError_1 = require("../util/TimeoutError");
var timeoutWith_1 = require("./timeoutWith");
var throwError_1 = require("../observable/throwError");
/**
 *
 * Errors if Observable does not emit a value in given time span.
 *
 * <span class="informal">Timeouts on Observable that doesn't emit values fast enough.</span>
 *
 * <img src="./img/timeout.png" width="100%">
 *
 * `timeout` operator accepts as an argument either a number or a Date.
 *
 * If number was provided, it returns an Observable that behaves like a source
 * Observable, unless there is a period of time where there is no value emitted.
 * So if you provide `100` as argument and first value comes after 50ms from
 * the moment of subscription, this value will be simply re-emitted by the resulting
 * Observable. If however after that 100ms passes without a second value being emitted,
 * stream will end with an error and source Observable will be unsubscribed.
 * These checks are performed throughout whole lifecycle of Observable - from the moment
 * it was subscribed to, until it completes or errors itself. Thus every value must be
 * emitted within specified period since previous value.
 *
 * If provided argument was Date, returned Observable behaves differently. It throws
 * if Observable did not complete before provided Date. This means that periods between
 * emission of particular values do not matter in this case. If Observable did not complete
 * before provided Date, source Observable will be unsubscribed. Other than that, resulting
 * stream behaves just as source Observable.
 *
 * `timeout` accepts also a Scheduler as a second parameter. It is used to schedule moment (or moments)
 * when returned Observable will check if source stream emitted value or completed.
 *
 * @example <caption>Check if ticks are emitted within certain timespan</caption>
 * const seconds = Rx.Observable.interval(1000);
 *
 * seconds.timeout(1100) // Let's use bigger timespan to be safe,
 *                       // since `interval` might fire a bit later then scheduled.
 * .subscribe(
 *     value => my_console_log(value), // Will emit numbers just as regular `interval` would.
 *     err => my_console_log(err) // Will never be called.
 * );
 *
 * seconds.timeout(900).subscribe(
 *     value => my_console_log(value), // Will never be called.
 *     err => my_console_log(err) // Will emit error before even first value is emitted,
 *                             // since it did not arrive within 900ms period.
 * );
 *
 * @example <caption>Use Date to check if Observable completed</caption>
 * const seconds = Rx.Observable.interval(1000);
 *
 * seconds.timeout(new Date("December 17, 2020 03:24:00"))
 * .subscribe(
 *     value => my_console_log(value), // Will emit values as regular `interval` would
 *                                  // until December 17, 2020 at 03:24:00.
 *     err => my_console_log(err) // On December 17, 2020 at 03:24:00 it will emit an error,
 *                             // since Observable did not complete by then.
 * );
 *
 * @see {@link timeoutWith}
 *
 * @param {number|Date} due Number specifying period within which Observable must emit values
 *                          or Date specifying before when Observable should complete
 * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.
 * @return {Observable<T>} Observable that mirrors behaviour of source, unless timeout checks fail.
 * @method timeout
 * @owner Observable
 */
function timeout(due, scheduler) {
    if (scheduler === void 0) { scheduler = async_1.async; }
    return timeoutWith_1.timeoutWith(due, throwError_1.throwError(new TimeoutError_1.TimeoutError()), scheduler);
}
exports.timeout = timeout;

},{"../observable/throwError":325,"../scheduler/async":444,"../util/TimeoutError":453,"./timeoutWith":421}],421:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var async_1 = require("../scheduler/async");
var isDate_1 = require("../util/isDate");
var OuterSubscriber_1 = require("../OuterSubscriber");
var subscribeToResult_1 = require("../util/subscribeToResult");
/* tslint:enable:max-line-length */
/**
 *
 * Errors if Observable does not emit a value in given time span, in case of which
 * subscribes to the second Observable.
 *
 * <span class="informal">It's a version of `timeout` operator that let's you specify fallback Observable.</span>
 *
 * <img src="./img/timeoutWith.png" width="100%">
 *
 * `timeoutWith` is a variation of `timeout` operator. It behaves exactly the same,
 * still accepting as a first argument either a number or a Date, which control - respectively -
 * when values of source Observable should be emitted or when it should complete.
 *
 * The only difference is that it accepts a second, required parameter. This parameter
 * should be an Observable which will be subscribed when source Observable fails any timeout check.
 * So whenever regular `timeout` would emit an error, `timeoutWith` will instead start re-emitting
 * values from second Observable. Note that this fallback Observable is not checked for timeouts
 * itself, so it can emit values and complete at arbitrary points in time. From the moment of a second
 * subscription, Observable returned from `timeoutWith` simply mirrors fallback stream. When that
 * stream completes, it completes as well.
 *
 * Scheduler, which in case of `timeout` is provided as as second argument, can be still provided
 * here - as a third, optional parameter. It still is used to schedule timeout checks and -
 * as a consequence - when second Observable will be subscribed, since subscription happens
 * immediately after failing check.
 *
 * @example <caption>Add fallback observable</caption>
 * const seconds = Rx.Observable.interval(1000);
 * const minutes = Rx.Observable.interval(60 * 1000);
 *
 * seconds.timeoutWith(900, minutes)
 *     .subscribe(
 *         value => my_console_log(value), // After 900ms, will start emitting `minutes`,
 *                                      // since first value of `seconds` will not arrive fast enough.
 *         err => my_console_log(err) // Would be called after 900ms in case of `timeout`,
 *                                 // but here will never be called.
 *     );
 *
 * @param {number|Date} due Number specifying period within which Observable must emit values
 *                          or Date specifying before when Observable should complete
 * @param {Observable<T>} withObservable Observable which will be subscribed if source fails timeout check.
 * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.
 * @return {Observable<T>} Observable that mirrors behaviour of source or, when timeout check fails, of an Observable
 *                          passed as a second parameter.
 * @method timeoutWith
 * @owner Observable
 */
function timeoutWith(due, withObservable, scheduler) {
    if (scheduler === void 0) { scheduler = async_1.async; }
    return function (source) {
        var absoluteTimeout = isDate_1.isDate(due);
        var waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(due);
        return source.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));
    };
}
exports.timeoutWith = timeoutWith;
var TimeoutWithOperator = /** @class */ (function () {
    function TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler) {
        this.waitFor = waitFor;
        this.absoluteTimeout = absoluteTimeout;
        this.withObservable = withObservable;
        this.scheduler = scheduler;
    }
    TimeoutWithOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new TimeoutWithSubscriber(subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler));
    };
    return TimeoutWithOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var TimeoutWithSubscriber = /** @class */ (function (_super) {
    __extends(TimeoutWithSubscriber, _super);
    function TimeoutWithSubscriber(destination, absoluteTimeout, waitFor, withObservable, scheduler) {
        var _this = _super.call(this, destination) || this;
        _this.absoluteTimeout = absoluteTimeout;
        _this.waitFor = waitFor;
        _this.withObservable = withObservable;
        _this.scheduler = scheduler;
        _this.action = null;
        _this.scheduleTimeout();
        return _this;
    }
    TimeoutWithSubscriber.dispatchTimeout = function (subscriber) {
        var withObservable = subscriber.withObservable;
        subscriber._unsubscribeAndRecycle();
        subscriber.add(subscribeToResult_1.subscribeToResult(subscriber, withObservable));
    };
    TimeoutWithSubscriber.prototype.scheduleTimeout = function () {
        var action = this.action;
        if (action) {
            // Recycle the action if we've already scheduled one. All the production
            // Scheduler Actions mutate their state/delay time and return themeselves.
            // VirtualActions are immutable, so they create and return a clone. In this
            // case, we need to set the action reference to the most recent VirtualAction,
            // to ensure that's the one we clone from next time.
            this.action = action.schedule(this, this.waitFor);
        }
        else {
            this.add(this.action = this.scheduler.schedule(TimeoutWithSubscriber.dispatchTimeout, this.waitFor, this));
        }
    };
    TimeoutWithSubscriber.prototype._next = function (value) {
        if (!this.absoluteTimeout) {
            this.scheduleTimeout();
        }
        _super.prototype._next.call(this, value);
    };
    /** @deprecated This is an internal implementation detail, do not use. */
    TimeoutWithSubscriber.prototype._unsubscribe = function () {
        this.action = null;
        this.scheduler = null;
        this.withObservable = null;
    };
    return TimeoutWithSubscriber;
}(OuterSubscriber_1.OuterSubscriber));

},{"../OuterSubscriber":288,"../scheduler/async":444,"../util/isDate":460,"../util/subscribeToResult":478}],422:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var async_1 = require("../scheduler/async");
var map_1 = require("./map");
/**
 * @param scheduler
 * @return {Observable<Timestamp<any>>|WebSocketSubject<T>|Observable<T>}
 * @method timestamp
 * @owner Observable
 */
function timestamp(scheduler) {
    if (scheduler === void 0) { scheduler = async_1.async; }
    return map_1.map(function (value) { return new Timestamp(value, scheduler.now()); });
    // return (source: Observable<T>) => source.lift(new TimestampOperator(scheduler));
}
exports.timestamp = timestamp;
var Timestamp = /** @class */ (function () {
    function Timestamp(value, timestamp) {
        this.value = value;
        this.timestamp = timestamp;
    }
    return Timestamp;
}());
exports.Timestamp = Timestamp;

},{"../scheduler/async":444,"./map":368}],423:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var reduce_1 = require("./reduce");
function toArrayReducer(arr, item, index) {
    if (index === 0) {
        return [item];
    }
    arr.push(item);
    return arr;
}
function toArray() {
    return reduce_1.reduce(toArrayReducer, []);
}
exports.toArray = toArray;

},{"./reduce":389}],424:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Subject_1 = require("../Subject");
var OuterSubscriber_1 = require("../OuterSubscriber");
var subscribeToResult_1 = require("../util/subscribeToResult");
/**
 * Branch out the source Observable values as a nested Observable whenever
 * `windowBoundaries` emits.
 *
 * <span class="informal">It's like {@link buffer}, but emits a nested Observable
 * instead of an array.</span>
 *
 * <img src="./img/window.png" width="100%">
 *
 * Returns an Observable that emits windows of items it collects from the source
 * Observable. The output Observable emits connected, non-overlapping
 * windows. It emits the current window and opens a new one whenever the
 * Observable `windowBoundaries` emits an item. Because each window is an
 * Observable, the output is a higher-order Observable.
 *
 * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var interval = Rx.Observable.interval(1000);
 * var result = clicks.window(interval)
 *   .map(win => win.take(2)) // each window has at most 2 emissions
 *   .mergeAll(); // flatten the Observable-of-Observables
 * result.subscribe(x => my_console_log(x));
 *
 * @see {@link windowCount}
 * @see {@link windowTime}
 * @see {@link windowToggle}
 * @see {@link windowWhen}
 * @see {@link buffer}
 *
 * @param {Observable<any>} windowBoundaries An Observable that completes the
 * previous window and starts a new window.
 * @return {Observable<Observable<T>>} An Observable of windows, which are
 * Observables emitting values of the source Observable.
 * @method window
 * @owner Observable
 */
function window(windowBoundaries) {
    return function windowOperatorFunction(source) {
        return source.lift(new WindowOperator(windowBoundaries));
    };
}
exports.window = window;
var WindowOperator = /** @class */ (function () {
    function WindowOperator(windowBoundaries) {
        this.windowBoundaries = windowBoundaries;
    }
    WindowOperator.prototype.call = function (subscriber, source) {
        var windowSubscriber = new WindowSubscriber(subscriber);
        var sourceSubscription = source.subscribe(windowSubscriber);
        if (!sourceSubscription.closed) {
            windowSubscriber.add(subscribeToResult_1.subscribeToResult(windowSubscriber, this.windowBoundaries));
        }
        return sourceSubscription;
    };
    return WindowOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var WindowSubscriber = /** @class */ (function (_super) {
    __extends(WindowSubscriber, _super);
    function WindowSubscriber(destination) {
        var _this = _super.call(this, destination) || this;
        _this.window = new Subject_1.Subject();
        destination.next(_this.window);
        return _this;
    }
    WindowSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.openWindow();
    };
    WindowSubscriber.prototype.notifyError = function (error, innerSub) {
        this._error(error);
    };
    WindowSubscriber.prototype.notifyComplete = function (innerSub) {
        this._complete();
    };
    WindowSubscriber.prototype._next = function (value) {
        this.window.next(value);
    };
    WindowSubscriber.prototype._error = function (err) {
        this.window.error(err);
        this.destination.error(err);
    };
    WindowSubscriber.prototype._complete = function () {
        this.window.complete();
        this.destination.complete();
    };
    /** @deprecated This is an internal implementation detail, do not use. */
    WindowSubscriber.prototype._unsubscribe = function () {
        this.window = null;
    };
    WindowSubscriber.prototype.openWindow = function () {
        var prevWindow = this.window;
        if (prevWindow) {
            prevWindow.complete();
        }
        var destination = this.destination;
        var newWindow = this.window = new Subject_1.Subject();
        destination.next(newWindow);
    };
    return WindowSubscriber;
}(OuterSubscriber_1.OuterSubscriber));

},{"../OuterSubscriber":288,"../Subject":291,"../util/subscribeToResult":478}],425:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Subscriber_1 = require("../Subscriber");
var Subject_1 = require("../Subject");
/**
 * Branch out the source Observable values as a nested Observable with each
 * nested Observable emitting at most `windowSize` values.
 *
 * <span class="informal">It's like {@link bufferCount}, but emits a nested
 * Observable instead of an array.</span>
 *
 * <img src="./img/windowCount.png" width="100%">
 *
 * Returns an Observable that emits windows of items it collects from the source
 * Observable. The output Observable emits windows every `startWindowEvery`
 * items, each containing no more than `windowSize` items. When the source
 * Observable completes or encounters an error, the output Observable emits
 * the current window and propagates the notification from the source
 * Observable. If `startWindowEvery` is not provided, then new windows are
 * started immediately at the start of the source and when each window completes
 * with size `windowSize`.
 *
 * @example <caption>Ignore every 3rd click event, starting from the first one</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.windowCount(3)
 *   .map(win => win.skip(1)) // skip first of every 3 clicks
 *   .mergeAll(); // flatten the Observable-of-Observables
 * result.subscribe(x => my_console_log(x));
 *
 * @example <caption>Ignore every 3rd click event, starting from the third one</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.windowCount(2, 3)
 *   .mergeAll(); // flatten the Observable-of-Observables
 * result.subscribe(x => my_console_log(x));
 *
 * @see {@link window}
 * @see {@link windowTime}
 * @see {@link windowToggle}
 * @see {@link windowWhen}
 * @see {@link bufferCount}
 *
 * @param {number} windowSize The maximum number of values emitted by each
 * window.
 * @param {number} [startWindowEvery] Interval at which to start a new window.
 * For example if `startWindowEvery` is `2`, then a new window will be started
 * on every other value from the source. A new window is started at the
 * beginning of the source by default.
 * @return {Observable<Observable<T>>} An Observable of windows, which in turn
 * are Observable of values.
 * @method windowCount
 * @owner Observable
 */
function windowCount(windowSize, startWindowEvery) {
    if (startWindowEvery === void 0) { startWindowEvery = 0; }
    return function windowCountOperatorFunction(source) {
        return source.lift(new WindowCountOperator(windowSize, startWindowEvery));
    };
}
exports.windowCount = windowCount;
var WindowCountOperator = /** @class */ (function () {
    function WindowCountOperator(windowSize, startWindowEvery) {
        this.windowSize = windowSize;
        this.startWindowEvery = startWindowEvery;
    }
    WindowCountOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));
    };
    return WindowCountOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var WindowCountSubscriber = /** @class */ (function (_super) {
    __extends(WindowCountSubscriber, _super);
    function WindowCountSubscriber(destination, windowSize, startWindowEvery) {
        var _this = _super.call(this, destination) || this;
        _this.destination = destination;
        _this.windowSize = windowSize;
        _this.startWindowEvery = startWindowEvery;
        _this.windows = [new Subject_1.Subject()];
        _this.count = 0;
        destination.next(_this.windows[0]);
        return _this;
    }
    WindowCountSubscriber.prototype._next = function (value) {
        var startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;
        var destination = this.destination;
        var windowSize = this.windowSize;
        var windows = this.windows;
        var len = windows.length;
        for (var i = 0; i < len && !this.closed; i++) {
            windows[i].next(value);
        }
        var c = this.count - windowSize + 1;
        if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {
            windows.shift().complete();
        }
        if (++this.count % startWindowEvery === 0 && !this.closed) {
            var window_1 = new Subject_1.Subject();
            windows.push(window_1);
            destination.next(window_1);
        }
    };
    WindowCountSubscriber.prototype._error = function (err) {
        var windows = this.windows;
        if (windows) {
            while (windows.length > 0 && !this.closed) {
                windows.shift().error(err);
            }
        }
        this.destination.error(err);
    };
    WindowCountSubscriber.prototype._complete = function () {
        var windows = this.windows;
        if (windows) {
            while (windows.length > 0 && !this.closed) {
                windows.shift().complete();
            }
        }
        this.destination.complete();
    };
    WindowCountSubscriber.prototype._unsubscribe = function () {
        this.count = 0;
        this.windows = null;
    };
    return WindowCountSubscriber;
}(Subscriber_1.Subscriber));

},{"../Subject":291,"../Subscriber":293}],426:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Subject_1 = require("../Subject");
var async_1 = require("../scheduler/async");
var Subscriber_1 = require("../Subscriber");
var isNumeric_1 = require("../util/isNumeric");
var isScheduler_1 = require("../util/isScheduler");
function windowTime(windowTimeSpan) {
    var scheduler = async_1.async;
    var windowCreationInterval = null;
    var maxWindowSize = Number.POSITIVE_INFINITY;
    if (isScheduler_1.isScheduler(arguments[3])) {
        scheduler = arguments[3];
    }
    if (isScheduler_1.isScheduler(arguments[2])) {
        scheduler = arguments[2];
    }
    else if (isNumeric_1.isNumeric(arguments[2])) {
        maxWindowSize = arguments[2];
    }
    if (isScheduler_1.isScheduler(arguments[1])) {
        scheduler = arguments[1];
    }
    else if (isNumeric_1.isNumeric(arguments[1])) {
        windowCreationInterval = arguments[1];
    }
    return function windowTimeOperatorFunction(source) {
        return source.lift(new WindowTimeOperator(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler));
    };
}
exports.windowTime = windowTime;
var WindowTimeOperator = /** @class */ (function () {
    function WindowTimeOperator(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler) {
        this.windowTimeSpan = windowTimeSpan;
        this.windowCreationInterval = windowCreationInterval;
        this.maxWindowSize = maxWindowSize;
        this.scheduler = scheduler;
    }
    WindowTimeOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new WindowTimeSubscriber(subscriber, this.windowTimeSpan, this.windowCreationInterval, this.maxWindowSize, this.scheduler));
    };
    return WindowTimeOperator;
}());
var CountedSubject = /** @class */ (function (_super) {
    __extends(CountedSubject, _super);
    function CountedSubject() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._numberOfNextedValues = 0;
        return _this;
    }
    CountedSubject.prototype.next = function (value) {
        this._numberOfNextedValues++;
        _super.prototype.next.call(this, value);
    };
    Object.defineProperty(CountedSubject.prototype, "numberOfNextedValues", {
        get: function () {
            return this._numberOfNextedValues;
        },
        enumerable: true,
        configurable: true
    });
    return CountedSubject;
}(Subject_1.Subject));
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var WindowTimeSubscriber = /** @class */ (function (_super) {
    __extends(WindowTimeSubscriber, _super);
    function WindowTimeSubscriber(destination, windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler) {
        var _this = _super.call(this, destination) || this;
        _this.destination = destination;
        _this.windowTimeSpan = windowTimeSpan;
        _this.windowCreationInterval = windowCreationInterval;
        _this.maxWindowSize = maxWindowSize;
        _this.scheduler = scheduler;
        _this.windows = [];
        var window = _this.openWindow();
        if (windowCreationInterval !== null && windowCreationInterval >= 0) {
            var closeState = { subscriber: _this, window: window, context: null };
            var creationState = { windowTimeSpan: windowTimeSpan, windowCreationInterval: windowCreationInterval, subscriber: _this, scheduler: scheduler };
            _this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));
            _this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));
        }
        else {
            var timeSpanOnlyState = { subscriber: _this, window: window, windowTimeSpan: windowTimeSpan };
            _this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));
        }
        return _this;
    }
    WindowTimeSubscriber.prototype._next = function (value) {
        var windows = this.windows;
        var len = windows.length;
        for (var i = 0; i < len; i++) {
            var window_1 = windows[i];
            if (!window_1.closed) {
                window_1.next(value);
                if (window_1.numberOfNextedValues >= this.maxWindowSize) {
                    this.closeWindow(window_1);
                }
            }
        }
    };
    WindowTimeSubscriber.prototype._error = function (err) {
        var windows = this.windows;
        while (windows.length > 0) {
            windows.shift().error(err);
        }
        this.destination.error(err);
    };
    WindowTimeSubscriber.prototype._complete = function () {
        var windows = this.windows;
        while (windows.length > 0) {
            var window_2 = windows.shift();
            if (!window_2.closed) {
                window_2.complete();
            }
        }
        this.destination.complete();
    };
    WindowTimeSubscriber.prototype.openWindow = function () {
        var window = new CountedSubject();
        this.windows.push(window);
        var destination = this.destination;
        destination.next(window);
        return window;
    };
    WindowTimeSubscriber.prototype.closeWindow = function (window) {
        window.complete();
        var windows = this.windows;
        windows.splice(windows.indexOf(window), 1);
    };
    return WindowTimeSubscriber;
}(Subscriber_1.Subscriber));
function dispatchWindowTimeSpanOnly(state) {
    var subscriber = state.subscriber, windowTimeSpan = state.windowTimeSpan, window = state.window;
    if (window) {
        subscriber.closeWindow(window);
    }
    state.window = subscriber.openWindow();
    this.schedule(state, windowTimeSpan);
}
function dispatchWindowCreation(state) {
    var windowTimeSpan = state.windowTimeSpan, subscriber = state.subscriber, scheduler = state.scheduler, windowCreationInterval = state.windowCreationInterval;
    var window = subscriber.openWindow();
    var action = this;
    var context = { action: action, subscription: null };
    var timeSpanState = { subscriber: subscriber, window: window, context: context };
    context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);
    action.add(context.subscription);
    action.schedule(state, windowCreationInterval);
}
function dispatchWindowClose(state) {
    var subscriber = state.subscriber, window = state.window, context = state.context;
    if (context && context.action && context.subscription) {
        context.action.remove(context.subscription);
    }
    subscriber.closeWindow(window);
}

},{"../Subject":291,"../Subscriber":293,"../scheduler/async":444,"../util/isNumeric":464,"../util/isScheduler":468}],427:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Subject_1 = require("../Subject");
var Subscription_1 = require("../Subscription");
var tryCatch_1 = require("../util/tryCatch");
var errorObject_1 = require("../util/errorObject");
var OuterSubscriber_1 = require("../OuterSubscriber");
var subscribeToResult_1 = require("../util/subscribeToResult");
/**
 * Branch out the source Observable values as a nested Observable starting from
 * an emission from `openings` and ending when the output of `closingSelector`
 * emits.
 *
 * <span class="informal">It's like {@link bufferToggle}, but emits a nested
 * Observable instead of an array.</span>
 *
 * <img src="./img/windowToggle.png" width="100%">
 *
 * Returns an Observable that emits windows of items it collects from the source
 * Observable. The output Observable emits windows that contain those items
 * emitted by the source Observable between the time when the `openings`
 * Observable emits an item and when the Observable returned by
 * `closingSelector` emits an item.
 *
 * @example <caption>Every other second, emit the click events from the next 500ms</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var openings = Rx.Observable.interval(1000);
 * var result = clicks.windowToggle(openings, i =>
 *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()
 * ).mergeAll();
 * result.subscribe(x => my_console_log(x));
 *
 * @see {@link window}
 * @see {@link windowCount}
 * @see {@link windowTime}
 * @see {@link windowWhen}
 * @see {@link bufferToggle}
 *
 * @param {Observable<O>} openings An observable of notifications to start new
 * windows.
 * @param {function(value: O): Observable} closingSelector A function that takes
 * the value emitted by the `openings` observable and returns an Observable,
 * which, when it emits (either `next` or `complete`), signals that the
 * associated window should complete.
 * @return {Observable<Observable<T>>} An observable of windows, which in turn
 * are Observables.
 * @method windowToggle
 * @owner Observable
 */
function windowToggle(openings, closingSelector) {
    return function (source) { return source.lift(new WindowToggleOperator(openings, closingSelector)); };
}
exports.windowToggle = windowToggle;
var WindowToggleOperator = /** @class */ (function () {
    function WindowToggleOperator(openings, closingSelector) {
        this.openings = openings;
        this.closingSelector = closingSelector;
    }
    WindowToggleOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new WindowToggleSubscriber(subscriber, this.openings, this.closingSelector));
    };
    return WindowToggleOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var WindowToggleSubscriber = /** @class */ (function (_super) {
    __extends(WindowToggleSubscriber, _super);
    function WindowToggleSubscriber(destination, openings, closingSelector) {
        var _this = _super.call(this, destination) || this;
        _this.openings = openings;
        _this.closingSelector = closingSelector;
        _this.contexts = [];
        _this.add(_this.openSubscription = subscribeToResult_1.subscribeToResult(_this, openings, openings));
        return _this;
    }
    WindowToggleSubscriber.prototype._next = function (value) {
        var contexts = this.contexts;
        if (contexts) {
            var len = contexts.length;
            for (var i = 0; i < len; i++) {
                contexts[i].window.next(value);
            }
        }
    };
    WindowToggleSubscriber.prototype._error = function (err) {
        var contexts = this.contexts;
        this.contexts = null;
        if (contexts) {
            var len = contexts.length;
            var index = -1;
            while (++index < len) {
                var context_1 = contexts[index];
                context_1.window.error(err);
                context_1.subscription.unsubscribe();
            }
        }
        _super.prototype._error.call(this, err);
    };
    WindowToggleSubscriber.prototype._complete = function () {
        var contexts = this.contexts;
        this.contexts = null;
        if (contexts) {
            var len = contexts.length;
            var index = -1;
            while (++index < len) {
                var context_2 = contexts[index];
                context_2.window.complete();
                context_2.subscription.unsubscribe();
            }
        }
        _super.prototype._complete.call(this);
    };
    /** @deprecated This is an internal implementation detail, do not use. */
    WindowToggleSubscriber.prototype._unsubscribe = function () {
        var contexts = this.contexts;
        this.contexts = null;
        if (contexts) {
            var len = contexts.length;
            var index = -1;
            while (++index < len) {
                var context_3 = contexts[index];
                context_3.window.unsubscribe();
                context_3.subscription.unsubscribe();
            }
        }
    };
    WindowToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        if (outerValue === this.openings) {
            var closingSelector = this.closingSelector;
            var closingNotifier = tryCatch_1.tryCatch(closingSelector)(innerValue);
            if (closingNotifier === errorObject_1.errorObject) {
                return this.error(errorObject_1.errorObject.e);
            }
            else {
                var window_1 = new Subject_1.Subject();
                var subscription = new Subscription_1.Subscription();
                var context_4 = { window: window_1, subscription: subscription };
                this.contexts.push(context_4);
                var innerSubscription = subscribeToResult_1.subscribeToResult(this, closingNotifier, context_4);
                if (innerSubscription.closed) {
                    this.closeWindow(this.contexts.length - 1);
                }
                else {
                    innerSubscription.context = context_4;
                    subscription.add(innerSubscription);
                }
                this.destination.next(window_1);
            }
        }
        else {
            this.closeWindow(this.contexts.indexOf(outerValue));
        }
    };
    WindowToggleSubscriber.prototype.notifyError = function (err) {
        this.error(err);
    };
    WindowToggleSubscriber.prototype.notifyComplete = function (inner) {
        if (inner !== this.openSubscription) {
            this.closeWindow(this.contexts.indexOf(inner.context));
        }
    };
    WindowToggleSubscriber.prototype.closeWindow = function (index) {
        if (index === -1) {
            return;
        }
        var contexts = this.contexts;
        var context = contexts[index];
        var window = context.window, subscription = context.subscription;
        contexts.splice(index, 1);
        window.complete();
        subscription.unsubscribe();
    };
    return WindowToggleSubscriber;
}(OuterSubscriber_1.OuterSubscriber));

},{"../OuterSubscriber":288,"../Subject":291,"../Subscription":294,"../util/errorObject":455,"../util/subscribeToResult":478,"../util/tryCatch":480}],428:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Subject_1 = require("../Subject");
var tryCatch_1 = require("../util/tryCatch");
var errorObject_1 = require("../util/errorObject");
var OuterSubscriber_1 = require("../OuterSubscriber");
var subscribeToResult_1 = require("../util/subscribeToResult");
/**
 * Branch out the source Observable values as a nested Observable using a
 * factory function of closing Observables to determine when to start a new
 * window.
 *
 * <span class="informal">It's like {@link bufferWhen}, but emits a nested
 * Observable instead of an array.</span>
 *
 * <img src="./img/windowWhen.png" width="100%">
 *
 * Returns an Observable that emits windows of items it collects from the source
 * Observable. The output Observable emits connected, non-overlapping windows.
 * It emits the current window and opens a new one whenever the Observable
 * produced by the specified `closingSelector` function emits an item. The first
 * window is opened immediately when subscribing to the output Observable.
 *
 * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks
 *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))
 *   .map(win => win.take(2)) // each window has at most 2 emissions
 *   .mergeAll(); // flatten the Observable-of-Observables
 * result.subscribe(x => my_console_log(x));
 *
 * @see {@link window}
 * @see {@link windowCount}
 * @see {@link windowTime}
 * @see {@link windowToggle}
 * @see {@link bufferWhen}
 *
 * @param {function(): Observable} closingSelector A function that takes no
 * arguments and returns an Observable that signals (on either `next` or
 * `complete`) when to close the previous window and start a new one.
 * @return {Observable<Observable<T>>} An observable of windows, which in turn
 * are Observables.
 * @method windowWhen
 * @owner Observable
 */
function windowWhen(closingSelector) {
    return function windowWhenOperatorFunction(source) {
        return source.lift(new WindowOperator(closingSelector));
    };
}
exports.windowWhen = windowWhen;
var WindowOperator = /** @class */ (function () {
    function WindowOperator(closingSelector) {
        this.closingSelector = closingSelector;
    }
    WindowOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new WindowSubscriber(subscriber, this.closingSelector));
    };
    return WindowOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var WindowSubscriber = /** @class */ (function (_super) {
    __extends(WindowSubscriber, _super);
    function WindowSubscriber(destination, closingSelector) {
        var _this = _super.call(this, destination) || this;
        _this.destination = destination;
        _this.closingSelector = closingSelector;
        _this.openWindow();
        return _this;
    }
    WindowSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.openWindow(innerSub);
    };
    WindowSubscriber.prototype.notifyError = function (error, innerSub) {
        this._error(error);
    };
    WindowSubscriber.prototype.notifyComplete = function (innerSub) {
        this.openWindow(innerSub);
    };
    WindowSubscriber.prototype._next = function (value) {
        this.window.next(value);
    };
    WindowSubscriber.prototype._error = function (err) {
        this.window.error(err);
        this.destination.error(err);
        this.unsubscribeClosingNotification();
    };
    WindowSubscriber.prototype._complete = function () {
        this.window.complete();
        this.destination.complete();
        this.unsubscribeClosingNotification();
    };
    WindowSubscriber.prototype.unsubscribeClosingNotification = function () {
        if (this.closingNotification) {
            this.closingNotification.unsubscribe();
        }
    };
    WindowSubscriber.prototype.openWindow = function (innerSub) {
        if (innerSub === void 0) { innerSub = null; }
        if (innerSub) {
            this.remove(innerSub);
            innerSub.unsubscribe();
        }
        var prevWindow = this.window;
        if (prevWindow) {
            prevWindow.complete();
        }
        var window = this.window = new Subject_1.Subject();
        this.destination.next(window);
        var closingNotifier = tryCatch_1.tryCatch(this.closingSelector)();
        if (closingNotifier === errorObject_1.errorObject) {
            var err = errorObject_1.errorObject.e;
            this.destination.error(err);
            this.window.error(err);
        }
        else {
            this.add(this.closingNotification = subscribeToResult_1.subscribeToResult(this, closingNotifier));
        }
    };
    return WindowSubscriber;
}(OuterSubscriber_1.OuterSubscriber));

},{"../OuterSubscriber":288,"../Subject":291,"../util/errorObject":455,"../util/subscribeToResult":478,"../util/tryCatch":480}],429:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var OuterSubscriber_1 = require("../OuterSubscriber");
var subscribeToResult_1 = require("../util/subscribeToResult");
/* tslint:enable:max-line-length */
/**
 * Combines the source Observable with other Observables to create an Observable
 * whose values are calculated from the latest values of each, only when the
 * source emits.
 *
 * <span class="informal">Whenever the source Observable emits a value, it
 * computes a formula using that value plus the latest values from other input
 * Observables, then emits the output of that formula.</span>
 *
 * <img src="./img/withLatestFrom.png" width="100%">
 *
 * `withLatestFrom` combines each value from the source Observable (the
 * instance) with the latest values from the other input Observables only when
 * the source emits a value, optionally using a `project` function to determine
 * the value to be emitted on the output Observable. All input Observables must
 * emit at least one value before the output Observable will emit a value.
 *
 * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var timer = Rx.Observable.interval(1000);
 * var result = clicks.withLatestFrom(timer);
 * result.subscribe(x => my_console_log(x));
 *
 * @see {@link combineLatest}
 *
 * @param {ObservableInput} other An input Observable to combine with the source
 * Observable. More than one input Observables may be given as argument.
 * @param {Function} [project] Projection function for combining values
 * together. Receives all values in order of the Observables passed, where the
 * first parameter is a value from the source Observable. (e.g.
 * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not
 * passed, arrays will be emitted on the output Observable.
 * @return {Observable} An Observable of projected values from the most recent
 * values from each input Observable, or an array of the most recent values from
 * each input Observable.
 * @method withLatestFrom
 * @owner Observable
 */
function withLatestFrom() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    return function (source) {
        var project;
        if (typeof args[args.length - 1] === 'function') {
            project = args.pop();
        }
        var observables = args;
        return source.lift(new WithLatestFromOperator(observables, project));
    };
}
exports.withLatestFrom = withLatestFrom;
var WithLatestFromOperator = /** @class */ (function () {
    function WithLatestFromOperator(observables, project) {
        this.observables = observables;
        this.project = project;
    }
    WithLatestFromOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));
    };
    return WithLatestFromOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var WithLatestFromSubscriber = /** @class */ (function (_super) {
    __extends(WithLatestFromSubscriber, _super);
    function WithLatestFromSubscriber(destination, observables, project) {
        var _this = _super.call(this, destination) || this;
        _this.observables = observables;
        _this.project = project;
        _this.toRespond = [];
        var len = observables.length;
        _this.values = new Array(len);
        for (var i = 0; i < len; i++) {
            _this.toRespond.push(i);
        }
        for (var i = 0; i < len; i++) {
            var observable = observables[i];
            _this.add(subscribeToResult_1.subscribeToResult(_this, observable, observable, i));
        }
        return _this;
    }
    WithLatestFromSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.values[outerIndex] = innerValue;
        var toRespond = this.toRespond;
        if (toRespond.length > 0) {
            var found = toRespond.indexOf(outerIndex);
            if (found !== -1) {
                toRespond.splice(found, 1);
            }
        }
    };
    WithLatestFromSubscriber.prototype.notifyComplete = function () {
        // noop
    };
    WithLatestFromSubscriber.prototype._next = function (value) {
        if (this.toRespond.length === 0) {
            var args = [value].concat(this.values);
            if (this.project) {
                this._tryProject(args);
            }
            else {
                this.destination.next(args);
            }
        }
    };
    WithLatestFromSubscriber.prototype._tryProject = function (args) {
        var result;
        try {
            result = this.project.apply(this, args);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.destination.next(result);
    };
    return WithLatestFromSubscriber;
}(OuterSubscriber_1.OuterSubscriber));

},{"../OuterSubscriber":288,"../util/subscribeToResult":478}],430:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var zip_1 = require("../observable/zip");
/* tslint:enable:max-line-length */
/**
 * @deprecated Deprecated in favor of static zip.
 */
function zip() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i] = arguments[_i];
    }
    return function zipOperatorFunction(source) {
        return source.lift.call(zip_1.zip.apply(void 0, [source].concat(observables)));
    };
}
exports.zip = zip;

},{"../observable/zip":328}],431:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var zip_1 = require("../observable/zip");
function zipAll(project) {
    return function (source) { return source.lift(new zip_1.ZipOperator(project)); };
}
exports.zipAll = zipAll;

},{"../observable/zip":328}],432:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Subscription_1 = require("../Subscription");
/**
 * A unit of work to be executed in a {@link Scheduler}. An action is typically
 * created from within a Scheduler and an RxJS user does not need to concern
 * themselves about creating and manipulating an Action.
 *
 * ```ts
 * class Action<T> extends Subscription {
 *   new (scheduler: Scheduler, work: (state?: T) => void);
 *   schedule(state?: T, delay: number = 0): Subscription;
 * }
 * ```
 *
 * @class Action<T>
 */
var Action = /** @class */ (function (_super) {
    __extends(Action, _super);
    function Action(scheduler, work) {
        return _super.call(this) || this;
    }
    /**
     * Schedules this action on its parent Scheduler for execution. May be passed
     * some context object, `state`. May happen at some point in the future,
     * according to the `delay` parameter, if specified.
     * @param {T} [state] Some contextual data that the `work` function uses when
     * called by the Scheduler.
     * @param {number} [delay] Time to wait before executing the work, where the
     * time unit is implicit and defined by the Scheduler.
     * @return {void}
     */
    Action.prototype.schedule = function (state, delay) {
        if (delay === void 0) { delay = 0; }
        return this;
    };
    return Action;
}(Subscription_1.Subscription));
exports.Action = Action;

},{"../Subscription":294}],433:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var AsyncAction_1 = require("./AsyncAction");
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var AnimationFrameAction = /** @class */ (function (_super) {
    __extends(AnimationFrameAction, _super);
    function AnimationFrameAction(scheduler, work) {
        var _this = _super.call(this, scheduler, work) || this;
        _this.scheduler = scheduler;
        _this.work = work;
        return _this;
    }
    AnimationFrameAction.prototype.requestAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) { delay = 0; }
        // If delay is greater than 0, request as an async action.
        if (delay !== null && delay > 0) {
            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
        }
        // Push the action to the end of the scheduler queue.
        scheduler.actions.push(this);
        // If an animation frame has already been requested, don't request another
        // one. If an animation frame hasn't been requested yet, request one. Return
        // the current animation frame request id.
        return scheduler.scheduled || (scheduler.scheduled = requestAnimationFrame(function () { return scheduler.flush(null); }));
    };
    AnimationFrameAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) { delay = 0; }
        // If delay exists and is greater than 0, or if the delay is null (the
        // action wasn't rescheduled) but was originally scheduled as an async
        // action, then recycle as an async action.
        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {
            return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
        }
        // If the scheduler queue is empty, cancel the requested animation frame and
        // set the scheduled flag to undefined so the next AnimationFrameAction will
        // request its own.
        if (scheduler.actions.length === 0) {
            cancelAnimationFrame(id);
            scheduler.scheduled = undefined;
        }
        // Return undefined so the action knows to request a new async id if it's rescheduled.
        return undefined;
    };
    return AnimationFrameAction;
}(AsyncAction_1.AsyncAction));
exports.AnimationFrameAction = AnimationFrameAction;

},{"./AsyncAction":437}],434:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var AsyncScheduler_1 = require("./AsyncScheduler");
var AnimationFrameScheduler = /** @class */ (function (_super) {
    __extends(AnimationFrameScheduler, _super);
    function AnimationFrameScheduler() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AnimationFrameScheduler.prototype.flush = function (action) {
        this.active = true;
        this.scheduled = undefined;
        var actions = this.actions;
        var error;
        var index = -1;
        var count = actions.length;
        action = action || actions.shift();
        do {
            if (error = action.execute(action.state, action.delay)) {
                break;
            }
        } while (++index < count && (action = actions.shift()));
        this.active = false;
        if (error) {
            while (++index < count && (action = actions.shift())) {
                action.unsubscribe();
            }
            throw error;
        }
    };
    return AnimationFrameScheduler;
}(AsyncScheduler_1.AsyncScheduler));
exports.AnimationFrameScheduler = AnimationFrameScheduler;

},{"./AsyncScheduler":438}],435:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Immediate_1 = require("../util/Immediate");
var AsyncAction_1 = require("./AsyncAction");
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var AsapAction = /** @class */ (function (_super) {
    __extends(AsapAction, _super);
    function AsapAction(scheduler, work) {
        var _this = _super.call(this, scheduler, work) || this;
        _this.scheduler = scheduler;
        _this.work = work;
        return _this;
    }
    AsapAction.prototype.requestAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) { delay = 0; }
        // If delay is greater than 0, request as an async action.
        if (delay !== null && delay > 0) {
            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
        }
        // Push the action to the end of the scheduler queue.
        scheduler.actions.push(this);
        // If a microtask has already been scheduled, don't schedule another
        // one. If a microtask hasn't been scheduled yet, schedule one now. Return
        // the current scheduled microtask id.
        return scheduler.scheduled || (scheduler.scheduled = Immediate_1.Immediate.setImmediate(scheduler.flush.bind(scheduler, null)));
    };
    AsapAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) { delay = 0; }
        // If delay exists and is greater than 0, or if the delay is null (the
        // action wasn't rescheduled) but was originally scheduled as an async
        // action, then recycle as an async action.
        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {
            return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
        }
        // If the scheduler queue is empty, cancel the requested microtask and
        // set the scheduled flag to undefined so the next AsapAction will schedule
        // its own.
        if (scheduler.actions.length === 0) {
            Immediate_1.Immediate.clearImmediate(id);
            scheduler.scheduled = undefined;
        }
        // Return undefined so the action knows to request a new async id if it's rescheduled.
        return undefined;
    };
    return AsapAction;
}(AsyncAction_1.AsyncAction));
exports.AsapAction = AsapAction;

},{"../util/Immediate":451,"./AsyncAction":437}],436:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var AsyncScheduler_1 = require("./AsyncScheduler");
var AsapScheduler = /** @class */ (function (_super) {
    __extends(AsapScheduler, _super);
    function AsapScheduler() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AsapScheduler.prototype.flush = function (action) {
        this.active = true;
        this.scheduled = undefined;
        var actions = this.actions;
        var error;
        var index = -1;
        var count = actions.length;
        action = action || actions.shift();
        do {
            if (error = action.execute(action.state, action.delay)) {
                break;
            }
        } while (++index < count && (action = actions.shift()));
        this.active = false;
        if (error) {
            while (++index < count && (action = actions.shift())) {
                action.unsubscribe();
            }
            throw error;
        }
    };
    return AsapScheduler;
}(AsyncScheduler_1.AsyncScheduler));
exports.AsapScheduler = AsapScheduler;

},{"./AsyncScheduler":438}],437:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Action_1 = require("./Action");
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var AsyncAction = /** @class */ (function (_super) {
    __extends(AsyncAction, _super);
    function AsyncAction(scheduler, work) {
        var _this = _super.call(this, scheduler, work) || this;
        _this.scheduler = scheduler;
        _this.work = work;
        _this.pending = false;
        return _this;
    }
    AsyncAction.prototype.schedule = function (state, delay) {
        if (delay === void 0) { delay = 0; }
        if (this.closed) {
            return this;
        }
        // Always replace the current state with the new state.
        this.state = state;
        var id = this.id;
        var scheduler = this.scheduler;
        //
        // Important implementation note:
        //
        // Actions only execute once by default, unless rescheduled from within the
        // scheduled callback. This allows us to implement single and repeat
        // actions via the same code path, without adding API surface area, as well
        // as mimic traditional recursion but across asynchronous boundaries.
        //
        // However, JS runtimes and timers distinguish between intervals achieved by
        // serial `setTimeout` calls vs. a single `setInterval` call. An interval of
        // serial `setTimeout` calls can be individually delayed, which delays
        // scheduling the next `setTimeout`, and so on. `setInterval` attempts to
        // guarantee the interval callback will be invoked more precisely to the
        // interval period, regardless of load.
        //
        // Therefore, we use `setInterval` to schedule single and repeat actions.
        // If the action reschedules itself with the same delay, the interval is not
        // canceled. If the action doesn't reschedule, or reschedules with a
        // different delay, the interval will be canceled after scheduled callback
        // execution.
        //
        if (id != null) {
            this.id = this.recycleAsyncId(scheduler, id, delay);
        }
        // Set the pending flag indicating that this action has been scheduled, or
        // has recursively rescheduled itself.
        this.pending = true;
        this.delay = delay;
        // If this action has already an async Id, don't request a new one.
        this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);
        return this;
    };
    AsyncAction.prototype.requestAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) { delay = 0; }
        return setInterval(scheduler.flush.bind(scheduler, this), delay);
    };
    AsyncAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) { delay = 0; }
        // If this action is rescheduled with the same delay time, don't clear the interval id.
        if (delay !== null && this.delay === delay && this.pending === false) {
            return id;
        }
        // Otherwise, if the action's delay time is different from the current delay,
        // or the action has been rescheduled before it's executed, clear the interval id
        return clearInterval(id) && undefined || undefined;
    };
    /**
     * Immediately executes this action and the `work` it contains.
     * @return {any}
     */
    AsyncAction.prototype.execute = function (state, delay) {
        if (this.closed) {
            return new Error('executing a cancelled action');
        }
        this.pending = false;
        var error = this._execute(state, delay);
        if (error) {
            return error;
        }
        else if (this.pending === false && this.id != null) {
            // Dequeue if the action didn't reschedule itself. Don't call
            // unsubscribe(), because the action could reschedule later.
            // For example:
            // ```
            // scheduler.schedule(function doWork(counter) {
            //   /* ... I'm a busy worker bee ... */
            //   var originalAction = this;
            //   /* wait 100ms before rescheduling the action */
            //   setTimeout(function () {
            //     originalAction.schedule(counter + 1);
            //   }, 100);
            // }, 1000);
            // ```
            this.id = this.recycleAsyncId(this.scheduler, this.id, null);
        }
    };
    AsyncAction.prototype._execute = function (state, delay) {
        var errored = false;
        var errorValue = undefined;
        try {
            this.work(state);
        }
        catch (e) {
            errored = true;
            errorValue = !!e && e || new Error(e);
        }
        if (errored) {
            this.unsubscribe();
            return errorValue;
        }
    };
    /** @deprecated This is an internal implementation detail, do not use. */
    AsyncAction.prototype._unsubscribe = function () {
        var id = this.id;
        var scheduler = this.scheduler;
        var actions = scheduler.actions;
        var index = actions.indexOf(this);
        this.work = null;
        this.state = null;
        this.pending = false;
        this.scheduler = null;
        if (index !== -1) {
            actions.splice(index, 1);
        }
        if (id != null) {
            this.id = this.recycleAsyncId(scheduler, id, null);
        }
        this.delay = null;
    };
    return AsyncAction;
}(Action_1.Action));
exports.AsyncAction = AsyncAction;

},{"./Action":432}],438:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Scheduler_1 = require("../Scheduler");
var AsyncScheduler = /** @class */ (function (_super) {
    __extends(AsyncScheduler, _super);
    function AsyncScheduler(SchedulerAction, now) {
        if (now === void 0) { now = Scheduler_1.Scheduler.now; }
        var _this = _super.call(this, SchedulerAction, function () {
            if (AsyncScheduler.delegate && AsyncScheduler.delegate !== _this) {
                return AsyncScheduler.delegate.now();
            }
            else {
                return now();
            }
        }) || this;
        _this.actions = [];
        /**
         * A flag to indicate whether the Scheduler is currently executing a batch of
         * queued actions.
         * @type {boolean}
         * @deprecated internal use only
         */
        _this.active = false;
        /**
         * An internal ID used to track the latest asynchronous task such as those
         * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and
         * others.
         * @type {any}
         * @deprecated internal use only
         */
        _this.scheduled = undefined;
        return _this;
    }
    AsyncScheduler.prototype.schedule = function (work, delay, state) {
        if (delay === void 0) { delay = 0; }
        if (AsyncScheduler.delegate && AsyncScheduler.delegate !== this) {
            return AsyncScheduler.delegate.schedule(work, delay, state);
        }
        else {
            return _super.prototype.schedule.call(this, work, delay, state);
        }
    };
    AsyncScheduler.prototype.flush = function (action) {
        var actions = this.actions;
        if (this.active) {
            actions.push(action);
            return;
        }
        var error;
        this.active = true;
        do {
            if (error = action.execute(action.state, action.delay)) {
                break;
            }
        } while (action = actions.shift()); // exhaust the scheduler queue
        this.active = false;
        if (error) {
            while (action = actions.shift()) {
                action.unsubscribe();
            }
            throw error;
        }
    };
    return AsyncScheduler;
}(Scheduler_1.Scheduler));
exports.AsyncScheduler = AsyncScheduler;

},{"../Scheduler":290}],439:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var AsyncAction_1 = require("./AsyncAction");
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var QueueAction = /** @class */ (function (_super) {
    __extends(QueueAction, _super);
    function QueueAction(scheduler, work) {
        var _this = _super.call(this, scheduler, work) || this;
        _this.scheduler = scheduler;
        _this.work = work;
        return _this;
    }
    QueueAction.prototype.schedule = function (state, delay) {
        if (delay === void 0) { delay = 0; }
        if (delay > 0) {
            return _super.prototype.schedule.call(this, state, delay);
        }
        this.delay = delay;
        this.state = state;
        this.scheduler.flush(this);
        return this;
    };
    QueueAction.prototype.execute = function (state, delay) {
        return (delay > 0 || this.closed) ?
            _super.prototype.execute.call(this, state, delay) :
            this._execute(state, delay);
    };
    QueueAction.prototype.requestAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) { delay = 0; }
        // If delay exists and is greater than 0, or if the delay is null (the
        // action wasn't rescheduled) but was originally scheduled as an async
        // action, then recycle as an async action.
        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {
            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
        }
        // Otherwise flush the scheduler starting with this action.
        return scheduler.flush(this);
    };
    return QueueAction;
}(AsyncAction_1.AsyncAction));
exports.QueueAction = QueueAction;

},{"./AsyncAction":437}],440:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var AsyncScheduler_1 = require("./AsyncScheduler");
var QueueScheduler = /** @class */ (function (_super) {
    __extends(QueueScheduler, _super);
    function QueueScheduler() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return QueueScheduler;
}(AsyncScheduler_1.AsyncScheduler));
exports.QueueScheduler = QueueScheduler;

},{"./AsyncScheduler":438}],441:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var AsyncAction_1 = require("./AsyncAction");
var AsyncScheduler_1 = require("./AsyncScheduler");
var VirtualTimeScheduler = /** @class */ (function (_super) {
    __extends(VirtualTimeScheduler, _super);
    function VirtualTimeScheduler(SchedulerAction, maxFrames) {
        if (SchedulerAction === void 0) { SchedulerAction = VirtualAction; }
        if (maxFrames === void 0) { maxFrames = Number.POSITIVE_INFINITY; }
        var _this = _super.call(this, SchedulerAction, function () { return _this.frame; }) || this;
        _this.maxFrames = maxFrames;
        _this.frame = 0;
        _this.index = -1;
        return _this;
    }
    /**
     * Prompt the Scheduler to execute all of its queued actions, therefore
     * clearing its queue.
     * @return {void}
     */
    VirtualTimeScheduler.prototype.flush = function () {
        var _a = this, actions = _a.actions, maxFrames = _a.maxFrames;
        var error, action;
        while ((action = actions.shift()) && (this.frame = action.delay) <= maxFrames) {
            if (error = action.execute(action.state, action.delay)) {
                break;
            }
        }
        if (error) {
            while (action = actions.shift()) {
                action.unsubscribe();
            }
            throw error;
        }
    };
    VirtualTimeScheduler.frameTimeFactor = 10;
    return VirtualTimeScheduler;
}(AsyncScheduler_1.AsyncScheduler));
exports.VirtualTimeScheduler = VirtualTimeScheduler;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var VirtualAction = /** @class */ (function (_super) {
    __extends(VirtualAction, _super);
    function VirtualAction(scheduler, work, index) {
        if (index === void 0) { index = scheduler.index += 1; }
        var _this = _super.call(this, scheduler, work) || this;
        _this.scheduler = scheduler;
        _this.work = work;
        _this.index = index;
        _this.active = true;
        _this.index = scheduler.index = index;
        return _this;
    }
    VirtualAction.prototype.schedule = function (state, delay) {
        if (delay === void 0) { delay = 0; }
        if (!this.id) {
            return _super.prototype.schedule.call(this, state, delay);
        }
        this.active = false;
        // If an action is rescheduled, we save allocations by mutating its state,
        // pushing it to the end of the scheduler queue, and recycling the action.
        // But since the VirtualTimeScheduler is used for testing, VirtualActions
        // must be immutable so they can be inspected later.
        var action = new VirtualAction(this.scheduler, this.work);
        this.add(action);
        return action.schedule(state, delay);
    };
    VirtualAction.prototype.requestAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) { delay = 0; }
        this.delay = scheduler.frame + delay;
        var actions = scheduler.actions;
        actions.push(this);
        actions.sort(VirtualAction.sortActions);
        return true;
    };
    VirtualAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) { delay = 0; }
        return undefined;
    };
    VirtualAction.prototype._execute = function (state, delay) {
        if (this.active === true) {
            return _super.prototype._execute.call(this, state, delay);
        }
    };
    VirtualAction.sortActions = function (a, b) {
        if (a.delay === b.delay) {
            if (a.index === b.index) {
                return 0;
            }
            else if (a.index > b.index) {
                return 1;
            }
            else {
                return -1;
            }
        }
        else if (a.delay > b.delay) {
            return 1;
        }
        else {
            return -1;
        }
    };
    return VirtualAction;
}(AsyncAction_1.AsyncAction));
exports.VirtualAction = VirtualAction;

},{"./AsyncAction":437,"./AsyncScheduler":438}],442:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var AnimationFrameAction_1 = require("./AnimationFrameAction");
var AnimationFrameScheduler_1 = require("./AnimationFrameScheduler");
/**
 *
 * Animation Frame Scheduler
 *
 * <span class="informal">Perform task when `window.requestAnimationFrame` would fire</span>
 *
 * When `animationFrame` scheduler is used with delay, it will fall back to {@link async} scheduler
 * behaviour.
 *
 * Without delay, `animationFrame` scheduler can be used to create smooth browser animations.
 * It makes sure scheduled task will happen just before next browser content repaint,
 * thus performing animations as efficiently as possible.
 *
 * @example <caption>Schedule div height animation</caption>
 * const div = document.querySelector('.some-div');
 *
 * Rx.Scheduler.animationFrame.schedule(function(height) {
 *   div.style.height = height + "px";
 *
 *   this.schedule(height + 1);  // `this` references currently executing Action,
 *                               // which we reschedule with new state
 * }, 0, 0);
 *
 * // You will see .some-div element growing in height
 *
 *
 * @static true
 * @name animationFrame
 * @owner Scheduler
 */
exports.animationFrame = new AnimationFrameScheduler_1.AnimationFrameScheduler(AnimationFrameAction_1.AnimationFrameAction);

},{"./AnimationFrameAction":433,"./AnimationFrameScheduler":434}],443:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var AsapAction_1 = require("./AsapAction");
var AsapScheduler_1 = require("./AsapScheduler");
/**
 *
 * Asap Scheduler
 *
 * <span class="informal">Perform task as fast as it can be performed asynchronously</span>
 *
 * `asap` scheduler behaves the same as {@link async} scheduler when you use it to delay task
 * in time. If however you set delay to `0`, `asap` will wait for current synchronously executing
 * code to end and then it will try to execute given task as fast as possible.
 *
 * `asap` scheduler will do its best to minimize time between end of currently executing code
 * and start of scheduled task. This makes it best candidate for performing so called "deferring".
 * Traditionally this was achieved by calling `setTimeout(deferredTask, 0)`, but that technique involves
 * some (although minimal) unwanted delay.
 *
 * Note that using `asap` scheduler does not necessarily mean that your task will be first to process
 * after currently executing code. In particular, if some task was also scheduled with `asap` before,
 * that task will execute first. That being said, if you need to schedule task asynchronously, but
 * as soon as possible, `asap` scheduler is your best bet.
 *
 * @example <caption>Compare async and asap scheduler</caption>
 *
 * Rx.Scheduler.async.schedule(() => my_console_log('async')); // scheduling 'async' first...
 * Rx.Scheduler.asap.schedule(() => my_console_log('asap'));
 *
 * // Logs:
 * // "asap"
 * // "async"
 * // ... but 'asap' goes first!
 *
 * @static true
 * @name asap
 * @owner Scheduler
 */
exports.asap = new AsapScheduler_1.AsapScheduler(AsapAction_1.AsapAction);

},{"./AsapAction":435,"./AsapScheduler":436}],444:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var AsyncAction_1 = require("./AsyncAction");
var AsyncScheduler_1 = require("./AsyncScheduler");
/**
 *
 * Async Scheduler
 *
 * <span class="informal">Schedule task as if you used setTimeout(task, duration)</span>
 *
 * `async` scheduler schedules tasks asynchronously, by putting them on the JavaScript
 * event loop queue. It is best used to delay tasks in time or to schedule tasks repeating
 * in intervals.
 *
 * If you just want to "defer" task, that is to perform it right after currently
 * executing synchronous code ends (commonly achieved by `setTimeout(deferredTask, 0)`),
 * better choice will be the {@link asap} scheduler.
 *
 * @example <caption>Use async scheduler to delay task</caption>
 * const task = () => my_console_log('it works!');
 *
 * Rx.Scheduler.async.schedule(task, 2000);
 *
 * // After 2 seconds logs:
 * // "it works!"
 *
 *
 * @example <caption>Use async scheduler to repeat task in intervals</caption>
 * function task(state) {
 *   my_console_log(state);
 *   this.schedule(state + 1, 1000); // `this` references currently executing Action,
 *                                   // which we reschedule with new state and delay
 * }
 *
 * Rx.Scheduler.async.schedule(task, 3000, 0);
 *
 * // Logs:
 * // 0 after 3s
 * // 1 after 4s
 * // 2 after 5s
 * // 3 after 6s
 *
 * @static true
 * @name async
 * @owner Scheduler
 */
exports.async = new AsyncScheduler_1.AsyncScheduler(AsyncAction_1.AsyncAction);

},{"./AsyncAction":437,"./AsyncScheduler":438}],445:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var QueueAction_1 = require("./QueueAction");
var QueueScheduler_1 = require("./QueueScheduler");
/**
 *
 * Queue Scheduler
 *
 * <span class="informal">Put every next task on a queue, instead of executing it immediately</span>
 *
 * `queue` scheduler, when used with delay, behaves the same as {@link async} scheduler.
 *
 * When used without delay, it schedules given task synchronously - executes it right when
 * it is scheduled. However when called recursively, that is when inside the scheduled task,
 * another task is scheduled with queue scheduler, instead of executing immediately as well,
 * that task will be put on a queue and wait for current one to finish.
 *
 * This means that when you execute task with `queue` scheduler, you are sure it will end
 * before any other task scheduled with that scheduler will start.
 *
 * @examples <caption>Schedule recursively first, then do something</caption>
 *
 * Rx.Scheduler.queue.schedule(() => {
 *   Rx.Scheduler.queue.schedule(() => my_console_log('second')); // will not happen now, but will be put on a queue
 *
 *   my_console_log('first');
 * });
 *
 * // Logs:
 * // "first"
 * // "second"
 *
 *
 * @example <caption>Reschedule itself recursively</caption>
 *
 * Rx.Scheduler.queue.schedule(function(state) {
 *   if (state !== 0) {
 *     my_console_log('before', state);
 *     this.schedule(state - 1); // `this` references currently executing Action,
 *                               // which we reschedule with new state
 *     my_console_log('after', state);
 *   }
 * }, 0, 3);
 *
 * // In scheduler that runs recursively, you would expect:
 * // "before", 3
 * // "before", 2
 * // "before", 1
 * // "after", 1
 * // "after", 2
 * // "after", 3
 *
 * // But with queue it logs:
 * // "before", 3
 * // "after", 3
 * // "before", 2
 * // "after", 2
 * // "before", 1
 * // "after", 1
 *
 *
 * @static true
 * @name queue
 * @owner Scheduler
 */
exports.queue = new QueueScheduler_1.QueueScheduler(QueueAction_1.QueueAction);

},{"./QueueAction":439,"./QueueScheduler":440}],446:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function getSymbolIterator() {
    if (typeof Symbol !== 'function' || !Symbol.iterator) {
        return '@@iterator';
    }
    return Symbol.iterator;
}
exports.getSymbolIterator = getSymbolIterator;
exports.iterator = getSymbolIterator();
/**
 * @deprecated use {@link iterator} instead
 */
exports.$$iterator = exports.iterator;

},{}],447:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/** Symbol.observable or a string "@@observable". Used for interop */
exports.observable = typeof Symbol === 'function' && Symbol.observable || '@@observable';

},{}],448:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function')
    ? Symbol.for('rxSubscriber')
    : '@@rxSubscriber';
/**
 * @deprecated use rxSubscriber instead
 */
exports.$$rxSubscriber = exports.rxSubscriber;

},{}],449:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * An error thrown when an element was queried at a certain index of an
 * Observable, but no such index or position exists in that sequence.
 *
 * @see {@link elementAt}
 * @see {@link take}
 * @see {@link takeLast}
 *
 * @class ArgumentOutOfRangeError
 */
var ArgumentOutOfRangeError = /** @class */ (function (_super) {
    __extends(ArgumentOutOfRangeError, _super);
    function ArgumentOutOfRangeError() {
        var _this = _super.call(this, 'argument out of range') || this;
        _this.name = 'ArgumentOutOfRangeError';
        Object.setPrototypeOf(_this, ArgumentOutOfRangeError.prototype);
        return _this;
    }
    return ArgumentOutOfRangeError;
}(Error));
exports.ArgumentOutOfRangeError = ArgumentOutOfRangeError;

},{}],450:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * An error thrown when an Observable or a sequence was queried but has no
 * elements.
 *
 * @see {@link first}
 * @see {@link last}
 * @see {@link single}
 *
 * @class EmptyError
 */
var EmptyError = /** @class */ (function (_super) {
    __extends(EmptyError, _super);
    function EmptyError() {
        var _this = _super.call(this, 'no elements in sequence') || this;
        _this.name = 'EmptyError';
        Object.setPrototypeOf(_this, EmptyError.prototype);
        return _this;
    }
    return EmptyError;
}(Error));
exports.EmptyError = EmptyError;

},{}],451:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var nextHandle = 1;
var tasksByHandle = {};
function runIfPresent(handle) {
    var cb = tasksByHandle[handle];
    if (cb) {
        cb();
    }
}
exports.Immediate = {
    setImmediate: function (cb) {
        var handle = nextHandle++;
        tasksByHandle[handle] = cb;
        Promise.resolve().then(function () { return runIfPresent(handle); });
        return handle;
    },
    clearImmediate: function (handle) {
        delete tasksByHandle[handle];
    },
};

},{}],452:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * An error thrown when an action is invalid because the object has been
 * unsubscribed.
 *
 * @see {@link Subject}
 * @see {@link BehaviorSubject}
 *
 * @class ObjectUnsubscribedError
 */
var ObjectUnsubscribedError = /** @class */ (function (_super) {
    __extends(ObjectUnsubscribedError, _super);
    function ObjectUnsubscribedError() {
        var _this = _super.call(this, 'object unsubscribed') || this;
        _this.name = 'ObjectUnsubscribedError';
        Object.setPrototypeOf(_this, ObjectUnsubscribedError.prototype);
        return _this;
    }
    return ObjectUnsubscribedError;
}(Error));
exports.ObjectUnsubscribedError = ObjectUnsubscribedError;

},{}],453:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * An error thrown when duetime elapses.
 *
 * @see {@link timeout}
 *
 * @class TimeoutError
 */
var TimeoutError = /** @class */ (function (_super) {
    __extends(TimeoutError, _super);
    function TimeoutError() {
        var _this = _super.call(this, 'Timeout has occurred') || this;
        _this.name = 'TimeoutError';
        Object.setPrototypeOf(_this, TimeoutError.prototype);
        return _this;
    }
    return TimeoutError;
}(Error));
exports.TimeoutError = TimeoutError;

},{}],454:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * An error thrown when one or more errors have occurred during the
 * `unsubscribe` of a {@link Subscription}.
 */
var UnsubscriptionError = /** @class */ (function (_super) {
    __extends(UnsubscriptionError, _super);
    function UnsubscriptionError(errors) {
        var _this = _super.call(this, errors ?
            errors.length + " errors occurred during unsubscription:\n  " + errors.map(function (err, i) { return i + 1 + ") " + err.toString(); }).join('\n  ') : '') || this;
        _this.errors = errors;
        _this.name = 'UnsubscriptionError';
        Object.setPrototypeOf(_this, UnsubscriptionError.prototype);
        return _this;
    }
    return UnsubscriptionError;
}(Error));
exports.UnsubscriptionError = UnsubscriptionError;

},{}],455:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// typeof any so that it we don't have to cast when comparing a result to the error object
exports.errorObject = { e: {} };

},{}],456:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Throws an error on another job so that it's picked up by the runtime's
 * uncaught error handling mechanism.
 * @param err the error to throw
 */
function hostReportError(err) {
    setTimeout(function () { throw err; });
}
exports.hostReportError = hostReportError;

},{}],457:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function identity(x) {
    return x;
}
exports.identity = identity;

},{}],458:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isArray = Array.isArray || (function (x) { return x && typeof x.length === 'number'; });

},{}],459:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isArrayLike = (function (x) { return x && typeof x.length === 'number' && typeof x !== 'function'; });

},{}],460:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function isDate(value) {
    return value instanceof Date && !isNaN(+value);
}
exports.isDate = isDate;

},{}],461:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function isFunction(x) {
    return typeof x === 'function';
}
exports.isFunction = isFunction;

},{}],462:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var observable_1 = require("../symbol/observable");
/** Identifies an input as being Observable (but not necessary an Rx Observable) */
function isInteropObservable(input) {
    return input && typeof input[observable_1.observable] === 'function';
}
exports.isInteropObservable = isInteropObservable;

},{"../symbol/observable":447}],463:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var iterator_1 = require("../symbol/iterator");
/** Identifies an input as being an Iterable */
function isIterable(input) {
    return input && typeof input[iterator_1.iterator] === 'function';
}
exports.isIterable = isIterable;

},{"../symbol/iterator":446}],464:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var isArray_1 = require("./isArray");
function isNumeric(val) {
    // parseFloat NaNs numeric-cast false positives (null|true|false|"")
    // ...but misinterprets leading-number strings, particularly hex literals ("0x...")
    // subtraction forces infinities to NaN
    // adding 1 corrects loss of precision from parseFloat (#15100)
    return !isArray_1.isArray(val) && (val - parseFloat(val) + 1) >= 0;
}
exports.isNumeric = isNumeric;

},{"./isArray":458}],465:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function isObject(x) {
    return x != null && typeof x === 'object';
}
exports.isObject = isObject;

},{}],466:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Observable_1 = require("../Observable");
/**
 * Tests to see if the object is an RxJS {@link Observable}
 * @param obj the object to test
 */
function isObservable(obj) {
    return !!obj && (obj instanceof Observable_1.Observable || (typeof obj.lift === 'function' && typeof obj.subscribe === 'function'));
}
exports.isObservable = isObservable;

},{"../Observable":286}],467:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function isPromise(value) {
    return value && typeof value.subscribe !== 'function' && typeof value.then === 'function';
}
exports.isPromise = isPromise;

},{}],468:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function isScheduler(value) {
    return value && typeof value.schedule === 'function';
}
exports.isScheduler = isScheduler;

},{}],469:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* tslint:disable:no-empty */
function noop() { }
exports.noop = noop;

},{}],470:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function not(pred, thisArg) {
    function notPred() {
        return !(notPred.pred.apply(notPred.thisArg, arguments));
    }
    notPred.pred = pred;
    notPred.thisArg = thisArg;
    return notPred;
}
exports.not = not;

},{}],471:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var noop_1 = require("./noop");
/* tslint:enable:max-line-length */
function pipe() {
    var fns = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        fns[_i] = arguments[_i];
    }
    return pipeFromArray(fns);
}
exports.pipe = pipe;
/* @internal */
function pipeFromArray(fns) {
    if (!fns) {
        return noop_1.noop;
    }
    if (fns.length === 1) {
        return fns[0];
    }
    return function piped(input) {
        return fns.reduce(function (prev, fn) { return fn(prev); }, input);
    };
}
exports.pipeFromArray = pipeFromArray;

},{"./noop":469}],472:[function(require,module,exports){
(function (global){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// CommonJS / Node have global context exposed as "global" variable.
// We don't want to include the whole node.d.ts this this compilation unit so we'll just fake
// the global "global" var for now.
var __window = typeof window !== 'undefined' && window;
var __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&
    self instanceof WorkerGlobalScope && self;
var __global = typeof global !== 'undefined' && global;
var _root = __window || __global || __self;
exports.root = _root;
// Workaround Closure Compiler restriction: The body of a goog.module cannot use throw.
// This is needed when used with angular/tsickle which inserts a goog.module statement.
// Wrap in IIFE
(function () {
    if (!_root) {
        throw new Error('RxJS could not find any global context (window, self, global)');
    }
})();

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],473:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Observable_1 = require("../Observable");
var subscribeToArray_1 = require("./subscribeToArray");
var subscribeToPromise_1 = require("./subscribeToPromise");
var subscribeToIterable_1 = require("./subscribeToIterable");
var subscribeToObservable_1 = require("./subscribeToObservable");
var isArrayLike_1 = require("./isArrayLike");
var isPromise_1 = require("./isPromise");
var isObject_1 = require("./isObject");
var iterator_1 = require("../symbol/iterator");
var observable_1 = require("../symbol/observable");
exports.subscribeTo = function (result) {
    if (result instanceof Observable_1.Observable) {
        return function (subscriber) {
            if (result._isScalar) {
                subscriber.next(result.value);
                subscriber.complete();
                return undefined;
            }
            else {
                return result.subscribe(subscriber);
            }
        };
    }
    else if (isArrayLike_1.isArrayLike(result)) {
        return subscribeToArray_1.subscribeToArray(result);
    }
    else if (isPromise_1.isPromise(result)) {
        return subscribeToPromise_1.subscribeToPromise(result);
    }
    else if (result && typeof result[iterator_1.iterator] === 'function') {
        return subscribeToIterable_1.subscribeToIterable(result);
    }
    else if (result && typeof result[observable_1.observable] === 'function') {
        return subscribeToObservable_1.subscribeToObservable(result);
    }
    else {
        var value = isObject_1.isObject(result) ? 'an invalid object' : "'" + result + "'";
        var msg = "You provided " + value + " where a stream was expected."
            + ' You can provide an Observable, Promise, Array, or Iterable.';
        throw new TypeError(msg);
    }
};

},{"../Observable":286,"../symbol/iterator":446,"../symbol/observable":447,"./isArrayLike":459,"./isObject":465,"./isPromise":467,"./subscribeToArray":474,"./subscribeToIterable":475,"./subscribeToObservable":476,"./subscribeToPromise":477}],474:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Subscribes to an ArrayLike with a subscriber
 * @param array The array or array-like to subscribe to
 */
exports.subscribeToArray = function (array) { return function (subscriber) {
    for (var i = 0, len = array.length; i < len && !subscriber.closed; i++) {
        subscriber.next(array[i]);
    }
    if (!subscriber.closed) {
        subscriber.complete();
    }
}; };

},{}],475:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var iterator_1 = require("../symbol/iterator");
exports.subscribeToIterable = function (iterable) { return function (subscriber) {
    var iterator = iterable[iterator_1.iterator]();
    do {
        var item = iterator.next();
        if (item.done) {
            subscriber.complete();
            break;
        }
        subscriber.next(item.value);
        if (subscriber.closed) {
            break;
        }
    } while (true);
    // Finalize the iterator if it happens to be a Generator
    if (typeof iterator.return === 'function') {
        subscriber.add(function () {
            if (iterator.return) {
                iterator.return();
            }
        });
    }
    return subscriber;
}; };

},{"../symbol/iterator":446}],476:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var observable_1 = require("../symbol/observable");
/**
 * Subscribes to an object that implements Symbol.observable with the given
 * Subscriber.
 * @param obj An object that implements Symbol.observable
 */
exports.subscribeToObservable = function (obj) { return function (subscriber) {
    var obs = obj[observable_1.observable]();
    if (typeof obs.subscribe !== 'function') {
        // Should be caught by observable subscribe function error handling.
        throw new TypeError('Provided object does not correctly implement Symbol.observable');
    }
    else {
        return obs.subscribe(subscriber);
    }
}; };

},{"../symbol/observable":447}],477:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var hostReportError_1 = require("./hostReportError");
exports.subscribeToPromise = function (promise) { return function (subscriber) {
    promise.then(function (value) {
        if (!subscriber.closed) {
            subscriber.next(value);
            subscriber.complete();
        }
    }, function (err) { return subscriber.error(err); })
        .then(null, hostReportError_1.hostReportError);
    return subscriber;
}; };

},{"./hostReportError":456}],478:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var InnerSubscriber_1 = require("../InnerSubscriber");
var subscribeTo_1 = require("./subscribeTo");
function subscribeToResult(outerSubscriber, result, outerValue, outerIndex) {
    var destination = new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex);
    return subscribeTo_1.subscribeTo(result)(destination);
}
exports.subscribeToResult = subscribeToResult;

},{"../InnerSubscriber":284,"./subscribeTo":473}],479:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Subscriber_1 = require("../Subscriber");
var rxSubscriber_1 = require("../symbol/rxSubscriber");
var Observer_1 = require("../Observer");
function toSubscriber(nextOrObserver, error, complete) {
    if (nextOrObserver) {
        if (nextOrObserver instanceof Subscriber_1.Subscriber) {
            return nextOrObserver;
        }
        if (nextOrObserver[rxSubscriber_1.rxSubscriber]) {
            return nextOrObserver[rxSubscriber_1.rxSubscriber]();
        }
    }
    if (!nextOrObserver && !error && !complete) {
        return new Subscriber_1.Subscriber(Observer_1.empty);
    }
    return new Subscriber_1.Subscriber(nextOrObserver, error, complete);
}
exports.toSubscriber = toSubscriber;

},{"../Observer":287,"../Subscriber":293,"../symbol/rxSubscriber":448}],480:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var errorObject_1 = require("./errorObject");
var tryCatchTarget;
function tryCatcher() {
    try {
        return tryCatchTarget.apply(this, arguments);
    }
    catch (e) {
        errorObject_1.errorObject.e = e;
        return errorObject_1.errorObject;
    }
}
function tryCatch(fn) {
    tryCatchTarget = fn;
    return tryCatcher;
}
exports.tryCatch = tryCatch;

},{"./errorObject":455}],481:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* Operator exports */
var audit_1 = require("../internal/operators/audit");
exports.audit = audit_1.audit;
var auditTime_1 = require("../internal/operators/auditTime");
exports.auditTime = auditTime_1.auditTime;
var buffer_1 = require("../internal/operators/buffer");
exports.buffer = buffer_1.buffer;
var bufferCount_1 = require("../internal/operators/bufferCount");
exports.bufferCount = bufferCount_1.bufferCount;
var bufferTime_1 = require("../internal/operators/bufferTime");
exports.bufferTime = bufferTime_1.bufferTime;
var bufferToggle_1 = require("../internal/operators/bufferToggle");
exports.bufferToggle = bufferToggle_1.bufferToggle;
var bufferWhen_1 = require("../internal/operators/bufferWhen");
exports.bufferWhen = bufferWhen_1.bufferWhen;
var catchError_1 = require("../internal/operators/catchError");
exports.catchError = catchError_1.catchError;
var combineAll_1 = require("../internal/operators/combineAll");
exports.combineAll = combineAll_1.combineAll;
var combineLatest_1 = require("../internal/operators/combineLatest");
exports.combineLatest = combineLatest_1.combineLatest;
var concat_1 = require("../internal/operators/concat");
exports.concat = concat_1.concat;
var concatAll_1 = require("../internal/operators/concatAll");
exports.concatAll = concatAll_1.concatAll;
var concatMap_1 = require("../internal/operators/concatMap");
exports.concatMap = concatMap_1.concatMap;
var concatMapTo_1 = require("../internal/operators/concatMapTo");
exports.concatMapTo = concatMapTo_1.concatMapTo;
var count_1 = require("../internal/operators/count");
exports.count = count_1.count;
var debounce_1 = require("../internal/operators/debounce");
exports.debounce = debounce_1.debounce;
var debounceTime_1 = require("../internal/operators/debounceTime");
exports.debounceTime = debounceTime_1.debounceTime;
var defaultIfEmpty_1 = require("../internal/operators/defaultIfEmpty");
exports.defaultIfEmpty = defaultIfEmpty_1.defaultIfEmpty;
var delay_1 = require("../internal/operators/delay");
exports.delay = delay_1.delay;
var delayWhen_1 = require("../internal/operators/delayWhen");
exports.delayWhen = delayWhen_1.delayWhen;
var dematerialize_1 = require("../internal/operators/dematerialize");
exports.dematerialize = dematerialize_1.dematerialize;
var distinct_1 = require("../internal/operators/distinct");
exports.distinct = distinct_1.distinct;
var distinctUntilChanged_1 = require("../internal/operators/distinctUntilChanged");
exports.distinctUntilChanged = distinctUntilChanged_1.distinctUntilChanged;
var distinctUntilKeyChanged_1 = require("../internal/operators/distinctUntilKeyChanged");
exports.distinctUntilKeyChanged = distinctUntilKeyChanged_1.distinctUntilKeyChanged;
var elementAt_1 = require("../internal/operators/elementAt");
exports.elementAt = elementAt_1.elementAt;
var endWith_1 = require("../internal/operators/endWith");
exports.endWith = endWith_1.endWith;
var every_1 = require("../internal/operators/every");
exports.every = every_1.every;
var exhaust_1 = require("../internal/operators/exhaust");
exports.exhaust = exhaust_1.exhaust;
var exhaustMap_1 = require("../internal/operators/exhaustMap");
exports.exhaustMap = exhaustMap_1.exhaustMap;
var expand_1 = require("../internal/operators/expand");
exports.expand = expand_1.expand;
var filter_1 = require("../internal/operators/filter");
exports.filter = filter_1.filter;
var finalize_1 = require("../internal/operators/finalize");
exports.finalize = finalize_1.finalize;
var find_1 = require("../internal/operators/find");
exports.find = find_1.find;
var findIndex_1 = require("../internal/operators/findIndex");
exports.findIndex = findIndex_1.findIndex;
var first_1 = require("../internal/operators/first");
exports.first = first_1.first;
var groupBy_1 = require("../internal/operators/groupBy");
exports.groupBy = groupBy_1.groupBy;
var ignoreElements_1 = require("../internal/operators/ignoreElements");
exports.ignoreElements = ignoreElements_1.ignoreElements;
var isEmpty_1 = require("../internal/operators/isEmpty");
exports.isEmpty = isEmpty_1.isEmpty;
var last_1 = require("../internal/operators/last");
exports.last = last_1.last;
var map_1 = require("../internal/operators/map");
exports.map = map_1.map;
var mapTo_1 = require("../internal/operators/mapTo");
exports.mapTo = mapTo_1.mapTo;
var materialize_1 = require("../internal/operators/materialize");
exports.materialize = materialize_1.materialize;
var max_1 = require("../internal/operators/max");
exports.max = max_1.max;
var merge_1 = require("../internal/operators/merge");
exports.merge = merge_1.merge;
var mergeAll_1 = require("../internal/operators/mergeAll");
exports.mergeAll = mergeAll_1.mergeAll;
var mergeMap_1 = require("../internal/operators/mergeMap");
exports.mergeMap = mergeMap_1.mergeMap;
var mergeMap_2 = require("../internal/operators/mergeMap");
exports.flatMap = mergeMap_2.mergeMap;
var mergeMapTo_1 = require("../internal/operators/mergeMapTo");
exports.mergeMapTo = mergeMapTo_1.mergeMapTo;
var mergeScan_1 = require("../internal/operators/mergeScan");
exports.mergeScan = mergeScan_1.mergeScan;
var min_1 = require("../internal/operators/min");
exports.min = min_1.min;
var multicast_1 = require("../internal/operators/multicast");
exports.multicast = multicast_1.multicast;
var observeOn_1 = require("../internal/operators/observeOn");
exports.observeOn = observeOn_1.observeOn;
var onErrorResumeNext_1 = require("../internal/operators/onErrorResumeNext");
exports.onErrorResumeNext = onErrorResumeNext_1.onErrorResumeNext;
var pairwise_1 = require("../internal/operators/pairwise");
exports.pairwise = pairwise_1.pairwise;
var partition_1 = require("../internal/operators/partition");
exports.partition = partition_1.partition;
var pluck_1 = require("../internal/operators/pluck");
exports.pluck = pluck_1.pluck;
var publish_1 = require("../internal/operators/publish");
exports.publish = publish_1.publish;
var publishBehavior_1 = require("../internal/operators/publishBehavior");
exports.publishBehavior = publishBehavior_1.publishBehavior;
var publishLast_1 = require("../internal/operators/publishLast");
exports.publishLast = publishLast_1.publishLast;
var publishReplay_1 = require("../internal/operators/publishReplay");
exports.publishReplay = publishReplay_1.publishReplay;
var race_1 = require("../internal/operators/race");
exports.race = race_1.race;
var reduce_1 = require("../internal/operators/reduce");
exports.reduce = reduce_1.reduce;
var repeat_1 = require("../internal/operators/repeat");
exports.repeat = repeat_1.repeat;
var repeatWhen_1 = require("../internal/operators/repeatWhen");
exports.repeatWhen = repeatWhen_1.repeatWhen;
var retry_1 = require("../internal/operators/retry");
exports.retry = retry_1.retry;
var retryWhen_1 = require("../internal/operators/retryWhen");
exports.retryWhen = retryWhen_1.retryWhen;
var refCount_1 = require("../internal/operators/refCount");
exports.refCount = refCount_1.refCount;
var sample_1 = require("../internal/operators/sample");
exports.sample = sample_1.sample;
var sampleTime_1 = require("../internal/operators/sampleTime");
exports.sampleTime = sampleTime_1.sampleTime;
var scan_1 = require("../internal/operators/scan");
exports.scan = scan_1.scan;
var sequenceEqual_1 = require("../internal/operators/sequenceEqual");
exports.sequenceEqual = sequenceEqual_1.sequenceEqual;
var share_1 = require("../internal/operators/share");
exports.share = share_1.share;
var shareReplay_1 = require("../internal/operators/shareReplay");
exports.shareReplay = shareReplay_1.shareReplay;
var single_1 = require("../internal/operators/single");
exports.single = single_1.single;
var skip_1 = require("../internal/operators/skip");
exports.skip = skip_1.skip;
var skipLast_1 = require("../internal/operators/skipLast");
exports.skipLast = skipLast_1.skipLast;
var skipUntil_1 = require("../internal/operators/skipUntil");
exports.skipUntil = skipUntil_1.skipUntil;
var skipWhile_1 = require("../internal/operators/skipWhile");
exports.skipWhile = skipWhile_1.skipWhile;
var startWith_1 = require("../internal/operators/startWith");
exports.startWith = startWith_1.startWith;
var subscribeOn_1 = require("../internal/operators/subscribeOn");
exports.subscribeOn = subscribeOn_1.subscribeOn;
var switchAll_1 = require("../internal/operators/switchAll");
exports.switchAll = switchAll_1.switchAll;
var switchMap_1 = require("../internal/operators/switchMap");
exports.switchMap = switchMap_1.switchMap;
var switchMapTo_1 = require("../internal/operators/switchMapTo");
exports.switchMapTo = switchMapTo_1.switchMapTo;
var take_1 = require("../internal/operators/take");
exports.take = take_1.take;
var takeLast_1 = require("../internal/operators/takeLast");
exports.takeLast = takeLast_1.takeLast;
var takeUntil_1 = require("../internal/operators/takeUntil");
exports.takeUntil = takeUntil_1.takeUntil;
var takeWhile_1 = require("../internal/operators/takeWhile");
exports.takeWhile = takeWhile_1.takeWhile;
var tap_1 = require("../internal/operators/tap");
exports.tap = tap_1.tap;
var throttle_1 = require("../internal/operators/throttle");
exports.throttle = throttle_1.throttle;
var throttleTime_1 = require("../internal/operators/throttleTime");
exports.throttleTime = throttleTime_1.throttleTime;
var throwIfEmpty_1 = require("../internal/operators/throwIfEmpty");
exports.throwIfEmpty = throwIfEmpty_1.throwIfEmpty;
var timeInterval_1 = require("../internal/operators/timeInterval");
exports.timeInterval = timeInterval_1.timeInterval;
var timeout_1 = require("../internal/operators/timeout");
exports.timeout = timeout_1.timeout;
var timeoutWith_1 = require("../internal/operators/timeoutWith");
exports.timeoutWith = timeoutWith_1.timeoutWith;
var timestamp_1 = require("../internal/operators/timestamp");
exports.timestamp = timestamp_1.timestamp;
var toArray_1 = require("../internal/operators/toArray");
exports.toArray = toArray_1.toArray;
var window_1 = require("../internal/operators/window");
exports.window = window_1.window;
var windowCount_1 = require("../internal/operators/windowCount");
exports.windowCount = windowCount_1.windowCount;
var windowTime_1 = require("../internal/operators/windowTime");
exports.windowTime = windowTime_1.windowTime;
var windowToggle_1 = require("../internal/operators/windowToggle");
exports.windowToggle = windowToggle_1.windowToggle;
var windowWhen_1 = require("../internal/operators/windowWhen");
exports.windowWhen = windowWhen_1.windowWhen;
var withLatestFrom_1 = require("../internal/operators/withLatestFrom");
exports.withLatestFrom = withLatestFrom_1.withLatestFrom;
var zip_1 = require("../internal/operators/zip");
exports.zip = zip_1.zip;
var zipAll_1 = require("../internal/operators/zipAll");
exports.zipAll = zipAll_1.zipAll;

},{"../internal/operators/audit":329,"../internal/operators/auditTime":330,"../internal/operators/buffer":331,"../internal/operators/bufferCount":332,"../internal/operators/bufferTime":333,"../internal/operators/bufferToggle":334,"../internal/operators/bufferWhen":335,"../internal/operators/catchError":336,"../internal/operators/combineAll":337,"../internal/operators/combineLatest":338,"../internal/operators/concat":339,"../internal/operators/concatAll":340,"../internal/operators/concatMap":341,"../internal/operators/concatMapTo":342,"../internal/operators/count":343,"../internal/operators/debounce":344,"../internal/operators/debounceTime":345,"../internal/operators/defaultIfEmpty":346,"../internal/operators/delay":347,"../internal/operators/delayWhen":348,"../internal/operators/dematerialize":349,"../internal/operators/distinct":350,"../internal/operators/distinctUntilChanged":351,"../internal/operators/distinctUntilKeyChanged":352,"../internal/operators/elementAt":353,"../internal/operators/endWith":354,"../internal/operators/every":355,"../internal/operators/exhaust":356,"../internal/operators/exhaustMap":357,"../internal/operators/expand":358,"../internal/operators/filter":359,"../internal/operators/finalize":360,"../internal/operators/find":361,"../internal/operators/findIndex":362,"../internal/operators/first":363,"../internal/operators/groupBy":364,"../internal/operators/ignoreElements":365,"../internal/operators/isEmpty":366,"../internal/operators/last":367,"../internal/operators/map":368,"../internal/operators/mapTo":369,"../internal/operators/materialize":370,"../internal/operators/max":371,"../internal/operators/merge":372,"../internal/operators/mergeAll":373,"../internal/operators/mergeMap":374,"../internal/operators/mergeMapTo":375,"../internal/operators/mergeScan":376,"../internal/operators/min":377,"../internal/operators/multicast":378,"../internal/operators/observeOn":379,"../internal/operators/onErrorResumeNext":380,"../internal/operators/pairwise":381,"../internal/operators/partition":382,"../internal/operators/pluck":383,"../internal/operators/publish":384,"../internal/operators/publishBehavior":385,"../internal/operators/publishLast":386,"../internal/operators/publishReplay":387,"../internal/operators/race":388,"../internal/operators/reduce":389,"../internal/operators/refCount":390,"../internal/operators/repeat":391,"../internal/operators/repeatWhen":392,"../internal/operators/retry":393,"../internal/operators/retryWhen":394,"../internal/operators/sample":395,"../internal/operators/sampleTime":396,"../internal/operators/scan":397,"../internal/operators/sequenceEqual":398,"../internal/operators/share":399,"../internal/operators/shareReplay":400,"../internal/operators/single":401,"../internal/operators/skip":402,"../internal/operators/skipLast":403,"../internal/operators/skipUntil":404,"../internal/operators/skipWhile":405,"../internal/operators/startWith":406,"../internal/operators/subscribeOn":407,"../internal/operators/switchAll":408,"../internal/operators/switchMap":409,"../internal/operators/switchMapTo":410,"../internal/operators/take":411,"../internal/operators/takeLast":412,"../internal/operators/takeUntil":413,"../internal/operators/takeWhile":414,"../internal/operators/tap":415,"../internal/operators/throttle":416,"../internal/operators/throttleTime":417,"../internal/operators/throwIfEmpty":418,"../internal/operators/timeInterval":419,"../internal/operators/timeout":420,"../internal/operators/timeoutWith":421,"../internal/operators/timestamp":422,"../internal/operators/toArray":423,"../internal/operators/window":424,"../internal/operators/windowCount":425,"../internal/operators/windowTime":426,"../internal/operators/windowToggle":427,"../internal/operators/windowWhen":428,"../internal/operators/withLatestFrom":429,"../internal/operators/zip":430,"../internal/operators/zipAll":431}],482:[function(require,module,exports){
/*
 Copyright 2011-2013 Abdulla Abdurakhmanov
 Original sources are available at https://code.google.com/p/x2js/
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

exports.X2JS = function(config) {
    'use strict';
        
    var VERSION = "1.2.0";
    
    config = config || {};
    initConfigDefaults();
    initRequiredPolyfills();
    
    function initConfigDefaults() {
        if(config.escapeMode === undefined) {
            config.escapeMode = true;
        }
        
        config.attributePrefix = config.attributePrefix || "_";
        config.arrayAccessForm = config.arrayAccessForm || "none";
        config.emptyNodeForm = config.emptyNodeForm || "text";		
        
        if(config.enableToStringFunc === undefined) {
            config.enableToStringFunc = true; 
        }
        config.arrayAccessFormPaths = config.arrayAccessFormPaths || []; 
        if(config.skipEmptyTextNodesForObj === undefined) {
            config.skipEmptyTextNodesForObj = true;
        }
        if(config.stripWhitespaces === undefined) {
            config.stripWhitespaces = true;
        }
        config.datetimeAccessFormPaths = config.datetimeAccessFormPaths || [];

        if(config.useDoubleQuotes === undefined) {
            config.useDoubleQuotes = false;
        }
        
        config.xmlElementsFilter = config.xmlElementsFilter || [];
        config.jsonPropertiesFilter = config.jsonPropertiesFilter || [];
        
        if(config.keepCData === undefined) {
            config.keepCData = false;
        }
    }

    var DOMNodeTypes = {
        ELEMENT_NODE 	   : 1,
        TEXT_NODE    	   : 3,
        CDATA_SECTION_NODE : 4,
        COMMENT_NODE	   : 8,
        DOCUMENT_NODE 	   : 9
    };
    
    function initRequiredPolyfills() {		
    }
    
    function getNodeLocalName( node ) {
        var nodeLocalName = node.localName;			
        if(nodeLocalName == null) // Yeah, this is IE!! 
            nodeLocalName = node.baseName;
        if(nodeLocalName == null || nodeLocalName=="") // =="" is IE too
            nodeLocalName = node.nodeName;
        return nodeLocalName;
    }
    
    function getNodePrefix(node) {
        return node.prefix;
    }
        
    function escapeXmlChars(str) {
        if(typeof(str) == "string")
            return str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&apos;');
        else
            return str;
    }

    function unescapeXmlChars(str) {
        return str.replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&quot;/g, '"').replace(/&apos;/g, "'").replace(/&amp;/g, '&');
    }
    
    function checkInStdFiltersArrayForm(stdFiltersArrayForm, obj, name, path) {
        var idx = 0;
        for(; idx < stdFiltersArrayForm.length; idx++) {
            var filterPath = stdFiltersArrayForm[idx];
            if( typeof filterPath === "string" ) {
                if(filterPath == path)
                    break;
            }
            else
            if( filterPath instanceof RegExp) {
                if(filterPath.test(path))
                    break;
            }				
            else
            if( typeof filterPath === "function") {
                if(filterPath(obj, name, path))
                    break;
            }
        }
        return idx!=stdFiltersArrayForm.length;
    }
    
    function toArrayAccessForm(obj, childName, path) {
        switch(config.arrayAccessForm) {
            case "property":
                if(!(obj[childName] instanceof Array))
                    obj[childName+"_asArray"] = [obj[childName]];
                else
                    obj[childName+"_asArray"] = obj[childName];
                break;
            /*case "none":
                break;*/
        }
        
        if(!(obj[childName] instanceof Array) && config.arrayAccessFormPaths.length > 0) {
            if(checkInStdFiltersArrayForm(config.arrayAccessFormPaths, obj, childName, path)) {
                obj[childName] = [obj[childName]];
            }			
        }
    }
    
    function fromXmlDateTime(prop) {
        // Implementation based up on http://stackoverflow.com/questions/8178598/xml-datetime-to-javascript-date-object
        // Improved to support full spec and optional parts
        var bits = prop.split(/[-T:+Z]/g);
        
        var d = new Date(bits[0], bits[1]-1, bits[2]);			
        var secondBits = bits[5].split("\.");
        d.setHours(bits[3], bits[4], secondBits[0]);
        if(secondBits.length>1)
            d.setMilliseconds(secondBits[1]);

        // Get supplied time zone offset in minutes
        if(bits[6] && bits[7]) {
            var offsetMinutes = bits[6] * 60 + Number(bits[7]);
            var sign = /\d\d-\d\d:\d\d$/.test(prop)? '-' : '+';

            // Apply the sign
            offsetMinutes = 0 + (sign == '-'? -1 * offsetMinutes : offsetMinutes);

            // Apply offset and local timezone
            d.setMinutes(d.getMinutes() - offsetMinutes - d.getTimezoneOffset())
        }
        else
            if(prop.indexOf("Z", prop.length - 1) !== -1) {
                d = new Date(Date.UTC(d.getFullYear(), d.getMonth(), d.getDate(), d.getHours(), d.getMinutes(), d.getSeconds(), d.getMilliseconds()));					
            }

        // d is now a local time equivalent to the supplied time
        return d;
    }
    
    function checkFromXmlDateTimePaths(value, childName, fullPath) {
        if(config.datetimeAccessFormPaths.length > 0) {
            var path = fullPath.split("\.#")[0];
            if(checkInStdFiltersArrayForm(config.datetimeAccessFormPaths, value, childName, path)) {
                return fromXmlDateTime(value);
            }
            else
                return value;			
        }
        else
            return value;
    }
    
    function checkXmlElementsFilter(obj, childType, childName, childPath) {
        if( childType == DOMNodeTypes.ELEMENT_NODE && config.xmlElementsFilter.length > 0) {
            return checkInStdFiltersArrayForm(config.xmlElementsFilter, obj, childName, childPath);	
        }
        else
            return true;
    }	

    function parseDOMChildren( node, path ) {
        if(node.nodeType == DOMNodeTypes.DOCUMENT_NODE) {
            var result = new Object;
            var nodeChildren = node.childNodes;
            // Alternative for firstElementChild which is not supported in some environments
            for(var cidx=0; cidx <nodeChildren.length; cidx++) {
                var child = nodeChildren.item(cidx);
                if(child.nodeType == DOMNodeTypes.ELEMENT_NODE) {
                    var childName = getNodeLocalName(child);
                    result[childName] = parseDOMChildren(child, childName);
                }
            }
            return result;
        }
        else
        if(node.nodeType == DOMNodeTypes.ELEMENT_NODE) {
            var result = new Object;
            result.__cnt=0;
            
            var nodeChildren = node.childNodes;
            
            // Children nodes
            for(var cidx=0; cidx <nodeChildren.length; cidx++) {
                var child = nodeChildren.item(cidx); // nodeChildren[cidx];
                var childName = getNodeLocalName(child);
                
                if(child.nodeType!= DOMNodeTypes.COMMENT_NODE) {
                    var childPath = path+"."+childName;
                    if (checkXmlElementsFilter(result,child.nodeType,childName,childPath)) {
                        result.__cnt++;
                        if(result[childName] == null) {
                            result[childName] = parseDOMChildren(child, childPath);
                            toArrayAccessForm(result, childName, childPath);					
                        }
                        else {
                            if(result[childName] != null) {
                                if( !(result[childName] instanceof Array)) {
                                    result[childName] = [result[childName]];
                                    toArrayAccessForm(result, childName, childPath);
                                }
                            }
                            (result[childName])[result[childName].length] = parseDOMChildren(child, childPath);
                        }
                    }
                }								
            }
            
            // Attributes
            for(var aidx=0; aidx <node.attributes.length; aidx++) {
                var attr = node.attributes.item(aidx); // [aidx];
                result.__cnt++;
                result[config.attributePrefix+attr.name]=attr.value;
            }
            
            // Node namespace prefix
            var nodePrefix = getNodePrefix(node);
            if(nodePrefix!=null && nodePrefix!="") {
                result.__cnt++;
                result.__prefix=nodePrefix;
            }
            
            if(result["#text"]!=null) {				
                result.__text = result["#text"];
                if(result.__text instanceof Array) {
                    result.__text = result.__text.join("\n");
                }
                //if(config.escapeMode)
                //	result.__text = unescapeXmlChars(result.__text);
                if(config.stripWhitespaces)
                    result.__text = result.__text.trim();
                delete result["#text"];
                if(config.arrayAccessForm=="property")
                    delete result["#text_asArray"];
                result.__text = checkFromXmlDateTimePaths(result.__text, childName, path+"."+childName);
            }
            if(result["#cdata-section"]!=null) {
                result.__cdata = result["#cdata-section"];
                delete result["#cdata-section"];
                if(config.arrayAccessForm=="property")
                    delete result["#cdata-section_asArray"];
            }
            
            if( result.__cnt == 0 && config.emptyNodeForm=="text" ) {
                result = '';
            }
            else
            if( result.__cnt == 1 && result.__text!=null  ) {
                result = result.__text;
            }
            else
            if( result.__cnt == 1 && result.__cdata!=null && !config.keepCData  ) {
                result = result.__cdata;
            }			
            else			
            if ( result.__cnt > 1 && result.__text!=null && config.skipEmptyTextNodesForObj) {
                if( (config.stripWhitespaces && result.__text=="") || (result.__text.trim()=="")) {
                    delete result.__text;
                }
            }
            delete result.__cnt;			
            
            if( config.enableToStringFunc && (result.__text!=null || result.__cdata!=null )) {
                result.toString = function() {
                    return (this.__text!=null? this.__text:'')+( this.__cdata!=null ? this.__cdata:'');
                };
            }
            
            return result;
        }
        else
        if(node.nodeType == DOMNodeTypes.TEXT_NODE || node.nodeType == DOMNodeTypes.CDATA_SECTION_NODE) {
            return node.nodeValue;
        }	
    }
    
    function startTag(jsonObj, element, attrList, closed) {
        var resultStr = "<"+ ( (jsonObj!=null && jsonObj.__prefix!=null)? (jsonObj.__prefix+":"):"") + element;
        if(attrList!=null) {
            for(var aidx = 0; aidx < attrList.length; aidx++) {
                var attrName = attrList[aidx];
                var attrVal = jsonObj[attrName];
                if(config.escapeMode)
                    attrVal=escapeXmlChars(attrVal);
                resultStr+=" "+attrName.substr(config.attributePrefix.length)+"=";
                if(config.useDoubleQuotes)
                    resultStr+='"'+attrVal+'"';
                else
                    resultStr+="'"+attrVal+"'";
            }
        }
        if(!closed)
            resultStr+=">";
        else
            resultStr+="/>";
        return resultStr;
    }
    
    function endTag(jsonObj,elementName) {
        return "</"+ (jsonObj.__prefix!=null? (jsonObj.__prefix+":"):"")+elementName+">";
    }
    
    function endsWith(str, suffix) {
        return str.indexOf(suffix, str.length - suffix.length) !== -1;
    }
    
    function jsonXmlSpecialElem ( jsonObj, jsonObjField ) {
        if((config.arrayAccessForm=="property" && endsWith(jsonObjField.toString(),("_asArray"))) 
                || jsonObjField.toString().indexOf(config.attributePrefix)==0 
                || jsonObjField.toString().indexOf("__")==0
                || (jsonObj[jsonObjField] instanceof Function) )
            return true;
        else
            return false;
    }
    
    function jsonXmlElemCount ( jsonObj ) {
        var elementsCnt = 0;
        if(jsonObj instanceof Object ) {
            for( var it in jsonObj  ) {
                if(jsonXmlSpecialElem ( jsonObj, it) )
                    continue;			
                elementsCnt++;
            }
        }
        return elementsCnt;
    }
    
    function checkJsonObjPropertiesFilter(jsonObj, propertyName, jsonObjPath) {
        return config.jsonPropertiesFilter.length == 0
            || jsonObjPath==""
            || checkInStdFiltersArrayForm(config.jsonPropertiesFilter, jsonObj, propertyName, jsonObjPath);	
    }
    
    function parseJSONAttributes ( jsonObj ) {
        var attrList = [];
        if(jsonObj instanceof Object ) {
            for( var ait in jsonObj  ) {
                if(ait.toString().indexOf("__")== -1 && ait.toString().indexOf(config.attributePrefix)==0) {
                    attrList.push(ait);
                }
            }
        }
        return attrList;
    }
    
    function parseJSONTextAttrs ( jsonTxtObj ) {
        var result ="";
        
        if(jsonTxtObj.__cdata!=null) {										
            result+="<![CDATA["+jsonTxtObj.__cdata+"]]>";					
        }
        
        if(jsonTxtObj.__text!=null) {			
            if(config.escapeMode)
                result+=escapeXmlChars(jsonTxtObj.__text);
            else
                result+=jsonTxtObj.__text;
        }
        return result;
    }
    
    function parseJSONTextObject ( jsonTxtObj ) {
        var result ="";

        if( jsonTxtObj instanceof Object ) {
            result+=parseJSONTextAttrs ( jsonTxtObj );
        }
        else
            if(jsonTxtObj!=null) {
                if(config.escapeMode)
                    result+=escapeXmlChars(jsonTxtObj);
                else
                    result+=jsonTxtObj;
            }
        
        return result;
    }
    
    function getJsonPropertyPath(jsonObjPath, jsonPropName) {
        if (jsonObjPath==="") {
            return jsonPropName;
        }
        else
            return jsonObjPath+"."+jsonPropName;
    }
    
    function parseJSONArray ( jsonArrRoot, jsonArrObj, attrList, jsonObjPath ) {
        var result = ""; 
        if(jsonArrRoot.length == 0) {
            result+=startTag(jsonArrRoot, jsonArrObj, attrList, true);
        }
        else {
            for(var arIdx = 0; arIdx < jsonArrRoot.length; arIdx++) {
                result+=startTag(jsonArrRoot[arIdx], jsonArrObj, parseJSONAttributes(jsonArrRoot[arIdx]), false);
                result+=parseJSONObject(jsonArrRoot[arIdx], getJsonPropertyPath(jsonObjPath,jsonArrObj));
                result+=endTag(jsonArrRoot[arIdx],jsonArrObj);
            }
        }
        return result;
    }
    
    function parseJSONObject ( jsonObj, jsonObjPath ) {
        var result = "";	

        var elementsCnt = jsonXmlElemCount ( jsonObj );
        
        if(elementsCnt > 0) {
            for( var it in jsonObj ) {
                
                if(jsonXmlSpecialElem ( jsonObj, it) || (jsonObjPath!="" && !checkJsonObjPropertiesFilter(jsonObj, it, getJsonPropertyPath(jsonObjPath,it))) )
                    continue;			
                
                var subObj = jsonObj[it];						
                
                var attrList = parseJSONAttributes( subObj )
                
                if(subObj == null || subObj == undefined) {
                    result+=startTag(subObj, it, attrList, true);
                }
                else
                if(subObj instanceof Object) {
                    
                    if(subObj instanceof Array) {					
                        result+=parseJSONArray( subObj, it, attrList, jsonObjPath );					
                    }
                    else if(subObj instanceof Date) {
                        result+=startTag(subObj, it, attrList, false);
                        result+=subObj.toISOString();
                        result+=endTag(subObj,it);
                    }
                    else {
                        var subObjElementsCnt = jsonXmlElemCount ( subObj );
                        if(subObjElementsCnt > 0 || subObj.__text!=null || subObj.__cdata!=null) {
                            result+=startTag(subObj, it, attrList, false);
                            result+=parseJSONObject(subObj, getJsonPropertyPath(jsonObjPath,it));
                            result+=endTag(subObj,it);
                        }
                        else {
                            result+=startTag(subObj, it, attrList, true);
                        }
                    }
                }
                else {
                    result+=startTag(subObj, it, attrList, false);
                    result+=parseJSONTextObject(subObj);
                    result+=endTag(subObj,it);
                }
            }
        }
        result+=parseJSONTextObject(jsonObj);
        
        return result;
    }
    
    this.parseXmlString = function(xmlDocStr) {
        var isIEParser = window.ActiveXObject || "ActiveXObject" in window;
        if (xmlDocStr === undefined) {
            return null;
        }
        var xmlDoc;
        if (window.DOMParser) {
            var parser=new window.DOMParser();			
            var parsererrorNS = null;
            // IE9+ now is here
            if(!isIEParser) {
                try {
                    parsererrorNS = parser.parseFromString("INVALID", "text/xml").getElementsByTagName("parsererror")[0].namespaceURI;
                }
                catch(err) {					
                    parsererrorNS = null;
                }
            }
            try {
                xmlDoc = parser.parseFromString( xmlDocStr, "text/xml" );
                if( parsererrorNS!= null && xmlDoc.getElementsByTagNameNS(parsererrorNS, "parsererror").length > 0) {
                    //throw new Error('Error parsing XML: '+xmlDocStr);
                    xmlDoc = null;
                }
            }
            catch(err) {
                xmlDoc = null;
            }
        }
        else {
            // IE :(
            if(xmlDocStr.indexOf("<?")==0) {
                xmlDocStr = xmlDocStr.substr( xmlDocStr.indexOf("?>") + 2 );
            }
            xmlDoc=new ActiveXObject("Microsoft.XMLDOM");
            xmlDoc.async="false";
            xmlDoc.loadXML(xmlDocStr);
        }
        return xmlDoc;
    };
    
    this.asArray = function(prop) {
        if (prop === undefined || prop == null)
            return [];
        else
        if(prop instanceof Array)
            return prop;
        else
            return [prop];
    };
    
    this.toXmlDateTime = function(dt) {
        if(dt instanceof Date)
            return dt.toISOString();
        else
        if(typeof(dt) === 'number' )
            return new Date(dt).toISOString();
        else	
            return null;
    };
    
    this.asDateTime = function(prop) {
        if(typeof(prop) == "string") {
            return fromXmlDateTime(prop);
        }
        else
            return prop;
    };

    this.xml2json = function (xmlDoc) {
        return parseDOMChildren ( xmlDoc );
    };
    
    this.xml_str2json = function (xmlDocStr) {
        var xmlDoc = this.parseXmlString(xmlDocStr);
        if(xmlDoc!=null)
            return this.xml2json(xmlDoc);
        else
            return null;
    };

    this.json2xml_str = function (jsonObj) {
        return parseJSONObject ( jsonObj, "" );
    };

    this.json2xml = function (jsonObj) {
        var xmlDocStr = this.json2xml_str (jsonObj);
        return this.parseXmlString(xmlDocStr);
    };
    
    this.getVersion = function () {
        return VERSION;
    };	
}
},{}],483:[function(require,module,exports){
"use strict";
/**
 * Created by chesli200 on 4/27/15.
 *
 * ## Application
 *
 * ### module
 * A module is an object or a function that returns an object that contains
 * an `init` and `destroy` method. These functions will be injected with a sandbox
 * containing read-only access to properties and functions exposed via `expose`
 * and `exposeProp`.
 *
 * ### children
 * A module can have child modules. Children will be initialized _after_
 * the parent module is initialized and will contain a reference to the parent
 * module via `parent`
 *
 * ### dependencies
 * A module can have dependencies. Dependencies will be initialized _before_
 * the parent module and the instances will be injected into the parent module's
 * `init` function.
 */
Object.defineProperty(exports, "__esModule", { value: true });
require("./Polyfills");
var publicious_1 = require("publicious");
var Logger_1 = require("./util/Logger");
var JSUtil_1 = require("./util/JSUtil");
var rxjs_1 = require("rxjs");
require("rxjs/add/observable/bindCallback");
require("rxjs/add/observable/fromEventPattern");
var modules = {};
var apiInstance;
var sandboxProps = [];
var sandboxDi = {};
var mediator = new publicious_1.PubSub();
var logger = new Logger_1.Logger("Application");
function init(instance) {
    apiInstance = instance;
    // add mediator to api instance
    apiInstance.mediator = mediator;
    for (var mod in modules) {
        if (modules.hasOwnProperty(mod) && modules[mod].options.autostart) {
            startModule(mod);
        }
    }
}
exports.init = init;
function destroy() {
    stopModules();
    apiInstance = null;
    sandboxProps = null;
    modules = {};
    sandboxDi = {};
    mediator = null;
}
exports.destroy = destroy;
function inject(diObj) {
    JSUtil_1.extend(sandboxDi, diObj);
}
exports.inject = inject;
function contains(name) {
    return !!modules[name];
}
exports.contains = contains;
function registerModule(name, mod, options) {
    if (typeof mod === "function") {
        var isConstructor = name[0] === name[0].toUpperCase();
        mod = isConstructor ? new mod() : mod();
    }
    if (!validate(name, mod)) {
        return;
    }
    modules[name] = {
        instance: mod,
        apis: [],
        options: options || {},
        destroyCbs: [],
        onDestroy: function (cb) {
            this.destroyCbs.push(cb);
        }
    };
}
exports.registerModule = registerModule;
function appMediator() {
    return mediator;
}
exports.appMediator = appMediator;
function registerPlugin(name, plugin, options) {
    options = options || {};
    options.plugin = true;
    registerModule(name, plugin, options);
}
exports.registerPlugin = registerPlugin;
function startModule(moduleName) {
    var _argsArray = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        _argsArray[_i - 1] = arguments[_i];
    }
    var mod = modules[moduleName];
    if (!mod) {
        logger.error("Cannot start module " + moduleName + ". No module registered by that name.");
        return;
    }
    var sandbox = new Sandbox(apiInstance, mod);
    var args = [sandbox].concat(Array.prototype.slice.call(arguments, 1));
    args = args.concat(startDependencies(mod));
    var instance = mod.instance;
    if (!mod.sandbox) {
        mod.sandbox = sandbox;
        if (!instance.init.apply(instance, args)) {
            logger.warn(moduleName + " returned null, it has not been started.");
            return null;
        }
    }
    logger.info(moduleName + " started.");
    startChildren(mod);
    return instance;
}
exports.startModule = startModule;
function stopModule(moduleName) {
    var mod = modules[moduleName];
    if (!mod) {
        logger.error("Cannot stop module " + moduleName + ". No module registered by that name.");
        return;
    }
    stopChildren(mod);
    stopDependencies(mod);
    removeAPIs(mod);
    var modObj = mod;
    // It's possible that a module may try to be stopped before ever starting
    if (modObj.sandbox) {
        modObj.instance.destroy(modObj.sandbox);
        if (modObj.destroyCbs.length) {
            modObj.destroyCbs.forEach(function (cb) { return cb(); });
        }
        modObj.sandbox = null;
    }
    logger.info(moduleName + " stopped.");
}
exports.stopModule = stopModule;
function stopModules() {
    for (var mod in modules) {
        if (modules.hasOwnProperty(mod) && modules[mod].options.autostart) {
            stopModule(mod);
        }
    }
}
exports.stopModules = stopModules;
function register(options) {
    if (options === void 0) { options = {}; }
    return function (target) { return registerModule(target["name"], target, options); };
}
exports.register = register;
function expose(_target, propertyKey, descriptor) {
    sandboxProps.push(propertyKey);
    return descriptor;
}
exports.expose = expose;
function exposeProp(_target, propertyKey) {
    sandboxProps.push(propertyKey);
}
exports.exposeProp = exposeProp;
function startChildren(mod) {
    if (!mod.options.children) {
        return;
    }
    mod.options.children.forEach(function (child) {
        modules[child].parent = mod.instance;
        startModule(child);
    });
}
function stopChildren(mod) {
    if (!mod.options.children) {
        return;
    }
    mod.options.children.forEach(function (child) {
        stopModule(child);
    });
}
function startDependencies(mod) {
    return (mod.options.dependencies || []).map(function (dep) {
        modules[dep].parent = mod.instance;
        return startModule(dep);
    });
}
function stopDependencies(mod) {
    (mod.options.dependencies || []).forEach(stopModule);
}
function removeAPIs(mod) {
    mod.apis.forEach(function (api) {
        delete apiInstance[api];
    });
}
function validate(name, constructor) {
    if (!constructor.init || !constructor.destroy) {
        logger.error(name + ": both an init and destroy function must be defined.");
        return false;
    }
    if (typeof constructor.init !== "function" || typeof constructor.destroy !== "function") {
        logger.error(name + ": init and destroy properties must be functions.");
        return false;
    }
    return true;
}
var Sandbox = /** @class */ (function () {
    function Sandbox(api, mod) {
        this._api = api;
        this._mod = mod;
        if (this._mod) {
            var onDestroy = rxjs_1.Observable.bindCallback(this._mod.onDestroy.bind(this._mod));
            this._destroyed = onDestroy();
        }
        this._init(this._api);
    }
    Sandbox.prototype._init = function (api) {
        var _this = this;
        JSUtil_1.extend(this, sandboxDi);
        var props = sandboxProps || [];
        // set exposed methods and properties on sandbox
        props.forEach(function (prop) {
            if (typeof api[prop] === "function") {
                _this._setFunction(prop);
            }
            else {
                _this._setProperty(prop);
            }
        });
    };
    Sandbox.prototype._setFunction = function (func) {
        this[func] = function () {
            return this.api[func].apply(this._api, arguments);
        };
    };
    Sandbox.prototype._setProperty = function (prop) {
        Object.defineProperty(this, prop, {
            get: function () {
                return this._api[prop];
            }
        });
    };
    Sandbox.prototype.publish = function () {
        mediator.publish.apply(mediator, arguments);
    };
    Sandbox.prototype.subscribe = function () {
        return mediator.subscribe.apply(mediator, arguments);
    };
    Sandbox.prototype.remove = function () {
        mediator.remove.apply(mediator, arguments);
    };
    Sandbox.prototype.addAPI = function (name, prop) {
        if (this._mod.options.plugin) {
            apiInstance[name] = prop;
            this._mod.apis.push(name);
        }
        else {
            logger.warn("Must register as a plugin to add an API");
        }
    };
    Object.defineProperty(Sandbox.prototype, "parent", {
        get: function () {
            return this._mod.parent;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sandbox.prototype, "api", {
        get: function () {
            return apiInstance;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sandbox.prototype, "destroyed", {
        get: function () {
            return this._destroyed;
        },
        enumerable: true,
        configurable: true
    });
    return Sandbox;
}());
exports.Sandbox = Sandbox;
function toObservable(name, priority) {
    if (priority === void 0) { priority = { priority: 4 }; }
    return rxjs_1.Observable.fromEventPattern(function (handler) { return mediator.subscribe(name, handler, priority, {}); }, function (handler) { return mediator.remove(name, handler); }).map(function (t) { return Array.isArray(t) ? t[0] : t; });
}
exports.toObservable = toObservable;

},{"./Polyfills":492,"./util/JSUtil":569,"./util/Logger":571,"publicious":165,"rxjs":281,"rxjs/add/observable/bindCallback":238,"rxjs/add/observable/fromEventPattern":243}],484:[function(require,module,exports){
"use strict";
/**
 * Created by chesli200 on 7/16/15.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var publicious_1 = require("publicious");
var Logger_1 = require("./util/Logger");
var ContentOptions_1 = require("./assets/ContentOptions");
var JSUtil_1 = require("./util/JSUtil");
var rxjs_1 = require("rxjs");
require("rxjs/add/observable/dom/ajax");
require("rxjs/add/operator/toPromise");
/**
 * @hidden
 */
var defaults = require("./config.json");
/**
 * @hidden
 */
var instance;
/**
 * Use to load configuration values from external JSON files or an object containing
 * config properties. This class should be used as a singleton.
 *
 * #### Example:
 * ```
 *  let configManager = pp.ConfigurationManager.getInstance();
 *
 *  // setup callbacks. use these when loading configuration from a remote URL
 *  configManager.onFailure(function() {
 *      // config failed to load, possibly retry
 *  });
 *
 *  configManager.onSuccess(function() {
 *      // config values loaded successfully
 *  });
 *
 *  configManager.loadConfiguration("http://someConfigUrl/config.json");
 *
 *  // or just load configuration with a plain JS object. No callbacks required here
 *
 *  configManager.loadConfiguration({
 *      retryOnMediaFailed: "true",
 *      defaultAsset: {
 *          initialBitrate: 0,
 *          initialBufferTime: 2000
 *      }
 *  });
 *
 *
 * ```
 */
var ConfigurationManager = /** @class */ (function () {
    function ConfigurationManager() {
        this.values = {};
        this._logger = new Logger_1.Logger("ConfigurationManager");
        this._mediator = new publicious_1.PubSub();
    }
    /**
     * Add a listener to the configuration manager. This should be either ERROR or SUCCESS.
     *
     * @param {string} type - either ERROR or SUCCESS
     * @param {Function} listener - callback
     * @param {*} context - function context
     */
    ConfigurationManager.prototype.addEventListener = function (type, listener, context) {
        return this._mediator.on(type, listener, {}, context);
    };
    /**
     * Remove an event listener from the configuration manager.
     *
     * @param {string} type
     * @param {Function} listener
     */
    ConfigurationManager.prototype.removeEventListener = function (type, listener) {
        this._mediator.off(type, listener);
    };
    /**
     * Add a success listener
     *
     * @param {Function} listener
     * @param {*} [context]
     */
    ConfigurationManager.prototype.onSuccess = function (listener, context) {
        return this.addEventListener(ConfigurationManager.SUCCESS, listener, context);
    };
    /**
     * Add a failure listener
     *
     * @param {Function} listener
     * @param {*} [context]
     */
    ConfigurationManager.prototype.onFailure = function (listener, context) {
        return this.addEventListener(ConfigurationManager.ERROR, listener, context);
    };
    /**
     * This returns true if the configuration manager has successfully loaded a configuration.
     *
     * @returns {boolean}
     */
    ConfigurationManager.prototype.isReady = function () {
        return this._isReady;
    };
    /**
     * Loads configuration values from the given object. The object
     * can be a URL string pointing to a JSON file, a JSON object. If
     * configurationObject is not specified, the default set is loaded.
     *
     *
     * @param {object|string} configurationObject
     * @param optionalStr
     */
    ConfigurationManager.prototype.loadConfiguration = function (configurationObject, optionalStr) {
        var _this = this;
//WMR Http not working so loading directly
this.values = {
  "productType": "cdvr",
  "drmNetworkRequestTimeout": 10000,
  "licenseServerUrl": "https://mds.ccp.xcal.tv",

  "easNetworkRequestTimeout": 10000,
  "zipToFipsEndPoint": "https://easip-client-po.ccp.xcal.tv/easws/api/fips/zip/",
  "alertServiceEndPoint": "https://easip-client-po.ccp.xcal.tv/easws/api/alert/active/fipscode/",
  "easUpdateInterval": 15000,
  "easAlertRepeat": 1,
  "easAlertFontSize": "20.0f",
  "easAlertFont": "Helvetica-Bold",

  "analyticsNetworkRequestTimeout": 10000,
  "analyticsEndPoint": "https://analytics.xcal.tv/comcast/player",
  "analyticsProtocol": "2.0",
  "analyticsDeviceType": "STB",
  "maxBatchSize": 10,
  "maxQueueSize": 100,
  "batchInterval": 5000,
  "fogAnalyticsEndPoint": "https://analytics.xcal.tv/comcast/fog",
  "failOnNetworkDown": true,

  "playerNetworkRequestTimeout": 10000,
  "heartbeatInterval": 60000,
  "autoplay": true,
  "retryInterval": 1000,
  "manifestManipulatorRetries": 1,
  "manifestManipulatorTimeout": 4000,
  "retryOnMediaFailed": true,
  "updateInterval": 1000,
  "partnerId": "Comcast",
  "enableAds": false,
  "stalledTimeout": 10000,

  "defaultAsset": {
    "cdnRedundant": false,
    "maximumRetries": 5,
    "ddPlus": false,
    "initialPolicy": 0,
    "playingPolicy": 2,
    "initialBitrate": 0,
    "maximumBitrate": 12000000,
    "playbackStalledEnabled": true,
    "minimumBitrate": 100000,
    "initialBufferTime": 4000,
    "playingVODBufferTime": 15000,
    "playingLinearBufferTime": 15000,
    "placementRequestEndPoint": "https://ccpvab-po-v103-p.po.ccp.cable.comcast.com/PlacementRequest",
    "placementStatusNotificationEndPoint": "https://altcon-vexdr-prod1.ccp.xcal.tv/vex-director/PlacementStatusNotification"
  },

  "ott": {
    "freeWheelConfig": {
      "mvpdString": "xtv",
      "playerProfileMvpd": "384777:comcast_sports",
      "freewheelPlatform": "ott_x1",
      "playerProfilePlatform": "x1_js",
      "networkId": "384777",
      "serverUrl": "https://5df09.v.fwmrm.net/",
      "contentType": "application/x-mpegurl",
      "preventFreeWheelTrackingEvents": true
    }
  },

  "title6Vod": {
      "ddPlus": true
  },

  "title6Linear": {
      "cdnRedundant": true,
      "forceHttps": true
  },

  "xi3": {
    "enableAds": true,
    "defaultAsset": {
      "playingVODBufferTime": 24000
    }
  },
  "xi4": {
    "defaultAsset": {
      "playingVODBufferTime": 24000,
      "maximumBitrate": 14000000
    }
  },
  "xid": {
    "enableAds": true,
    "defaultAsset": {
      "playingVODBufferTime": 24000,
      "maximumBitrate": 14000000
    }
  },
  "xi5": {
    "enableAds": true,
    "defaultAsset": {
      "playingVODBufferTime": 24000
    }
  },
  "xg1v4": {
    "defaultAsset": {
      "maximumBitrate": 20000000
    }
  }
};
this.success();
return this;
        if (configurationObject === void 0) { configurationObject = defaults; }
        this._logger.trace("loadConfiguration: " + JSON.stringify(configurationObject, null, 2));
        if (typeof configurationObject === "string") {
            this.load(configurationObject, function (err) {
                if (err) {
                    if (optionalStr) {
                        _this.loadConfiguration(optionalStr);
                    }
                    else {
                        _this._isReady = false;
                        _this._logger.error("Error loading config file at " + configurationObject);
                        _this._mediator.publish(ConfigurationManager.ERROR, err.toString(), configurationObject);
                    }
                    return _this;
                }
                _this.success();
            });
        }
        else {
            this.loadValues(configurationObject);
            this.success();
        }
        return this;
    };
    ConfigurationManager.prototype.fetchConfiguration = function (url) {
        var _this = this;
        return rxjs_1.Observable.ajax.get(url)
            .do(function (res) {
            _this.loadValues(res.response);
            _this.success();
        })
            .mapTo(this)
            .catch(function (err) {
            var description = err && err.toString() || "";
            _this._logger.error("error loading config file at " + url + ". " + description + ", " + err.stack);
            _this._isReady = false;
            _this._mediator.publish(ConfigurationManager.ERROR, description, url);
            throw err;
        })
            .toPromise();
    };
    /**
     * Loads a nested set of parameters into the main config set. For example this is
     * used to load the set of parameters for a default asset into the main config set.
     *
     * @param propertyNames
     */
    ConfigurationManager.prototype.extendConfiguration = function () {
        var propertyNames = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            propertyNames[_i] = arguments[_i];
        }
        for (var _a = 0, propertyNames_1 = propertyNames; _a < propertyNames_1.length; _a++) {
            var key = propertyNames_1[_a];
            var obj = this.values[key];
            if (obj && typeof obj === "object") {
                this.values = deepExtend({}, this.values, obj, this.values.user || {});
            }
        }
    };
    ConfigurationManager.prototype.destroy = function () {
        this.values = {};
        this._isReady = false;
        instance = null;
    };
    /**
     * Retrieve a config value as a string. If a default value is given and no value is
     * found for the key, use the default value instead.
     *
     * @param {string} key
     * @param {string} [defaultValue]
     * @returns {*}
     */
    ConfigurationManager.prototype.get = function (key, defaultValue) {
        var value = defaultValue;
        if (this.values.hasOwnProperty(key)) {
            value = this.values[key];
        }
        else {
            this._logger.warn("get: " + key + " not found, using default value: " + defaultValue);
            value = defaultValue;
        }
        return value;
    };
    /**
     * In our configuration file we use a key based on the type of asset.
     * @param asset an asset
     * @return string key used in configuration file
     */
    ConfigurationManager.prototype.getAssetType = function (asset) {
        if (ContentOptions_1.isEAS(asset)) {
            return "easAsset";
        }
        return asset.assetType;
    };
    /**
     * Retrieve an assetType-specific config value as it's JSON type. If a
     * default value is given and no value is found for the key, use the
     * default value instead.
     *
     * @param {string} assetType
     * @param {string} key
     * @param {string} [defaultValue]
     * @returns {*}
     */
    ConfigurationManager.prototype.getByAssetType = function (assetType, key, defaultValue) {
        var value = JSUtil_1.getNestedProperty(this.values, assetType + "." + key);
        // use default values if nothing found
        if (value === undefined) {
            value = JSUtil_1.getNestedProperty(this.values, "defaultAsset." + key);
        }
        if (value !== undefined) {
            return value;
        }
        else {
            this._logger.warn("get: " + key + " not found, using default value: " + defaultValue);
            return defaultValue;
        }
    };
    /**
     * Combined overload method for updating config.
     *
     * @param keyOrValues
     * @param value
     */
    ConfigurationManager.prototype.update = function (keyOrValues, value) {
        if (!this.values.user) {
            this.values.user = {};
        }
        if (typeof keyOrValues === "string") {
            this.values.user[keyOrValues] = value;
        }
        else {
            deepExtend(this.values.user, keyOrValues);
        }
        deepExtend(this.values, this.values.user);
    };
    ConfigurationManager.getInstance = function () {
        if (!instance) {
            instance = new ConfigurationManager();
        }
        return instance;
    };
    ConfigurationManager.prototype.load = function (url, cb) {
        var _this = this;
        rxjs_1.Observable.ajax.get(url)
            .subscribe(function (res) {
            try {
                _this.loadValues(res.response);
            }
            catch (error) {
                cb(error.toString());
                return;
            }
            cb();
        }, function (err) {
            cb(err || "no response text");
        });
    };
    ConfigurationManager.prototype.loadValues = function (values) {
        this.values = deepExtend({}, defaults, values);
        this.values.defaultAsset = this.loadDefaultParams(this.values);
        this.extendConfiguration(ConfigurationManager.DEFAULT_ASSET);
    };
    ConfigurationManager.prototype.success = function () {
        this._isReady = true;
        this._mediator.publish(ConfigurationManager.SUCCESS, this.values);
    };
    /**
     * we need to extend the given default asset settings with our own defaults, in case they don't provide
     * all options. This also contains backwards compatibility for when asset config options are passed in
     * with the flat JSON object (not contained in `defaultAsset` property).
     *
     * @param configurationObject
     * @returns {void|*}
     */
    ConfigurationManager.prototype.loadDefaultParams = function (configurationObject) {
        var defaultSettings = defaults.defaultAsset;
        // if it already exists, extend it with default settings
        if (configurationObject.defaultAsset) {
            return deepExtend({}, defaultSettings, configurationObject.defaultAsset);
        }
        // otherwise try and grab necessary keys from flat JSON object and place into `defaultAsset` object
        var defaultKeys = Object.keys(defaultSettings);
        var userSettings = defaultKeys.filter(function (key) { return configurationObject.hasOwnProperty(key); }).reduce(function (obj, key) {
            obj[key] = configurationObject[key];
            return obj;
        }, {});
        return deepExtend({}, defaultSettings, userSettings);
    };
    //PLAYER
    ConfigurationManager.PLAYER_NETWORK_REQUEST_TIMEOUT = "playerNetworkRequestTimeout";
    ConfigurationManager.HEARTBEAT_INTERVAL = "heartbeatInterval";
    ConfigurationManager.AUTOPLAY = "autoplay";
    ConfigurationManager.MAXIMUM_BITRATE = "maximumBitrate";
    ConfigurationManager.MINIMUM_BITRATE = "minimumBitrate";
    ConfigurationManager.INITIAL_BITRATE = "initialBitrate";
    ConfigurationManager.INITIAL_POLICY = "initialPolicy";
    ConfigurationManager.INITIAL_BUFFER_TIME = "initialBufferTime";
    ConfigurationManager.PLAYING_VOD_BUFFER_TIME = "playingVODBufferTime";
    ConfigurationManager.PLAYING_LINEAR_BUFFER_TIME = "playingLinearBufferTime";
    ConfigurationManager.PLAYING_POLICY = "playingPolicy";
    ConfigurationManager.RETRY_INTERVAL = "retryInterval";
    ConfigurationManager.MAXIMUM_RETRIES = "maximumRetries";
    ConfigurationManager.MANIFEST_MANIPULATOR_RETRIES = "manifestManipulatorRetries";
    ConfigurationManager.MANIFEST_MANIPULATOR_TIMEOUT = "manifestManipulatorTimeout";
    ConfigurationManager.ENABLE_MULTISITE_VOD_DAI = "enableMultiSiteVODDAI";
    ConfigurationManager.HTTP_START_TRANSFER_TIMEOUT = "httpStartTransferTimeout";
    ConfigurationManager.HTTP_TOTAL_TIMEOUT = "httpTotalTimeout";
    ConfigurationManager.VPAID_TIMEOUT = "vpaidTimeout";
    ConfigurationManager.CLINEAR_DAI_ENABLED = "cLinearDAIEnabled";
    ConfigurationManager.FORCE_HTTPS = "forceHttps";
    ConfigurationManager.RGB_URL_REWRITE_HOST = "rgbUrlRewriteHost";
    ConfigurationManager.NETWORK_DOWN_TIMEOUT = "networkDownTimeout";
    ConfigurationManager.FAIL_ON_NETWORK_DOWN = "failOnNetworkDown";
    ConfigurationManager.RETRY_ON_MEDIA_FAILED = "retryOnMediaFailed";
    ConfigurationManager.UPDATE_INTERVAL = "updateInterval";
    ConfigurationManager.PARTNER_ID = "partnerId";
    ConfigurationManager.ENABLE_ADS = "enableAds";
    ConfigurationManager.WATERMARK = "watermark";
    ConfigurationManager.DEFAULT_ENGINE = "defaultEngine";
    ConfigurationManager.DD_PLUS = "ddPlus";
    ConfigurationManager.CDN_REDUNDANT = "cdnRedundant";
    ConfigurationManager.CROSS_STREAM_PREVENTION = "crossStreamPrevention";
    ConfigurationManager.STALLED_TIMEOUT = "stalledTimeout";
    ConfigurationManager.TRICKPLAY_MAX_FPS = "trickPlayMaxFps";
    // PlayerPlatform Parameters
    ConfigurationManager.CBS_SWF_URL = "cbsSwfUrl";
    ConfigurationManager.CBS_CHROMELESS_PATH = "cbsChromelessPath";
    ConfigurationManager.CBS_PARTNER = "cbsPartner";
    ConfigurationManager.PLAYBACKSTALLED_ENABLED = "playbackStalledEnabled";
    ConfigurationManager.DISNEY_LOAD_TIMEOUT = "disneyLoadTimeout";
    ConfigurationManager.DISNEY_SWF_URL = "disneySwfUrl";
    ConfigurationManager.DISNEY_CHROMELESS_PATH = "disneyChromelessPath";
    ConfigurationManager.DISNEY_PARTNER = "disneyPartner";
    ConfigurationManager.DRM_SWF_URL = "drmSwfUrl";
    ConfigurationManager.ESPN_SWF_URL = "espnSwfUrl";
    ConfigurationManager.ESPN_CHROMELESS_PATH = "espnChromelessPath";
    ConfigurationManager.ESPN_PARTNER = "espnPartner";
    ConfigurationManager.ESPN_CONFIG_URL = "espnConfigUrl";
    ConfigurationManager.GLOBAL_TOKENS_URL = "globalTokensUrl";
    ConfigurationManager.SWF_URL = "swfUrl";
    ConfigurationManager.HULU_NEW_SITE_URL_STD = "huluNewSiteUrlStd";
    ConfigurationManager.HULU_NEW_SITE_URL_WIDE = "huluNewSiteUrlWide";
    ConfigurationManager.NBC_CONDITIONED_STREAM_API = "nbcConditionedStreamApi";
    //EAS
    ConfigurationManager.EAS_NETWORK_REQUEST_TIMEOUT = "easNetworkRequestTimeout";
    ConfigurationManager.ZIPS_TO_FIPS_END_POINT = "zipToFipsEndPoint";
    ConfigurationManager.ALERT_SERVICE_END_POINT = "alertServiceEndPoint";
    ConfigurationManager.EAS_UPDATE_INTERVAL = "easUpdateInterval";
    ConfigurationManager.EAS_ALERT_REPEAT = "easAlertRepeat";
    ConfigurationManager.EAS_ALERT_FONT_SIZE = "easAlertFontSize";
    ConfigurationManager.EAS_ALERT_FONT = "easAlertFont";
    ConfigurationManager.EAS_ENABLED = "easEnabled";
    ConfigurationManager.EAS_LANGUAGE = "easLanguage";
    ConfigurationManager.HELIO_EAS = "helioEas";
    ConfigurationManager.EAS_TEXT_OVERLAY = "easTextOverlay";
    //ANALYTICS
    ConfigurationManager.ANALYTICS_NETWORK_REQUEST_TIMEOUT = "analyticsNetworkRequestTimeout";
    ConfigurationManager.ANALYTICS_END_POINT = "analyticsEndPoint";
    ConfigurationManager.ANALYTICS_PROTOCOL = "analyticsProtocol";
    ConfigurationManager.ANALYTICS_DEVICE_TYPE = "analyticsDeviceType";
    ConfigurationManager.MAX_BATCH_SIZE = "maxBatchSize";
    ConfigurationManager.MAX_QUEUE_SIZE = "maxQueueSize";
    ConfigurationManager.BATCH_INTERVAL = "batchInterval";
    ConfigurationManager.LOGSTASH_ENDPOINT = "logstashEndpoint";
    ConfigurationManager.TELEMETRY_ENDPOINT = "telemetryEndPoint";
    ConfigurationManager.FOG_ANALYTICS_END_POINT = "fogAnalyticsEndPoint";
    //comScore
    ConfigurationManager.COMSCORE = "comScore";
    ConfigurationManager.COMSCORE_ENABLED = "comScoreEnabled";
    //VSS
    ConfigurationManager.VSS_ENABLED = "vssEnabled";
    ConfigurationManager.VSS_SERVICE_ZONE_CALLBACK_TIMEOUT = "vssServiceZoneCallbackTimeout";
    //Adobe Audience Manager
    ConfigurationManager.AUDIENCE_MANAGER = "audienceManager";
    ConfigurationManager.AUDIENCE_MANAGER_ENABLED = "audienceManagerEnabled";
    //DRM
    ConfigurationManager.DRM_ENABLED = "drmEnabled";
    ConfigurationManager.DRM_NETWORK_REQUEST_TIMEOUT = "drmNetworkRequestTimeout";
    ConfigurationManager.CIMA_END_POINT = "cimaEndPoint";
    ConfigurationManager.METADATA_END_POINT = "metadataEndPoint";
    ConfigurationManager.PRODUCT_TYPE = "productType";
    ConfigurationManager.LICENSE_SERVER_URL = "licenseServerUrl";
    //Auditude ADS
    ConfigurationManager.DOMAIN_ID = "domainId";
    ConfigurationManager.ZONE_ID = "zoneId";
    ConfigurationManager.CUSTOM_PARAMS = "customParams";
    ConfigurationManager.AUDITUDE_TIMEOUT = "auditudeTimeout";
    ConfigurationManager.HANDLE_CLICKS = "handleClicks";
    ConfigurationManager.CRS_RULES_ENDPOINT = "crsRulesEndpoint";
    //FreeWheel ADS
    ConfigurationManager.FREE_WHEEL_CONFIG = "freeWheelConfig";
    //Comcast ADS
    ConfigurationManager.PLACEMENT_REQUEST_END_POINT = "placementRequestEndPoint";
    ConfigurationManager.PLACEMENT_STATUS_NOTIFICATION_URL_END_POINT = "placementStatusNotificationEndPoint";
    //Misc
    ConfigurationManager.TIMEOUT = 10000;
    ConfigurationManager.ZOOM = "zoom";
    ConfigurationManager.AUDIO_LANGUAGE = "audioLanguage";
    // Defaults
    ConfigurationManager.DEFAULT_ASSET = "defaultAsset";
    ConfigurationManager.DEFAULT_INITIAL_BUFFER_TIME = 250;
    ConfigurationManager.DEFAULT_PLAYING_BUFFER_TIME = 12000;
    ConfigurationManager.DEFAULT_PLAYING_VOD_BUFFER_TIME = 12000;
    ConfigurationManager.DEFAULT_PLAYING_LINEAR_BUFFER_TIME = 12000;
    // Helio
    ConfigurationManager.REPORT_HELIO_METRICS = "reportHelioMetrics";
    /**
     * There was an error loading or parsing the configuration.
     *
     * @event configurationFailure
     */
    ConfigurationManager.ERROR = "configurationFailure";
    ConfigurationManager.ERROR_EVENT_TYPE = ConfigurationManager.ERROR;
    /**
     * Configuration has been successfully loaded.
     *
     * @event configurationLoaded
     */
    ConfigurationManager.SUCCESS = "configurationLoaded";
    ConfigurationManager.SUCCESS_EVENT_TYPE = ConfigurationManager.SUCCESS;
    /**
     * Home Network Analytics Configuration
     */
    /**
     * Whether home network analytics is enabled for this asset type
     */
    ConfigurationManager.HNA_ENABLED = "hnaEnabled";
    /**
     * The timeout to use per network request on a test
     */
    ConfigurationManager.HNA_TIMEOUT = "hnaTimeout";
    /**
     * The endpoint to use for a CDN test, this will be appended to
     * the base url of the current asset
     */
    ConfigurationManager.HNA_CDN_ENDPOINT = "hnaCDNEndpoint";
    /**
     * The endpoint to use for AWS, this will be the AWS url we resolve
     * for the INTERNET test
     */
    ConfigurationManager.HNA_AWS_ENDPOINT = "hnaAWSEndpoint";
    return ConfigurationManager;
}());
exports.ConfigurationManager = ConfigurationManager;
/**
 * This is like `JSUtil.extend` method but will extend all nested obects
 * recursively as well.
 *
 * Warning in some cases this function copies objects by reference, and can lead to unexpected results when extending
 * objects that contain objects.
 *
 * Example:
 * let obj1 = { param1: { param2: "val21" };
 * let obj2 = { param1: { param2: "val22" };
 * deepExtend({}, obj1, obj2};
 * my_console_log(obj1.param2); => val22
 *
 * This is because param1 is copied by reference from obj1 into the target object, then "val22" is copied from obj2
 * to the target object, overwriting the param2 value contained in the param1 object referenced by target and obj1.
 *
 * @param target
 * @param sources
 * @returns {any}
 *
 * @hidden
 * @notes
 */
function deepExtend(target) {
    var sources = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        sources[_i - 1] = arguments[_i];
    }
    if (!sources.length || !target) {
        return target;
    }
    for (var _a = 0, sources_1 = sources; _a < sources_1.length; _a++) {
        var source = sources_1[_a];
        for (var _b = 0, _c = Object.keys(source); _b < _c.length; _b++) {
            var key = _c[_b];
            if (target[key] && typeof source[key] === "object") {
                target[key] = deepExtend(target[key], source[key]);
            }
            else if (source[key] !== undefined) {
                target[key] = source[key];
            }
        }
    }
    return target;
}
exports.getConfigurationManager = function () {
    return ConfigurationManager.getInstance();
};

},{"./assets/ContentOptions":538,"./config.json":543,"./util/JSUtil":569,"./util/Logger":571,"publicious":165,"rxjs":281,"rxjs/add/observable/dom/ajax":239,"rxjs/add/operator/toPromise":278}],485:[function(require,module,exports){
"use strict";
/**
 * Created by tpi on 11/10/14.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * MediaSegmentRestriction
 * restrictions: limit=0 means never restricted, -1 means always restricted, and
 * any other value means the # of times the segment must be viewed to relax restriction
 * @constructor
 */
var MediaSegmentRestrictions = /** @class */ (function () {
    function MediaSegmentRestrictions() {
        this.fastForward = 0;
        this.rewind = 0;
        this.pause = 0;
    }
    return MediaSegmentRestrictions;
}());
exports.MediaSegmentRestrictions = MediaSegmentRestrictions;
/**
 * MediaSegment
 * @param {String} id                   unique identifier to associate with segment
 * @param {String} type                  one of MediaSegment.TYPE_CONTENT or TYPE_AD
 * @param {Number} start                start time of segment in milliseconds
 * @param {Number} duration             duration of segment in milliseconds
 * @constructor
 */
var MediaSegment = /** @class */ (function () {
    function MediaSegment(id, // unique identifier for the segment
    segmentType, // one of "content" or "ad"
    start, // offset of segment from the start of the asset, in milliseconds
    duration // duration of segment in milliseconds
    ) {
        this.id = id;
        this.segmentType = segmentType;
        this.start = start;
        this.duration = duration;
        this.restrictions = new MediaSegmentRestrictions();
    }
    /**
     * set the trick mode restrictions for the media segment
     * @method setRestrictions
     * @param {Number} fastForward
     * @param {Number} rewind
     * @param {Number} pause
     */
    MediaSegment.prototype.setRestrictions = function (fastForward, rewind, pause) {
        this.restrictions.fastForward = fastForward;
        this.restrictions.rewind = rewind;
        this.restrictions.pause = pause;
    };
    /**
     * return the end time of the media segment in milliseconds
     * @method getEnd
     * @returns {Number}
     */
    MediaSegment.prototype.getEnd = function () {
        return this.start + this.duration;
    };
    /**
     * return a clone of this MediaSegment object
     * @method clone
     * @returns {Object}
     */
    MediaSegment.prototype.clone = function () {
        var newSeg = new MediaSegment(this.id, this.segmentType, this.start, this.duration);
        newSeg.restrictions.fastForward = this.restrictions.fastForward;
        newSeg.restrictions.rewind = this.restrictions.rewind;
        newSeg.restrictions.pause = this.restrictions.pause;
        return newSeg;
    };
    /**
     * Convert to new object to include only the required fields.
     *
     * @returns {Object}
     */
    MediaSegment.prototype.toObject = function () {
        return {
            id: this.id,
            segmentType: this.segmentType,
            start: this.start,
            duration: this.duration,
            restrictions: this.restrictions
        };
    };
    MediaSegment.fromAd = function (ad) {
        var mediaSegment = new MediaSegment(ad.id, MediaSegment.TYPE_AD, ad.startTime, ad.duration);
        var limits = ad.restrictionLimits;
        mediaSegment.setRestrictions(limits.fastForward, limits.rewind, limits.pause);
        return mediaSegment;
    };
    MediaSegment.createAdSegments = function (ads) {
        return ads
            .map(function (adBreak) { return adBreak.ads; }) // get VideoAds from breaks
            .reduce(function (prev, next) { return prev.concat(next); }, []) // flatten
            .map(MediaSegment.fromAd); // convert to MediaSegment
    };
    MediaSegment.createContentSegments = function (ads, asset, duration) {
        if (!ads.length) {
            return;
        }
        // create all content segments except pre-roll
        var contentSegments = ads.reduce(function (prev, next, idx, arr) {
            if (next.startTime === 0) {
                return prev;
            }
            var startTime = (arr[idx - 1] || {}).endTime || 0;
            var calculatedDuration = next.startTime - startTime;
            return prev.concat(new MediaSegment(asset.id, MediaSegment.TYPE_CONTENT, startTime, calculatedDuration));
        }, []);
        // check for post roll
        var lastBreak = ads[ads.length - 1];
        if (lastBreak.endTime !== duration) {
            contentSegments.push(new MediaSegment(asset.id, MediaSegment.TYPE_CONTENT, lastBreak.endTime, duration - lastBreak.endTime));
        }
        return contentSegments;
    };
    MediaSegment.createSegments = function (ads, asset, duration) {
        var adSegments = MediaSegment.createAdSegments(ads);
        var contentSegments = MediaSegment.createContentSegments(ads, asset, duration);
        return contentSegments
            .concat(adSegments)
            .sort(function (seg1, seg2) { return seg1.start - seg2.start; });
    };
    MediaSegment.TYPE_CONTENT = "content";
    MediaSegment.TYPE_AD = "ad";
    return MediaSegment;
}());
exports.MediaSegment = MediaSegment;

},{}],486:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var x2json_1 = require("x2json");
var PPError_1 = require("./PPError");
var JSUtil_1 = require("./util/JSUtil");
var xml2js = new x2json_1.X2JS();
/**
 * Parses an MPX SMIL response and returns the src URL. If no URL is found or any
 * exception is present, the `error` property will be populated with a `ClientError`.
 *
 * #### MPX suberror codes:
 * - 0: parse error
 * - 10: network error
 * - 20: unavailable error
 * - 21: out of country error
 * - 22: geo-location blocked error
 * - 23: expired error
 */
var MpxParser = /** @class */ (function () {
    function MpxParser() {
    }
    /**
     * Add description
     * @param xml
     */
    MpxParser.prototype.parse = function (xml) {
        var url = "";
        var js = xml2js.xml_str2json(xml);
        this._js = js;
        var seq = JSUtil_1.getNestedProperty(js, "smil.body.seq");
        if (seq) {
            var video = seq.par ? seq.par.video : seq.video; // try for video tag, including <par>
            var tag = video || seq.ref; // use <ref> tag if video doesn't exist
            url = tag ? tag._src.replace(/\?.*/, "") : "";
        }
        this.error = this._parseError(url);
        if (this.error) {
            return null;
        }
        return url;
    };
    MpxParser.prototype._parseError = function (url) {
        if (url.indexOf("/Untitled") !== -1) {
            return new PPError_1.PPError(PPError_1.MPX_ERROR, 21, "Out of country");
        }
        else if (url.indexOf("/Unavailable") !== -1) {
            return this._getErrorFromException();
        }
    };
    MpxParser.prototype._getErrorFromException = function () {
        var js = this._js;
        var params = JSUtil_1.getNestedProperty(js, "smil.body.seq.ref.param");
        if (params) {
            params = Array.isArray(params) ? params : [params];
            // grab first exception
            var exception = params.filter(function (param) { return param._name === "exception"; })[0];
            switch (exception._value) {
                case "GeoLocationBlocked":
                    return new PPError_1.PPError(PPError_1.MPX_ERROR, 22, "Geo location blocked");
                case "Expired":
                    return new PPError_1.PPError(PPError_1.MPX_ERROR, 23, "Expired");
                default:
                    break;
            }
        }
        return new PPError_1.PPError(PPError_1.MPX_ERROR, 20, "MPX URL unavailable");
    };
    return MpxParser;
}());
exports.MpxParser = MpxParser;

},{"./PPError":487,"./util/JSUtil":569,"x2json":482}],487:[function(require,module,exports){
"use strict";
/**
 * Created by chesli200 on 5/10/16.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.MPX_ERROR = 7510;
exports.STALLED_ERROR = 7600;
// Sec Client Major Code
exports.SEC_CLIENT_ERROR = 1;
// Sec Client Minor Code
var SecClientErrorCodes;
(function (SecClientErrorCodes) {
    SecClientErrorCodes[SecClientErrorCodes["NO_MANIFEST_ERROR"] = 1] = "NO_MANIFEST_ERROR";
    SecClientErrorCodes[SecClientErrorCodes["UNFOUND_PSSH_ERROR"] = 2] = "UNFOUND_PSSH_ERROR";
    SecClientErrorCodes[SecClientErrorCodes["KEY_SYSTEM_NOT_FOUND_ERROR"] = 3] = "KEY_SYSTEM_NOT_FOUND_ERROR";
    SecClientErrorCodes[SecClientErrorCodes["CONTENT_META_DATA_NOT_FOUND_ERROR"] = 4] = "CONTENT_META_DATA_NOT_FOUND_ERROR";
})(SecClientErrorCodes = exports.SecClientErrorCodes || (exports.SecClientErrorCodes = {}));
/**
 * Container class for errors generated by PlayerPlatform. An error should always have a major code
 * and a description but a minor code is optional.
 */
var PPError = /** @class */ (function () {
    function PPError(major, minor, description, isWarning) {
        if (isWarning === void 0) { isWarning = false; }
        this.major = major;
        this.minor = minor;
        this.description = description;
        this.isWarning = isWarning;
    }
    Object.defineProperty(PPError.prototype, "code", {
        /**
         * retrieve the error code string with major and minor separated by
         * a period if a minor code is defined.
         *
         * @returns {string}
         */
        get: function () {
            if (this.minor === undefined || this.minor === null || this.minor === "") {
                return "" + this.major;
            }
            else {
                return this.major + "." + this.minor;
            }
        },
        enumerable: true,
        configurable: true
    });
    PPError.prototype.toString = function () {
        if (this.description) {
            return "[" + this.code + "] " + this.description;
        }
        else {
            return "[" + this.code + "]";
        }
    };
    PPError.prototype.shouldRetry = function () {
        // Major Error 3329 are entitlement errors which should not be retried.
        return (typeof this.major === "string" ? parseInt(this.major) : this.major) !== 3329;
    };
    return PPError;
}());
exports.PPError = PPError;

},{}],488:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
require("./ads/AdManagerFactory");
var app = require("./Application");
var detect_browser_1 = require("detect-browser");
var constants = require("./PlayerPlatformConstants");
var events = require("./PlayerPlatformAPIEvents");
var AnalyticsProvider_1 = require("./analytics/AnalyticsProvider");
var PlaybackStateMonitor_1 = require("./analytics/PlaybackStateMonitor");
var EASPoller_1 = require("./eas/EASPoller");
var EmergencyAlert_1 = require("./eas/EmergencyAlert");
var ConfigurationManager_1 = require("./ConfigurationManager");
var XSCTToken_1 = require("./util/XSCTToken");
var Logger_1 = require("./util/Logger");
var PlayerPlatformStreams_1 = require("./PlayerPlatformStreams");
var rxjs_1 = require("rxjs");
require("rxjs/add/observable/empty");
require("rxjs/add/observable/throw");
require("rxjs/add/operator/withLatestFrom");
require("rxjs/add/operator/take");
require("rxjs/add/operator/takeUntil");
var PPError_1 = require("./PPError");
var urlService = require("./services/URLService");
var browser = detect_browser_1.detect() || {
    name: "unknown",
    version: "unknown"
};
/**
 * Main PlayerPlatformAPI constructor. This should be called after config values have been loaded through
 * `ConfigurationManager`.
 *
 * #### Example:
 * ```
 * const playerPlatform;
 * const configManager = pp.ConfigurationManager.getInstance();
 *
 * configManager.onSuccess(function() {
 *      playerPlatform = new pp.PlayerPlatformAPI({
 *          videoElement: document.getElementById("video"),
 *          configurationManager: configManager
 *      });
 * });
 *
 * configManager.loadConfiguration("http://myconfigurl/config.json");
 *
 * // or pass in a configuration object
 *
 * playerPlatform = new pp.PlayerPlatformAPI({
 *      videoElement: document.getElementById("video"),
 *      configuration: {
 *          retryOnMediaFailed: "true",
 *          defaultAsset: {
 *              initialBitrate: 0,
 *              initialBufferTime: 2000
 *          }
 *      }
 * });
 * ```
 */
var PlayerPlatformAPI = /** @class */ (function () {
    function PlayerPlatformAPI(parameters) {
        this.player = null;
        this.adManager = null;
        this.asset = null;
        this.preSeekPosition = 0;
        this.streams = new PlayerPlatformStreams_1.PlayerPlatformStreams();
        this.currentFPS = 0;
        this.currentDroppedFrames = 0;
        this.currentDuration = 0;
        this.closedCaptionsEnabled = false;
        this.playerTypes = [];
        this.logger = parameters.logger || new Logger_1.Logger("PlayerPlatformAPI");
        this.logger.trace("new");
        validateParameters(parameters, this.logger);
        this.configMgr = parameters.configurationManager || ConfigurationManager_1.ConfigurationManager.getInstance();
        //this.videoElement = parameters.videoElement;//WMR no videoElement
        // load configuration object if necessary
        if (!this.configMgr.isReady()) {
            this.configMgr.loadConfiguration(parameters.configuration || {});
        }
        else if (parameters.configuration && Object.keys(parameters.configuration).length) {
            this.logger.warn("Configuration has been loaded, parameters.configuration is ignored.");
        }
        this.boundClickHandler = this._clickHandler.bind(this);
        //this.videoElement.addEventListener("click", this.boundClickHandler);//WMR no videoElement
        function validateParameters(params, logger) {
            if (!params) {
                logger.error("PlayerPlatformAPI requires a parameters object");
                throw new Error("PlayerPlatformAPI requires a parameters object");
            }
/*//WMR no videoElement
            if (!params.videoElement) {
                logger.error("Params must contain the id of an HTMLElement to be used as the video canvas");
                throw new Error("Params must contain the id of an HTMLElement to be used as the video canvas");
            }
*/
        }
        events.addEventListener(events.MEDIA_PROGRESS, this.updatePlaybackMetrics, {}, this);
        events.addEventListener(events.MEDIA_FAILED, this.onMediaFailed, {}, this);
        events.addEventListener(events.MEDIA_OPENED, this.onMediaOpened, {}, this);
        events.addEventListener(events.PLAY_STATE_CHANGED, this.onPlayStateChanged, {}, this);
        app.inject({
            config: this.configMgr.values,
            params: parameters
        });
        app.init(this);
        this.mediator.subscribe("api:setAsset", this.onSetAsset, { priority: constants.PRIORITY_TOP }, this);
        this.mediator.subscribe("api:engineSelected", this.engineChange, {}, this);
        this.mediator.subscribe("api:adManagerSelected", this.adManagerChange, { priority: constants.PRIORITY_TOP }, this);
        this.mediator.subscribe("api:updatePlayerConfig", this.setPlayerConfig, {}, this);
        this.mediator.subscribe("api:playersAvailable", this.playersAvailable, {}, this);
        this.mediator.subscribe("api:swapAsset", this.swapAsset, {}, this);
        this.mediator.publish("api:playerCheck");
        // Transfer settings when engine changes
        this.transferSettingOnEngineChange("api:setVolume");
        this.transferSettingOnEngineChange("api:setAudioOnly");
    }
    /**
     * Sets the volume of a selected engine to
     * the last set volume. When switching engines
     * this will allow us to transfer the volume from
     * the last engine if a volume was set through the api.
     */
    PlayerPlatformAPI.prototype.transferSettingOnEngineChange = function (eventName) {
        var _this = this;
        app.toObservable("api:engineSelected")
            .withLatestFrom(app.toObservable(eventName), function (engine, event) {
            return { engine: engine, event: event };
        })
            .takeUntil(app.toObservable("api:destroy"))
            .subscribe(function (engineEvent) {
            engineEvent.engine.onPlayerReady(function () {
                _this.logger.trace("Re-publishing '" + eventName + "' from last engine");
                _this.mediator.publish(eventName, engineEvent.event);
            });
        });
    };
    PlayerPlatformAPI.prototype.onSetAsset = function (asset) {
        if (!asset.isRetry) {
            this.stop();
        }
        this.configMgr.extendConfiguration(ConfigurationManager_1.ConfigurationManager.DEFAULT_ASSET, asset.assetType);
        this.asset = asset;
        var adManagerOpts = this.asset.adConfig || {
            type: "none"
        };
        this.mediator.publish("ads:configureAds", adManagerOpts.type, adManagerOpts);
    };
    PlayerPlatformAPI.prototype.swapAsset = function (asset) {
        this.asset = asset;
        this.logger.trace("swapAsset: " + JSON.stringify(this.asset));
    };
    PlayerPlatformAPI.prototype.engineChange = function (engine) {
        var _this = this;
        this.player = engine;
        this.player.onPlayerReady(function () {
            _this.setInitialPlayerConfig();
        });
    };
    PlayerPlatformAPI.prototype.playersAvailable = function (assetTypes) {
        this.playerTypes = assetTypes;
        this.logger.trace("playersAvailable: " + JSON.stringify(this.playerTypes));
    };
    PlayerPlatformAPI.prototype.adManagerChange = function (manager) {
        this.adManager = manager;
    };
    /**
     * Add a specified event listener.
     * @param {String} type
     * @param {Function} listener
     * @param {Object} context
     */
    PlayerPlatformAPI.prototype.addEventListener = function (type, listener, context) {
        this.logger.trace("addEventListener: Adding event for type: " + type);
        events.addEventListener(type, listener, {}, context);
    };
    /**
     * Add a specified event listener.
     * @param {String} type
     * @param {Function} listener
     * @param {Object} context
     */
    PlayerPlatformAPI.prototype.on = function (type, listener, context) {
        this.addEventListener(type, listener, context);
    };
    /**
     * Dispatch an event
     *
     * @param {Object} event
     *
     * @private
     */
    PlayerPlatformAPI.prototype.dispatchEvent = function (event) {
        events.dispatchEvent(event);
    };
    PlayerPlatformAPI.prototype.removeEventListener = function (type, listener) {
        events.removeEventListener(type, listener);
    };
    /**
     * Remove an existing event listener with an event type
     *
     * @param {String} type
     * @param {Function} listener - callback function to execute
     */
    PlayerPlatformAPI.prototype.off = function (type, listener) {
        this.removeEventListener(type, listener);
    };
    /**
     * Methods PlayerPlatformAPI -------------------------------------------------
     */
    /**
     * Play the current Asset using the set playback speed.
     */
    PlayerPlatformAPI.prototype.play = function () {
        this.logger.info("play");
        this.mediator.publish("api:play");
    };
    /**
     * Pauses the current Asset. The Asset can be resumed by calling play().
     * @see play
     */
    PlayerPlatformAPI.prototype.pause = function () {
        this.logger.info("pause");
        this.mediator.publish("api:pause");
    };
    /**
     * Stops the current Asset and resets the player. In order to play the Asset again, setAsset() must be called.
     * @see setAsset
     */
    PlayerPlatformAPI.prototype.stop = function () {
        this.logger.info("stop");
        this.mediator.publish("api:stop");
        this._hideWatermark();
        this.lastKnownPosition = undefined;
    };
    /**
     * Sets the play head to the current live point.
     * This will not be actual live as the player keeps a configurable distance away from live.
     */
    PlayerPlatformAPI.prototype.seekToLive = function () {
        this.logger.info("seekToLive");
        this.preSeekPosition = this.getCurrentPosition();
        this.mediator.publish("api:seekToLive");
    };
    /**
     * Destroy the player object and release all data the object has to be recreated in order to be used again.
     */
    PlayerPlatformAPI.prototype.destroy = function () {
        this.logger.trace("destroy");
        if (this.pendingPlaybackStart) {
            this.pendingPlaybackStart.unsubscribe();
        }
//WMR no videoElement
        //this.videoElement.removeEventListener("click", this.boundClickHandler);
        this.mediator.remove("api:swapAsset", this.swapAsset);
        this.mediator.remove("api:setAsset", this.onSetAsset);
        this.mediator.remove("api:engineSelected", this.engineChange);
        this.mediator.remove("api:adManagerSelected", this.adManagerChange);
        this.mediator.remove("api:updatePlayerConfig", this.setPlayerConfig);
        this.mediator.remove("api:playersAvailable", this.playersAvailable);
        events.removeEventListener(events.MEDIA_PROGRESS, this.updatePlaybackMetrics);
        events.removeEventListener(events.MEDIA_FAILED, this.onMediaFailed);
        events.removeEventListener(events.MEDIA_OPENED, this.onMediaOpened);
        events.removeEventListener(events.PLAY_STATE_CHANGED, this.onPlayStateChanged);
        this.mediator.publish("api:destroy");
        app.stopModules();
    };
    /**
     * Combined method to cover method overload.
     *
     * @param hostInfoOrXsct
     * @param appVersion
     */
    PlayerPlatformAPI.prototype.configureAnalytics = function (hostInfoOrXsct, appVersion) {
        this.logger.trace("configureAnalytics: " + JSON.stringify(hostInfoOrXsct));
        var hostInfo = hostInfoOrXsct;
        // if object contains a tokenSummary property, assume an XsctResponse is being passed in
        if (hostInfoOrXsct.tokenSummary && appVersion) {
            var xsctObj_1 = hostInfoOrXsct;
            hostInfo = {
                appName: this.configMgr.get(ConfigurationManager_1.ConfigurationManager.ANALYTICS_DEVICE_TYPE),
                appVersion: appVersion,
                deviceName: browser.name,
                deviceVersion: browser.version,
                // TODO(estobb200): Is this ok for both DEV.PHYSICAL_DEVICE_ID & DEV.DEV_ID ??
                deviceId: xsctObj_1.tokenSummary.deviceId,
                physicalId: xsctObj_1.tokenSummary.deviceId,
                accountId: xsctObj_1.tokenSummary.xboAccountId,
                xsctPartnerId: xsctObj_1.tokenSummary.partnerId,
                inHomeState: function () { return xsctObj_1.tokenSummary.inHomeStatus === "in-home" ? "inHome" : "outOfHome"; }
            };
        }
        app.startModule("AnalyticsHandler", hostInfo, new AnalyticsProvider_1.AnalyticsProvider(), new PlaybackStateMonitor_1.PlaybackStateMonitor());
    };
    PlayerPlatformAPI.prototype.configureEmergencyAlerts = function (xsctToken) {
        if (this.isXRE()) {
            this.logger.warn("EAS not available on XRE platforms.");
            return;
        }
        var zipToFipsUrl = this.configMgr.get(ConfigurationManager_1.ConfigurationManager.ZIPS_TO_FIPS_END_POINT);
        var alertUrl = this.configMgr.get(ConfigurationManager_1.ConfigurationManager.ALERT_SERVICE_END_POINT);
        var easSettings = {
            pollingInterval: parseInt(this.configMgr.get(ConfigurationManager_1.ConfigurationManager.EAS_UPDATE_INTERVAL)),
            timeout: parseInt(this.configMgr.get(ConfigurationManager_1.ConfigurationManager.EAS_NETWORK_REQUEST_TIMEOUT)),
            repeat: parseInt(this.configMgr.get(ConfigurationManager_1.ConfigurationManager.EAS_ALERT_REPEAT)),
            font: this.configMgr.get(ConfigurationManager_1.ConfigurationManager.EAS_ALERT_FONT),
            fontSize: parseFloat(this.configMgr.get(ConfigurationManager_1.ConfigurationManager.EAS_ALERT_FONT_SIZE))
        };
        var zip = XSCTToken_1.parse(xsctToken).zipCode;
        var easPoller = new EASPoller_1.EASPoller({
            alertUrl: alertUrl,
            zipToFipsUrl: zipToFipsUrl,
            zip: zip,
            interval: easSettings.pollingInterval,
            preferredLanguage: this.configMgr.get(ConfigurationManager_1.ConfigurationManager.EAS_LANGUAGE),
            mimeType: this.configMgr.get(ConfigurationManager_1.ConfigurationManager.HELIO_EAS, false) ? EmergencyAlert_1.EmergencyAlert.MIME_DASH : EmergencyAlert_1.EmergencyAlert.MIME_HLS,
        });
        app.startModule("EmergencyAlertProvider", easPoller, easSettings);
    };
    /**
     * Setters PlayerPlatformAPI -------------------------------------------------
     */
    PlayerPlatformAPI.prototype.setAsset = function (asset) {
        var _this = this;
        this.logger.trace("setAsset: resumePosition=" + asset.resumePosition + " asset=" + JSON.stringify(asset));
        if (this.resolveUrlSub) {
            this.resolveUrlSub.unsubscribe();
        }
        this.resolveUrlSub = rxjs_1.Observable.fromPromise(urlService.getURLPlaylistForAsset(asset.originalUrl, asset))
            .catch(function (err) {
            _this.logger.error("Error resolving Urls", err);
            _this.asset = asset;
            if (err instanceof PPError_1.PPError) {
                _this.dispatchEvent(new events.MediaFailedEvent(err, false));
                return rxjs_1.Observable.empty();
            }
            return rxjs_1.Observable.throw(err);
        })
            .map(function (urls) {
            if (urls.length === 0) {
                _this.logger.warn("Got no URLs, trying original URL");
                return [asset.originalUrl];
            }
            return urls;
        })
            .subscribe(function (urls) {
            _this.logger.trace("Resolved urls", urls);
            asset.urls = urls;
            asset.url = asset.urls.shift();
            _this.mediator.publish("api:setAsset", asset);
        });
    };
    /**
     * Sets the play head position in milliseconds
     * @param target Desired play head position in milliseconds.
     * @param ignoreAds - ignore c3 ads
     */
    PlayerPlatformAPI.prototype.setPosition = function (target, ignoreAds) {
        this.logger.info("setPosition - target=" + target + " ignoreAds=" + ignoreAds);
        this.preSeekPosition = this.getCurrentPosition();
        this.mediator.publish("api:setPosition", target, ignoreAds);
    };
    /**
     * Sets the play head position relative to the current play head position.
     * @param {Number} msec Desired play head position in milliseconds relative to the current play head position.
     * @param {boolean} ignoreAds - ignore c3 ads
     * (newPosition = currentPosition + msec)
     *
     */
    PlayerPlatformAPI.prototype.setPositionRelative = function (msec, ignoreAds) {
        this.logger.info("setPositionRelative: " + msec);
        this.setPosition(this.getCurrentPosition() + msec, ignoreAds);
    };
    /**
     * Set the playback volume
     * @param {Number} volume The desired volume. The value can be between 0 and 1
     */
    PlayerPlatformAPI.prototype.setVolume = function (volume) {
        this.logger.trace("setVolume: " + volume);
        volume = volume > 1 ? 1 : volume;
        volume = volume < 0 ? 0 : volume;
        this.mediator.publish("api:setVolume", volume);
    };
    /**
     * Set playback rate. Note some assets will not support trick-play.
     * @param {Number} speed A positive/negative value of the desired playback speed.
     * @param {Number} overshootCorrection Correction value to be applied during trickplay
     */
    PlayerPlatformAPI.prototype.setSpeed = function (speed, overshootCorrection) {
        this.logger.info("setSpeed: spd=" + speed);
        this.mediator.publish("api:setSpeed", speed, overshootCorrection);
    };
    /**
     * Returns if closed captions is enabled
     * @returns true if closed captions is enabled, false otherwise
     */
    PlayerPlatformAPI.prototype.getClosedCaptionsEnabled = function () {
        return this.closedCaptionsEnabled;
    };
    /**
     * This method allows closed captioning to be enabled.  Closed captioning display policy is determined by the player and is
     * rendered by the player when this is enabled.  Closed captioning is disabled by default in the player.
     * @param {Boolean} flag Identifiying if CC is enabled or disabled.
     */
    PlayerPlatformAPI.prototype.setClosedCaptionsEnabled = function (flag) {
        this.logger.trace("setClosedCaptionsEnabled: " + flag);
        this.closedCaptionsEnabled = flag;
        this.mediator.publish("api:setClosedCaptionsEnabled", flag);
        this.mediator.publish("api:mediaInfo", "CC " + (flag ? "enabled" : "disabled"));
    };
    /**
     * The desired bitrate (in bits per second) at which playback should start.
     *
     * You should set this value prior to assigning the item to a MediaPlayer to ensure that it is considered.
     * @param {Number} initialBitrate Initial requested bitrate (in bits/sec). The player will find the closest value to the specified value.
     */
    PlayerPlatformAPI.prototype.setInitialBitrate = function (initialBitrate) {
        this.logger.trace("setInitialBitrate: " + initialBitrate);
        this.configMgr.update({ initialBitrate: initialBitrate });
        this.mediator.publish("api:setInitialBitrate", initialBitrate);
    };
    /**
     * The size (expressed in milliseconds) of the streaming buffer to use initially
     *
     * You should set this value prior to assigning the item to a MediaPlayer to ensure that it is considered.
     * @param {Number} initialBufferTime Initial buffer time (in msec).
     */
    PlayerPlatformAPI.prototype.setInitialBufferTime = function (initialBufferTime) {
        this.logger.trace("setInitialBufferTime: " + initialBufferTime);
        this.configMgr.update({ initialBufferTime: initialBufferTime });
        this.mediator.publish("api:setInitialBufferTime", initialBufferTime);
    };
    /**
     * The size (expressed in milliseconds) of the streaming buffer to use during VOD playback
     *
     * You should set this value prior to assigning the item to a MediaPlayer to ensure that it is considered.
     * @param {Number} playingVODBufferTime VOD buffer time when in playing state (in msec).
     */
    PlayerPlatformAPI.prototype.setPlayingVODBufferTime = function (playingVODBufferTime) {
        this.logger.trace("setPlayingVODBufferTime: " + playingVODBufferTime);
        this.configMgr.update({ playingVODBufferTime: playingVODBufferTime });
        this.mediator.publish("api:setPlayingVODBufferTime", playingVODBufferTime);
    };
    /**
     * The size (expressed in milliseconds) of the streaming buffer to use during linear playback
     *
     * You should set this value prior to assigning the item to a MediaPlayer to ensure that it is considered.
     * @param {Number} playingLinearBufferTime Linear buffer time when in playing state (in msec).
     */
    PlayerPlatformAPI.prototype.setPlayingLinearBufferTime = function (playingLinearBufferTime) {
        this.logger.trace("setPlayingLinearBufferTime: " + playingLinearBufferTime);
        this.configMgr.update({ playingLinearBufferTime: playingLinearBufferTime });
        this.mediator.publish("api:setPlayingLinearBufferTime", playingLinearBufferTime);
    };
    /**
     * Blocks the video/audio from rendering used in Parental Control cases.
     * @param {Boolean} flag If true the video and audio will be hiden from the user.
     */
    PlayerPlatformAPI.prototype.setBlock = function (flag) {
        this.logger.trace("setBlock: " + flag);
        this.mediator.publish("api:setBlock", flag);
    };
    /**
     * This method specifies the preferred zoom setting for the video.  If set to Full the video should be stretched to completely
     * fill the player’s view size and should not necessarily preserve the original aspect ratio of the video.  If set to None
     * the video should be stretched to fit the player’s view as much as possible while still maintaining the video’s aspect
     * ratio (Black pillars should be displayed where appropriate).  A default value of None is assumed.
     * @param {String} zoom - Value can be either: None || Full
     */
    PlayerPlatformAPI.prototype.setPreferredZoomSetting = function (zoom) {
        if (!zoom) {
            return;
        }
        this.logger.trace("setPreferredZoomSetting: " + zoom);
        this.configMgr.update({ zoom: zoom });
        this.mediator.publish("api:setPreferredZoomSetting", zoom);
    };
    /**
     * Set 608 closed caption track. There are four tracks CC1, CC2, CC3 and CC4
     * @param {String} track String representation of desired track.
     */
    PlayerPlatformAPI.prototype.setClosedCaptionsTrack = function (track) {
        this.logger.trace("setClosedCaptionsTrack: " + track);
        this.mediator.publish("api:setClosedCaptionsTrack", track);
        this.mediator.publish("api:mediaInfo", "CC changed. " + track);
    };
    /**
     * The bitrate interval allowed for playback (expressed in bits per second).
     * @param {Number} minimumBitrate The minimum number in the range.
     * @param {Number} maximumBitrate The maximum number in the range.
     */
    PlayerPlatformAPI.prototype.setBitrateRange = function (minimumBitrate, maximumBitrate) {
        this.logger.trace("setBitrateRange: " + minimumBitrate + "-" + maximumBitrate);
        this.configMgr.update({ minimumBitrate: minimumBitrate, maximumBitrate: maximumBitrate });
        this.mediator.publish("api:setBitrateRange", minimumBitrate, maximumBitrate);
    };
    /**
     * set the player's bitrate policy
     * @param {Number} initialPolicy  The new policy value.
     */
    PlayerPlatformAPI.prototype.setBitratePolicy = function (initialPolicy) {
        this.logger.trace("setBitratePolicy: " + initialPolicy);
        this.configMgr.update({ initialPolicy: initialPolicy });
        this.mediator.publish("api:setBitratePolicy", initialPolicy);
    };
    /**
     * Set the preferred audio langauge to use
     * @param {String} audioLanguage
     * @see getAvailableAudioLanguages
     * to get the acceptable values.
     */
    PlayerPlatformAPI.prototype.setPreferredAudioLanguage = function (audioLanguage) {
        if (!audioLanguage) {
            return;
        }
        this.logger.trace("setPreferredAudioLanguage: " + audioLanguage);
        this.configMgr.update({ audioLanguage: audioLanguage });
        this.mediator.publish("api:setPreferredAudioLanguage", audioLanguage);
        this.mediator.publish("api:mediaInfo", "SAP changed. " + audioLanguage);
    };
    /**
     * Size of the video. Once the playback starts, the client can use this property to set the desired rendered video dimensions.
     * @param {Number} width The media width in pixels.
     * @param {Number} height The media height in pixels.
     */
    PlayerPlatformAPI.prototype.setDimensionsOfVideo = function (width, height) {
        this.logger.trace("setDimensionsOfVideo: " + width + "x" + height);
        this.mediator.publish("api:setDimensionsOfVideo", width, height);
    };
    /**
     * Flag indicating if the player will automatically start playing the media stream once all the data is available. Defaults to false.
     * @param {Boolean} autoplay
     */
    PlayerPlatformAPI.prototype.setAutoPlay = function (autoplay) {
        this.logger.trace("setAutoPlay: " + autoplay);
        this.configMgr.update({ autoplay: autoplay });
        this.mediator.publish("api:setAutoPlay", autoplay);
    };
    /**
     * Interval between the dispatch of change events for the current time in milliseconds.
     * The default is 250 milliseconds. A zero value disables the dispatch of the change events.
     * The minimum accepted value (except zero) is 50 milliseconds, due to performance concerns. Attempting to set
     * the interval to a lower value will result in it being set to 50
     * @param {Number} interval (in milliseconds)
     */
    PlayerPlatformAPI.prototype.setCurrentTimeUpdateInterval = function (interval) {
        this.logger.trace("setCurrentTimeUpdateInterval: " + interval);
        if ((interval < 50) && (interval !== 0)) {
            interval = 50;
        }
        this.mediator.publish("api:setCurrentTimeUpdateInterval", interval);
    };
    /**
     * @param {Number} width
     * @param {Number} height
     */
    PlayerPlatformAPI.prototype.setScale = function (width, height) {
        this.logger.trace("setScale: " + width + "x" + height);
        this.mediator.publish("api:setScale", width, height);
    };
    /**
     * @param {Number} x
     * @param {Number} y
     */
    PlayerPlatformAPI.prototype.setOffset = function (x, y) {
        this.logger.trace("setOffset: x=" + x + " y=" + y);
        this.mediator.publish("api:setOffset", x, y);
    };
    /**
     * Shows/Hides Video Playback
     * @param {boolean} mute
     */
    PlayerPlatformAPI.prototype.setAudioOnly = function (mute) {
        this.logger.trace("setAudioOnly: " + mute);
        this.mediator.publish("api:setAudioOnly", mute);
    };
    /**
     * Getters PlayerPlatformAPI -------------------------------------------------
     */
    /**
     * Returns the type of the current asset.
     * @returns {String} value of assetType when the asset was created.
     */
    PlayerPlatformAPI.prototype.getAssetType = function () {
        this.logger.trace("getAssetType");
        if (!!this.asset) {
            return this.asset.assetType;
        }
        else {
            return null;
        }
    };
    /**
     * Returns the type of the current asset engine.
     * @returns {String} value of assetEngine when the asset was created.
     */
    PlayerPlatformAPI.prototype.getAssetEngineType = function () {
        this.logger.trace("getAssetEngineType");
        return this.player.getAssetEngineType();
    };
    /**
     * Returns the end position of the asset in milliseconds.
     * @returns {Number} End position of the asset in milliseconds.
     */
    PlayerPlatformAPI.prototype.getEndPosition = function () {
        this.logger.trace("getEndPosition");
        return this.player.getEndPosition();
    };
    /**
     * Returns the start position of the asset in milliseconds.
     * @returns {Number} Start position of the asset in milliseconds.
     */
    PlayerPlatformAPI.prototype.getStartPosition = function () {
        this.logger.trace("getStartPosition");
        return this.player.getStartPosition();
    };
    /**
     * Returns the configured initial bitrate that the video will start at.
     * @returns {Number} Initial bitrate. Will be Null if it was never set.
     * Note - PSDKPlayer returns default ABRControlParam initial bitrate
     */
    PlayerPlatformAPI.prototype.getInitialBitrate = function () {
        this.logger.trace("getInitialbitrate");
        return this.player.getInitialBitrate();
    };
    /**
     * Returns the play head position of the player in milliseconds.
     * @returns {Number} Play head position of player in milliseconds.
     */
    PlayerPlatformAPI.prototype.getCurrentPosition = function () {
        //  this.logger.trace("getCurrentPosition");
        return this.player.getCurrentPosition();
    };
    /**
     * Returns the play head position of the player in milliseconds, offset
     * by the duration of watched ads.
     * @returns {Number} Play head position of player in milliseconds within
     * the content.
     */
    PlayerPlatformAPI.prototype.getContentPosition = function () {
        if (!this.adManager) {
            return this.getCurrentPosition();
        }
        return this.adManager.getResumePositionNoAds(this.getCurrentPosition());
    };
    /**
     * Returns the duration of the asset in milliseconds.
     * @returns {Number} Duration of the media in milliseconds.
     *
     */
    PlayerPlatformAPI.prototype.getDuration = function () {
        // this.logger.trace("getDuration");
        return this.player.getDuration();
    };
    /**
     * Returns all supported playback speeds for the asset.
     * @returns {Number[]} Array of numbers that represent currently supported playback speeds.
     */
    PlayerPlatformAPI.prototype.getSupportedPlaybackSpeeds = function () {
        return this.player.getSupportedPlaybackSpeeds() || [];
    };
    /**
     * Returns the current speed of the player.
     * @returns {Number} Current speed of the player.
     */
    PlayerPlatformAPI.prototype.getCurrentPlaybackSpeed = function () {
        return this.player.getCurrentPlaybackSpeed();
    };
    /**
     * Returns the current player status.
     * @returns {String} Possible values are:
     * idle,
     * complete,
     * error,
     * initialized,
     * initializing,
     * preparing,
     * seeking,
     * paused,
     * playing,
     * ready,
     * released
     */
    PlayerPlatformAPI.prototype.getPlayerStatus = function () {
        return this.player.getPlayerStatus();
    };
    /**
     * Returns a boolean indicating the status of CC.
     * @returns {Boolean} True if CC is on.
     */
    PlayerPlatformAPI.prototype.getClosedCaptionsStatus = function () {
        this.logger.trace("getClosedCaptionsStatus");
        return this.player.getClosedCaptionsStatus();
    };
    /**
     * Returns the range of allowed profiles for video playback. The player stays with the range.
     * @returns {Number[]} containing the range [0] = min value, [1] = max value. (Array used to support JS bridge)
     * Array will be null if the range was never set.
     */
    PlayerPlatformAPI.prototype.getBitrateRange = function () {
        this.logger.trace("getBitrateRange");
        return this.player.getBitrateRange();
    };
    /**
     * Returns the array of all available bitrates for a specific asset.
     * @returns {Number[]} containing the bitrate value for all available bitrates for the asset.
     * This is only available after MediaOpened event.
     */
    PlayerPlatformAPI.prototype.getAvailableBitrates = function () {
        this.logger.trace("getAvailableBitrates");
        return this.player.getAvailableBitrates();
    };
    /**
     * Returns the bitrate of the currently playing profile.
     * @returns {Number} Current bitrate in Kbits/sec.
     */
    PlayerPlatformAPI.prototype.getCurrentBitrate = function () {
        this.logger.trace("getCurrentBitrate");
        return this.player.getCurrentBitrate();
    };
    /**
     * Returns the total buffer time of the player.
     * @returns {Number} Total buffer time in seconds.
     */
    PlayerPlatformAPI.prototype.getBufferTime = function () {
        this.logger.trace("getBufferTime");
        return this.player.getBufferTime();
    };
    /**
     * Returns the filled buffer time.
     * @returns {Number} Time filled in the buffer in seconds.
     */
    PlayerPlatformAPI.prototype.getBufferFilledLength = function () {
        this.logger.trace("getBufferFilledLength");
        return this.player.getBufferFilledLength();
    };
    /**
     * Returns the current audio language (track) selected
     * @returns {String} Audio track information
     */
    PlayerPlatformAPI.prototype.getCurrentAudioLanguage = function () {
        this.logger.trace("getCurrentAudioLanguage");
        return this.player.getCurrentAudioLanguage();
    };
    /**
     * Returns the current closed caption track selected
     * @returns {String} Closed caption track information
     */
    PlayerPlatformAPI.prototype.getCurrentClosedCaptionTrack = function () {
        this.logger.trace("getCurrentClosedCaptionTrack");
        return this.player.getCurrentClosedCaptionTrack();
    };
    /**
     * Return array of available closed caption tracks that can be rendered.
     * @returns {Object[]} Array of available CC tracks
     */
    PlayerPlatformAPI.prototype.getAvailableClosedCaptionTracks = function () {
        return this.player.getAvailableClosedCaptionTracks();
    };
    /**
     * Return array of available player engine types.
     * @returns {Object[]} Array of available player types
     */
    PlayerPlatformAPI.prototype.getAvailablePlayerTypes = function () {
        return this.playerTypes;
    };
    /**
     * Flag indicating if the player will automatically start playing the media stream once all the data is available. Defaults to false.
     * @returns {Boolean} True if the player will start automatically
     */
    PlayerPlatformAPI.prototype.getAutoPlay = function () {
        this.logger.trace("getAutoPlay");
        return this.player.getAutoPlay();
    };
    /**
     * Returns the current video height.
     * @returns {Number} Video height in pixels
     */
    PlayerPlatformAPI.prototype.getVideoHeight = function () {
        this.logger.trace("getVideoHeight");
        return this.player.getVideoHeight();
    };
    /**
     * Returns the current video width.
     * @returns {Number} Video width in pixels
     */
    PlayerPlatformAPI.prototype.getVideoWidth = function () {
        this.logger.trace("getVideoWidth");
        return this.player.getVideoWidth();
    };
    /**
     * Returns the current video type (can be live or vod).
     * @returns {String} Video type - either live or vod.
     */
    PlayerPlatformAPI.prototype.getVideoType = function () {
        this.logger.trace("getVideoType");
        return this.player.getVideoType();
    };
    /**
     * Indicates that the stream has CC available.
     * @returns {Boolean} True if the stream includes closed captions.
     */
    PlayerPlatformAPI.prototype.hasCC = function () {
        this.logger.trace("hasCC");
        return this.player.hasCC();
    };
    /**
     *
     * Indicates the version of the Player
     * @returns {String} Concatenated version info for all components.
     */
    PlayerPlatformAPI.prototype.getVersion = function () {
        // add other component version strings here as they become pertinent
        return "BUILD_TYPE=" + __buildtype + " VIPER_VERSION=" + __viperversion + " " + (this.player ? this.player.getVersion() : "PLAYER NOT DEFINED");
    };
    /**
     *
     * Indicates if current stream is protected by DRM
     * @returns {Boolean} True if the stream supports DRM.
     */
    PlayerPlatformAPI.prototype.hasDRM = function () {
        this.logger.trace("hasDRM");
        return this.player.hasDRM();
    };
    /**
     * Returns an array of the audio languages available in the current asset
     * @returns {Object[]} Array of audio track information
     */
    PlayerPlatformAPI.prototype.getAvailableAudioLanguages = function () {
        return this.player.getAvailableAudioLanguages();
    };
    /**
     * Returns the current frame rate in FPS
     * @default -1
     * @returns {Number} Current frame rate in frames/sec.
     */
    PlayerPlatformAPI.prototype.getCurrentFPS = function () {
        return this.player.getCurrentFPS();
    };
    /**
     * Returns the current count of dropped frames
     * @default -1
     * @returns {Number}
     */
    PlayerPlatformAPI.prototype.getCurrentDroppedFrames = function () {
        return this.player.getCurrentDroppedFrames();
    };
    /**
     * Returns an array of ad markers
     * @returns {Object[]} Array of ad markers
     */
    PlayerPlatformAPI.prototype.getTimeline = function () {
        this.logger.trace("getTimeline");
        // this will be overridden by an AdManager
        return [];
    };
    /**
     * returns current volume setting for player
     *
     * @returns {number}
     */
    PlayerPlatformAPI.prototype.getVolume = function () {
        return this.player.getVolume();
    };
    /**
     * Configure an AdManager specified by the `type` parameter. Allowed types:
     *
     *  - manifest - Manifest manipulator ad manager
     *  - auditude - Auditude ad manager
     *  - freewheel - Freewheel ad manager
     *  - c3 - C3 ad manager
     *  - none - Use this if you want to stop using a previously configured ad manager.
     *
     * Refer to [full documentation](http://player.xcal.tv/docs/js/master/ads/#configuring-ads)
     * for details on the required configuration properties for each type of ad manager.
     *
     * @param {string} type     - type of ad manager to configuyre
     * @param {AdConfig} [cfg]    - configuration object (may be null)
     * @deprecated("Ad manager now is configured via setAsset contentOption")
     */
    PlayerPlatformAPI.prototype.configureAds = function (type, cfg) {
        this.logger.trace("configureAds: type=" + type);
        this.mediator.publish("ads:configureAds", type, cfg);
    };
    /**
     * generate a list of media segments representing the current asset and any ads it contains
     * @returns {Array}
     */
    PlayerPlatformAPI.prototype.getMediaSegments = function () {
        // this will be overridden by ad manager
        return [];
    };
    /**
     * This should update on each media progress event. Various player properties are checked and compared to previous
     * values in order to dispatch appropriate events.
     *
     * @private
     */
    PlayerPlatformAPI.prototype.updatePlaybackMetrics = function (event) {
        this.lastKnownPosition = event.position;
        var fps = Math.round(this.getCurrentFPS());
        if (fps !== this.currentFPS) {
            this.currentFPS = fps;
            events.dispatchEvent(new events.FPSChangedEvent(fps));
        }
        var droppedFrames = this.getCurrentDroppedFrames();
        if (droppedFrames !== this.currentDroppedFrames) {
            this.currentDroppedFrames = droppedFrames;
            events.dispatchEvent(new events.DroppedFPSChangedEvent(droppedFrames));
        }
        var duration = event.endposition;
        if (duration !== this.currentDuration) {
            this.currentDuration = duration;
            events.dispatchEvent(new events.DurationChangedEvent(duration));
        }
    };
    /**
     * Hide watermark on media failed.
     *
     * @private
     */
    PlayerPlatformAPI.prototype.onMediaFailed = function () {
        this._hideWatermark();
    };
    /**
     * This is used to transfer previously set properties to a new player type.
     *
     * @private
     */
    PlayerPlatformAPI.prototype.setPlayerConfig = function () {
        this.mediator.publish("api:setBitratePolicy", this.configMgr.get(ConfigurationManager_1.ConfigurationManager.PLAYING_POLICY));
        if (this.getVideoType().toLowerCase() === "live") {
            this.mediator.publish("api:setPlayingLinearBufferTime", this.configMgr.get(ConfigurationManager_1.ConfigurationManager.PLAYING_LINEAR_BUFFER_TIME));
        }
        else {
            this.mediator.publish("api:setPlayingVODBufferTime", this.configMgr.get(ConfigurationManager_1.ConfigurationManager.PLAYING_VOD_BUFFER_TIME));
        }
    };
    PlayerPlatformAPI.prototype.setInitialPlayerConfig = function () {
        this.mediator.publish("api:setInitialBitrate", this.configMgr.get(ConfigurationManager_1.ConfigurationManager.INITIAL_BITRATE));
        this.mediator.publish("api:setBitrateRange", this.configMgr.get(ConfigurationManager_1.ConfigurationManager.MINIMUM_BITRATE), this.configMgr.get(ConfigurationManager_1.ConfigurationManager.MAXIMUM_BITRATE));
        this.mediator.publish("api:setBitratePolicy", this.configMgr.get(ConfigurationManager_1.ConfigurationManager.INITIAL_POLICY));
        this.mediator.publish("api:setInitialBufferTime", this.configMgr.get(ConfigurationManager_1.ConfigurationManager.INITIAL_BUFFER_TIME));
        this.mediator.publish("api:setAutoPlay", this.configMgr.get(ConfigurationManager_1.ConfigurationManager.AUTOPLAY));
    };
    /**
     * Set SAP and CC when receiving a media opened event.
     *
     * @private
     */
    PlayerPlatformAPI.prototype.onMediaOpened = function () {
        var _this = this;
        try {
            this.setPreferredAudioLanguage(this.configMgr.get(ConfigurationManager_1.ConfigurationManager.AUDIO_LANGUAGE));
        }
        catch (error) {
            this.logger.error("Error restoring SAP state: " + error);
        }
        try {
            this.setClosedCaptionsEnabled(this.closedCaptionsEnabled);
        }
        catch (error) {
            this.logger.error("Error restoring CC state: " + error);
        }
        if (this.pendingPlaybackStart) {
            this.pendingPlaybackStart.unsubscribe();
            this.pendingPlaybackStart = null;
        }
        // need to filter out payback rates of 0. searching around while autoplay
        // is disabled produces progress event with a rate of 0.
        this.pendingPlaybackStart = this.streams.mediaProgresses
            .filter(function (evt) { return evt.playbackSpeed !== 0; })
            .take(1)
            .takeUntil(app.toObservable("api:destroy"))
            .subscribe(function () { return _this.dispatchEvent(new events.PlaybackStartedEvent()); });
    };
    PlayerPlatformAPI.prototype.onPlayStateChanged = function (event) {
        // don't do this in XRE environment since media opened is fired too early
        if (event.playState === constants.STATUS_PLAYING && !this.isXRE()) {
            this.setPlayerConfig();
            this._showWatermark();
        }
    };
    /**
     * Determine if platform is running in an XRE environment.
     *
     * @returns {boolean}
     * @private
     */
    PlayerPlatformAPI.prototype.isXRE = function () {
        return ((typeof AdobePSDK !== "undefined" || typeof AAMP !== "undefined") && typeof _xrePlayerPlatform !== "undefined");
    };
    /**
     * Closed Caption Boolean. Legal values are "true" | "false".
     * @typedef {string} ClosedCaptionBoolean
     */
    /**
     * Closed Caption Colors. Legal values include "0x000000" - "0xFFFFFF" | "red" | "green" | "blue" |
     *     "cyan" | "magenta" | "yellow" | "white" | "black".
     * @typedef {string} ClosedCaptionColor
     */
    /**
     * Closed Caption Edges. Legal values include "none" | "raised" | "depressed" | "uniform" |
     *     "drop_shadow_left" | "drop_shadow_right".
     * @typedef {string} ClosedCaptionEdge
     */
    /**
     * Closed Caption Font Style. Legal values include "default" | "monospaced_serif" | "proportional_serif" |
     *     "monospaced_sanserif" | "proportional_sanserif" | "casual" | "cursive" | "smallcaps".
     * @typedef {string} ClosedCaptionFontStyle
     */
    /**
     * Closed Caption Opacity. Legal values include "solid" | "flash" | "translucent" | "transparent".
     * @typedef {string} ClosedCaptionOpacity
     */
    /**
     * Closed Caption Pen Size. Legal values include "small" | "standard" | "large".
     * @typedef {string} ClosedCaptionPenSize
     */
    /**
     * Closed Caption Style Object
     * @typedef {Object} ClosedCaptionStyle
     * @property {ClosedCaptionFontStyle} fontStyle
     * @property {ClosedCaptionColor} textEdgeColor
     * @property {ClosedCaptionEdge} textEdgeStyle
     * @property {ClosedCaptionColor} textForegroundColor
     * @property {ClosedCaptionOpacity} textForegroundOpacity
     * @property {ClosedCaptionBoolean} penItalicized
     * @property {ClosedCaptionBoolean} penUnderline
     * @property {ClosedCaptionPenSize} penSize
     * @property {ClosedCaptionColor} windowBorderEdgeColor
     * @property {ClosedCaptionEdge} windowBorderEdgeStyle
     * @property {ClosedCaptionColor} windowFillColor
     * @property {ClosedCaptionOpacity} windowFillOpacity
     */
    /**
     * Closed Caption Style Options
     * @typedef {Object} ClosedCaptionStyleOptions
     * @property {ClosedCaptionFontStyle[]} fontStyle
     * @property {ClosedCaptionColor[]} textEdgeColor
     * @property {ClosedCaptionEdge[]} textEdgeStyle
     * @property {ClosedCaptionColor[]} textForegroundColor
     * @property {ClosedCaptionOpacity[]} textForegroundOpacity
     * @property {ClosedCaptionBoolean[]} penItalicized
     * @property {ClosedCaptionBoolean[]} penUnderline
     * @property {ClosedCaptionPenSize[]} penSize
     * @property {ClosedCaptionColor[]} windowBorderEdgeColor
     * @property {ClosedCaptionEdge[]} windowBorderEdgeStyle
     * @property {ClosedCaptionColor[]} windowFillColor
     * @property {ClosedCaptionOpacity[]} windowFillOpacity
     */
    /**
     * Object containing arrays of available closed captions rendering options that can be modified based on user settings.
     * @returns {ClosedCaptionStyleOptions} Arrays of CC rendering options
     */
    PlayerPlatformAPI.prototype.getSupportedClosedCaptionsOptions = function () {
        this.logger.trace("getSupportedClosedCaptionsOptions");
        return this.player.getSupportedClosedCaptionsOptions();
    };
    /**
     * Returns an object containing the current closed caption style settings.
     * @deprecated should use getClosedCaptionsStyle instead
     * @returns {ClosedCaptionStyle}
     */
    PlayerPlatformAPI.prototype.getCurrentClosedCaptionsStyle = function () {
        this.logger.trace("getCurrentClosedCaptionsStyle");
        return this.player.getCurrentClosedCaptionsStyle();
    };
    /**
     * Returns an object containing the current closed caption style settings.
     * @returns the current closed captions style
     */
    PlayerPlatformAPI.prototype.getClosedCaptionsStyle = function () {
        return this.closedCaptionsStyle;
    };
    /**
     * Sets the desired closed caption style.
     * @param {ClosedCaptionStyle} ccStyle
     */
    PlayerPlatformAPI.prototype.setClosedCaptionsStyle = function (ccStyle) {
        this.logger.trace("setClosedCaptionsStyle");
        this.mediator.publish("api:setClosedCaptionsStyle", this.closedCaptionsStyle = ccStyle);
    };
    PlayerPlatformAPI.prototype.notifyClick = function () {
        this.logger.trace("notifyClick");
        this.mediator.publish("api:notifyClick");
    };
    PlayerPlatformAPI.prototype._showWatermark = function () {
        var _this = this;
        var watermark = this.configMgr.get(ConfigurationManager_1.ConfigurationManager.WATERMARK);
        if (!watermark) {
            return;
        }
        var el = document.getElementById("viper-watermark");
        if (el) {
            el.style.display = "inline";
            return;
        }
        var img = document.createElement("img");
        img.src = watermark;
        img.id = "viper-watermark";
        img.onerror = function () {
            _this.logger.warn("Error displaying watermark");
            img.style.display = "none";
        };
//WMR no videoElement
//        this.videoElement.appendChild(img);
    };
    PlayerPlatformAPI.prototype._hideWatermark = function () {
        /*WMR
        var el = document.getElementById("viper-watermark");
        if (el) {
            el.style.display = "none";
        }
        */
    };
    PlayerPlatformAPI.prototype._clickHandler = function () {
        if (this.configMgr.get(ConfigurationManager_1.ConfigurationManager.HANDLE_CLICKS)) {
            this.notifyClick();
        }
    };
    __decorate([
        app.exposeProp
    ], PlayerPlatformAPI.prototype, "player", void 0);
    __decorate([
        app.exposeProp
    ], PlayerPlatformAPI.prototype, "adManager", void 0);
    __decorate([
        app.exposeProp
    ], PlayerPlatformAPI.prototype, "asset", void 0);
    __decorate([
        app.exposeProp
        /**
         * The last known position we have seen from an underlying
         * engine. If this value is not undefined it is the time from
         * the last progress event emitted. A value of undefined represents
         * there has been no progress made so the position is unknown.
         */
    ], PlayerPlatformAPI.prototype, "lastKnownPosition", void 0);
    __decorate([
        app.exposeProp
    ], PlayerPlatformAPI.prototype, "preSeekPosition", void 0);
    __decorate([
        app.exposeProp
    ], PlayerPlatformAPI.prototype, "streams", void 0);
    __decorate([
        app.expose
    ], PlayerPlatformAPI.prototype, "setAsset", null);
    __decorate([
        app.expose
    ], PlayerPlatformAPI.prototype, "setPosition", null);
    __decorate([
        app.expose
    ], PlayerPlatformAPI.prototype, "getCurrentPosition", null);
    __decorate([
        app.expose
    ], PlayerPlatformAPI.prototype, "getContentPosition", null);
    __decorate([
        app.expose
    ], PlayerPlatformAPI.prototype, "getDuration", null);
    __decorate([
        app.expose
    ], PlayerPlatformAPI.prototype, "getSupportedPlaybackSpeeds", null);
    __decorate([
        app.expose
    ], PlayerPlatformAPI.prototype, "getCurrentPlaybackSpeed", null);
    __decorate([
        app.expose
    ], PlayerPlatformAPI.prototype, "getPlayerStatus", null);
    __decorate([
        app.expose
    ], PlayerPlatformAPI.prototype, "getCurrentBitrate", null);
    __decorate([
        app.expose
    ], PlayerPlatformAPI.prototype, "getAutoPlay", null);
    __decorate([
        app.expose
    ], PlayerPlatformAPI.prototype, "getVideoType", null);
    __decorate([
        app.expose
    ], PlayerPlatformAPI.prototype, "getCurrentFPS", null);
    __decorate([
        app.expose
    ], PlayerPlatformAPI.prototype, "getTimeline", null);
    __decorate([
        app.expose
    ], PlayerPlatformAPI.prototype, "isXRE", null);
    return PlayerPlatformAPI;
}());
exports.PlayerPlatformAPI = PlayerPlatformAPI;

},{"./Application":483,"./ConfigurationManager":484,"./PPError":487,"./PlayerPlatformAPIEvents":489,"./PlayerPlatformConstants":490,"./PlayerPlatformStreams":491,"./ads/AdManagerFactory":494,"./analytics/AnalyticsProvider":530,"./analytics/PlaybackStateMonitor":534,"./eas/EASPoller":544,"./eas/EmergencyAlert":545,"./services/URLService":568,"./util/Logger":571,"./util/XSCTToken":574,"detect-browser":163,"rxjs":281,"rxjs/add/observable/empty":240,"rxjs/add/observable/throw":249,"rxjs/add/operator/take":275,"rxjs/add/operator/takeUntil":276,"rxjs/add/operator/withLatestFrom":279}],489:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Logger_1 = require("./util/Logger");
var rxjs_1 = require("rxjs");
require("rxjs/add/observable/fromEventPattern");
var publicious_1 = require("publicious");
/**
 * @hidden
 */
var logger = new Logger_1.Logger("PlayerPlatformAPIEvent");
/**
 * @hidden
 */
var mediator = new publicious_1.PubSub();
exports.AD_BREAK_COMPLETE = "AdBreakComplete";
exports.AD_BREAK_EXITED = "AdBreakExited";
exports.AD_BREAK_START = "AdBreakStart";
exports.AD_BREAK_UPCOMING = "AdBreakUpcoming";
exports.AD_COMPLETE = "AdComplete";
exports.AD_ERROR = "AdError";
exports.AD_EXITED = "AdExited";
exports.AD_PROGRESS = "AdProgress";
exports.AD_SEEK = "AdSeek";
exports.AD_START = "AdStart";
exports.AD_SKIPPED = "AdSkipped";
exports.ADS_SKIPPED = "AdsSkipped";
exports.BITRATE_CHANGED = "BitrateChanged";
exports.BUFFER_COMPLETE = "BufferComplete";
exports.BUFFER_START = "BufferStart";
exports.DROPPED_FPS_CHANGED = "DroppedFPSChanged";
exports.DURATION_CHANGED = "DurationChanged";
exports.FPS_CHANGED = "FPSChanged";
exports.FRAGMENT_INFO = "FragmentInfo";
exports.MEDIA_FALLBACK = "MediaFallback";
exports.MEDIA_ENDED = "MediaEnded";
exports.MEDIA_FAILED = "MediaFailed";
exports.MEDIA_OPENED = "MediaOpened";
exports.MEDIA_RETRY = "MediaRetry";
exports.MEDIA_PROGRESS = "MediaProgress";
exports.MEDIA_WARNING = "MediaWarning";
exports.MISSING_DRM_TOKEN = "MissingDRMToken";
exports.NUMBER_OF_ALTERNATIVE_AUDIO_STREAMS_CHANGED = "NumberOfAlternativeAudioStreamsChanged";
exports.NUMBER_OF_CLOSED_CAPTIONS_STREAMS_CHANGED = "NumberOfClosedCaptionsStreamsChanged";
exports.PLAYBACK_SPEED_CHANGED = "PlaybackSpeedChanged";
exports.PLAYBACK_SPEEDS_CHANGED = "PlaybackSpeedsChanged";
exports.PLAYBACK_STARTED = "PlaybackStarted";
exports.PLAY_STATE_CHANGED = "PlayStateChanged";
exports.SEEK_COMPLETE = "SeekComplete";
exports.SEEK_START = "SeekStart";
exports.DRM_METADATA = "DRMMetadata";
exports.EMERGENCY_ALERT_IDENTIFIED = "EmergencyAlertIdentified";
exports.EMERGENCY_ALERT_EXEMPTED = "EmergencyAlertExempted";
exports.EMERGENCY_ALERT_STARTED = "EmergencyAlertStarted";
exports.EMERGENCY_ALERT_COMPLETE = "EmergencyAlertComplete";
exports.EMERGENCY_ALERT_FAILURE = "EmergencyAlertFailure";
exports.EMERGENCY_ALERT_ERRORED = "EmergencyAlertErrored";
exports.VPAID_AD_EVENT = "VPAIDAdEvent";
exports.STREAM_SWITCH = "StreamSwitch";
exports.SERVICE_ZONE = "ServiceZone";
// codes for MEDIA_WARNING event
exports.MEDIA_WARNING_TRICKMODE_DISALLOWED = 70;
// codes for PLAYBACK_SPEED_CHANGED event
exports.SPEED_CHANGE_USER_REQUESTED = 0;
exports.SPEED_CHANGE_PROGRAM_BOUNDARY = 1;
exports.SPEED_CHANGE_TSB_BOUNDARY = 2;
exports.SPEED_CHANGE_AD_BOUNDARY = 3;
// A threshold to move the position in the AdStart & AdComplete events to a
// boundary point. See AdStart & AdComplete events for it's usage.
exports.AD_RANGE_POSITION_TOLERANCE = 250;
/**
 * Base Event Constructor.
 *
 * @param {String} type event type
 * @returns {object}
 *
 */
var PlayerPlatformAPIEvent = /** @class */ (function () {
    function PlayerPlatformAPIEvent(type) {
        this.type = type;
    }
    return PlayerPlatformAPIEvent;
}());
exports.PlayerPlatformAPIEvent = PlayerPlatformAPIEvent;
/**
 * All ads in an ad break have completed.
 *
 * @event AdBreakComplete
 * @param {VideoAdBreak} videoAdBreak
 *
 */
var AdBreakCompleteEvent = /** @class */ (function (_super) {
    __extends(AdBreakCompleteEvent, _super);
    function AdBreakCompleteEvent(videoAdBreak) {
        var _this = _super.call(this, exports.AD_BREAK_COMPLETE) || this;
        _this.videoAdBreak = videoAdBreak;
        logger.trace("new AdBreakCompleteEvent");
        return _this;
    }
    AdBreakCompleteEvent.fromTrackerEvent = function (event) {
        logger.info("Tracking: AdBreakCompleteEvent", JSON.stringify(event.progress));
        return new AdBreakCompleteEvent(event.trackable);
    };
    return AdBreakCompleteEvent;
}(PlayerPlatformAPIEvent));
exports.AdBreakCompleteEvent = AdBreakCompleteEvent;
/**
 *  Ad break was stopped before playing all ad breaks.
 *
 * @event AdExited
 * @param {VideoAdBreak} videoAdBreak
 */
var AdBreakExitedEvent = /** @class */ (function (_super) {
    __extends(AdBreakExitedEvent, _super);
    function AdBreakExitedEvent(videoAdBreak) {
        var _this = this;
        logger.trace("new AdBreakExitedEvent");
        _this = _super.call(this, exports.AD_BREAK_EXITED) || this;
        _this.videoAdBreak = videoAdBreak;
        return _this;
    }
    AdBreakExitedEvent.fromTrackerEvent = function (event) {
        logger.info("Tracking: AdBreakExitedEvent", JSON.stringify(event.progress));
        return new AdBreakExitedEvent(event.trackable);
    };
    return AdBreakExitedEvent;
}(PlayerPlatformAPIEvent));
exports.AdBreakExitedEvent = AdBreakExitedEvent;
/**
 * Ad break has started and the first ad in the break should start.
 *
 * @event AdBreakStart
 * @param {VideoAdBreak} videoadBreak
 *
 */
var AdBreakStartEvent = /** @class */ (function (_super) {
    __extends(AdBreakStartEvent, _super);
    function AdBreakStartEvent(videoAdBreak) {
        var _this = _super.call(this, exports.AD_BREAK_START) || this;
        _this.videoAdBreak = videoAdBreak;
        _this.videoAdBreak = videoAdBreak;
        logger.trace("new AdBreakStartEvent");
        return _this;
    }
    AdBreakStartEvent.fromTrackerEvent = function (event) {
        logger.info("Tracking: AdBreakStartEvent", JSON.stringify(event.progress));
        return new AdBreakStartEvent(event.trackable);
    };
    return AdBreakStartEvent;
}(PlayerPlatformAPIEvent));
exports.AdBreakStartEvent = AdBreakStartEvent;
/**
 * This event is fired when an ad break is about to be reached on the timeline
 * during trickplay.
 *
 * @event AdBreakUpcoming
 * @param {VideoAdBreak} videoadBreak
 *
 */
var AdBreakUpcomingEvent = /** @class */ (function (_super) {
    __extends(AdBreakUpcomingEvent, _super);
    function AdBreakUpcomingEvent(videoAdBreak) {
        var _this = _super.call(this, exports.AD_BREAK_UPCOMING) || this;
        _this.videoAdBreak = videoAdBreak;
        logger.trace("new AdBreakUpcomingEvent");
        return _this;
    }
    AdBreakUpcomingEvent.fromTrackerEvent = function (event) {
        logger.info("Tracking: AdBreakUpcomingEvent", JSON.stringify(event.progress));
        return new AdBreakUpcomingEvent(event.trackable);
    };
    return AdBreakUpcomingEvent;
}(PlayerPlatformAPIEvent));
exports.AdBreakUpcomingEvent = AdBreakUpcomingEvent;
/**
 * An error was generated due to ad resolution or ad playback
 *
 * @event AdError
 */
var AdErrorEvent = /** @class */ (function (_super) {
    __extends(AdErrorEvent, _super);
    function AdErrorEvent(videoAd, error) {
        var _this = _super.call(this, exports.AD_ERROR) || this;
        logger.trace("new AdErrorEvent");
        _this.videoAd = videoAd;
        _this.error = error;
        return _this;
    }
    return AdErrorEvent;
}(PlayerPlatformAPIEvent));
exports.AdErrorEvent = AdErrorEvent;
/**
 * AdEvent base type
 *
 * @param {VideoAd} videoAd
 * @param {Number} progress in percent done (0 to 100)
 * @param {Number} rate playback speed
 * @param {Number} position playback position (msec) within the ad content
 *
 */
var AdEvent = /** @class */ (function (_super) {
    __extends(AdEvent, _super);
    function AdEvent(adType, videoAd, progress, rate, position) {
        var _this = _super.call(this, adType) || this;
        _this.videoAd = videoAd;
        _this.progress = progress;
        _this.rate = rate;
        _this.position = position;
        return _this;
    }
    return AdEvent;
}(PlayerPlatformAPIEvent));
exports.AdEvent = AdEvent;
/**
 * Ad has finished playing, this does not necessarily mean that the position
 * of the playhead reached the position of the adStart + durtion of the ad. If
 * leaving an ad early is supported then the AdCompleteEvent will show that in
 * the position property.
 *
 * @event AdComplete
 *
 */
var AdCompleteEvent = /** @class */ (function (_super) {
    __extends(AdCompleteEvent, _super);
    function AdCompleteEvent(videoAd, progress, rate, position) {
        var _this = this;
        logger.trace("new AdCompleteEvent");
        _this = _super.call(this, exports.AD_COMPLETE, videoAd, progress, rate, position) || this;
        // Cap the position to <= to duration of the ad, if the ad's duration is known
        // If we're within the AD_RANGE_POSITION_TOLERANCE of the duration of the ad
        // we use the duration as the position.
        if (videoAd && (_this.position > videoAd.duration || _this.position + exports.AD_RANGE_POSITION_TOLERANCE > videoAd.duration)) {
            logger.trace("AdCompleteEvent.position " + _this.position + " beyond or within " + exports.AD_RANGE_POSITION_TOLERANCE + " of duration, resetting to " + videoAd.duration);
            _this.position = videoAd.duration;
        }
        return _this;
    }
    AdCompleteEvent.fromTrackerEvent = function (event) {
        var progress = event.progress, trackable = event.trackable;
        var position = progress.prev < progress.next ? trackable.duration : 0;
        logger.info("Tracking: AdCompleteEvent", JSON.stringify(event.progress));
        return new AdCompleteEvent(trackable, trackable.getPercentageComplete(progress.next), progress.nextRate, position);
    };
    return AdCompleteEvent;
}(AdEvent));
exports.AdCompleteEvent = AdCompleteEvent;
/**
 *  Ad was stopped before reaching the end of the ad.
 *
 * This event is deprecated in favor of AdCompleteEvent. Only one event will
 * occur when finishing an ad.
 *
 * TODO: When removing this event, the fromTrackerEvent methods will need to be
 * consolidated.
 *
 * @event AdExited
 */
var AdExitedEvent = /** @class */ (function (_super) {
    __extends(AdExitedEvent, _super);
    function AdExitedEvent(videoAd, progress, rate, position) {
        var _this = this;
        logger.trace("new AdExitedEvent");
        logger.warn("AdExitedEvent is DEPRECATED: AdCompleteEvent should be used instead");
        _this = _super.call(this, exports.AD_EXITED, videoAd, progress, rate, position) || this;
        return _this;
    }
    AdExitedEvent.fromTrackerEvent = function (event) {
        var progress = event.progress, trackable = event.trackable;
        var position = progress.prev - trackable.startTime;
        logger.info("Tracking: AdExitedEvent", JSON.stringify(event.progress));
        return new AdExitedEvent(trackable, trackable.getPercentageComplete(progress.prev), progress.nextRate, position);
    };
    return AdExitedEvent;
}(AdEvent));
exports.AdExitedEvent = AdExitedEvent;
/**
 * Fired on each progress event during ad playback.
 *
 * @event AdProgress
 *
 */
var AdProgressEvent = /** @class */ (function (_super) {
    __extends(AdProgressEvent, _super);
    function AdProgressEvent(videoAd, progress, rate, position) {
        return _super.call(this, exports.AD_PROGRESS, videoAd, progress, rate, position) || this;
    }
    AdProgressEvent.fromTrackerEvent = function (event) {
        var progress = event.progress, trackable = event.trackable;
        var position = progress.next - trackable.startTime;
        return new AdProgressEvent(trackable, trackable.getPercentageComplete(progress.next), progress.nextRate, position);
    };
    return AdProgressEvent;
}(AdEvent));
exports.AdProgressEvent = AdProgressEvent;
/**
 * Ad has begun playback
 *
 * @event AdStart
 *
 */
var AdStartEvent = /** @class */ (function (_super) {
    __extends(AdStartEvent, _super);
    function AdStartEvent(videoAd, progress, rate, position) {
        var _this = this;
        logger.trace("new AdStartEvent");
        _this = _super.call(this, exports.AD_START, videoAd, progress, rate, position) || this;
        // If you're within 250 ms of 0 assume you started at 0
        // This allows a slight tolerence in creating the AdStartEvent
        // due to a callback, and also querying the player's current position.
        // Also makes sure that we don't report a negative start postion
        if (_this.position <= exports.AD_RANGE_POSITION_TOLERANCE) {
            logger.trace("AdStartEvent.position " + _this.position + " less than " + exports.AD_RANGE_POSITION_TOLERANCE + ", resetting to 0");
            _this.position = 0;
        }
        return _this;
    }
    AdStartEvent.fromTrackerEvent = function (event) {
        var progress = event.progress, trackable = event.trackable;
        var position = progress.seeking ?
            progress.next - trackable.startTime :
            progress.prev < progress.next ? 0 : trackable.duration;
        logger.info("Tracking: AdStartEvent", JSON.stringify(event.progress));
        return new AdStartEvent(trackable, trackable.getPercentageComplete(progress.next), progress.nextRate, position);
    };
    return AdStartEvent;
}(AdEvent));
exports.AdStartEvent = AdStartEvent;
/**
 * Type of the event dispatched when ad is being seeked over.
 *
 * @hidden
 * @param {VideoAd} videoAd
 *
 */
var AdSeekEvent = /** @class */ (function (_super) {
    __extends(AdSeekEvent, _super);
    function AdSeekEvent(videoAd) {
        var _this = this;
        logger.trace("new AdSeekEvent");
        _this = _super.call(this, exports.AD_SEEK) || this;
        _this.videoAd = videoAd;
        return _this;
    }
    return AdSeekEvent;
}(PlayerPlatformAPIEvent));
exports.AdSeekEvent = AdSeekEvent;
/**
 * Ad that has been skipped due to trick-play speed
 *
 * @event AdsSkipped
 * @param {VideoAd[]} videoAds - array of ads skipped
 * @paran {number} rate - playback speed
 */
var AdSkippedEvent = /** @class */ (function (_super) {
    __extends(AdSkippedEvent, _super);
    function AdSkippedEvent(videoAd, rate) {
        var _this = _super.call(this, exports.AD_SKIPPED) || this;
        _this.videoAd = videoAd;
        _this.rate = rate;
        return _this;
    }
    AdSkippedEvent.fromTrackerEvent = function (event) {
        return new AdSkippedEvent(event.trackable, event.progress.nextRate);
    };
    return AdSkippedEvent;
}(PlayerPlatformAPIEvent));
exports.AdSkippedEvent = AdSkippedEvent;
/**
 * Ads have been skipped due to trick-play speed
 *
 * @event AdsSkipped
 * @param {VideoAd[]} videoAds - array of ads skipped
 * @paran {number} rate - playback speed
 */
var AdsSkippedEvent = /** @class */ (function (_super) {
    __extends(AdsSkippedEvent, _super);
    function AdsSkippedEvent(videoAds, rate) {
        var _this = _super.call(this, exports.ADS_SKIPPED) || this;
        _this.videoAds = videoAds;
        _this.rate = rate;
        return _this;
    }
    return AdsSkippedEvent;
}(PlayerPlatformAPIEvent));
exports.AdsSkippedEvent = AdsSkippedEvent;
/**
 * Bitrate has changed
 *
 * @event BitrateChanged
 * @param {Number} bitRate
 * @param {String} changeReason
 * @param {Number} width
 * @param {Number} height
 *
 */
var BitrateChangedEvent = /** @class */ (function (_super) {
    __extends(BitrateChangedEvent, _super);
    function BitrateChangedEvent(bitRate, changeReason, width, height) {
        var _this = this;
        logger.trace("new BitrateChangedEvent");
        _this = _super.call(this, exports.BITRATE_CHANGED) || this;
        _this.bitRate = isNaN(bitRate) ? 0 : bitRate;
        _this.changeReason = changeReason;
        _this.height = height;
        _this.width = width;
        return _this;
    }
    return BitrateChangedEvent;
}(PlayerPlatformAPIEvent));
exports.BitrateChangedEvent = BitrateChangedEvent;
/**
 * Buffering for an asset has completed.
 *
 * @event BufferComplete
 */
var BufferCompleteEvent = /** @class */ (function (_super) {
    __extends(BufferCompleteEvent, _super);
    function BufferCompleteEvent() {
        var _this = this;
        logger.trace("new BufferCompleteEvent");
        _this = _super.call(this, exports.BUFFER_COMPLETE) || this;
        return _this;
    }
    return BufferCompleteEvent;
}(PlayerPlatformAPIEvent));
exports.BufferCompleteEvent = BufferCompleteEvent;
/**
 * Buffering for an asset has started.
 * @event BufferStart
 */
var BufferStartEvent = /** @class */ (function (_super) {
    __extends(BufferStartEvent, _super);
    function BufferStartEvent() {
        var _this = this;
        logger.trace("new BufferStartEvent");
        _this = _super.call(this, exports.BUFFER_START) || this;
        return _this;
    }
    return BufferStartEvent;
}(PlayerPlatformAPIEvent));
exports.BufferStartEvent = BufferStartEvent;
/**
 * Number of dropped frames changes.
 *
 * @event DroppedFPSChanged
 * @param {Number} droppedfps
 */
var DroppedFPSChangedEvent = /** @class */ (function (_super) {
    __extends(DroppedFPSChangedEvent, _super);
    function DroppedFPSChangedEvent(droppedfps) {
        var _this = _super.call(this, exports.DROPPED_FPS_CHANGED) || this;
        _this.droppedfps = droppedfps;
        return _this;
    }
    return DroppedFPSChangedEvent;
}(PlayerPlatformAPIEvent));
exports.DroppedFPSChangedEvent = DroppedFPSChangedEvent;
/**
 * Duration of the asset changes.
 *
 * @event DurationChanged
 * @param {Number} duration (msec)
 */
var DurationChangedEvent = /** @class */ (function (_super) {
    __extends(DurationChangedEvent, _super);
    function DurationChangedEvent(duration) {
        var _this = _super.call(this, exports.DURATION_CHANGED) || this;
        _this.duration = duration;
        return _this;
    }
    return DurationChangedEvent;
}(PlayerPlatformAPIEvent));
exports.DurationChangedEvent = DurationChangedEvent;
/**
 * Number of rendered frames per second changes.
 *
 * @event FPSChanged
 * @param {Number} fps
 */
var FPSChangedEvent = /** @class */ (function (_super) {
    __extends(FPSChangedEvent, _super);
    function FPSChangedEvent(fps) {
        var _this = _super.call(this, exports.FPS_CHANGED) || this;
        _this.fps = fps;
        return _this;
    }
    return FPSChangedEvent;
}(PlayerPlatformAPIEvent));
exports.FPSChangedEvent = FPSChangedEvent;
/**
 * A fragment has been successfully downloaded
 *
 * @event FragmentInfo
 * @param {Number} downloadDuration
 * @param {Number} fragmentSize
 * @param {String} fragmentUrl
 * @param {Number} fragmentDuration
 */
var FragmentInfoEvent = /** @class */ (function (_super) {
    __extends(FragmentInfoEvent, _super);
    function FragmentInfoEvent(downloadDuration, fragmentSize, fragmentUrl, fragmentDuration) {
        var _this = _super.call(this, exports.FRAGMENT_INFO) || this;
        _this.downloadDuration = downloadDuration;
        _this.fragmentSize = fragmentSize;
        _this.fragmentUrl = fragmentUrl;
        _this.fragmentDuration = fragmentDuration;
        return _this;
    }
    return FragmentInfoEvent;
}(PlayerPlatformAPIEvent));
exports.FragmentInfoEvent = FragmentInfoEvent;
/**
 * Media has ended (the play head reached the duration of the asset).
 *
 * @event MediaEnded
 */
var MediaEndedEvent = /** @class */ (function (_super) {
    __extends(MediaEndedEvent, _super);
    function MediaEndedEvent() {
        var _this = this;
        logger.trace("new MediaEndedEvent");
        _this = _super.call(this, exports.MEDIA_ENDED) || this;
        return _this;
    }
    return MediaEndedEvent;
}(PlayerPlatformAPIEvent));
exports.MediaEndedEvent = MediaEndedEvent;
/**
 * Media has encountered a failure that prevented or broke playback.
 *
 * @event MediaFailed
 */
var MediaFailedEvent = /** @class */ (function (_super) {
    __extends(MediaFailedEvent, _super);
    /**
     * @param {PPError} error The error associated with the media failure
     * @param {boolean} retry Whether this failure can be retried
     */
    function MediaFailedEvent(error, retry, playerStatus) {
        if (retry === void 0) { retry = true; }
        if (playerStatus === void 0) { playerStatus = ""; }
        var _this = _super.call(this, exports.MEDIA_FAILED) || this;
        _this.error = error;
        _this.retry = retry;
        _this.playerStatus = playerStatus;
        logger.trace("new MediaFailedEvent");
        return _this;
    }
    return MediaFailedEvent;
}(PlayerPlatformAPIEvent));
exports.MediaFailedEvent = MediaFailedEvent;
/**
 * Media failure results in a retry operation
 *
 * @event MediaRetry
 * @param {object} data - contains retry count
 */
var MediaRetryEvent = /** @class */ (function (_super) {
    __extends(MediaRetryEvent, _super);
    function MediaRetryEvent(data) {
        var _this = this;
        logger.trace("new MediaRetryEvent");
        _this = _super.call(this, exports.MEDIA_RETRY) || this;
        _this.data = data;
        _this.retryCount = data.retryCount;
        return _this;
    }
    return MediaRetryEvent;
}(PlayerPlatformAPIEvent));
exports.MediaRetryEvent = MediaRetryEvent;
/**
 * Media failure results in a DAI Fallback operation
 *
 * @event MediaDaiFallback
 * @param {object} data
 */
var MediaFallbackEvent = /** @class */ (function (_super) {
    __extends(MediaFallbackEvent, _super);
    function MediaFallbackEvent(data, type) {
        var _this = this;
        logger.trace("new MediaFallbackEvent");
        _this = _super.call(this, exports.MEDIA_FALLBACK) || this;
        _this.data = data;
        _this.fallbackType = type;
        return _this;
    }
    return MediaFallbackEvent;
}(PlayerPlatformAPIEvent));
exports.MediaFallbackEvent = MediaFallbackEvent;
/**
 * The media is ready for playback including DRM acqusition and ad insertion.
 *
 * @event MediaOpened
 * @param {String} mediaType
 * @param {Number[]} playbackSpeeds
 * @param {Object[]} availableAudioLanguages
 * @param {Number} width
 * @param {Number} height
 * @param {Number} openingLatency
 * @param {Boolean} hasDRM
 * @param {Boolean} hasCC
 * @param {Array} mediaSegments
 *
 */
var MediaOpenedEvent = /** @class */ (function (_super) {
    __extends(MediaOpenedEvent, _super);
    function MediaOpenedEvent(mediaType, playbackSpeeds, availableAudioLanguages, width, height, openingLatency, hasDRM, hasCC) {
        var _this = this;
        logger.trace("new MediaOpenedEvent");
        _this = _super.call(this, exports.MEDIA_OPENED) || this;
        _this.mediaType = mediaType;
        _this.playbackSpeeds = playbackSpeeds;
        _this.availableAudioLanguages = availableAudioLanguages;
        _this.width = width;
        _this.height = height;
        _this.openingLatency = openingLatency;
        _this.hasDRM = hasDRM;
        _this.hasCC = hasCC;
        return _this;
    }
    return MediaOpenedEvent;
}(PlayerPlatformAPIEvent));
exports.MediaOpenedEvent = MediaOpenedEvent;
/**
 * Media playhead has changed position.
 *
 * @event MediaProgress
 * @param {Number} position (msec)
 * @param {Number} playbackSpeed
 * @param {Number} startposition (msec)
 * @param {Number} endposition (msec)
 * @param {Number} updateinterval (msec)
 *
 */
var MediaProgressEvent = /** @class */ (function (_super) {
    __extends(MediaProgressEvent, _super);
    function MediaProgressEvent(position, playbackSpeed, startposition, endposition, updateinterval) {
        var _this = _super.call(this, exports.MEDIA_PROGRESS) || this;
        _this.position = position;
        _this.playbackSpeed = playbackSpeed;
        _this.startposition = startposition;
        _this.endposition = endposition;
        _this.updateinterval = updateinterval;
        return _this;
    }
    return MediaProgressEvent;
}(PlayerPlatformAPIEvent));
exports.MediaProgressEvent = MediaProgressEvent;
/**
 * Media has encountered a warning that might impact video playback.
 *
 * @event MediaWarning
 *
 */
var MediaWarningEvent = /** @class */ (function (_super) {
    __extends(MediaWarningEvent, _super);
    /**
     * @param {PPError} error The error associated with this warning
     */
    function MediaWarningEvent(error) {
        var _this = this;
        logger.trace("new MediaWarningEvent");
        _this = _super.call(this, exports.MEDIA_WARNING) || this;
        error.isWarning = true;
        _this.error = error;
        return _this;
    }
    return MediaWarningEvent;
}(PlayerPlatformAPIEvent));
exports.MediaWarningEvent = MediaWarningEvent;
/**
 * An authentication token is missing and is required to get DRM license.
 *
 * @event MissingDRMToken
 * @param {BaseAsset} asset
 *
 */
var MissingDRMTokenEvent = /** @class */ (function (_super) {
    __extends(MissingDRMTokenEvent, _super);
    function MissingDRMTokenEvent(asset) {
        var _this = this;
        logger.trace("new MissingDRMTokenEvent");
        _this = _super.call(this, exports.MISSING_DRM_TOKEN) || this;
        _this.asset = asset;
        return _this;
    }
    return MissingDRMTokenEvent;
}(PlayerPlatformAPIEvent));
exports.MissingDRMTokenEvent = MissingDRMTokenEvent;
/**
 * The number of available audio languages changes.
 *
 * @event NumberOfAlternativeAudioStreamsChanged
 * @param {Number} numberofAlternativeAudioStreams
 *
 */
var NumberOfAlternativeAudioStreamsChangedEvent = /** @class */ (function (_super) {
    __extends(NumberOfAlternativeAudioStreamsChangedEvent, _super);
    function NumberOfAlternativeAudioStreamsChangedEvent(numberofAlternativeAudioStreams) {
        var _this = this;
        logger.trace("new NumberOfAlternativeAudioStreamsChangedEvent");
        _this = _super.call(this, exports.NUMBER_OF_ALTERNATIVE_AUDIO_STREAMS_CHANGED) || this;
        _this.numberOfAlternativeAudioStreams = numberofAlternativeAudioStreams;
        return _this;
    }
    return NumberOfAlternativeAudioStreamsChangedEvent;
}(PlayerPlatformAPIEvent));
exports.NumberOfAlternativeAudioStreamsChangedEvent = NumberOfAlternativeAudioStreamsChangedEvent;
/**
 * The number of available closed captions changes.
 *
 * @event NumberOfClosedCaptionsStreamsChanged
 * @param {Number} numberofClosedCaptionsStreams
 *
 */
var NumberOfClosedCaptionsStreamsChanged = /** @class */ (function (_super) {
    __extends(NumberOfClosedCaptionsStreamsChanged, _super);
    function NumberOfClosedCaptionsStreamsChanged(numberofClosedCaptionsStreams) {
        var _this = this;
        logger.trace("new NumberOfClosedCaptionsStreamsChanged");
        _this = _super.call(this, exports.NUMBER_OF_CLOSED_CAPTIONS_STREAMS_CHANGED) || this;
        _this.numberOfClosedCaptionsStreams = numberofClosedCaptionsStreams;
        return _this;
    }
    return NumberOfClosedCaptionsStreamsChanged;
}(PlayerPlatformAPIEvent));
exports.NumberOfClosedCaptionsStreamsChanged = NumberOfClosedCaptionsStreamsChanged;
/**
 * The playback speed of the asset changes.
 *
 * @event PlaybackSpeedChanged
 * @param {Number} playbackSpeed
 * @param {Number} [reason] - defaults to USER_REQUESTED if not provided
 */
var PlaybackSpeedChangedEvent = /** @class */ (function (_super) {
    __extends(PlaybackSpeedChangedEvent, _super);
    function PlaybackSpeedChangedEvent(playbackSpeed, reason) {
        var _this = this;
        logger.trace("new PlaybackSpeedChangedEvent");
        _this = _super.call(this, exports.PLAYBACK_SPEED_CHANGED) || this;
        _this.playbackSpeed = playbackSpeed;
        _this.reason = reason || exports.SPEED_CHANGE_USER_REQUESTED;
        return _this;
    }
    return PlaybackSpeedChangedEvent;
}(PlayerPlatformAPIEvent));
exports.PlaybackSpeedChangedEvent = PlaybackSpeedChangedEvent;
/**
 * The set of currently supported playback speeds change.
 *
 * @event PlaybackSpeedsChanged
 * @param {Array} playbackSpeeds
 *
 */
var PlaybackSpeedsChangedEvent = /** @class */ (function (_super) {
    __extends(PlaybackSpeedsChangedEvent, _super);
    function PlaybackSpeedsChangedEvent(playbackSpeeds) {
        var _this = this;
        logger.trace("new PlaybackSpeedsChangedEvent: " + JSON.stringify(playbackSpeeds));
        _this = _super.call(this, exports.PLAYBACK_SPEEDS_CHANGED) || this;
        _this.playbackSpeeds = playbackSpeeds;
        return _this;
    }
    return PlaybackSpeedsChangedEvent;
}(PlayerPlatformAPIEvent));
exports.PlaybackSpeedsChangedEvent = PlaybackSpeedsChangedEvent;
/**
 * Initial playback of the asset began.
 *
 * @event PlaybackStarted
 *
 */
var PlaybackStartedEvent = /** @class */ (function (_super) {
    __extends(PlaybackStartedEvent, _super);
    function PlaybackStartedEvent() {
        var _this = this;
        logger.trace("new PlaybackStarted");
        _this = _super.call(this, exports.PLAYBACK_STARTED) || this;
        return _this;
    }
    return PlaybackStartedEvent;
}(PlayerPlatformAPIEvent));
exports.PlaybackStartedEvent = PlaybackStartedEvent;
/**
 * The state of the media player changes.
 *
 * @event PlayStateChanged
 * @param {String} playState
 *
 */
var PlayStateChangedEvent = /** @class */ (function (_super) {
    __extends(PlayStateChangedEvent, _super);
    function PlayStateChangedEvent(playState) {
        var _this = this;
        logger.trace("new PlayStateChangedEvent");
        _this = _super.call(this, exports.PLAY_STATE_CHANGED) || this;
        _this.playState = playState;
        return _this;
    }
    return PlayStateChangedEvent;
}(PlayerPlatformAPIEvent));
exports.PlayStateChangedEvent = PlayStateChangedEvent;
/**
 * Seeking for an asset ends.
 *
 * @event SeekComplete
 */
var SeekCompleteEvent = /** @class */ (function (_super) {
    __extends(SeekCompleteEvent, _super);
    function SeekCompleteEvent(position) {
        var _this = this;
        logger.trace("new SeekCompleteEvent");
        _this = _super.call(this, exports.SEEK_COMPLETE) || this;
        _this.position = position;
        return _this;
    }
    return SeekCompleteEvent;
}(PlayerPlatformAPIEvent));
exports.SeekCompleteEvent = SeekCompleteEvent;
/**
 * Seeking for an asset starts.
 *
 * @event SeekStart
 */
var SeekStartEvent = /** @class */ (function (_super) {
    __extends(SeekStartEvent, _super);
    function SeekStartEvent(position) {
        var _this = this;
        logger.trace("new SeekStartEvent");
        _this = _super.call(this, exports.SEEK_START) || this;
        _this.position = position;
        return _this;
    }
    return SeekStartEvent;
}(PlayerPlatformAPIEvent));
exports.SeekStartEvent = SeekStartEvent;
/**
 * DRM metadata has been retrieved
 *
 * @event DRMMetadata
 */
var DRMMetadataEvent = /** @class */ (function (_super) {
    __extends(DRMMetadataEvent, _super);
    function DRMMetadataEvent(drmMetadataInfo) {
        var _this = _super.call(this, exports.DRM_METADATA) || this;
        _this.drmMetadataInfo = drmMetadataInfo;
        logger.trace("new DRMMetadataEvent");
        return _this;
    }
    return DRMMetadataEvent;
}(PlayerPlatformAPIEvent));
exports.DRMMetadataEvent = DRMMetadataEvent;
/**
 * An emergency alert has been found in the client's region
 *
 * @event EmergencyAlertIdentified
 * @param {String} easLanguage - the ISO-639 code corresponding to the langauge of the EAS media
 * @param {String} easUri - the URI specifying the location of the EAS event's media or stream
 */
var EmergencyAlertIdentifiedEvent = /** @class */ (function (_super) {
    __extends(EmergencyAlertIdentifiedEvent, _super);
    function EmergencyAlertIdentifiedEvent(easLanguage, easUri) {
        var _this = this;
        logger.trace("new EmergencyAlertIdentifiedEvent");
        _this = _super.call(this, exports.EMERGENCY_ALERT_IDENTIFIED) || this;
        _this.easLanguage = easLanguage;
        _this.easURI = easUri;
        return _this;
    }
    return EmergencyAlertIdentifiedEvent;
}(PlayerPlatformAPIEvent));
exports.EmergencyAlertIdentifiedEvent = EmergencyAlertIdentifiedEvent;
/**
 * The client is exempted from playing back the alert.
 *
 * @event EmergencyAlertExempted
 * @param {String} easLanguage - the ISO-639 code corresponding to the langauge of the EAS media
 * @param {String} easUri - the URI specifying the location of the EAS event's media or stream
 */
var EmergencyAlertExemptedEvent = /** @class */ (function (_super) {
    __extends(EmergencyAlertExemptedEvent, _super);
    function EmergencyAlertExemptedEvent(easLanguage, easUri) {
        var _this = this;
        logger.trace("new EmergencyAlertExemptedEvent");
        _this = _super.call(this, exports.EMERGENCY_ALERT_EXEMPTED) || this;
        _this.easLanguage = easLanguage;
        _this.easURI = easUri;
        return _this;
    }
    return EmergencyAlertExemptedEvent;
}(PlayerPlatformAPIEvent));
exports.EmergencyAlertExemptedEvent = EmergencyAlertExemptedEvent;
/**
 * An emergency alert has started playback or started scrolling
 *
 * @event EmergencyAlertStarted
 * @param {String} easLanguage - the ISO-639 code corresponding to the langauge of the EAS media
 * @param {String} easUri - the URI specifying the location of the EAS event's media or stream
 */
var EmergencyAlertStartedEvent = /** @class */ (function (_super) {
    __extends(EmergencyAlertStartedEvent, _super);
    function EmergencyAlertStartedEvent(alertType, easLanguage, easUri) {
        var _this = _super.call(this, exports.EMERGENCY_ALERT_STARTED) || this;
        _this.alertType = alertType;
        _this.easLanguage = easLanguage;
        _this.easUri = easUri;
        logger.trace("new EmergencyAlertStartedEvent");
        return _this;
    }
    return EmergencyAlertStartedEvent;
}(PlayerPlatformAPIEvent));
exports.EmergencyAlertStartedEvent = EmergencyAlertStartedEvent;
/**
 * An emergency alert has completed playback or finished scrolling
 *
 * @event EmergencyAlertComplete
 * @param {String} easLanguage - the ISO-639 code corresponding to the langauge of the EAS media
 * @param {String} easUri - the URI specifying the location of the EAS event's media or stream
 */
var EmergencyAlertCompleteEvent = /** @class */ (function (_super) {
    __extends(EmergencyAlertCompleteEvent, _super);
    function EmergencyAlertCompleteEvent(alertType, easLanguage, easUri) {
        var _this = _super.call(this, exports.EMERGENCY_ALERT_COMPLETE) || this;
        _this.alertType = alertType;
        _this.easLanguage = easLanguage;
        _this.easUri = easUri;
        logger.trace("new EmergencyAlertCompleteEvent");
        return _this;
    }
    return EmergencyAlertCompleteEvent;
}(PlayerPlatformAPIEvent));
exports.EmergencyAlertCompleteEvent = EmergencyAlertCompleteEvent;
/**
 * The client has exhausted its retries and is stopping playback of the emergency alert
 *
 * @event EmergencyAlertFailure
 * @param {String} easCode - the error code that resulted in the failure
 * @param {String} easLanguage - the ISO-639 code corresponding to the langauge of the EAS media
 * @param {String} easUri - the URI specifying the location of the EAS event's media or stream
 */
var EmergencyAlertFailureEvent = /** @class */ (function (_super) {
    __extends(EmergencyAlertFailureEvent, _super);
    function EmergencyAlertFailureEvent(easCode, easLanguage, easUri) {
        var _this = this;
        logger.trace("new EmergencyAlertFailureEvent");
        _this = _super.call(this, exports.EMERGENCY_ALERT_FAILURE) || this;
        _this.easCode = easCode;
        _this.easLanguage = easLanguage;
        _this.easURI = easUri;
        return _this;
    }
    return EmergencyAlertFailureEvent;
}(PlayerPlatformAPIEvent));
exports.EmergencyAlertFailureEvent = EmergencyAlertFailureEvent;
/**
 * A non-fatal exception has resulted in the client retrying one or more actions during the playback of an emergency alert.
 *
 * @event EmergencyAlertErrored
 * @param {String} easCode - the error code that resulted in the failure
 * @param {String} easLanguage - the ISO-639 code corresponding to the langauge of the EAS media
 * @param {String} easUri - the URI specifying the location of the EAS event's media or stream
 */
var EmergencyAlertErroredEvent = /** @class */ (function (_super) {
    __extends(EmergencyAlertErroredEvent, _super);
    function EmergencyAlertErroredEvent(easCode, easLanguage, easUri) {
        var _this = this;
        logger.trace("new EmergencyAlertErroredEvent");
        _this = _super.call(this, exports.EMERGENCY_ALERT_ERRORED) || this;
        _this.easCode = easCode;
        _this.easLanguage = easLanguage;
        _this.easURI = easUri;
        return _this;
    }
    return EmergencyAlertErroredEvent;
}(PlayerPlatformAPIEvent));
exports.EmergencyAlertErroredEvent = EmergencyAlertErroredEvent;
/**
 * A VPAID ad events has occured. These are playback and loading events
 * related to a VPAID ad which is usually dynamic content that we run on
 * the DOM which can be a SWF or JS code.
 * @param {VPAIDAdEventType} type - the type of event
 */
var VPAIDAdEvent = /** @class */ (function (_super) {
    __extends(VPAIDAdEvent, _super);
    function VPAIDAdEvent(vpaidType) {
        var _this = _super.call(this, exports.VPAID_AD_EVENT) || this;
        _this.vpaidType = vpaidType;
        logger.trace("new VPAIDAdEvent(" + vpaidType + ")");
        return _this;
    }
    return VPAIDAdEvent;
}(PlayerPlatformAPIEvent));
exports.VPAIDAdEvent = VPAIDAdEvent;
/**
 * A VSS stream switch occurred
 *
 * @event StreamSwitch
 * @param {Asset} asset: the asset on which the stream switch occurred
 * (will contain latest values for sourceStreamId, signalId, and serviceZone properties)
 */
var StreamSwitchEvent = /** @class */ (function (_super) {
    __extends(StreamSwitchEvent, _super);
    function StreamSwitchEvent(sourceStreamId, signalId) {
        var _this = _super.call(this, exports.STREAM_SWITCH) || this;
        _this.sourceStreamId = sourceStreamId;
        _this.signalId = signalId;
        logger.trace("new StreamSwitch event");
        return _this;
    }
    return StreamSwitchEvent;
}(PlayerPlatformAPIEvent));
exports.StreamSwitchEvent = StreamSwitchEvent;
/**
 * A VSS stream has reached the end of the manifest and now requires the viewers location
 * in order to retrive the service zone based manifest.
 *
 * @event ServiceZoneRequirement
 * @param {string} serviceZoneType: the serviceZoneType is the type of location
 * we are requesting from the user (ex: zipcode, geolocation, uurn)
 */
var ServiceZoneEvent = /** @class */ (function (_super) {
    __extends(ServiceZoneEvent, _super);
    function ServiceZoneEvent(serviceZoneType) {
        var _this = _super.call(this, exports.SERVICE_ZONE) || this;
        _this.serviceZoneType = serviceZoneType;
        logger.trace("new ServiceZone event");
        return _this;
    }
    return ServiceZoneEvent;
}(PlayerPlatformAPIEvent));
exports.ServiceZoneEvent = ServiceZoneEvent;
/*
 * Add a listener callback for the given <code>type</code>
 *
 * @hidden
 * @param type
 * @param listener
 * @param options
 * @param context
 */
function addEventListener(type, listener, options, context) {
    if (type === exports.AD_EXITED) {
        logger.warn("AD_EXITED is DEPRECATED: see AD_COMPLETE");
    }
    return mediator.on(type, listener, options, context);
}
exports.addEventListener = addEventListener;
/**
 * Remove a listener callback for the given <code>type</code>
 *
 * @hidden
 * @param type
 * @param listener
 */
function removeEventListener(type, listener) {
    mediator.remove(type, listener);
}
exports.removeEventListener = removeEventListener;
/**
 * Publish the instance of <code>PlayerPlatformAPIEvent</code>
 *
 * @hidden
 * @param event
 */
function dispatchEvent(event) {
    if (!event) {
        // creating an error captures the stack, which will be useful for figuring out
        // where the undefined event was passed from
        logger.error(new Error("dispatchEvent was called with undefined event"));
        return;
    }
    // Mediator no longer throws, if the observable subscription does not handle
    // the error, mediator will catch it and log it so that it can continue publishing
    mediator.publish(event.type, event);
}
exports.dispatchEvent = dispatchEvent;
/**
 * @hidden
 */
exports.on = addEventListener;
/**
 * @hidden
 */
exports.off = removeEventListener;
/**
 * @hidden
 */
exports.emit = dispatchEvent;
function toObservable(name) {
    if (name === exports.AD_EXITED) {
        logger.warn("AD_EXITED is DEPRECATED: see AD_COMPLETE");
    }
    return rxjs_1.Observable.fromEventPattern(function (handler) { return mediator.subscribe(name, handler, {}, {}); }, function (handler) { return mediator.remove(name, handler); }).map(function (t) { return Array.isArray(t) ? t[0] : t; });
}
exports.toObservable = toObservable;

},{"./util/Logger":571,"publicious":165,"rxjs":281,"rxjs/add/observable/fromEventPattern":243}],490:[function(require,module,exports){
"use strict";
/**
 * Created by chesli200 on 3/4/15.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.MILLISECONDS_PER_SECOND = 1000;
exports.BYTES_PER_KILOBYTE = 1024;
exports.FFWD_SET_POSITION_DELAY = 500;
exports.ZOOM_SETTING_NONE = "none";
exports.ZOOM_SETTING_FULL = "full";
// Player states
exports.STATUS_IDLE = "idle";
exports.STATUS_COMPLETE = "complete";
exports.STATUS_ERROR = "error";
exports.STATUS_INITIALIZED = "initialized";
exports.STATUS_INITIALIZING = "initializing";
exports.STATUS_PREPARING = "preparing";
exports.STATUS_PREPARED = "prepared";
exports.STATUS_PAUSED = "paused";
exports.STATUS_PLAYING = "playing";
exports.STATUS_READY = "ready";
exports.STATUS_SEEKING = "seeking";
exports.STATUS_RELEASED = "released";
exports.STATUS_BUFFERING = "buffering";
exports.STATUS_STOPPING = "stopping";
exports.STATUS_STOPPED = "stopped";
/* States that other engines besides PSDK might use */
exports.STATUS_SEGMENT_END = "segment_ended";
exports.PRIORITY_TOP = 0;
exports.PRIORITY_HIGH = 1;
exports.PRIORITY_MID = 2;
exports.PRIORITY_LOW = 3;

},{}],491:[function(require,module,exports){
"use strict";
/**
 * Created by chesli200 on 5/27/16.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var Application_1 = require("./Application");
var PlayerPlatformAPIEvents_1 = require("./PlayerPlatformAPIEvents");
var rxjs_1 = require("rxjs");
require("rxjs/add/operator/filter");
var PlayerPlatformStreams = /** @class */ (function () {
    function PlayerPlatformStreams() {
        this.setXacts = new rxjs_1.BehaviorSubject(null);
        this.setAssets = Application_1.toObservable("api:setAsset");
        this.manifests = Application_1.toObservable("player:manifestLoaded");
        this.tags = Application_1.toObservable("player:tag");
        this.playbackStarts = PlayerPlatformAPIEvents_1.toObservable(PlayerPlatformAPIEvents_1.PLAYBACK_STARTED);
        this.mediaOpeneds = PlayerPlatformAPIEvents_1.toObservable(PlayerPlatformAPIEvents_1.MEDIA_OPENED);
        this.mediaProgresses = PlayerPlatformAPIEvents_1.toObservable(PlayerPlatformAPIEvents_1.MEDIA_PROGRESS);
        this.mediaEndeds = PlayerPlatformAPIEvents_1.toObservable(PlayerPlatformAPIEvents_1.MEDIA_ENDED);
        this.playStates = PlayerPlatformAPIEvents_1.toObservable(PlayerPlatformAPIEvents_1.PLAY_STATE_CHANGED);
        this.speeds = PlayerPlatformAPIEvents_1.toObservable(PlayerPlatformAPIEvents_1.PLAYBACK_SPEED_CHANGED);
        this.bitrates = PlayerPlatformAPIEvents_1.toObservable(PlayerPlatformAPIEvents_1.BITRATE_CHANGED);
        this.adCompletes = PlayerPlatformAPIEvents_1.toObservable(PlayerPlatformAPIEvents_1.AD_COMPLETE);
        this.adErrors = PlayerPlatformAPIEvents_1.toObservable(PlayerPlatformAPIEvents_1.AD_ERROR);
        //this.adExiteds = PlayerPlatformAPIEvents_1.toObservable(PlayerPlatformAPIEvents_1.AD_EXITED); //WMR causes exception
        this.adProgresses = PlayerPlatformAPIEvents_1.toObservable(PlayerPlatformAPIEvents_1.AD_PROGRESS);
        this.adStarts = PlayerPlatformAPIEvents_1.toObservable(PlayerPlatformAPIEvents_1.AD_START);
        this.adBreakStarts = PlayerPlatformAPIEvents_1.toObservable(PlayerPlatformAPIEvents_1.AD_BREAK_START);
        this.adBreakCompletes = PlayerPlatformAPIEvents_1.toObservable(PlayerPlatformAPIEvents_1.AD_BREAK_COMPLETE);
        this.adBreakExiteds = PlayerPlatformAPIEvents_1.toObservable(PlayerPlatformAPIEvents_1.AD_BREAK_EXITED);
        this.adsSkippeds = PlayerPlatformAPIEvents_1.toObservable(PlayerPlatformAPIEvents_1.ADS_SKIPPED);
        this.streamSwitches = PlayerPlatformAPIEvents_1.toObservable(PlayerPlatformAPIEvents_1.STREAM_SWITCH);
        Application_1.toObservable("api:setXact").subscribe(this.setXacts);
    }
    PlayerPlatformStreams.prototype.getPlayState = function (state) {
        return this.playStates.filter(function (evt) { return evt.playState === state; });
    };
    return PlayerPlatformStreams;
}());
exports.PlayerPlatformStreams = PlayerPlatformStreams;

},{"./Application":483,"./PlayerPlatformAPIEvents":489,"rxjs":281,"rxjs/add/operator/filter":260}],492:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("core-js/es6/promise");
require("core-js/es6/map");
require("core-js/es6/array");
require("core-js/es6/string");
require("core-js/es7/reflect");

},{"core-js/es6/array":3,"core-js/es6/map":4,"core-js/es6/promise":5,"core-js/es6/string":6,"core-js/es7/reflect":7}],493:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var PPError_1 = require("../PPError");
var Logger_1 = require("../util/Logger");
var events = require("../PlayerPlatformAPIEvents");
var constants = require("../PlayerPlatformConstants");
var VideoAd_1 = require("../ads/VideoAd");
var VideoAdBreak_1 = require("../ads/VideoAdBreak");
var JSUtil_1 = require("../util/JSUtil");
var MediaSegment_1 = require("../MediaSegment");
var rxjs_1 = require("rxjs");
require("rxjs/add/observable/empty");
require("rxjs/add/observable/merge");
require("rxjs/add/operator/catch");
require("rxjs/add/operator/distinctUntilChanged");
require("rxjs/add/operator/map");
require("rxjs/add/operator/takeUntil");
var PlayerPlatformConstants_1 = require("../PlayerPlatformConstants");
/**
 * AdManager
 * @constructor
 */
var AdManager = /** @class */ (function () {
    function AdManager() {
        this.subscribedTags = [];
        this.ads = [];
        this._adBreaks = [];
        this.logger = new Logger_1.Logger("AdManager");
    }
    Object.defineProperty(AdManager.prototype, "adBreaks", {
        get: function () {
            return this._adBreaks;
        },
        set: function (adBks) {
            this._adBreaks = adBks || [];
        },
        enumerable: true,
        configurable: true
    });
    AdManager.prototype.init = function (sandbox, cfg, handleAdEvents) {
        if (cfg === void 0) { cfg = {}; }
        if (handleAdEvents === void 0) { handleAdEvents = false; }
        this.sandbox = sandbox;
        this.cfg = cfg;
        // set getTimeline API to AdManager.getTimeline()
        sandbox.addAPI("getTimeline", this.getTimeline.bind(this));
        sandbox.addAPI("getMediaSegments", this.getMediaSegments.bind(this));
        sandbox.addAPI("getSupportedPlaybackSpeeds", this.getSupportedPlaybackSpeeds.bind(this));
        sandbox.subscribe("api:setAsset", this.onSetAsset, { priority: constants.PRIORITY_MID }, this);
        events.addEventListener(events.PLAY_STATE_CHANGED, this.onPlayStateChanged, { priority: constants.PRIORITY_HIGH }, this);
        if (handleAdEvents) {
            this.handleAdEvents();
            // intercept the following api calls to modify parameters
            sandbox.subscribe("api:setPosition", this.onSetPosition, { priority: constants.PRIORITY_HIGH }, this);
            sandbox.subscribe("api:setSpeed", this.onSetSpeed, { priority: constants.PRIORITY_HIGH }, this);
            sandbox.subscribe("api:pause", this.onPause, { priority: constants.PRIORITY_HIGH }, this);
        }
        return this;
    };
    AdManager.prototype.destroy = function (sandbox) {
        sandbox.remove("api:setAsset", this.onSetAsset);
        sandbox.remove("api:setPosition", this.onSetPosition);
        sandbox.remove("api:setSpeed", this.onSetSpeed);
        sandbox.remove("api:pause", this.onPause);
        events.removeEventListener(events.PLAY_STATE_CHANGED, this.onPlayStateChanged);
        events.removeEventListener(events.MEDIA_ENDED, this.onMediaEnded);
        events.removeEventListener(events.MEDIA_OPENED, this.onMediaOpened);
        events.removeEventListener(events.AD_BREAK_COMPLETE, this.onAdBreakComplete);
        events.removeEventListener(events.AD_BREAK_EXITED, this.onAdBreakExited);
        events.removeEventListener(events.AD_COMPLETE, this.onAdComplete);
        events.removeEventListener(events.AD_BREAK_UPCOMING, this.onUpcomingAdBreak);
        if (this.playspeedChanged) {
            this.playspeedChanged.unsubscribe();
        }
        this.reset();
    };
    AdManager.prototype.update = function (cfg) {
        this.cfg = cfg;
    };
    AdManager.prototype.handleAdEvents = function () {
        events.addEventListener(events.MEDIA_ENDED, this.onMediaEnded, {}, this);
        events.addEventListener(events.MEDIA_OPENED, this.onMediaOpened, { priority: constants.PRIORITY_HIGH }, this);
        events.addEventListener(events.AD_BREAK_COMPLETE, this.onAdBreakComplete, { priority: constants.PRIORITY_HIGH }, this);
        events.addEventListener(events.AD_BREAK_EXITED, this.onAdBreakExited, { priority: constants.PRIORITY_HIGH }, this);
        events.addEventListener(events.AD_COMPLETE, this.onAdComplete, { priority: constants.PRIORITY_HIGH }, this);
        events.addEventListener(events.AD_BREAK_UPCOMING, this.onUpcomingAdBreak, { priority: constants.PRIORITY_HIGH }, this);
    };
    AdManager.prototype.onSetAsset = function (asset) {
        this.reset();
        this.asset = asset;
        asset.adMetadata = this.getMetadata();
        this.subscribedTags.forEach(function (tag) {
            asset.addSubscribedTag(tag);
        });
    };
    AdManager.prototype.onSetPosition = function (target, ignoreAds, channel) {
        if (ignoreAds) {
            this.logger.info("Ignoring the seek as the ignoreAds flag is true");
            return;
        }
        var start = this.sandbox.getCurrentPosition();
        var limit = this.getNewSeekPosition(start, target);
        if (target === start) {
            this.logger.info("Ignoring the seek as attempting to seek to current position");
            return;
        }
        // intercept setPosition call and modify target
        channel.stopPropagation();
        /**
         * We can always seek to where we are
         * (limit === start), if the new seek position
         * does not match our target we assume
         * we can not seek there based on some restriction
         */
        if (limit === start) {
            this.logger.info("setPosition: seek disallowed by AdManager");
            var error = new PPError_1.PPError(events.MEDIA_WARNING_TRICKMODE_DISALLOWED, null, "seek not allowed by current segment");
            // generate the appropriate media warning event
            events.dispatchEvent(new events.MediaWarningEvent(error));
            return;
        }
        else if (limit !== target) {
            this.deferredSeek = target;
            this.logger.info("setPosition: deferredSeek = target");
        }
        else {
            this.deferredSeek = null;
            this.logger.info("setPosition: deferredSeek = null");
        }
        this.logger.info("setPosition: start=" + start + " target=" + target + " limit=" + limit);
        // resend setPosition event with new prefix
        this.sandbox.publish("ads:setPosition", limit);
    };
    /**
     * onSetSpeed is a handler for a publicious subscriber.
     * It's arguments are somewhat dynamic depending on what was provided
     * by the publisher.
     * The MediatorChannel should never explicitly be defined as an arg, since
     * it dynamically appears as the last arg in whatever is published.
     * This allows the publisher and subcriber to be more losely coupled for
     * when additional arguments are added to the publish.
     */
    AdManager.prototype.onSetSpeed = function (speed, _overshootCorrection) {
        var ad = this.getCurrentAd();
        var channel = arguments[arguments.length - 1];
        if (ad && !ad.speedIsAllowed(speed)) {
            this.logger.info("setSpeed: speed disallowed by TrickModeRestriction");
            channel.stopPropagation();
            var error = new PPError_1.PPError(events.MEDIA_WARNING_TRICKMODE_DISALLOWED, null, "speed change not allowed by current segment");
            // generate the appropriate media warning event
            events.dispatchEvent(new events.MediaWarningEvent(error));
        }
        else if (speed > 1) {
            var ffDisabledAd = this.getTrickModeDisallowedAdInRange(speed);
            if (ffDisabledAd) {
                this.logger.info("Starting playback of trickmode restricted Ad");
                channel.stopPropagation();
                this.sandbox.publish("api:setPosition", ffDisabledAd.startTime);
            }
        }
    };
    AdManager.prototype.onPause = function (channel) {
        var ad = this.getCurrentAd();
        if (ad && !ad.pausable) {
            this.logger.info("pause disallowed by TrickModeRestriction");
            channel.stopPropagation();
            var error = new PPError_1.PPError(events.MEDIA_WARNING_TRICKMODE_DISALLOWED, null, "pause not allowed by current ad");
            // generate the appropriate media warning event
            events.dispatchEvent(new events.MediaWarningEvent(error));
        }
    };
    /**
     * Indicates whether this ad manager controls initial playback.
     * Some ad managers need to play a PRE-ROLL or other content before
     * play is called on an underlying ad engine.
     */
    AdManager.prototype.controlsInitialPlayback = function () {
        return false;
    };
    AdManager.prototype.onMediaOpened = function (event) {
        this.setupSpeedsChangedEvent();
        event.numAds = this.ads.length;
    };
    /**
     * create a new VideoAd and record it in a VideoAdBreak. Create a new VideoAdBreak if necessary
     * @method addAd
     * @param {string} id              - unique identifier for ad
     * @param {number} time            - starting time of the ad in milliseconds
     * @param {number} duration        - duration of ad in milliseconds
     * @param {object} options
     */
    AdManager.prototype.addAd = function (id, time, duration, options) {
        if (options === void 0) { options = {}; }
        this.logger.trace("addAd: id=" + id + " time=" + time + " duration=" + duration + " options=" + JSON.stringify(options));
        this.ads.push(new VideoAd_1.VideoAd(id, time, duration, options));
    };
    /**
     * indicate if there is an ad that includes the specified position
     * @method adCoversLocation
     * @param {number} position (msec)
     * @returns {boolean}
     */
    AdManager.prototype.adCoversLocation = function (position) {
        return this.adBreakForLocation(position) !== undefined;
    };
    AdManager.prototype.adBreakForLocation = function (position) {
        for (var i = 0; i < this.adBreaks.length; ++i) {
            if (this.adBreaks[i].coversLocation(position)) {
                return this.adBreaks[i];
            }
        }
    };
    /**
     * Given a position relative to a timeline containing ads,
     * recalculate the position for a timeline with no ads.
     *
     * @param {number} pos - position in timeline containing ads
     * @returns {number}
     */
    AdManager.prototype.getResumePositionNoAds = function (pos) {
        var breaks = this.adBreaks.filter(function (adBreak) {
            if (adBreak.coversLocation(pos)) {
                pos = adBreak.endTime;
            }
            return adBreak.endTime <= pos;
        });
        if (!breaks.length) {
            return pos;
        }
        var totalDuration = 0;
        for (var _i = 0, breaks_1 = breaks; _i < breaks_1.length; _i++) {
            var adBreak = breaks_1[_i];
            totalDuration += adBreak.duration;
        }
        return pos - totalDuration;
    };
    AdManager.prototype.getClosestAdBreak = function (position) {
        var closest;
        for (var _i = 0, _a = this.adBreaks; _i < _a.length; _i++) {
            var adBreak = _a[_i];
            if (position >= adBreak.startTime && (!closest || adBreak.startTime >= closest.startTime)) {
                closest = adBreak;
            }
        }
        return closest;
    };
    /**
     * AdManager Event Handlers *****************************************************
     */
    AdManager.prototype.onAdBreakComplete = function () {
        if (this.sandbox.getCurrentPlaybackSpeed() === 1 && this.deferredSeek && !this.adCoversLocation(this.deferredSeek)) {
            this.logger.info("setPosition: onAdBreakComplete deferredSeek = " + this.deferredSeek);
            this.sandbox.publish("ads:setPosition", this.deferredSeek);
        }
        this.deferredSeek = null;
    };
    AdManager.prototype.onAdBreakExited = function () {
        this.deferredSeek = null;
    };
    AdManager.prototype.onAdComplete = function (event) {
        if (event.rate === 1) {
            event.videoAd.incrementSeenCount();
        }
    };
    AdManager.prototype.onUpcomingAdBreak = function (event) {
        var adBreak = event.videoAdBreak; // use the first one
        var speed = this.sandbox.getCurrentPlaybackSpeed();
        if (!adBreak.speedIsAllowed(speed)) {
            this.sandbox.publish("api:setPosition", event.videoAdBreak.startTime);
        }
    };
    AdManager.prototype.onMediaEnded = function () {
        this.deferredSeek = null;
    };
    /**
     * @method getMetadata
     * @returns {object}
     */
    AdManager.prototype.getMetadata = function () {
        return { adType: this.type };
    };
    AdManager.prototype.getTimeline = function () {
        return this.adBreaks;
    };
    AdManager.prototype.getSupportedPlaybackSpeeds = function () {
        var speeds = this.sandbox.player.getSupportedPlaybackSpeeds();
        var ad = this.getCurrentAd();
        return ad ? speeds.filter(function (speed) { return ad.speedIsAllowed(speed); }) : speeds;
    };
    AdManager.prototype.isAdPlaying = function () {
        return !!this.getCurrentAdBreak();
    };
    AdManager.prototype.getNewSeekPosition = function (_start, target) {
        return target;
    };
    AdManager.prototype.reset = function () {
        this.deferredSeek = null;
        this.ads = [];
        this.adBreaks = [];
    };
    AdManager.prototype.getCurrentAdBreak = function () {
        var _this = this;
        return this.adBreaks.filter(function (adBreak) { return adBreak.coversLocation(_this.sandbox.getCurrentPosition()); })[0];
    };
    AdManager.prototype.getCurrentAd = function () {
        var _this = this;
        return this.adBreaks
            .map(function (adBreak) { return adBreak.ads; })
            .reduce(function (a, b) { return a.concat(b); }, [])
            .filter(function (ad) { return ad.coversLocation(_this.sandbox.getCurrentPosition()); })[0];
    };
    /**
     * Returns VideoAd with passed trickspeed restriction near to current position
     * @param rate
     */
    AdManager.prototype.getTrickModeDisallowedAdInRange = function (rate) {
        var currentPosition = this.sandbox.getCurrentPosition();
        return this.adBreaks
            .map(function (adBreak) { return adBreak.ads; })
            .reduce(function (a, b) { return a.concat(b); }, [])
            .filter(function (ad) { return (!ad.speedIsAllowed(rate) && ad.isInRange(currentPosition, currentPosition + rate * PlayerPlatformConstants_1.MILLISECONDS_PER_SECOND)); })[0];
    };
    AdManager.prototype.getMediaSegments = function () {
        if (this.ads.length && !this.adBreaks.length) {
            this.adBreaks = AdManager.sortIntoAdBreaks(this.ads);
        }
        if (!this.adBreaks.length) {
            return [];
        }
        this.logger.trace("creating media segments");
        return MediaSegment_1.MediaSegment.createSegments(this.adBreaks, this.sandbox.asset, this.sandbox.getDuration());
    };
    /**
     * EventListener to PLAY_STATE_CHANGED event
     * @param evt
     * @protected
     */
    AdManager.prototype.onPlayStateChanged = function (evt) {
        if (evt.playState === constants.STATUS_INITIALIZED) {
            this.updateResumePosition();
        }
    };
    /**
     * Updates asset resumePosition based on AdBreak durations and positions
     * in the timeline
     * @protected
     */
    AdManager.prototype.updateResumePosition = function () {
        if (this.asset.isContentPosition && !this.asset.isRetry) {
            this.logger.trace("Modifying resumePosition with ad offset.");
            this.logger.trace("Original position: ", this.asset.resumePosition);
            var adBreakDurations = 0;
            for (var _i = 0, _a = this.adBreaks; _i < _a.length; _i++) {
                var adBreak = _a[_i];
                var position = this.getResumePositionNoAds(adBreak.endTime);
                if (this.asset.resumePosition <= position) {
                    break;
                }
                else {
                    adBreakDurations += adBreak.duration;
                }
            }
            this.asset.resumePosition += adBreakDurations;
            this.logger.trace("New position: ", this.asset.resumePosition);
        }
    };
    AdManager.sortIntoAdBreaks = function (ads) {
        if (!ads.length) {
            return [];
        }
        return ads
            .sort(function (ad1, ad2) { return ad1.startTime - ad2.startTime; })
            .reduce(function (arr, ad2) {
            var adBreak = arr[arr.length - 1];
            if (!adBreak.addAd(ad2)) {
                adBreak = new VideoAdBreak_1.VideoAdBreak();
                adBreak.addAd(ad2);
                arr.push(adBreak);
            }
            return arr;
        }, [new VideoAdBreak_1.VideoAdBreak()]);
    };
    /**
     * Use ad event streams to track supported playback speeds and fire events when necessary
     */
    AdManager.prototype.setupSpeedsChangedEvent = function () {
        var _this = this;
        var _a = this.sandbox.streams, adStarts = _a.adStarts, adCompletes = _a.adCompletes, adExiteds = _a.adExiteds;
        this.playspeedChanged = rxjs_1.Observable.merge(adStarts, adCompletes, adExiteds) // start with ad events
            .takeUntil(this.sandbox.streams.getPlayState(constants.STATUS_IDLE)) // stop listening on idle
            .map(function () { return _this.getSupportedPlaybackSpeeds(); }) // get speed array
            .distinctUntilChanged(JSUtil_1.arrayEquals) // skip duplicates (not changed)
            .map(function (speeds) { return new events.PlaybackSpeedsChangedEvent(speeds); }) // convert to event
            .catch(function (err) {
            _this.logger.error("error firing speeds changed:", err);
            return rxjs_1.Observable.empty();
        })
            .subscribe(events.emit); // emit event
    };
    AdManager.prototype.getContentFactory = function () {
        return null;
    };
    AdManager.prototype.hasContentFactory = function () {
        return false;
    };
    return AdManager;
}());
exports.AdManager = AdManager;
var SeekRestrictedAdManager = /** @class */ (function (_super) {
    __extends(SeekRestrictedAdManager, _super);
    function SeekRestrictedAdManager() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Returns the position to use when seeking past an
     * ad break and then starting playback of an ad break.
     */
    SeekRestrictedAdManager.prototype.getClosestStartTime = function (adBreak) {
        return adBreak.startTime;
    };
    SeekRestrictedAdManager.prototype.getNewSeekPosition = function (start, position) {
        if (this.isAdPlaying() && !this.getCurrentAdBreak().watched && position > start) {
            return start;
        }
        var closest = this.getClosestAdBreak(position);
        if (closest && start > closest.endTime) {
            return position;
        }
        return closest && !closest.watched ? this.getClosestStartTime(closest) : position;
    };
    return SeekRestrictedAdManager;
}(AdManager));
exports.SeekRestrictedAdManager = SeekRestrictedAdManager;

},{"../MediaSegment":485,"../PPError":487,"../PlayerPlatformAPIEvents":489,"../PlayerPlatformConstants":490,"../ads/VideoAd":497,"../ads/VideoAdBreak":498,"../util/JSUtil":569,"../util/Logger":571,"rxjs":281,"rxjs/add/observable/empty":240,"rxjs/add/observable/merge":246,"rxjs/add/operator/catch":253,"rxjs/add/operator/distinctUntilChanged":257,"rxjs/add/operator/map":263,"rxjs/add/operator/takeUntil":276}],494:[function(require,module,exports){
"use strict";
/**
 * Created by chesli200 on 12/3/14.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var _a;
var Logger_1 = require("../util/Logger");
var Application_1 = require("../Application");
var AdManagerType;
(function (AdManagerType) {
    AdManagerType[AdManagerType["NONE"] = 0] = "NONE";
    AdManagerType[AdManagerType["AUDITUDE"] = 1] = "AUDITUDE";
    AdManagerType[AdManagerType["MANIFEST"] = 2] = "MANIFEST";
    AdManagerType[AdManagerType["C3"] = 3] = "C3";
    AdManagerType[AdManagerType["CBS"] = 4] = "CBS";
    AdManagerType[AdManagerType["HULU"] = 5] = "HULU";
    AdManagerType[AdManagerType["CLINEAR"] = 6] = "CLINEAR";
    AdManagerType[AdManagerType["TVELINEAR"] = 7] = "TVELINEAR";
    AdManagerType[AdManagerType["TVEVOD"] = 8] = "TVEVOD";
    AdManagerType[AdManagerType["CUSTOM"] = 9] = "CUSTOM";
})(AdManagerType = exports.AdManagerType || (exports.AdManagerType = {}));
exports.AdManagerKeys = {
    NONE: "none",
    AUDITUDE: "auditude",
    MANIFEST: "manifest",
    C3: "c3",
    CBS: "cbs",
    HULU: "hulu",
    TVELINEAR: "tvelinear",
    TVEVOD: "tvevod",
    CLINEAR: "clinear",
    CUSTOM: "custom",
};
exports.AdManagerTypeMap = {
    NONE: AdManagerType.NONE,
    AUDITUDE: AdManagerType.AUDITUDE,
    MANIFEST: AdManagerType.MANIFEST,
    C3: AdManagerType.C3,
    CBS: AdManagerType.CBS,
    HULU: AdManagerType.HULU,
    CLINEAR: AdManagerType.CLINEAR,
    CUSTOM: AdManagerType.CUSTOM,
    TVELINEAR: AdManagerType.TVELINEAR,
    TVEVOD: AdManagerType.TVEVOD
};
/**
 * Handles starting and stopping ad managers.
 *
 * @constructor
 */
function AdManagerFactory() {
    var logger = new Logger_1.Logger("AdManagerFactory");
    var currentAdManager;
    var sandbox;
    function init(box) {
        sandbox = box;
        sandbox.subscribe("ads:configureAds", configureAds);
        return this;
    }
    function destroy(box) {
        if (box) {
            box.remove("ads:configureAds", configureAds);
        }
        if (currentAdManager) {
            Application_1.stopModule(getModuleName(currentAdManager));
            currentAdManager = null;
            sandbox.publish("api:adManagerSelected", null);
        }
    }
    function configureAds(mgrType, cfg) {
        if (mgrType === undefined) {
            logger.error("Unable to configure ads: Ad manager type not defined");
            return;
        }
        var manager = exports.AdManagerTypeMap[mgrType.toUpperCase()];
        if (currentAdManager === manager) {
            if (sandbox.adManager) {
                sandbox.adManager.update(cfg);
            }
            return;
        }
        if (currentAdManager) {
            Application_1.stopModule(getModuleName(currentAdManager));
        }
        if (manager === AdManagerType.NONE) {
            currentAdManager = null;
            sandbox.publish("api:adManagerSelected", null);
            return;
        }
        if (manager === undefined) {
            logger.error("Unable to configure ads: Invalid ad manager type = " + mgrType);
            return;
        }
        currentAdManager = manager;
        var moduleName = getModuleName(manager);
        var mgr = Application_1.startModule(moduleName, cfg);
        sandbox.publish("api:adManagerSelected", mgr);
    }
    return {
        init: init,
        destroy: destroy
    };
}
exports.AdManagerFactory = AdManagerFactory;
var Modules = (_a = {},
    _a[AdManagerType.MANIFEST] = "ManifestManipulatorAdManager",
    _a[AdManagerType.AUDITUDE] = "AuditudeAdManager",
    _a[AdManagerType.C3] = "C3AdManager",
    _a[AdManagerType.CBS] = "CBSAdManager",
    _a[AdManagerType.HULU] = "HuluAdManager",
    _a[AdManagerType.CLINEAR] = "CLinearAdManager",
    _a[AdManagerType.CUSTOM] = "CustomAdManager",
    _a[AdManagerType.TVELINEAR] = "TVELinearAdManager",
    _a[AdManagerType.TVEVOD] = "TVEVODAdManager",
    _a);
function getModuleName(mgrType) {
    return Modules[mgrType];
}
Application_1.registerModule("AdManagerFactory", AdManagerFactory, { autostart: true });

},{"../Application":483,"../util/Logger":571}],495:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
require("../tracking/AdTracker");
require("../psn/PSNDispatcher");
var Logger_1 = require("../../util/Logger");
var Application_1 = require("../../Application");
var ContentOptions_1 = require("../../assets/ContentOptions");
var AdManager_1 = require("../AdManager");
var events = require("../../PlayerPlatformAPIEvents");
var TrickModeRestriction_1 = require("../TrickModeRestriction");
var constants = require("../../PlayerPlatformConstants");
var PPError_1 = require("../../PPError");
var HlsTagFactory_1 = require("../../util/hls/HlsTagFactory");
var rxjs_1 = require("rxjs");
require("rxjs/add/operator/filter");
require("rxjs/add/observable/timer");
/**
 * ManifestManipulatorAdManager
 * @constructor
 */
var ManifestManipulatorAdManager = /** @class */ (function (_super) {
    __extends(ManifestManipulatorAdManager, _super);
    function ManifestManipulatorAdManager() {
        var _this = _super.call(this) || this;
        _this._restrictions = [];
        _this.logger = new Logger_1.Logger("ManifestManipulatorAdManager");
        _this.type = "manifest";
        _this.subscribedTags = ["#EXT-X-CUE", "#EXT-X-TRICKMODE-RESTRICTION"];
        return _this;
    }
    ManifestManipulatorAdManager.prototype.init = function (sandbox, cfg) {
        var _this = this;
        _super.prototype.init.call(this, sandbox, cfg, true);
        events.addEventListener(events.AD_BREAK_START, this.onAdBreakStarted, { priority: constants.PRIORITY_HIGH }, this);
        var tags = sandbox.streams.tags.takeUntil(sandbox.destroyed);
        tags.filter(function (tag) { return tag.name === HlsTagFactory_1.TAG_CUE; })
            .subscribe(function (tag) {
            _this.addAd(tag.id, tag.time, tag.duration);
        });
        tags.filter(function (tag) { return tag.name === HlsTagFactory_1.TAG_TRICKMODE_RESTRICTION; })
            .subscribe(function (tag) { return _this.addRestriction(tag.id, tag.mode, tag.scale, tag.limit); });
        this._startTimeoutStream();
        return this;
    };
    /**
     * destroys admanager object and removes all event listeners
     * @param sandbox
     */
    ManifestManipulatorAdManager.prototype.destroy = function (sandbox) {
        _super.prototype.destroy.call(this, sandbox);
        events.removeEventListener(events.AD_BREAK_START, this.onAdBreakStarted);
    };
    /**
     * add an entry to the list of trick mode restrictions
     * @method addRestriction
     * @param {string} id        - identifier of ad to which this restriction applies
     * @param {string} mode      - trick play mode that restriction applies to ("fastForward", "rewind", or "pause")
     * @param {string} scale     - trick play speed that restriction applies to (-1 = all)
     * @param {string} limit     - number of times ad must be viewed before restriction is relaxed (-1 = always)
     */
    ManifestManipulatorAdManager.prototype.addRestriction = function (id, mode, scale, limit) {
        if (scale === void 0) { scale = "-1"; }
        if (limit === void 0) { limit = "0"; }
        this.logger.trace("addRestriction: id=" + id + " mode=" + mode + " scale=" + scale + " limit=" + limit);
        if (!mode) {
            this.logger.warn("No mode provided in trickmode restriction, ignoring");
            return;
        }
        var numScale = scale === TrickModeRestriction_1.default.SCALE_ALL ? -1 : parseInt(scale);
        var numLimit = limit === TrickModeRestriction_1.default.LIMIT_ALWAYS ? -1 : parseInt(limit);
        this._restrictions.push(new TrickModeRestriction_1.default(id, mode, numScale, numLimit));
    };
    /**
     * Handler for AdbreakStart event
     * @param {events.AdBreakStartEvent} event - videoAdBreak data
     */
    ManifestManipulatorAdManager.prototype.onAdBreakStarted = function (event) {
        if (this.sandbox.getCurrentPlaybackSpeed() > 1 && !event.videoAdBreak.speedIsAllowed(this.sandbox.getCurrentPlaybackSpeed())) {
            var channel = arguments[arguments.length - 1];
            this.logger.trace("Stopped AdBreakStart event propagation since playback speed is >1 and it is a ffd disabled AdBreak");
            channel.stopPropagation();
            this.sandbox.publish("api:setPosition", event.videoAdBreak.startTime);
        }
    };
    ManifestManipulatorAdManager.prototype.onAdComplete = function (event) {
        if (event.rate === 1) {
            event.videoAd.incrementSeenCount();
        }
    };
    ManifestManipulatorAdManager.prototype.getNewSeekPosition = function (start, target) {
        var current = this.getCurrentAdBreak();
        if (current && !current.seekIsAllowed(start, target)) {
            return current.getSeekLimit(start, target);
        }
        var closest = this.getClosestAdBreak(target);
        if (closest && closest.startTime > start && !closest.seekIsAllowed(start, target)) {
            return closest.getSeekLimit(start, target);
        }
        return target;
    };
    ManifestManipulatorAdManager.prototype.attachRestrictions = function () {
        var _this = this;
        this.ads.forEach(function (ad) {
            ad.restrictions = _this._restrictions.filter((function (restriction) { return restriction.id === ad.id; }));
        });
    };
    /**
     * EventListener to PLAY_STATE_CHANGED event
     * @param evt
     * @protected
     */
    ManifestManipulatorAdManager.prototype.onPlayStateChanged = function (evt) {
        if (evt.playState === constants.STATUS_INITIALIZED) {
            this.attachRestrictions();
            this.adBreaks = AdManager_1.AdManager.sortIntoAdBreaks(this.ads);
            this.updateResumePosition();
        }
    };
    ManifestManipulatorAdManager.prototype._startTimeoutStream = function () {
        var _this = this;
        var states = this.sandbox.streams.playStates.takeUntil(this.sandbox.destroyed);
        var initializings = states.filter(function (evt) { return evt.playState === constants.STATUS_INITIALIZING; });
        var notInitializings = states.filter(function (evt) { return evt.playState !== constants.STATUS_INITIALIZING; });
        initializings
            .filter(function () { return ContentOptions_1.MM_RE.test(_this.sandbox.asset.url); })
            .flatMap(function () { return rxjs_1.Observable.timer(_this.sandbox.config.manifestManipulatorTimeout)
            .takeUntil(notInitializings); })
            .takeUntil(this.sandbox.destroyed)
            .subscribe(function () { return events.emit(new events.MediaFailedEvent(new PPError_1.PPError(7555, 504, "VEX timeout"))); });
    };
    ManifestManipulatorAdManager.prototype.reset = function () {
        this._restrictions = [];
        _super.prototype.reset.call(this);
    };
    return ManifestManipulatorAdManager;
}(AdManager_1.AdManager));
exports.ManifestManipulatorAdManager = ManifestManipulatorAdManager;
Application_1.registerPlugin("ManifestManipulatorAdManager", ManifestManipulatorAdManager, {
    children: ["PSNDispatcher", "AdTracker"]
});

},{"../../Application":483,"../../PPError":487,"../../PlayerPlatformAPIEvents":489,"../../PlayerPlatformConstants":490,"../../assets/ContentOptions":538,"../../util/Logger":571,"../../util/hls/HlsTagFactory":579,"../AdManager":493,"../TrickModeRestriction":496,"../psn/PSNDispatcher":508,"../tracking/AdTracker":526,"rxjs":281,"rxjs/add/observable/timer":250,"rxjs/add/operator/filter":260}],496:[function(require,module,exports){
"use strict";
/**
 * Created by chesli200 on 12/1/15.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var TrickModeRestriction = /** @class */ (function () {
    function TrickModeRestriction(id, mode, scale, limit) {
        this.id = id;
        this.mode = mode;
        this.scale = scale;
        this.limit = limit;
    }
    TrickModeRestriction.MODE_FFWD = "fastForward";
    TrickModeRestriction.MODE_PAUSE = "pause";
    TrickModeRestriction.MODE_REW = "rewind";
    TrickModeRestriction.SCALE_ALL = "All";
    TrickModeRestriction.LIMIT_ALWAYS = "Always";
    return TrickModeRestriction;
}());
exports.default = TrickModeRestriction;
var RestrictionLimits = /** @class */ (function () {
    function RestrictionLimits(ff, rew, pause) {
        if (ff === void 0) { ff = 0; }
        if (rew === void 0) { rew = 0; }
        if (pause === void 0) { pause = 0; }
        this.fastForward = ff;
        this.rewind = rew;
        this.pause = pause;
    }
    return RestrictionLimits;
}());
exports.RestrictionLimits = RestrictionLimits;

},{}],497:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Logger_1 = require("../util/Logger");
var TrickModeRestriction_1 = require("./TrickModeRestriction");
var VideoAd = /** @class */ (function () {
    function VideoAd(id, startTime, duration, options) {
        if (options === void 0) { options = {}; }
        this.seenCount = 0;
        this.watched = false;
        /**
         * Represents if this is a VPAID framework based
         * ad.
         */
        this.vpaid = false;
        this.restrictions = [];
        options = options || {};
        this.id = id;
        this.startTime = startTime;
        this.duration = duration;
        this.clickThrough = options.clickThrough;
        this.companionAds = options.companionAds || [];
        this.vpaid = options.vpaid || false;
        this.cLinearAdAssetParams = options.cLinearAdAssetParams;
    }
    Object.defineProperty(VideoAd.prototype, "endTime", {
        get: function () {
            return this.startTime + this.duration;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VideoAd.prototype, "seekable", {
        /**
         * Indicates whether or not it's allowed to seek forward out of this ad.
         *
         * @returns {boolean}
         */
        get: function () {
            return !this.restrictions.filter(function (restriction) { return restriction.mode === TrickModeRestriction_1.default.MODE_FFWD; }).length;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VideoAd.prototype, "pausable", {
        /**
         * Indicates whether this ad can be paused.
         *
         * @returns {boolean}
         */
        get: function () {
            return !this.restrictions.filter(function (restriction) { return restriction.mode === TrickModeRestriction_1.default.MODE_PAUSE; }).length;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VideoAd.prototype, "restrictionLimits", {
        /**
         * Returns an object that specifies the limits for each restriction.
         *
         * @returns {RestrictionLimits}
         */
        get: function () {
            return this.restrictions.reduce(function (obj, res) {
                obj[res.mode] = res.limit;
                return obj;
            }, new TrickModeRestriction_1.RestrictionLimits());
        },
        enumerable: true,
        configurable: true
    });
    /**
     * indicate if the ad includes the designated time
     * note that the start time of the ad is considered to be included in the ad, but the end time is not
     * coversLocation
     * @param {number} location (msec)
     * @returns {boolean}
     */
    VideoAd.prototype.coversLocation = function (location) {
        var res = false;
        if (this.startTime !== -1) {
            if ((this.startTime <= location) && (location < this.endTime)) {
                res = true;
            }
        }
        return res;
    };
    /**
     * Determines if the ad start time falls in the given range.
     *
     * @param begin
     * @param end
     * @returns {boolean}
     */
    VideoAd.prototype.isInRange = function (begin, end) {
        return begin <= this.startTime && this.startTime <= end;
    };
    /**
     * increment the number of times this ad has been seen
     */
    VideoAd.prototype.incrementSeenCount = function () {
        VideoAd.logger.trace("incrementSeenCount: " + this.seenCount);
        ++this.seenCount;
    };
    /**
     * return the percentage complete; 0 if position is before start or duration is 0; 100 if position is afer end
     * @param {number} adBreakPosition - msec
     * @returns {number}        - percent
     */
    VideoAd.prototype.getPercentageComplete = function (adBreakPosition) {
        var res = 0;
        if ((adBreakPosition < this.startTime) || (this.duration === 0)) {
            res = 0;
        }
        else if (adBreakPosition > (this.startTime + this.duration)) {
            res = 100;
        }
        else {
            res = ((adBreakPosition - this.startTime) / this.duration) * 100;
        }
        return res;
    };
    /**
     * Determines whether or not the given `speed` is allowed during this ad.
     *
     * @param speed
     * @returns {boolean}
     */
    VideoAd.prototype.speedIsAllowed = function (speed) {
        if (speed === 1) {
            return true;
        }
        if (speed === 0) {
            return this.pausable;
        }
        var limits = this.restrictionLimits;
        var limit = speed < 0 ? limits.rewind : limits.fastForward;
        return limit >= 0 && this.seenCount >= limit;
    };
    /**
     * Determines whether or not a seek would be restricted over this ad.
     *
     * @param start
     * @param target
     * @returns {boolean}
     */
    VideoAd.prototype.seekIsAllowed = function (start, target) {
        var isForward = start < target;
        var limits = this.restrictionLimits;
        var limit = isForward ? limits.fastForward : limits.rewind;
        var allowed = limit >= 0 && this.seenCount >= limit;
        VideoAd.logger.trace("seekIsAllowed: " + allowed + " -- target=" + target + ", limit=" + limit + ", seenCount=" + this.seenCount);
        return allowed;
    };
    VideoAd.logger = new Logger_1.Logger("VideoAd");
    return VideoAd;
}());
exports.VideoAd = VideoAd;

},{"../util/Logger":571,"./TrickModeRestriction":496}],498:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Logger_1 = require("../util/Logger");
/**
 * VideoAdBreak
 * @constructor
 */
var VideoAdBreak = /** @class */ (function () {
    function VideoAdBreak(ads) {
        if (ads === void 0) { ads = []; }
        this.ads = [];
        ads.forEach(this.addAd.bind(this));
    }
    Object.defineProperty(VideoAdBreak.prototype, "startTime", {
        get: function () {
            return this.ads[0] ? this.ads[0].startTime : 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VideoAdBreak.prototype, "duration", {
        get: function () {
            return this.ads.reduce(function (l, r) { return l + r.duration; }, 0);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VideoAdBreak.prototype, "endTime", {
        get: function () {
            return this.startTime + this.duration;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VideoAdBreak.prototype, "watched", {
        get: function () {
            for (var _i = 0, _a = this.ads; _i < _a.length; _i++) {
                var ad = _a[_i];
                if (!ad.watched) {
                    return false;
                }
            }
            return true;
        },
        set: function (watched) {
            for (var _i = 0, _a = this.ads; _i < _a.length; _i++) {
                var ad = _a[_i];
                if (!watched) {
                    ad.seenCount = 0;
                    ad.watched = false;
                }
                else if (watched && !ad.watched) {
                    ad.seenCount = 1;
                    ad.watched = true;
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VideoAdBreak.prototype, "adCount", {
        get: function () {
            return this.ads.length;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * add a VideoAd to this ad break
     * @param {object} ad               - VideoAd object to add to this break
     * @returns {boolean}               - true if ad was added to this break; false otherwise
     */
    VideoAdBreak.prototype.addAd = function (ad) {
        VideoAdBreak.logger.trace("addAd");
        if (!this.ads.length || ad.startTime === this.endTime || this.startTime === ad.endTime) {
            this.ads.push(ad);
            this.ads = this.ads.sort(function (ad1, ad2) { return ad1.startTime - ad2.startTime; });
            return true;
        }
        return false;
    };
    /**
     * @param {object} ad to look for
     * @returns {boolean}
     */
    VideoAdBreak.prototype.containsAd = function (ad) {
        var res = false;
        VideoAdBreak.logger.trace("containsAd");
        for (var i = 0; i < this.ads.length; ++i) {
            if (this.ads[i] === ad) {
                res = true;
                VideoAdBreak.logger.trace("containsAd: returning true!");
                break;
            }
        }
        return res;
    };
    /**
     * indicate if the ad break includes the specified time
     * note that the start time of the break is considered to be included in the break, but the end time is not
     * @param {number} location (msec)
     * @returns {boolean}
     */
    VideoAdBreak.prototype.coversLocation = function (location) {
        var res = false;
        if (this.startTime !== -1) {
            if ((this.startTime <= location) && (location < this.endTime)) {
                res = true;
            }
        }
        return res;
    };
    /**
     * Determines if the ad start time falls in the given range.
     *
     * @param begin
     * @param end
     * @returns {boolean}
     */
    VideoAdBreak.prototype.isInRange = function (begin, end) {
        return begin <= this.startTime && this.startTime <= end;
    };
    /**
     * return the ad in this break that includes the designated time, or null if not found
     * note that the start time of the ad is considered to be included in the ad, but the end time is not
     * @param {number} time - stream time in milliseconds
     * @returns {object}
     */
    VideoAdBreak.prototype.getAdByTime = function (time) {
        var res;
        var i;
        VideoAdBreak.logger.trace("getAdByTime: " + time);
        for (i = 0; i < this.ads.length; ++i) {
            if (this.ads[i].coversLocation(time)) {
                res = this.ads[i];
                break;
            }
        }
        return res;
    };
    /**
     * return the ad in this break that matches designated id, or null if not found
     * @param {string} id - identifier being sought
     * @returns {object}
     */
    VideoAdBreak.prototype.getAdById = function (id) {
        var res;
        var i;
        VideoAdBreak.logger.trace("getAdById: " + id);
        for (i = 0; i < this.ads.length; ++i) {
            if (this.ads[i].id === id) {
                res = this.ads[i];
                break;
            }
        }
        return res;
    };
    /**
     * This checks all ads to see if `speed` is allowed. If `speed` is not allowed for
     * one ad in this break then the entire break is not allowed.
     *
     * @param speed
     * @returns {boolean}
     */
    VideoAdBreak.prototype.speedIsAllowed = function (speed) {
        for (var _i = 0, _a = this.ads; _i < _a.length; _i++) {
            var ad = _a[_i];
            if (!ad.speedIsAllowed(speed)) {
                VideoAdBreak.logger.trace("speedIsAllowed: false -- speed=" + speed);
                return false;
            }
        }
        VideoAdBreak.logger.trace("speedIsAllowed: true -- speed=" + speed);
        return true;
    };
    /**
     * this checks all ads to see if `target` can be seeked to. If `target` is not allowed for
     * one ad in this break then the entire break is not allowed.
     *
     * @param start
     * @param target
     * @returns {boolean}
     */
    VideoAdBreak.prototype.seekIsAllowed = function (start, target) {
        for (var _i = 0, _a = this.ads; _i < _a.length; _i++) {
            var ad = _a[_i];
            if (!ad.seekIsAllowed(start, target)) {
                VideoAdBreak.logger.trace("seekIsAllowed: false -- target=" + target);
                return false;
            }
        }
        VideoAdBreak.logger.trace("seekIsAllowed: true -- target=" + target);
        return true;
    };
    /**
     * Given a `target` position, check ads to see if it's allowed. If so return `target`, otherwise
     * return `start` if this break is currently in progress or return this break's `startTime`.
     *
     * @param start
     * @param target
     * @returns {number}
     */
    VideoAdBreak.prototype.getSeekLimit = function (start, target) {
        var allowed = this.seekIsAllowed(start, target);
        if (allowed) {
            return target;
        }
        else if (this.coversLocation(start)) {
            return start;
        }
        else {
            return this.startTime;
        }
    };
    VideoAdBreak.logger = new Logger_1.Logger("VideoAdBreak");
    return VideoAdBreak;
}());
exports.VideoAdBreak = VideoAdBreak;

},{"../util/Logger":571}],499:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var AdobeContentFactory_1 = require("../psdk/AdobeContentFactory");
var CustomAdOpportunityGenerator_1 = require("./CustomAdOpportunityGenerator");
var CustomAdResolver_1 = require("./CustomAdResolver");
var CustomAdContentFactory = /** @class */ (function (_super) {
    __extends(CustomAdContentFactory, _super);
    function CustomAdContentFactory(_sandbox, cfg) {
        var _this = _super.call(this, _sandbox) || this;
        _this.cfg = cfg;
        return _this;
    }
    CustomAdContentFactory.prototype.makeOpportunityInstance = function () {
        return new CustomAdOpportunityGenerator_1.CustomAdOpportunityGenerator(this, this.cfg, this._sandbox);
    };
    CustomAdContentFactory.prototype.makeAdResolver = function () {
        return new CustomAdResolver_1.CustomAdResolver(this._sandbox, this.cfg);
    };
    return CustomAdContentFactory;
}(AdobeContentFactory_1.AdobeContentFactory));
exports.CustomAdContentFactory = CustomAdContentFactory;

},{"../psdk/AdobeContentFactory":504,"./CustomAdOpportunityGenerator":501,"./CustomAdResolver":502}],500:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
require("../psn/PSNDispatcher");
require("../../engines/flash/FlashEventToEventMapper");
var AdManager_1 = require("../AdManager");
var Application_1 = require("../../Application");
var CustomAdContentFactory_1 = require("./CustomAdContentFactory");
var CustomAdManager = /** @class */ (function (_super) {
    __extends(CustomAdManager, _super);
    function CustomAdManager() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CustomAdManager.prototype.init = function (sandbox, cfg) {
        _super.prototype.init.call(this, sandbox, cfg, false);
        this.cfg = cfg;
        sandbox.subscribe("ads:resolve", this._onResolve, {}, this);
        this.type = "custom";
        this.subscribedTags = this.cfg.tags;
        return this;
    };
    CustomAdManager.prototype.destroy = function (sandbox) {
        _super.prototype.destroy.call(this, sandbox);
        sandbox.remove("ads:resolve", this._onResolve);
    };
    CustomAdManager.prototype.updateResumePosition = function () {
    };
    CustomAdManager.prototype.hasContentFactory = function () {
        return true;
    };
    CustomAdManager.prototype.getContentFactory = function () {
        return new CustomAdContentFactory_1.CustomAdContentFactory(this.sandbox, this.cfg).makeContentFactory();
    };
    CustomAdManager.prototype.getMetadata = function () {
        return {
            adType: this.type,
            subscribedTags: this.subscribedTags
        };
    };
    CustomAdManager.prototype._onPlacementResolve = function (opportunityId, placement) {
        this.sandbox.publish("ads:timelineResolved", opportunityId, [placement]);
    };
    /**
     * Called by the FLASH code via the sandbox mediator
     * to resolve an opportunity.
     */
    CustomAdManager.prototype._onResolve = function (opportunity) {
        var _this = this;
        var tag = {
            tagName: opportunity.customParameters.name,
            tagParams: opportunity.customParameters.content
        };
        this.cfg.resolve(tag)
            .then(function (adBreak) {
            _this._onPlacementResolve(opportunity.id, adBreak);
        });
    };
    return CustomAdManager;
}(AdManager_1.AdManager));
exports.CustomAdManager = CustomAdManager;
Application_1.registerPlugin("CustomAdManager", CustomAdManager, {
    children: ["FlashEventToEventMapper"]
});

},{"../../Application":483,"../../engines/flash/FlashEventToEventMapper":550,"../AdManager":493,"../psn/PSNDispatcher":508,"./CustomAdContentFactory":499}],501:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var AdobeOpportunityGenerator_1 = require("../psdk/AdobeOpportunityGenerator");
var Logger_1 = require("../../util/Logger");
var CustomAdOpportunityGenerator = /** @class */ (function (_super) {
    __extends(CustomAdOpportunityGenerator, _super);
    function CustomAdOpportunityGenerator(_contentFactory, cfg, _sandbox) {
        var _this = _super.call(this, _contentFactory, _sandbox) || this;
        _this.cfg = cfg;
        return _this;
    }
    CustomAdOpportunityGenerator.prototype.canResolve = function (timedMetadata) {
        return this.cfg.tags.indexOf(timedMetadata.name) !== -1 && !timedMetadata.metadata.hasOwnProperty("ELAPSED");
    };
    CustomAdOpportunityGenerator.prototype.getTagKey = function (timedMetadata) {
        return timedMetadata.id;
    };
    CustomAdOpportunityGenerator.prototype.getCUE = function (timedMetadata) {
        return timedMetadata.metadata.CUE + timedMetadata.id;
    };
    CustomAdOpportunityGenerator._logger = new Logger_1.Logger("CustomAdOpportunityGenerator");
    return CustomAdOpportunityGenerator;
}(AdobeOpportunityGenerator_1.AdobeOpportunityGenerator));
exports.CustomAdOpportunityGenerator = CustomAdOpportunityGenerator;

},{"../../util/Logger":571,"../psdk/AdobeOpportunityGenerator":507}],502:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var AdobeContentResolver_1 = require("../psdk/AdobeContentResolver");
var Logger_1 = require("../../util/Logger");
var CustomAdResolver = /** @class */ (function (_super) {
    __extends(CustomAdResolver, _super);
    function CustomAdResolver(_sandbox, cfg) {
        var _this = _super.call(this, _sandbox) || this;
        _this.cfg = cfg;
        return _this;
    }
    CustomAdResolver.prototype.resolveOpportunity = function (opportunity) {
        var _this = this;
        var tag = {
            tagName: opportunity.customParameters.name,
            tagParams: opportunity.customParameters.content
        };
        this.cfg.resolve(tag)
            .then(function (adBreak) {
            _this.onTimelineResolved(opportunity.id, [adBreak]);
        });
    };
    CustomAdResolver.prototype.resolveHandler = function (opportunity) {
        try {
            _super.prototype.resolveHandler.call(this, opportunity);
            this.resolveOpportunity(opportunity);
        }
        catch (err) {
            CustomAdResolver._logger.error("Couldn't resolve", err);
        }
    };
    CustomAdResolver._logger = new Logger_1.Logger("CustomAdResolver");
    return CustomAdResolver;
}(AdobeContentResolver_1.AdobeContentResolver));
exports.CustomAdResolver = CustomAdResolver;

},{"../../util/Logger":571,"../psdk/AdobeContentResolver":505}],503:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var AdobeRuntimeWrapper_1 = require("../../engines/psdk/AdobeRuntimeWrapper");
var AdobeAdPolicySelector = /** @class */ (function () {
    function AdobeAdPolicySelector() {
    }
    AdobeAdPolicySelector.prototype._selectPolicyForAdBreak = function (_adPolicyInfo) {
        return AdobeRuntimeWrapper_1.AdobeRuntimeWrapper.AD_BREAK_POLICY_PLAY();
    };
    AdobeAdPolicySelector.prototype._selectAdBreaksToPlay = function (adPolicyInfo) {
        return adPolicyInfo.adBreakTimelineItems.filter(function (adBreakTimelineItem) {
            var preroll = AdobeRuntimeWrapper_1.AdobeRuntimeWrapper.PLACEMENT_PREROLL();
            return adBreakTimelineItem.placementType === preroll && !adBreakTimelineItem.watched;
        });
    };
    AdobeAdPolicySelector.prototype._selectPolicyForSeekIntoAd = function (_adPolicyInfo) {
        return AdobeRuntimeWrapper_1.AdobeRuntimeWrapper.AD_POLICY_PLAY_FROM_AD_BREAK_BEGIN();
    };
    AdobeAdPolicySelector.prototype._selectWatchedPolicyForAdBreak = function (_adPolicyInfo) {
        return AdobeRuntimeWrapper_1.AdobeRuntimeWrapper.AD_BREAK_WATCHED_ON_END();
    };
    AdobeAdPolicySelector.prototype.makeAdPolicySelector = function () {
        var adPolicySelector = new AdobePSDK.AdPolicySelector();
        adPolicySelector.selectPolicyForAdBreakCallbackFunc = this._selectPolicyForAdBreak.bind(this);
        adPolicySelector.selectAdBreaksToPlayCallbackFunc = this._selectAdBreaksToPlay.bind(this);
        adPolicySelector.selectPolicyForSeekIntoAdCallbackFunc = this._selectPolicyForSeekIntoAd.bind(this);
        adPolicySelector.selectWatchedPolicyForAdBreakCallbackFunc = this._selectWatchedPolicyForAdBreak.bind(this);
        return adPolicySelector;
    };
    return AdobeAdPolicySelector;
}());
exports.AdobeAdPolicySelector = AdobeAdPolicySelector;

},{"../../engines/psdk/AdobeRuntimeWrapper":554}],504:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var AdobeContentResolver_1 = require("./AdobeContentResolver");
var AdobeOpportunityGenerator_1 = require("./AdobeOpportunityGenerator");
var AdobeAdPolicySelector_1 = require("./AdobeAdPolicySelector");
var AdobeContentFactory = /** @class */ (function () {
    function AdobeContentFactory(_sandbox, _requestResolver) {
        this._sandbox = _sandbox;
        this._requestResolver = _requestResolver;
        this._adPolicySelector = null;
        this._resolvers = null;
        this._generators = null;
        this.hasPreRollAd = false;
    }
    AdobeContentFactory.prototype._retrieveAdPolicySelector = function (_item) {
        if (this._adPolicySelector === null) {
            this._adPolicySelector = (new AdobeAdPolicySelector_1.AdobeAdPolicySelector()).makeAdPolicySelector();
        }
        return this._adPolicySelector;
    };
    AdobeContentFactory.prototype._retrieveResolvers = function (_item) {
        if (this._resolvers === null) {
            var resolver = this.makeAdResolver();
            if (this._requestResolver) {
                resolver.requestResolver = this._requestResolver;
            }
            this._resolvers = [
                resolver.makeContentResolver()
            ];
        }
        return this._resolvers;
    };
    AdobeContentFactory.prototype._retrieveOpportunityGenerators = function (_item) {
        if (this._generators === null) {
            this._generators = [
                this.makeOpportunityInstance().makeOpportunityGenerator()
            ];
        }
        return this._generators;
    };
    AdobeContentFactory.prototype.makeOpportunityInstance = function () {
        return new AdobeOpportunityGenerator_1.AdobeOpportunityGenerator(this, this._sandbox);
    };
    AdobeContentFactory.prototype.makeAdResolver = function () {
        return new AdobeContentResolver_1.AdobeContentResolver(this._sandbox);
    };
    AdobeContentFactory.prototype.makeContentFactory = function () {
        var contentFactory = new AdobePSDK.ContentFactory();
        contentFactory.retrieveAdPolicySelectorCallbackFunc = this._retrieveAdPolicySelector.bind(this);
        contentFactory.retrieveResolversCallbackFunc = this._retrieveResolvers.bind(this);
        contentFactory.retrieveOpportunityGeneratorsCallbackFunc = this._retrieveOpportunityGenerators.bind(this);
        return contentFactory;
    };
    return AdobeContentFactory;
}());
exports.AdobeContentFactory = AdobeContentFactory;

},{"./AdobeAdPolicySelector":503,"./AdobeContentResolver":505,"./AdobeOpportunityGenerator":507}],505:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var AdobeContentTracker_1 = require("./AdobeContentTracker");
var Logger_1 = require("../../util/Logger");
var AdobeRuntimeWrapper_1 = require("../../engines/psdk/AdobeRuntimeWrapper");
var RESOLVE_TIMEOUT = 10000;
var AdobeContentResolver = /** @class */ (function () {
    function AdobeContentResolver(_sandbox) {
        this._sandbox = _sandbox;
        this._resolvingOpportunities = {};
        this._resolvingTimeouts = {};
    }
    AdobeContentResolver.prototype.configure = function (_item, client) {
        this._client = client;
        this._sandbox.subscribe("ads:timelineResolved", this.onTimelineResolved, {}, this);
    };
    AdobeContentResolver.prototype.cleanup = function () {
        this._client = null;
        this._resolvingOpportunities = {};
        this._resolvingTimeouts = {};
        this._sandbox.remove("ads:timelineResolved", this.onTimelineResolved);
    };
    AdobeContentResolver.prototype.onTimelineResolved = function (opportunityId, adBreaks) {
        AdobeContentResolver._logger.info("onTimelineResolved", opportunityId, adBreaks);
        if (this._resolvingOpportunities[opportunityId]) {
            this._processOpportunity(this._resolvingOpportunities[opportunityId], adBreaks);
        }
        else {
            AdobeContentResolver._logger.info("Opportunity not found");
        }
    };
    AdobeContentResolver.prototype.canResolve = function (_opportunity) {
        return true;
    };
    AdobeContentResolver.prototype.completeOpportunity = function (opportunity) {
        if (this._client) {
            AdobeContentResolver._logger.info("notifyCompleted");
            this._client.notifyCompleted(opportunity);
        }
        else {
            AdobeContentResolver._logger.warn("Client has not been configured");
        }
        clearTimeout(this._resolvingTimeouts[opportunity.id]);
        delete this._resolvingOpportunities[opportunity.id];
        delete this._resolvingTimeouts[opportunity.id];
    };
    AdobeContentResolver.prototype._processOpportunity = function (opportunity, adBreaks) {
        AdobeContentResolver._logger.info("_processOpportunity", opportunity, adBreaks);
        if (this._client && adBreaks.length > 0) {
            AdobeContentResolver._logger.info("process");
            this._client.process(this._getTimelineOperations(opportunity, adBreaks));
        }
        else {
            AdobeContentResolver._logger.warn("Nothing to process");
        }
        this.completeOpportunity(opportunity);
    };
    AdobeContentResolver.prototype._getTimelineOperations = function (opportunity, adBreaks) {
        var timelineOperations = [];
        for (var _i = 0, adBreaks_1 = adBreaks; _i < adBreaks_1.length; _i++) {
            var adBreak = adBreaks_1[_i];
            timelineOperations.push(this.getAdBreakPlacement(opportunity, adBreak));
        }
        return timelineOperations;
    };
    AdobeContentResolver.prototype.getAdBreakPlacement = function (opportunity, adBreak) {
        var contentTracker = new AdobeContentTracker_1.AdobeContentTracker(opportunity, this._sandbox, adBreak);
        var psdkTracker = contentTracker.makeContentTracker();
        var placement = adBreak.type === "insert" ? this.createInsertionPlacement(opportunity.placement) : opportunity.placement;
        return new AdobePSDK.AdBreakPlacement(new AdobePSDK.AdBreak(this.getAds(adBreak, psdkTracker), psdkTracker, AdobePSDK.AdInsertionType.CLIENT_INSERTED), placement);
    };
    AdobeContentResolver.prototype.getAds = function (adBreak, tracker) {
        return adBreak.ads.map(function (ad) {
            var resource = new AdobePSDK.MediaResource();
            resource.url = ad.manifestUrl;
            resource.type = AdobeRuntimeWrapper_1.AdobeRuntimeWrapper.HLS();
            var adAsset = new AdobePSDK.AdAsset(ad.id, ad.duration, resource);
            return new AdobePSDK.Ad(ad.id, AdobeRuntimeWrapper_1.AdobeRuntimeWrapper.ADTYPE_LINEAR(), ad.duration, false, adAsset, [], tracker, AdobePSDK.AdInsertionType.CLIENT_INSERTED);
        });
    };
    /*
    Adobe placements are immutable and a new one needs to be returned in order to switch the placement mode
     */
    AdobeContentResolver.prototype.createInsertionPlacement = function (placement) {
        return new AdobePSDK.Placement(placement.type, placement.time, placement.duration, AdobeRuntimeWrapper_1.AdobeRuntimeWrapper.PLACEMENT_MODE_INSERT());
    };
    /**
     * Place holder, called by AdobePSDK
     */
    AdobeContentResolver.prototype.resolveHandler = function (opportunity) {
        var _this = this;
        AdobeContentResolver._logger.info("WE ARE TRYING TO RESOLVE");
        try {
            AdobeContentResolver._logger.info("resolve", opportunity.id);
            this._resolvingTimeouts[opportunity.id] = setTimeout(function () {
                AdobeContentResolver._logger.warn("Timing our opportunity " + opportunity.id);
                _this.completeOpportunity(opportunity);
            }, RESOLVE_TIMEOUT);
            this._resolvingOpportunities[opportunity.id] = opportunity;
        }
        catch (e) {
            AdobeContentResolver._logger.info("WE COULD NOT RESOLVE");
        }
    };
    AdobeContentResolver.prototype.makeContentResolver = function () {
        var adResolver = new AdobePSDK.ContentResolver();
        adResolver.configureCallbackFunc = this.configure.bind(this);
        adResolver.canResolveCallbackFunc = this.canResolve.bind(this);
        adResolver.resolveCallbackFunc = this.resolveHandler.bind(this);
        adResolver.cleanupCallbackFunc = this.cleanup.bind(this);
        return adResolver;
    };
    AdobeContentResolver._logger = new Logger_1.Logger("AdobeContentResolver");
    return AdobeContentResolver;
}());
exports.AdobeContentResolver = AdobeContentResolver;

},{"../../engines/psdk/AdobeRuntimeWrapper":554,"../../util/Logger":571,"./AdobeContentTracker":506}],506:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var events = require("../../PlayerPlatformAPIEvents");
var Application_1 = require("../../Application");
var Logger_1 = require("../../util/Logger");
var VideoAd_1 = require("../../ads/VideoAd");
var VideoAdBreak_1 = require("../../ads/VideoAdBreak");
var PPError_1 = require("../../PPError");
/**
 * AdobeContentTracker creates instances AdobePSDK.ContentTracker
 * and attaches it's functions as the callbacks.
 * It's purpose is to dispatch/emit AdEvent* objects back to
 * PlayerPlatformAPIEvents.
 */
var AdobeContentTracker = /** @class */ (function () {
    function AdobeContentTracker(psdkOpportunity, _sandbox, adBreak) {
        this._sandbox = _sandbox;
        this._videoAds = [];
        this._adsById = {};
        this._opportunityStartTime = psdkOpportunity.placement.time;
        var startTime = this._opportunityStartTime;
        for (var _i = 0, _a = adBreak.ads; _i < _a.length; _i++) {
            var ad = _a[_i];
            var adAsset = {
                id: ad.id,
                url: ad.manifestUrl,
                duration: ad.duration
            };
            this._adsById[ad.id] = adAsset;
            this._videoAds.push(this._createVideoAd(adAsset, startTime));
            startTime += adAsset.duration;
        }
    }
    AdobeContentTracker.prototype._createVideoAd = function (ad, startTime) {
        var adDuration = ad.duration !== undefined ? ad.duration : 0;
        var adStartTime = startTime !== undefined ? startTime : 0;
        return new VideoAd_1.VideoAd(ad.id, adStartTime, adDuration);
    };
    AdobeContentTracker.prototype._getVideoAdById = function (adobeAd) {
        var videoAd = this._videoAds.filter(function (ad) { return ad.id === adobeAd.id; }).pop();
        if (videoAd === undefined) {
            AdobeContentTracker._logger.warn("Cannot find Video ad with ID =" + adobeAd.id + ". Generating new VideoAd.");
            videoAd = new VideoAd_1.VideoAd(adobeAd.id, 0, 0);
        }
        return videoAd;
    };
    AdobeContentTracker.prototype._getVideoAdBreak = function (adBreak) {
        var _this = this;
        var ads = adBreak.ads.map(this._getVideoAdById.bind(this))
            .filter(function (ad) { return _this._adsById.hasOwnProperty(ad.id); });
        if (ads.length !== adBreak.ads.length) {
            AdobeContentTracker._logger.warn("Ads did not map fully back from Adobe");
        }
        return new VideoAdBreak_1.VideoAdBreak(ads);
    };
    AdobeContentTracker.prototype._getStartAdEvent = function (ad) {
        var currentPosition = this._sandbox.getCurrentPosition();
        var videoAd = this._getVideoAdById(ad);
        return new events.AdStartEvent(videoAd, 0, this._sandbox.getCurrentPlaybackSpeed(), currentPosition - videoAd.startTime);
    };
    AdobeContentTracker.prototype._getStartAdBreakEvent = function (adBreak) {
        return new events.AdBreakStartEvent(this._getVideoAdBreak(adBreak));
    };
    AdobeContentTracker.prototype._getCompleteAdBreakEvent = function (adBreak) {
        return new events.AdBreakCompleteEvent(this._getVideoAdBreak(adBreak));
    };
    AdobeContentTracker.prototype._getCompleteAdEvent = function (ad) {
        var currentPosition = this._sandbox.getCurrentPosition();
        var videoAd = this._getVideoAdById(ad);
        videoAd.incrementSeenCount();
        videoAd.watched = true;
        return new events.AdCompleteEvent(videoAd, 100, this._sandbox.getCurrentPlaybackSpeed(), currentPosition - videoAd.startTime);
    };
    AdobeContentTracker.prototype._getProgressAdEvent = function (progress, ad) {
        var currentPosition = this._sandbox.getCurrentPosition();
        var videoAd = this._getVideoAdById(ad);
        return new events.AdProgressEvent(videoAd, progress, this._sandbox.getCurrentPlaybackSpeed(), currentPosition - videoAd.startTime);
    };
    AdobeContentTracker.prototype._onAdStart = function (ad) {
        var _this = this;
        Application_1.toObservable("api:stop", { priority: 1 })
            .takeUntil(events.toObservable(events.AD_COMPLETE))
            .subscribe(function () { return _this._onAdComplete(ad); });
        this._dispatchEvent(this._getStartAdEvent(ad));
    };
    AdobeContentTracker.prototype._onAdComplete = function (ad) {
        this._dispatchEvent(this._getCompleteAdEvent(ad));
    };
    AdobeContentTracker.prototype._onAdProgress = function (ad, progress) {
        this._dispatchEvent(this._getProgressAdEvent(progress, ad));
    };
    AdobeContentTracker.prototype._onAdClick = function (_) {
        // This stub must exist or AdobePSDK will crash the set top box
        // if an ad is clicked
    };
    AdobeContentTracker.prototype._onAdBreakStart = function (adBreak) {
        var _this = this;
        var currentPosition = this._sandbox.getCurrentPosition();
        events.toObservable(events.AD_COMPLETE)
            .takeUntil(events.toObservable(events.AD_BREAK_COMPLETE))
            .withLatestFrom(Application_1.toObservable("api:stop", { priority: 1 }), function (completeEvent, _stopEvent) { return completeEvent; })
            .subscribe(function () { return _this._onAdBreakComplete(adBreak); });
        if (currentPosition > this._opportunityStartTime) {
            // Occasionally the opportunity.placement.time is used as a
            // placeholder for ad inseration, it's not clear from the PSDK
            // when the actual Ad start time occurs. If the current position
            // is beyond the opportunity.placement.time we use currentTime
            // instead.
            // This is also linked to us possibly resovling the opportunity
            // twice in the update callback, and is probably also linked to the
            // issue where we make a request for the same signal mutliple times.
            // See VPLAY-470 & VPLAY-604
            var delta = (currentPosition - this._opportunityStartTime) / 1000;
            AdobeContentTracker._logger.warn("currentPosition: " + currentPosition + " > this._opportunityStartTime: " + this._opportunityStartTime + " delta: " + delta);
            this._opportunityStartTime = currentPosition;
        }
        this._dispatchEvent(this._getStartAdBreakEvent(adBreak));
    };
    AdobeContentTracker.prototype._onAdBreakComplete = function (adBreak) {
        this._dispatchEvent(this._getCompleteAdBreakEvent(adBreak));
    };
    AdobeContentTracker.prototype._dispatchEvent = function (event) {
        events.emit(event);
    };
    AdobeContentTracker.prototype._onAdError = function (ad) {
        var error = new PPError_1.PPError(7561, 0, "Loading of ad with id \"" + ad.id + "\" failed.");
        this._dispatchEvent(new events.AdErrorEvent(this._getVideoAdById(ad), error));
    };
    AdobeContentTracker.prototype.makeContentTracker = function () {
        var contentTracker = new AdobePSDK.ContentTracker();
        contentTracker.onAdStartCallbackFunc = this._onAdStart.bind(this);
        contentTracker.onAdCompleteCallbackFunc = this._onAdComplete.bind(this);
        contentTracker.onAdErrorCallbackFunc = this._onAdError.bind(this);
        contentTracker.onAdProgressCallbackFunc = this._onAdProgress.bind(this);
        contentTracker.onAdClickCallbackFunc = this._onAdClick.bind(this);
        contentTracker.onAdBreakStartCallbackFunc = this._onAdBreakStart.bind(this);
        contentTracker.onAdBreakCompleteCallbackFunc = this._onAdBreakComplete.bind(this);
        return contentTracker;
    };
    AdobeContentTracker._logger = new Logger_1.Logger("AdobeContentTracker");
    return AdobeContentTracker;
}());
exports.AdobeContentTracker = AdobeContentTracker;

},{"../../Application":483,"../../PPError":487,"../../PlayerPlatformAPIEvents":489,"../../ads/VideoAd":497,"../../ads/VideoAdBreak":498,"../../util/Logger":571}],507:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var AdobeRuntimeWrapper_1 = require("../../engines/psdk/AdobeRuntimeWrapper");
var Logger_1 = require("../../util/Logger");
/**
 * AdobeOpportunityGenerator creates instances AdobePSDK.OpportunityGenerator
 * and attaches it's functions as the callbacks.
 * It's purpose is only to report back the client it was configured with
 * when it detects an opportunity in the item's timed metadata. See the README
 * in this directory for additional details.
 */
var AdobeOpportunityGenerator = /** @class */ (function () {
    function AdobeOpportunityGenerator(_contentFactory, _sandbox) {
        this._contentFactory = _contentFactory;
        this._sandbox = _sandbox;
        this._client = null;
        this._item = null;
        this._resolvedTags = {};
        this._resolvedCUES = {};
        this._batchedOpportunities = [];
    }
    AdobeOpportunityGenerator.prototype._cleanup = function () {
        this._resolvedTags = {};
        this._resolvedCUES = {};
        this._client = null;
        this._item = null;
    };
    /**
     * Gets the type of ad placement to use for the provided timed metadata.
     * INSERT will insert the ad and adjust the timeline
     * REPLACE will play the ad over the existing timeline
     * @returns INSERT
     */
    AdobeOpportunityGenerator.prototype.getAdPlacementMode = function (_metadata) {
        return AdobeRuntimeWrapper_1.AdobeRuntimeWrapper.PLACEMENT_MODE_INSERT();
    };
    AdobeOpportunityGenerator.prototype._getOpportunity = function (metadata) {
        AdobeOpportunityGenerator._logger.info("_getOpportunity", metadata);
        var type = metadata.time === 0 ? AdobePSDK.PlacementType.PRE_ROLL : AdobePSDK.PlacementType.MID_ROLL;
        var id = "" + metadata.id;
        var duration = metadata.metadata.DURATION;
        var placement = new AdobePSDK.Placement(type, metadata.time, duration, AdobeRuntimeWrapper_1.AdobeRuntimeWrapper.PLACEMENT_MODE_REPLACE());
        var customParams = {
            name: metadata.name,
            content: metadata.content,
            id: metadata.metadata.ID,
            duration: metadata.metadata.DURATION
        };
        var opportunity = new AdobePSDK.Opportunity(id.toString(), placement, metadata.metadata, customParams);
        AdobeOpportunityGenerator.NEXT_ID++;
        return opportunity;
    };
    AdobeOpportunityGenerator.prototype.getTagKey = function (timedMetadata) {
        return timedMetadata.metadata.TIME;
    };
    AdobeOpportunityGenerator.prototype.getCUE = function (timedMetadata) {
        return timedMetadata.metadata.CUE;
    };
    AdobeOpportunityGenerator.prototype.canResolve = function (timedMetadata) {
        return timedMetadata.name === "#EXT-X-CUE";
    };
    AdobeOpportunityGenerator.prototype._haveResolved = function (timedMetadata) {
        return this._resolvedTags.hasOwnProperty(this.getTagKey(timedMetadata)) ||
            this._resolvedCUES.hasOwnProperty(this.getCUE(timedMetadata));
    };
    AdobeOpportunityGenerator.prototype._markResolved = function (timedMetadata) {
        this._resolvedTags[this.getTagKey(timedMetadata)] = true;
        this._resolvedCUES[this.getCUE(timedMetadata)] = true;
    };
    AdobeOpportunityGenerator.prototype._processUpdatedMetadata = function () {
        var timedMetadata = this._item.timedMetadata;
        if (!Array.isArray(timedMetadata) || timedMetadata.length === 0) {
            AdobeOpportunityGenerator._logger.info("No metadata to process");
            return;
        }
        for (var _i = 0, timedMetadata_1 = timedMetadata; _i < timedMetadata_1.length; _i++) {
            var tag = timedMetadata_1[_i];
            if (this.canResolve(tag) && !this._haveResolved(tag)) {
                this._batchedOpportunities.push(this._getOpportunity(tag));
                this._markResolved(tag);
            }
        }
    };
    AdobeOpportunityGenerator.prototype._resolveBatch = function () {
        for (var _i = 0, _a = this._batchedOpportunities; _i < _a.length; _i++) {
            var opportunity = _a[_i];
            AdobeOpportunityGenerator._logger.info("Calling resolve for " + opportunity.id);
            this._client.resolve(opportunity);
        }
        this._sandbox.publish("ads:opportunitiesSent", this._batchedOpportunities);
        this._batchedOpportunities = [];
    };
    /**
     * Called by AdobePSDK when an item is first loaded.
     * Gets the initial item and the client which can be used to resolve ads
     */
    AdobeOpportunityGenerator.prototype._configure = function (item, client) {
        this._client = client;
        this._item = item;
        // Used to prep PSDK for a server-mapped pre-roll ad
        if (this._contentFactory.hasPreRollAd) {
            var duration = item.live ? AdobeOpportunityGenerator.PREROLL_DURATION : 0;
            this._batchedOpportunities.push(new AdobePSDK.Opportunity(AdobeOpportunityGenerator.PRE_ROLLER_PLACEHOLDER_ID, new AdobePSDK.Placement(AdobeRuntimeWrapper_1.AdobeRuntimeWrapper.PLACEMENT_PREROLL(), 0, duration, AdobeRuntimeWrapper_1.AdobeRuntimeWrapper.PLACEMENT_MODE_REPLACE())));
        }
        this._processUpdatedMetadata();
        this._resolveBatch();
    };
    AdobeOpportunityGenerator.prototype._update = function (_playhead, _playbackRange) {
        this._processUpdatedMetadata();
        this._resolveBatch();
    };
    AdobeOpportunityGenerator.prototype.makeOpportunityGenerator = function () {
        var opportunityGenerator = new AdobePSDK.OpportunityGenerator();
        opportunityGenerator.configureCallbackFunc = this._configure.bind(this);
        opportunityGenerator.updateCallbackFunc = this._update.bind(this);
        opportunityGenerator.cleanupCallbackFunc = this._cleanup.bind(this);
        return opportunityGenerator;
    };
    AdobeOpportunityGenerator.PRE_ROLLER_PLACEHOLDER_ID = "psdkInitialOpportunity";
    /**
     * This is a magic number that's required for Adobe to
     * properly insert midrolls. Without a preroll duration,
     * midroll insertion/replace shows unexpected behavior.
     */
    AdobeOpportunityGenerator.PREROLL_DURATION = 30000;
    AdobeOpportunityGenerator.NEXT_ID = 0;
    AdobeOpportunityGenerator._logger = new Logger_1.Logger("AdobeOpportunityGenerator");
    return AdobeOpportunityGenerator;
}());
exports.AdobeOpportunityGenerator = AdobeOpportunityGenerator;

},{"../../engines/psdk/AdobeRuntimeWrapper":554,"../../util/Logger":571}],508:[function(require,module,exports){
"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var Logger_1 = require("../../util/Logger");
var SessionManager_1 = require("../../handlers/SessionManager");
var Application_1 = require("../../Application");
var PlacementStatusNotification_1 = require("./PlacementStatusNotification");
var PlayerPlatformConstants_1 = require("./../../PlayerPlatformConstants");
var rxjs_1 = require("rxjs");
require("rxjs/add/observable/dom/ajax");
require("rxjs/add/observable/from");
require("rxjs/add/observable/merge");
require("rxjs/add/observable/empty");
require("rxjs/add/operator/distinctUntilChanged");
require("rxjs/add/operator/pairwise");
require("rxjs/add/operator/take");
require("rxjs/add/operator/takeUntil");
require("rxjs/add/operator/concatAll");
require("rxjs/add/operator/merge");
require("rxjs/add/operator/do");
require("rxjs/add/operator/switchMap");
require("rxjs/add/operator/map");
require("rxjs/add/operator/skip");
require("rxjs/add/operator/share");
require("rxjs/add/operator/retry");
require("rxjs/add/operator/catch");
var quartileMap = { 25: "firstQuartile", 50: "midpoint", 75: "thirdQuartile" };
/**
 * PSNDispatcher
 * @constructor
 */
var PSNDispatcher = /** @class */ (function () {
    function PSNDispatcher() {
        this._logger = new Logger_1.Logger("PSNDispatcher");
    }
    PSNDispatcher.prototype.init = function (sandbox) {
        var _this = this;
        this._sandbox = sandbox;
        var config = sandbox.parent["cfg"];
        this._acrURL = config.acrURL || sandbox.config.placementStatusNotificationEndPoint;
        this._terminalAddress = config.terminalAddress;
        // setup request subject
        this._requests = new rxjs_1.Subject();
        // setup PSN xml stream
        this._sub = rxjs_1.Observable.merge.apply(rxjs_1.Observable, [this._stops(),
            this._startPlacements()].concat(this._viewerEvents(), [this._endPlacements(),
            this._quartiles(),
            this._endAlls()])).subscribe(function (psn) { return _this._send(psn); });
        // concat ajax requests and log results
        // requests use concatAll operator in order to send PSNs sequentially
        this._requests.concatAll().subscribe(function (response) {
            _this._logger.trace(response.status + " - commit success", response.request.body);
        }, function (err) {
            _this._logger.error("PSN xml stream failure", err.message);
        });
        return this;
    };
    /**
     * destroy
     * make sure all previous PSN's are removed and not resent.
     */
    PSNDispatcher.prototype.destroy = function () {
        if (this._sub) {
            this._sub.unsubscribe();
        }
        if (this._requests) {
            this._requests.complete();
        }
    };
    /**
     * Create a PSN with a given `AdEvent`. The event is optional
     * in the case of endAll where tracking info is not needed.
     *
     * @private
     * @param {AdEvent} [event]
     * @returns
     */
    PSNDispatcher.prototype._psn = function (event) {
        var psnParams = {
            sessionID: SessionManager_1.SessionManager.instance.playbackSessionId,
            terminalAddress: this._terminalAddress,
        };
        var videoAd = event && event.videoAd;
        if (videoAd) {
            psnParams = __assign({}, psnParams, { tracking: videoAd.cLinearAdAssetParams && videoAd.cLinearAdAssetParams.cLinearAdTracking || videoAd.id, assetRef: videoAd.cLinearAdAssetParams ? videoAd.cLinearAdAssetParams.cLinearAdAssetRef : undefined, messageRef: videoAd.cLinearAdAssetParams ? videoAd.cLinearAdAssetParams.cLinearAdMessageRef : undefined, identityAds: videoAd.cLinearAdAssetParams ? videoAd.cLinearAdAssetParams.cLinearIdentityAds : undefined });
        }
        return PlacementStatusNotification_1.PlacementStatusNotification(psnParams);
    };
    /**
     * Creates a PSN startPlacement observable that maps `AdStartEvent`s to startPlacements.
     *
     * @private
     * @returns {Observable<string>}
     */
    PSNDispatcher.prototype._startPlacements = function () {
        var _this = this;
        return this._sandbox.streams.adStarts
            .map(function (event) { return _this._psn(event).startPlacement(event.rate, event.position); });
    };
    /**
     * Creates a PSN endPlacement observable that maps both `AdCompleteEvent`s and
     * `AdExitedEvent`s to endPlacements
     *
     * @private
     * @returns {Observable<string>}
     */
    PSNDispatcher.prototype._endPlacements = function () {
        var _this = this;
        return this._sandbox.streams.adCompletes
            .merge(this._sandbox.streams.adExiteds)
            .map(function (event) { return _this._psn(event).endPlacement(event.rate, event.position); });
    };
    /**
     * Creates an observable for the three PSN quartile events:
     *
     * - `firstQuartile` (25%)
     * - `midpoint` (50%)
     * - `thirdQuartile` (75%)
     *
     * These events are only fired during normal playback speed and ignored
     * during trickplay.
     *
     * @private
     * @returns {Observable<string>}
     */
    PSNDispatcher.prototype._quartiles = function () {
        var _this = this;
        return this._sandbox.streams.adProgresses
            .filter(function (event) { return event.rate === 1; }) // don't send during trickplay
            .pairwise() // pair up new event with previous event
            .filter(function (_a) {
            var event1 = _a[0], event2 = _a[1];
            return event1.videoAd.id === event2.videoAd.id;
        }) // verify same ad
            .switchMap(function (_a) {
            var event1 = _a[0], event2 = _a[1];
            return rxjs_1.Observable.from(Object.keys(quartileMap).map(function (val) { return parseInt(val); }))
                .filter(function (num) { return num > event1.progress && num <= event2.progress; }) // did we pass a quartile?
                .map(function (num) { return _this._psn(event2)[quartileMap[num]](1, event2.videoAd.duration * (num / 100)); }); // get appropriate quartile psn
        });
    };
    /**
     * Crewates a PSN stop ViewerEvent observable. A stop ViewerEvent is created
     * when an `AdExitedEvent` is received when the player state is idle.
     *
     * @private
     * @returns {Observable<string>}
     */
    PSNDispatcher.prototype._stops = function () {
        var _this = this;
        return this._sandbox.streams.adExiteds
            .filter(function () { return _this._sandbox.getPlayerStatus() === PlayerPlatformConstants_1.STATUS_IDLE; })
            .map(function (event) { return _this._psn(event).stop(0, event.position); });
    };
    /**
     * Creates an observable for all PSN ViewerEvents except for stop
     * which is handled separately. ViewerEvents for pause, play, fastForward,
     * and rewind are created based on rate changes. The rate changes are tracked
     * by diffing progress events.
     *
     * @private
     * @returns {Observable<string>[]}
     */
    PSNDispatcher.prototype._viewerEvents = function () {
        var _this = this;
        // setup speed change observable that looks at progress events
        // this is switch-mapped to adStarts so rates aren't tracked across different ads
        var speedChanges = this._sandbox.streams.adStarts
            .switchMap(function () { return _this._sandbox.streams.adProgresses
            .distinctUntilChanged(function (prev, next) { return prev.rate === next.rate; })
            .skip(1); } // ignore first distinct event which causes "play" to fire during prerolls
        ).share();
        var pauses = speedChanges.filter(function (event) { return event.rate === 0; })
            .map(function (event) { return _this._psn(event).pause(event.rate, event.position); });
        var plays = speedChanges.filter(function (event) { return event.rate === 1; })
            .map(function (event) { return _this._psn(event).play(event.rate, event.position); });
        var forwards = speedChanges.filter(function (event) { return event.rate > 1; })
            .map(function (event) { return _this._psn(event).fastForward(event.rate, event.position); });
        var rewinds = speedChanges.filter(function (event) { return event.rate < 0; })
            .map(function (event) { return _this._psn(event).rewind(event.rate, event.position); });
        return [pauses, plays, forwards, rewinds];
    };
    /**
     * Creates a PSN endAll observable that gets fired whenever a playback session
     * has ended. Ended is detrermined by a player IDLE state which gets
     * switch-mapped to media opened events to verify a stream actually started
     *
     * @private
     * @returns {Observable<string>}
     */
    PSNDispatcher.prototype._endAlls = function () {
        var _this = this;
        return this._sandbox.streams.mediaOpeneds
            .switchMap(function () { return _this._sandbox.streams.getPlayState(PlayerPlatformConstants_1.STATUS_IDLE)
            .merge(_this._sandbox.streams.mediaEndeds)
            .take(1); })
            .map(function () { return _this._psn().endAll(); });
    };
    /**
     * This just adds an ajax request to the request observable which is
     * activated in the `init` method.
     *
     * @private
     * @param {string} xmlStr
     */
    PSNDispatcher.prototype._send = function (xmlStr) {
        var _this = this;
        this._requests.next(rxjs_1.Observable.ajax({
            url: this._acrURL,
            method: "POST",
            body: xmlStr,
            crossDomain: true,
            responseType: "text",
            headers: { "Content-Type": "text/xml" }
        })
            .retry(1)
            .catch(function (err) {
            _this._logger.error("PSN Request Failure.", err.message);
            return rxjs_1.Observable.empty();
        }));
    };
    return PSNDispatcher;
}());
exports.PSNDispatcher = PSNDispatcher;
Application_1.registerModule("PSNDispatcher", PSNDispatcher);

},{"../../Application":483,"../../handlers/SessionManager":565,"../../util/Logger":571,"./../../PlayerPlatformConstants":490,"./PlacementStatusNotification":509,"rxjs":281,"rxjs/add/observable/dom/ajax":239,"rxjs/add/observable/empty":240,"rxjs/add/observable/from":241,"rxjs/add/observable/merge":246,"rxjs/add/operator/catch":253,"rxjs/add/operator/concatAll":254,"rxjs/add/operator/distinctUntilChanged":257,"rxjs/add/operator/do":259,"rxjs/add/operator/map":263,"rxjs/add/operator/merge":265,"rxjs/add/operator/pairwise":268,"rxjs/add/operator/retry":269,"rxjs/add/operator/share":271,"rxjs/add/operator/skip":272,"rxjs/add/operator/switchMap":274,"rxjs/add/operator/take":275,"rxjs/add/operator/takeUntil":276}],509:[function(require,module,exports){
"use strict";
/**
 * Created by chesli200 on 2/18/15.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var PlayerPlatformConstants_1 = require("../../PlayerPlatformConstants");
var x2json_1 = require("x2json");
var JSUtil_1 = require("../../util/JSUtil");
function PlacementStatusNotification(params) {
    var x2js = new x2json_1.X2JS({ escapeMode: false });
    var prefixCore = "core";
    var version = "1.1";
    var xmlnsAdm = "http://www.scte.org/schemas/130-3/2008a/adm";
    var xmlnsCore = "http://www.scte.org/schemas/130-2/2008a/core";
    var identity = "86CF2E98-AEBA-4C3A-A3D4-616CF7D74A79";
    var system = "IP_Player";
    var availableViewerEvents = {
        "fastForward": true,
        "play": true,
        "pause": true,
        "rewind": true,
        "stop": true
    };
    var json = {
        "_version": version,
        "_xmlns": xmlnsAdm,
        "_xmlns:core": xmlnsCore,
        "_identity": identity,
        "_messageId": JSUtil_1.createGUID().toUpperCase(),
        "_system": system,
        PlayData: {
            "_identityADS": params.identityAds ? params.identityAds : "",
            SystemContext: {
                Session: params.sessionID
            },
            Client: {
                TerminalAddress: {
                    "__text": params.terminalAddress,
                    "_type": "DEVICEID"
                }
            }
        }
    };
    function toXML() {
        return x2js.json2xml_str({ PlacementStatusNotification: json });
    }
    /**
     * createEvents wraps a PSNEvent in an object with an EventType of
     * either ViewerEvent || PlacementStatusEvent
     */
    function createEvents(event) {
        var obj = {};
        var eventType = isViewerEvent(event) ? "ViewerEvent" : "PlacementStatusEvent";
        obj[eventType] = event;
        return obj;
    }
    function createSpotScopedEvents(event) {
        var obj = {
            Spot: {
                Content: {
                    "__prefix": prefixCore,
                    Tracking: {
                        "__prefix": prefixCore,
                        "__text": params.tracking
                    }
                }
            }
        };
        if (params.assetRef) {
            obj.Spot.Content.AssetRef = {
                "__prefix": prefixCore,
                "_assetID": params.assetRef.assetID,
                "_providerID": params.assetRef.providerID
            };
        }
        obj.Events = createEvents(event);
        return obj;
    }
    function createEvent(type, scale, npt) {
        // create message ID
        json._messageId = JSUtil_1.createGUID().toUpperCase();
        // remove other events
        delete json.PlayData.Events;
        delete json.PlayData.SpotScopedEvents;
        //noinspection TypeScriptValidateTypes
        var event = {
            "_time": JSUtil_1.formatLocalDateTimeStamp(),
            "_type": type
        };
        if (params.messageRef) {
            event._messageRef = params.messageRef;
        }
        if (scale !== undefined && npt !== undefined) {
            var millis = (parseFloat(npt) / PlayerPlatformConstants_1.MILLISECONDS_PER_SECOND);
            event.SpotNPT = {
                "_scale": parseFloat(scale).toFixed(1),
                "__text": millis % 1 ? millis.toFixed(3) : millis.toFixed()
            };
            json.PlayData.SpotScopedEvents = createSpotScopedEvents(event);
        }
        else {
            json.PlayData.Events = createEvents(event);
        }
        return toXML();
    }
    function isViewerEvent(event) {
        return Object.prototype.hasOwnProperty.call(availableViewerEvents, event._type);
    }
    function curryEvent(type) {
        return function (scale, npt) {
            return createEvent(type, scale, npt);
        };
    }
    return {
        createEvent: createEvent,
        startPlacement: curryEvent("startPlacement"),
        endPlacement: curryEvent("endPlacement"),
        firstQuartile: curryEvent("private:firstQuartile"),
        midpoint: curryEvent("private:midpoint"),
        thirdQuartile: curryEvent("private:thirdQuartile"),
        fastForward: curryEvent("fastForward"),
        rewind: curryEvent("rewind"),
        play: curryEvent("play"),
        pause: curryEvent("pause"),
        stop: curryEvent("stop"),
        endAll: curryEvent("endAll")
    };
}
exports.PlacementStatusNotification = PlacementStatusNotification;

},{"../../PlayerPlatformConstants":490,"../../util/JSUtil":569,"x2json":482}],510:[function(require,module,exports){
"use strict";
/**
 * Created by chesli200 on 10/6/15.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Logger_1 = require("../../util/Logger");
/**
 * Basic `Bitfield` class that retrieves various types of values from
 * the given bitstring. The bit position is tracked with each retrieval.
 */
var Bitfield = /** @class */ (function () {
    function Bitfield(bitstring) {
        this.position = 0;
        if (!bitstring) {
            throw new Error("Cannot create Bitfield on empty or null bitstring");
        }
        this._bitstring = bitstring;
        this._logger = new Logger_1.Logger("Bitfield");
    }
    /**
     * Retrieve a number with the given bit length.
     *
     * @param bits - bit length
     * @returns {number}
     */
    Bitfield.prototype.getNumber = function (bits) {
        var num = parseInt(this._bitstring.substr(this.position, bits), 2);
        num = isNaN(num) ? 0 : num;
        this.position += bits;
        return num;
    };
    /**
     * Retrieves a number with the given bit length and converts it into a hex string.
     *
     * @param bits - bit length
     * @returns {string}
     */
    Bitfield.prototype.getHex = function (bits, formatted) {
        if (formatted === void 0) { formatted = true; }
        return "" + (formatted ? "0x" : "") + this.getNumber(bits).toString(16);
    };
    /**
     * Retrieves the next 1 bit and converts it to a boolean value.
     *
     * @returns {boolean}
     */
    Bitfield.prototype.getBoolean = function () {
        return !!this.getNumber(1);
    };
    /**
     * Converts the bit string with the given bit length to an ascii string.
     *
     * @param bits - bit length
     * @returns string}
     */
    Bitfield.prototype.getString = function (bits) {
        var match = this._bitstring
            .substr(this.position, bits)
            .match(/[01]{8}/g) || [];
        var str = match.map(function (v) { return String.fromCharCode(parseInt(v, 2)); })
            .join("");
        this.position += bits;
        return str;
    };
    return Bitfield;
}());
exports.Bitfield = Bitfield;
/**
 * This class inherits from `Bitfield` and uses a schema to generate
 * an object with properties defined in the schema. The schema's may reference
 * other schemas but they will need to be added to this instance via the
 * `registerSchema` method.
 */
var DefinedBitfield = /** @class */ (function (_super) {
    __extends(DefinedBitfield, _super);
    function DefinedBitfield(bitstring, schema) {
        var _this = _super.call(this, bitstring) || this;
        _this.schemas = {};
        _this.parsers = {};
        _this._mainSchema = schema;
        return _this;
    }
    /**
     * Create a DefinedBitfield using a base64 encoded binary string.
     *
     * @param base64 - base64 encoded binary string
     * @param schema - main schema definition
     * @returns {DefinedBitfield}
     */
    DefinedBitfield.fromBase64 = function (base64, schema) {
        var arr = _base64ToUint8Array(base64);
        return new DefinedBitfield(_generateBitString(arr), schema);
    };
    /**
     * Create a DefinedBitfield using a bitstring (string of 1s and 0s) and a main schema
     *
     * @param str - string of 1s and 0s
     * @param schema {IBitfieldSchema} - main schema definition
     * @returns {DefinedBitfield}
     */
    DefinedBitfield.fromBitString = function (str, schema) {
        return new DefinedBitfield(str, schema);
    };
    /**
     * Parse the bitstring into an objectusing the main
     * schema passed into the constructor or factory method.
     *
     * @returns {object}
     */
    DefinedBitfield.prototype.parse = function () {
        if (this._mainSchema) {
            this._obj = {};
            this._setupObj(this._mainSchema.schema);
        }
        return this._obj;
    };
    /**
     * This makes the given schema available for other schemas to reference when parsing.
     *
     * @param schema {IBitfieldSchema}
     * @returns {DefinedBitfield}
     */
    DefinedBitfield.prototype.registerSchema = function (schema) {
        this.schemas[schema.name] = schema;
        return this;
    };
    DefinedBitfield.prototype.registerParser = function (name, parser) {
        this.parsers[name] = parser;
        return this;
    };
    /**
     * Retrieve a specific property from the parsed object. Note that this
     * will only retrieve properties defined in the main schema.
     *
     * @param name
     * @returns {*}
     */
    DefinedBitfield.prototype.get = function (name) {
        return this._obj[name];
    };
    /**
     * This method is used to generate an object with properties defined in the given
     * schema. If an object is not passed into this method, the instance variable
     * `_obj` will be used.
     *
     * @param schema - schema definition to use
     * @param [obj] - optional object to fill, instead of using the instance variable
     * @returns {*}
     * @private
     */
    DefinedBitfield.prototype._setupObj = function (schema, obj) {
        if (obj === void 0) { obj = this._obj; }
        for (var _i = 0, schema_1 = schema; _i < schema_1.length; _i++) {
            var item = schema_1[_i];
            if (item.condition && !this._evaluateCondition(item)) {
                continue;
            }
            if (item.ignore) {
                this.position += this._getBits(item);
                continue;
            }
            if (item.condition && item.items && this._getItemType(item) !== "array") {
                this._setupObj(item.items);
                continue;
            }
            if (item.name) {
                obj[item.name] = this._getFnByType(item).call(this, item);
            }
        }
        return obj;
    };
    /**
     * If the given item is defined as type "schema", this method will be used to parse the target bits
     * using the given schema definition.
     *
     * @param item - schema item containing target bits and schema definition name
     * @returns {any}
     * @private
     */
    DefinedBitfield.prototype._parseSchema = function (item) {
        var schema = this.schemas[item.schema];
        if (!schema) {
            throw new Error("schema type \"" + item.schema + "\" doesn't exist!");
        }
        var numBits = this._getBits(item);
        if (numBits === 0) {
            return;
        }
        var bitfield = DefinedBitfield.fromBitString(this._bitstring.substr(this.position, numBits), schema);
        bitfield.schemas = this.schemas;
        bitfield.parsers = this.parsers;
        var parsed = bitfield.parse();
        this.position += (numBits || bitfield.position);
        return parsed;
    };
    /**
     * This uses a schema item's type field to retrieve the correct function to parse
     * the bits at that location. If a type is not present, it will try to be inferred.
     *
     * @param item - schema item
     * @returns {any}
     * @private
     */
    DefinedBitfield.prototype._getFnByType = function (item) {
        var _this = this;
        var type = this._getItemType(item);
        switch (type) {
            case "boolean":
                return function () { return _this.getBoolean(); };
            case "hex":
                return function () { return _this.getHex(_this._getBits(item)); };
            case "string":
                return function () { return _this.getString(_this._getBits(item)); };
            case "schema":
                return this._parseSchema;
            case "array":
                return this._getArray;
            case "custom":
                return this._parseCustom;
            case "number":
            default:
                return function () { return _this.getNumber(_this._getBits(item)); };
        }
    };
    DefinedBitfield.prototype._parseCustom = function (item) {
        var parser = this.parsers[item.custom];
        if (!parser) {
            throw new Error("No parser registered with name " + item.custom);
        }
        var numBits = this._getBits(item);
        if (numBits === 0) {
            return;
        }
        var str = this._bitstring.substr(this.position, numBits);
        this.position += numBits;
        return parser.parse(str, { bitfield: this });
    };
    /**
     * If the schema item is a conditional type (contains a `condition` property), this method
     * will determine which method to use to evalute the condition, execute that method, and
     * return it's value.
     *
     * @param item - schema item
     * @returns {boolean} - result of conditional method execution
     * @private
     */
    DefinedBitfield.prototype._evaluateCondition = function (item) {
        /*tslint:disable:prefer-const*/
        var _a = item.condition.split(/, ?/), op = _a[0], args = _a.slice(1);
        var opposite = false;
        var ret = false;
        if (op.indexOf("!") === 0) {
            opposite = true;
            op = op.substr(1);
        }
        switch (op) {
            case "eq":
                var left = args[0], rights = args.slice(1);
                ret = true;
                for (var _i = 0, rights_1 = rights; _i < rights_1.length; _i++) {
                    var right = rights_1[_i];
                    if (this.get(left) != right) {
                        ret = false;
                        break;
                    }
                }
                break;
            case "true":
            case "false":
                ret = this.get(args[0]) == (op === "true" ? 1 : 0);
                break;
            case "eval":
                try {
                    // tslint:disable:no-eval
                    ret = eval(args[0].replace(/this/g, "this._obj"));
                    break;
                }
                catch (error) {
                    this._logger.error("Could not evaluate expression \"" + args[0] + "\", returning false");
                    return false;
                }
            default:
                throw new Error("operation " + op + " is not a supported condition operation!");
        }
        return opposite ? !ret : ret;
    };
    /**
     * Gets the number of bits from a schema item. If the `bits` property is a string it is
     * assumed that the property refers to another property in the schema that has already
     * been parsed and will provide the number of bits. If a `multiplier` property is present
     * on the schema item, that will be used to multiply the `bits` value.
     *
     * @param item - schema item
     * @returns {number} - number of bits for this schema item
     * @private
     */
    DefinedBitfield.prototype._getBits = function (item) {
        var bits = typeof item.bits === "string" ? this.get(item.bits) : item.bits;
        return item.multiplier ? bits * item.multiplier : bits;
    };
    /**
     * This method attempts to infer the item type based on properties present in
     * the schema item. An error is thrown if the type cannot be inferred.
     *
     * @param item - schema item
     * @returns {string} - schema item type
     * @throws Error - thrown if type cannot be inferred.
     * @private
     */
    DefinedBitfield.prototype._getItemType = function (item) {
        if (item.type) {
            return item.type;
        }
        if (item.schema) {
            return "schema";
        }
        if (item.custom) {
            return "custom";
        }
        if (item.bits === 1) {
            return "boolean";
        }
        if (item.bits > 1) {
            return "number";
        }
        if (item.condition && item.items) {
            return "condition";
        }
        throw new Error("cannot determine type for field " + item.name + "!");
    };
    /**
     * If a schema item is of type "array", this method will generate an array containing
     * a series of objects with properties defined in the schema item.
     *
     * @param item - schema item
     * @returns {Array}
     * @private
     */
    DefinedBitfield.prototype._getArray = function (item) {
        var arr = [];
        var len = typeof item.length === "string" ? this.get(item.length) : item.length;
        for (var i = 0; i < len; i++) {
            arr.push(this._setupObj(item.items, {}));
        }
        return arr;
    };
    return DefinedBitfield;
}(Bitfield));
exports.DefinedBitfield = DefinedBitfield;
/**
 * converts a base64 encoded binary string to a Uint8Array.
 *
 * @param base64 - base64 encoded binary string
 * @returns {Uint8Array}
 * @private
 */
function _base64ToUint8Array(base64) {
    // TODO - Some SCTE35 cues that ended with `=` padding
    // were throwing error on the call to `atob`. Add
    // unit test displaying the issue and running through
    // this solution.
    // atob("/DBjAAAAAAAAAP/wBQb+AAAAAABNAktDVUVJRAAEUn//AABSZcAJN1NJR05BTDpRemRHUkRneE5VVXRSRGt4TlMwME9EWkNMVGt4TVRndE1EUXhRVGRHTlRJNE9UVTA2AACXXTCr==")
    while (base64.charAt(base64.length - 1) === "=") {
        base64 = base64.substring(0, base64.length - 1);
    }
    var binaryString = atob(base64);
    var len = binaryString.length;
    var bytes = new Uint8Array(len);
    for (var i = 0; i < len; i++) {
        bytes[i] = binaryString.charCodeAt(i);
    }
    return bytes;
}
/**
 * generates a bitstring from a given Uint8Array.
 *
 * @param arr {Uint8Array}
 * @returns {string} - bitstring
 * @private
 */
function _generateBitString(arr) {
    function padBinary(num, bits) {
        var numStr = num.toString(2);
        return numStr.length >= bits ? numStr : Array(bits - numStr.length + 1).join("0") + numStr;
    }
    // iterate over numbers, pad them to 8 bits and join into a string
    return [].map.call(arr, function (num) { return padBinary(num, 8); }).join("");
}

},{"../../util/Logger":571}],511:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
require("../psn/PSNDispatcher");
require("../../engines/flash/FlashEventToEventMapper");
var Logger_1 = require("../../util/Logger");
var AdManager_1 = require("../AdManager");
var Application_1 = require("../../Application");
var CLinearContentFactory_1 = require("./CLinearContentFactory");
var CLinearAdResolver_1 = require("./CLinearAdResolver");
var ConfigurationManager_1 = require("../../ConfigurationManager");
var logger = new Logger_1.Logger("CLinearAdManager");
var CLinearAdManager = /** @class */ (function (_super) {
    __extends(CLinearAdManager, _super);
    function CLinearAdManager() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._resolver = null;
        return _this;
    }
    CLinearAdManager.prototype.init = function (sandbox, cfg) {
        this._enabled = ConfigurationManager_1.ConfigurationManager.getInstance()
            .get(ConfigurationManager_1.ConfigurationManager.CLINEAR_DAI_ENABLED, false);
        if (!this._enabled) {
            logger.info("CLinearAdManager has been disabled");
            return null;
        }
        _super.prototype.init.call(this, sandbox, cfg, false);
        this.cfg = cfg;
        this.cfg.acrURL = sandbox.config.clinear.placementStatusNotificationEndPoint;
        sandbox.subscribe("ads:resolve", this._onResolve, {}, this);
        this._resolver = new CLinearAdResolver_1.CLinearAdResolver(sandbox.config.clinear.placementRequestEndPoint, this.cfg.terminalAddress, sandbox);
        this.type = "clinear";
        this.subscribedTags = ["#EXT-X-SCTE35"];
        return this;
    };
    CLinearAdManager.prototype.destroy = function (sandbox) {
        _super.prototype.destroy.call(this, sandbox);
        sandbox.remove("ads:resolve", this._onResolve);
        this._resolver = null;
    };
    CLinearAdManager.prototype.updateResumePosition = function () {
    };
    CLinearAdManager.prototype.hasContentFactory = function () {
        return this._enabled;
    };
    CLinearAdManager.prototype.getContentFactory = function () {
        return (new CLinearContentFactory_1.CLinearContentFactory(this.sandbox, this._resolver)).makeContentFactory();
    };
    CLinearAdManager.prototype._onPlacementResolve = function (opportunityId, placements) {
        this.sandbox.publish("ads:timelineResolved", { id: opportunityId }, placements);
    };
    /**
     * Called by the FLASH code via the sandbox mediator
     * to resolve an opportunity.
     */
    CLinearAdManager.prototype._onResolve = function (opportunity) {
        var _this = this;
        this.resolve([{
                id: opportunity.id,
                time: opportunity.placement.time,
                duration: parseInt(opportunity.settings.DURATION),
                tag: opportunity.settings,
                type: "midroll"
            }], function (_, placements) {
            _this._onPlacementResolve(opportunity.id, placements);
        });
    };
    /**
     * Called directly by the STB and eventually by the
     * FLASH code
     */
    CLinearAdManager.prototype.resolve = function (slots, cb) {
        logger.trace("Resolving ads : " + slots.map(function (slot) { return JSON.stringify(slot); }).join(" ").replace("\n", ""));
        if (this._resolver) {
            this._resolver.resolveRequest(this.asset, slots).then(function (placements) {
                cb(null, placements);
            }).catch(function (err) {
                cb(err, null);
            });
        }
    };
    return CLinearAdManager;
}(AdManager_1.AdManager));
exports.CLinearAdManager = CLinearAdManager;
Application_1.registerPlugin("CLinearAdManager", CLinearAdManager, {
    children: ["PSNDispatcher", "FlashEventToEventMapper"]
});

},{"../../Application":483,"../../ConfigurationManager":484,"../../engines/flash/FlashEventToEventMapper":550,"../../util/Logger":571,"../AdManager":493,"../psn/PSNDispatcher":508,"./CLinearAdResolver":512,"./CLinearContentFactory":513}],512:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var PlacementRequest_1 = require("./PlacementRequest");
var PlacementResponse_1 = require("./PlacementResponse");
var AdobeContentResolver_1 = require("../psdk/AdobeContentResolver");
var Logger_1 = require("../../util/Logger");
var logger = new Logger_1.Logger("CLinearAdResolver");
var rxjs_1 = require("rxjs");
require("rxjs/add/observable/dom/ajax");
var CLinearAdResolver = /** @class */ (function (_super) {
    __extends(CLinearAdResolver, _super);
    function CLinearAdResolver(_placementRequestEndPoint, _deviceId, sandbox) {
        var _this = _super.call(this, sandbox) || this;
        _this._placementRequestEndPoint = _placementRequestEndPoint;
        _this._deviceId = _deviceId;
        _this.requestResolver = _this;
        return _this;
    }
    CLinearAdResolver.prototype.getPlacementRequestXML = function (asset, ad) {
        var request = new PlacementRequest_1.PlacementRequest(asset, ad);
        request.deviceId = this._deviceId;
        return request.toXML();
    };
    /**
     * The duration in the placement response is in
     * ISO-8601 format. This method takes a formatted
     * duration string and returns the duration in
     * milliseconds
     */
    CLinearAdResolver.prototype.parseDuration = function (duration) {
        var parsePattern = /^PT([\d]+H)?([\d]+M)?([\d]+S)?$/;
        var result = 0;
        var parts = parsePattern.exec(duration);
        if (parts !== null) {
            for (var i = 1, length_1 = parts.length; i < length_1; i++) {
                if (parts[i]) {
                    result += parseInt(parts[i]) * Math.pow(60, 3 - i) * 1000;
                }
            }
        }
        else {
            logger.warn("Unknown duration found in XML");
        }
        return result;
    };
    CLinearAdResolver.prototype._getAds = function (placements, messageRef, identity) {
        var _this = this;
        var ads = [];
        placements.forEach(function (placement) {
            var contentLocations = placement.content.contentLocations;
            contentLocations.forEach(function (contentLocation) {
                if (contentLocation.mediaType === "application/vnd.apple.mpegurl") {
                    ads.push({
                        id: placement.id,
                        duration: _this.parseDuration(placement.content.duration),
                        url: contentLocation.url,
                        adAssetParams: {
                            cLinearAdAssetRef: placement.content.assetRef,
                            cLinearAdMessageRef: messageRef,
                            cLinearAdTracking: placement.content.tracking,
                            cLinearIdentityAds: identity
                        }
                    });
                }
            });
        });
        return ads;
    };
    CLinearAdResolver.prototype.resolveRequest = function (asset, adSlots) {
        var _this = this;
        if (adSlots.length != 1) {
            // TODO: Need to understand if/when this happens, and if potentionally
            // the service can accept multiple requests in a batch
            logger.error("THIS SERVICE ONLY SUPPORTS RESOLVING ONE OPPORTUNITY AT A TIME!");
            if (adSlots.length < 1) {
                return Promise.resolve([]);
            }
        }
        var ad = adSlots[0];
        var message = this.getPlacementRequestXML(asset, ad);
        var endPoint = this._placementRequestEndPoint;
        logger.trace("Sending placement request to " + endPoint);
        return new Promise(function (resolve, reject) {
            rxjs_1.Observable.ajax({
                url: endPoint,
                method: "POST",
                body: message,
                crossDomain: true,
                timeout: 5000,
                responseType: "document",
                headers: { "Content-Type": "application/xml" }
            }).subscribe(function (ajax) {
                try {
                    var placementResponse = new PlacementResponse_1.PlacementResponse(ajax.response);
                    if (placementResponse.isErrorResponse()) {
                        logger.error("Received error response XML: " + placementResponse.statusCode.note || JSON.stringify(placementResponse.statusCode));
                        reject("Error parsing XML");
                    }
                    else {
                        logger.trace("Parsing successful response for ads");
                        var totalDuration_1 = 0;
                        var ads = _this._getAds(placementResponse.placementDecision.placements, placementResponse.messageRef, placementResponse.identity);
                        ads.forEach(function (adAsset) {
                            totalDuration_1 += adAsset.duration;
                        });
                        resolve([{
                                placement: {
                                    id: ad.id,
                                    type: "mid-roll",
                                    time: ad.time,
                                    duration: totalDuration_1 * 1000
                                }, adBreak: {
                                    ads: ads
                                }
                            }]);
                    }
                }
                catch (e) {
                    logger.error("Had issue parsing XML response", e);
                    reject("Runtime error parsing response");
                }
            }, function (err) {
                logger.error("Invalid response from server " + err.message + " " + err.stack);
                reject("Error with response from ACR");
            });
        });
    };
    return CLinearAdResolver;
}(AdobeContentResolver_1.AdobeContentResolver));
exports.CLinearAdResolver = CLinearAdResolver;

},{"../../util/Logger":571,"../psdk/AdobeContentResolver":505,"./PlacementRequest":515,"./PlacementResponse":516,"rxjs":281,"rxjs/add/observable/dom/ajax":239}],513:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var AdobeContentFactory_1 = require("../psdk/AdobeContentFactory");
var CLinearOpportunityGenerator_1 = require("./CLinearOpportunityGenerator");
var CLinearContentFactory = /** @class */ (function (_super) {
    __extends(CLinearContentFactory, _super);
    function CLinearContentFactory() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CLinearContentFactory.prototype.makeOpportunityInstance = function () {
        return new CLinearOpportunityGenerator_1.CLinearOpportunityGenerator(this, this._sandbox);
    };
    return CLinearContentFactory;
}(AdobeContentFactory_1.AdobeContentFactory));
exports.CLinearContentFactory = CLinearContentFactory;

},{"../psdk/AdobeContentFactory":504,"./CLinearOpportunityGenerator":514}],514:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var AdobeOpportunityGenerator_1 = require("../psdk/AdobeOpportunityGenerator");
var AdobeRuntimeWrapper_1 = require("../../engines/psdk/AdobeRuntimeWrapper");
var CLinearOpportunityGenerator = /** @class */ (function (_super) {
    __extends(CLinearOpportunityGenerator, _super);
    function CLinearOpportunityGenerator() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * CLINEAR ads always replace the underlying content
     */
    CLinearOpportunityGenerator.prototype.getAdPlacementMode = function (_metadata) {
        return AdobeRuntimeWrapper_1.AdobeRuntimeWrapper.PLACEMENT_MODE_REPLACE();
    };
    CLinearOpportunityGenerator.prototype.getTagKey = function (timedMetadata) {
        return timedMetadata.id;
    };
    CLinearOpportunityGenerator.prototype._typeSupported = function (type) {
        return type === "0x34" || type === "0x36";
    };
    CLinearOpportunityGenerator.prototype.canResolve = function (timedMetadata) {
        return timedMetadata.name === "#EXT-X-SCTE35" && timedMetadata.metadata.CUE && this._typeSupported(timedMetadata.metadata.TYPE);
    };
    return CLinearOpportunityGenerator;
}(AdobeOpportunityGenerator_1.AdobeOpportunityGenerator));
exports.CLinearOpportunityGenerator = CLinearOpportunityGenerator;

},{"../../engines/psdk/AdobeRuntimeWrapper":554,"../psdk/AdobeOpportunityGenerator":507}],515:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var MoneyTrace = require("../../util/MoneyTrace");
var SCTE35TagDecoder_1 = require("./SCTE35TagDecoder");
var SessionManager_1 = require("../../handlers/SessionManager");
var Logger_1 = require("../../util/Logger");
var MESSAGE_SOURCE = {
    IP_PLAYER: "IP_Player",
    MM: "MM",
    QAMGW: "QAMGW",
    VSS: "VSS"
};
var NAMESPACES = {
    ADM: {
        key: "adm",
        url: "http://www.scte.org/schemas/130-3/2008a/adm"
    },
    CMCST: {
        key: "cmcst",
        url: "http://www.comcast.com/schemas/NGOD/P1/2008/R1V0"
    },
    CORE: {
        key: "core",
        url: "http://www.scte.org/schemas/130-2/2008a/core"
    }
};
var ELEMENTS = {
    CLIENT: {
        key: NAMESPACES.ADM.key,
        name: "Client"
    },
    CURRENT_DATE_TIME: {
        key: NAMESPACES.CORE.key,
        name: "CurrentDateTime"
    },
    EXT: {
        key: NAMESPACES.CORE.key,
        name: "Ext"
    },
    PLACEMENT_OPPORTUNITY: {
        key: NAMESPACES.ADM.key,
        name: "PlacementOpportunity"
    },
    PLACEMENT_REQUEST: {
        key: NAMESPACES.ADM.key,
        name: "PlacementRequest"
    },
    PLAY_POSITION_AVAIL_BINDING: {
        key: NAMESPACES.CMCST.key,
        name: "PlayPositionsAvailBinding"
    },
    PLAY_POSITION_START: {
        key: NAMESPACES.CMCST.key,
        name: "PlayPositionStart"
    },
    PRODUCT_TYPE: {
        key: NAMESPACES.ADM.key,
        name: "ProductType"
    },
    SERVICE: {
        key: NAMESPACES.ADM.key,
        name: "Service"
    },
    SESSION: {
        key: NAMESPACES.ADM.key,
        name: "Session"
    },
    SIGNAL_ID: {
        key: NAMESPACES.CMCST.key,
        name: "SignalId"
    },
    SYSTEM_CONTEXT: {
        key: NAMESPACES.ADM.key,
        name: "SystemContext"
    },
    TERMINAL_ADDRESS: {
        key: NAMESPACES.ADM.key,
        name: "TerminalAddress"
    }
};
var PlacementRequest = /** @class */ (function () {
    function PlacementRequest(_asset, ad) {
        this._asset = _asset;
        this._logger = new Logger_1.Logger("PlacementRequest");
        this._messageId = MoneyTrace.generateUUID();
        this._version = "1.1";
        this._identity = "86CF2E98-AEBA-4C3A-A3D4-616CF7D74A79";
        this._system = MESSAGE_SOURCE.IP_PLAYER;
        this._session = SessionManager_1.SessionManager.instance.playbackSessionId;
        this._parseTag(ad);
    }
    Object.defineProperty(PlacementRequest.prototype, "deviceId", {
        set: function (deviceId) {
            this._deviceId = deviceId;
        },
        enumerable: true,
        configurable: true
    });
    PlacementRequest.prototype._parseTag = function (ad) {
        var parser = new SCTE35TagDecoder_1.SCTE35TagDecoder(ad.tag.CUE);
        var parsedTag = parser.parse();
        this._upid = this._getSegmentationUpid(parsedTag);
        this._opportunityId = MoneyTrace.generateUUID();
    };
    PlacementRequest.prototype._getSegmentationUpid = function (tag) {
        if (Array.isArray(tag.splice_descriptor) && tag.splice_descriptor.length > 0 &&
            tag.splice_descriptor[0] && tag.splice_descriptor[0].segmentation_upid) {
            var upid = tag.splice_descriptor[0].segmentation_upid;
            if (upid.name === "SIGNAL") {
                return upid.value;
            }
            this._logger.warn("Missing SIGNAL prefix in adi");
        }
        this._logger.warn("Unable to determine signal ID");
        return "";
    };
    PlacementRequest.prototype._getNewDocument = function () {
        var xml = "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n            <" + NAMESPACES.ADM.key + ":" + ELEMENTS.PLACEMENT_REQUEST.name + "\n                xmlns:" + NAMESPACES.ADM.key + "=\"" + NAMESPACES.ADM.url + "\"\n                xmlns:" + NAMESPACES.CORE.key + "=\"" + NAMESPACES.CORE.url + "\"\n                xmlns:" + NAMESPACES.CMCST.key + "=\"" + NAMESPACES.CMCST.url + "\"\n            ></" + NAMESPACES.ADM.key + ":" + ELEMENTS.PLACEMENT_REQUEST.name + ">";
        return new DOMParser().parseFromString(xml, "application/xml");
    };
    PlacementRequest.prototype._updateRoot = function (root) {
        root.setAttribute("messageId", this._messageId);
        root.setAttribute("version", this._version);
        root.setAttribute("identity", this._identity);
        root.setAttribute("system", this._system);
    };
    PlacementRequest.prototype._createElement = function (root, element) {
        return root.createElement(element.key + ":" + element.name);
    };
    PlacementRequest.prototype._getService = function (root) {
        var element = this._createElement(root, ELEMENTS.SERVICE);
        element.setAttribute("id", "urn:merlin:linear:stream:" + this._asset.streamId);
        element.appendChild(this._getProductType(root));
        return element;
    };
    PlacementRequest.prototype._getProductType = function (root) {
        var element = this._createElement(root, ELEMENTS.PRODUCT_TYPE);
        element.appendChild(root.createTextNode("LINEAR_T6"));
        return element;
    };
    PlacementRequest.prototype._getSession = function (root) {
        var element = this._createElement(root, ELEMENTS.SESSION);
        element.appendChild(root.createTextNode(this._session));
        return element;
    };
    PlacementRequest.prototype._getSystemContext = function (root) {
        var element = this._createElement(root, ELEMENTS.SYSTEM_CONTEXT);
        element.appendChild(this._getSession(root));
        return element;
    };
    PlacementRequest.prototype._getClient = function (root) {
        var element = this._createElement(root, ELEMENTS.CLIENT);
        element.appendChild(this._getCurrentDateTime(root));
        element.appendChild(this._getTerminalAddress(root));
        return element;
    };
    PlacementRequest.prototype._getCurrentDateTime = function (root) {
        var element = this._createElement(root, ELEMENTS.CURRENT_DATE_TIME);
        element.appendChild(root.createTextNode(new Date().toJSON()));
        return element;
    };
    PlacementRequest.prototype._getTerminalAddress = function (root) {
        var element = this._createElement(root, ELEMENTS.TERMINAL_ADDRESS);
        element.setAttribute("type", "DEVICEID");
        element.appendChild(root.createTextNode(this._deviceId));
        return element;
    };
    PlacementRequest.prototype._getPlacementOpportunity = function (root) {
        var element = this._createElement(root, ELEMENTS.PLACEMENT_OPPORTUNITY);
        element.setAttribute("id", this._opportunityId);
        element.setAttribute("serviceRegistrationRef", "-");
        element.appendChild(this._getExt(root));
        return element;
    };
    PlacementRequest.prototype._getExt = function (root) {
        var element = this._createElement(root, ELEMENTS.EXT);
        element.appendChild(this._getPlayPositionAvailBinding(root));
        return element;
    };
    PlacementRequest.prototype._getSignalId = function (root) {
        var element = this._createElement(root, ELEMENTS.SIGNAL_ID);
        element.appendChild(root.createTextNode(this._upid));
        return element;
    };
    PlacementRequest.prototype._getPlayPositionStart = function (root) {
        var element = this._createElement(root, ELEMENTS.PLAY_POSITION_START);
        element.appendChild(this._getSignalId(root));
        return element;
    };
    PlacementRequest.prototype._getPlayPositionAvailBinding = function (root) {
        var element = this._createElement(root, ELEMENTS.PLAY_POSITION_AVAIL_BINDING);
        element.appendChild(this._getPlayPositionStart(root));
        return element;
    };
    PlacementRequest.prototype.toXML = function () {
        var xml = this._getNewDocument();
        var root = xml.documentElement;
        this._updateRoot(root);
        root.appendChild(this._getSystemContext(xml));
        root.appendChild(this._getService(xml));
        root.appendChild(this._getClient(xml));
        root.appendChild(this._getPlacementOpportunity(xml));
        return new XMLSerializer().serializeToString(xml);
    };
    return PlacementRequest;
}());
exports.PlacementRequest = PlacementRequest;

},{"../../handlers/SessionManager":565,"../../util/Logger":571,"../../util/MoneyTrace":572,"./SCTE35TagDecoder":517}],516:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var NAMESPACE_ADM = "http://www.scte.org/schemas/130-3/2008a/adm";
var NAMESPACE_CORE = "http://www.scte.org/schemas/130-2/2008a/core";
var PlacementResponse = /** @class */ (function () {
    function PlacementResponse(xmlDoc) {
        this.messageRef = xmlDoc.documentElement.getAttribute("messageRef");
        this.messageId = xmlDoc.documentElement.getAttribute("messageId");
        this.version = xmlDoc.documentElement.getAttribute("version");
        this.identity = xmlDoc.documentElement.getAttribute("identity");
        this.system = xmlDoc.documentElement.getAttribute("system");
        this._populatePlacementDecision(xmlDoc);
        this._populateStatusCode(xmlDoc);
    }
    // An error is any status code
    // with a class greater than 0
    PlacementResponse.prototype.isErrorResponse = function () {
        return typeof this.statusCode === "undefined" || this.statusCode.class > 0;
    };
    PlacementResponse.prototype._populateStatusCode = function (root) {
        var statusCodes = root.getElementsByTagNameNS(NAMESPACE_CORE, "StatusCode");
        if (statusCodes.length > 0) {
            this.statusCode = {
                "class": parseInt(statusCodes[0].getAttribute("class"))
            };
            if (this.statusCode.class > 0) {
                this.statusCode.detail = statusCodes[0].getAttribute("detail");
                var notes = statusCodes[0].getElementsByTagNameNS(NAMESPACE_CORE, "Note");
                var note = [];
                for (var i = 0, length_1 = notes.length; i < length_1; i++) {
                    note.push(notes[i].textContent);
                }
                this.statusCode.note = note.join("\n");
            }
        }
    };
    PlacementResponse.prototype._getPlacement = function (placement) {
        var result = {
            id: placement.getAttribute("id"),
            content: this._getContent(placement)
        };
        return result;
    };
    PlacementResponse.prototype._getPlacements = function (placementDecision) {
        var placements = placementDecision.getElementsByTagNameNS(NAMESPACE_ADM, "Placement");
        var results = [];
        for (var i = 0, length_2 = placements.length; i < length_2; i++) {
            results.push(this._getPlacement(placements[i]));
        }
        return results;
    };
    PlacementResponse.prototype._getDuration = function (content) {
        var durations = content.getElementsByTagNameNS(NAMESPACE_CORE, "Duration");
        if (durations.length > 0) {
            return durations[0].textContent;
        }
    };
    PlacementResponse.prototype._getTracking = function (content) {
        var trackings = content.getElementsByTagNameNS(NAMESPACE_CORE, "Tracking");
        if (trackings.length > 0) {
            return trackings[0].textContent;
        }
    };
    PlacementResponse.prototype._getAssetRef = function (content) {
        var assetRefs = content.getElementsByTagNameNS(NAMESPACE_CORE, "AssetRef");
        if (assetRefs.length > 0) {
            return {
                assetID: assetRefs[0].getAttribute("assetID"),
                providerID: assetRefs[0].getAttribute("providerID")
            };
        }
    };
    PlacementResponse.prototype._getContentLocation = function (contentLocation) {
        var result = {
            mediaType: contentLocation.getAttribute("mediaType"),
            url: contentLocation.textContent
        };
        return result;
    };
    PlacementResponse.prototype._getContentLocations = function (content) {
        var contentLocations = content.getElementsByTagNameNS(NAMESPACE_CORE, "ContentLocation");
        var results = [];
        for (var i = 0, length_3 = contentLocations.length; i < length_3; i++) {
            results.push(this._getContentLocation(contentLocations[i]));
        }
        return results;
    };
    PlacementResponse.prototype._getContent = function (placement) {
        var contents = placement.getElementsByTagNameNS(NAMESPACE_CORE, "Content");
        if (contents.length > 0) {
            return {
                contentLocations: this._getContentLocations(contents[0]),
                duration: this._getDuration(contents[0]),
                tracking: this._getTracking(contents[0]),
                assetRef: this._getAssetRef(contents[0])
            };
        }
    };
    PlacementResponse.prototype._populatePlacementDecision = function (root) {
        var placementDecisions = root.getElementsByTagNameNS(NAMESPACE_ADM, "PlacementDecision");
        if (placementDecisions.length > 0) {
            var placementDecision = {
                placements: this._getPlacements(placementDecisions[0])
            };
            this.placementDecision = placementDecision;
        }
    };
    return PlacementResponse;
}());
exports.PlacementResponse = PlacementResponse;

},{}],517:[function(require,module,exports){
"use strict";
/**
 * Created by chesli200 on 10/6/15.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var schemas = require("./schemas/schemas");
var Bitfield_1 = require("./Bitfield");
var SegmentationUpidParser_1 = require("./SegmentationUpidParser");
var SpliceDescriptorParser_1 = require("./SpliceDescriptorParser");
exports.SPLICE_DESCRIPTOR_TAGS = {
    AVAIL: 0,
    SEGMENTATION: 2
};
exports.SEGMENTATION_TYPES = {
    CONTENT_IDENTIFICATION: "0x1",
    PROVIDER_PLACEMENT_OPPORTUNITY_START: "0x34",
    DISTRIBUTOR_PLACEMENT_OPPORTUNITY_START: "0x36"
};
/**
 * Uses a `DefinedBitfield` to parse SCTE35 values out of a base64 encoded string.
 * This class mostly delegates to an instance of a `DefinedBitfield`.
 */
var SCTE35TagDecoder = /** @class */ (function () {
    function SCTE35TagDecoder(base64) {
        this._bitfield = Bitfield_1.DefinedBitfield.fromBase64(base64, schemas.scte35Schema);
        this._bitfield
            .registerSchema(schemas.spliceInsertSchema)
            .registerSchema(schemas.breakDurationSchema)
            .registerSchema(schemas.timeSignalSchema)
            .registerSchema(schemas.segmentationDescriptorSchema)
            .registerParser("splice_descriptor", new SpliceDescriptorParser_1.SpliceDescriptorParser())
            .registerParser("segmentation_upid", new SegmentationUpidParser_1.SegmentationUpidParser());
    }
    SCTE35TagDecoder.prototype.get = function (name) {
        return this._bitfield.get(name);
    };
    SCTE35TagDecoder.prototype.parse = function () {
        return this._bitfield.parse();
    };
    return SCTE35TagDecoder;
}());
exports.SCTE35TagDecoder = SCTE35TagDecoder;

},{"./Bitfield":510,"./SegmentationUpidParser":518,"./SpliceDescriptorParser":519,"./schemas/schemas":525}],518:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Logger_1 = require("../../util/Logger");
/**
 * Custom parser for segmentation UPIDs in SCTE35 messages.
 */
var Bitfield_1 = require("./Bitfield");
var UPID_TYPE;
(function (UPID_TYPE) {
    UPID_TYPE["UNDEFINED"] = "0x0";
    UPID_TYPE["USER_DEFINED"] = "0x1";
    UPID_TYPE["AD_ID"] = "0x3";
    UPID_TYPE["AIRING_ID"] = "0x8";
    UPID_TYPE["ADI"] = "0x9";
    UPID_TYPE["EIDR"] = "0xa";
    UPID_TYPE["MPU"] = "0xc";
    UPID_TYPE["MID"] = "0xd";
})(UPID_TYPE = exports.UPID_TYPE || (exports.UPID_TYPE = {}));
var SegmentationUpidParser = /** @class */ (function () {
    function SegmentationUpidParser() {
        var _a;
        var _this = this;
        this._uuidChunks = [8, 4, 4, 4, 12];
        this._fns = (_a = {},
            _a[UPID_TYPE.UNDEFINED] = this._parseString,
            _a[UPID_TYPE.USER_DEFINED] = this._parseString,
            _a[UPID_TYPE.AD_ID] = function () { return _this._parseString(96); },
            _a[UPID_TYPE.AIRING_ID] = function () { return _this._parseAiringId(64); },
            _a[UPID_TYPE.ADI] = this._parseAdi,
            _a[UPID_TYPE.EIDR] = this._parseEidr,
            _a[UPID_TYPE.MID] = this._parseMid,
            _a[UPID_TYPE.MPU] = this._parseMpu,
            _a);
    }
    SegmentationUpidParser.prototype.parse = function (bitstring, options) {
        if (!options.bitfield) {
            throw new Error("this requires a bitfield parent to retrieve length values.");
        }
        this._parent = options.bitfield;
        this._bitfield = new Bitfield_1.Bitfield(bitstring);
        var upidType = this._parent.get("segmentation_upid_type");
        var upidLength = this._parent.get("segmentation_upid_length") * 8;
        return this._parse(upidType, upidLength);
    };
    SegmentationUpidParser.prototype._parse = function (type, length) {
        var fn = this._fns[type];
        if (!fn) {
            throw new Error("no support for segementation upid type " + type);
        }
        return fn.call(this, length);
    };
    SegmentationUpidParser.prototype._getLengthFromParent = function () {
        return this._parent.get("segmentation_upid_length") * 8;
    };
    SegmentationUpidParser.prototype._parseAiringId = function (length) {
        if (length === void 0) { length = this._getLengthFromParent(); }
        return this._bitfield.getNumber(length);
    };
    SegmentationUpidParser.prototype._parseString = function (length) {
        return this._bitfield.getString(length);
    };
    SegmentationUpidParser.prototype._parseAdi = function (length) {
        if (length === void 0) { length = this._getLengthFromParent(); }
        var adi = this._bitfield.getString(length);
        // we should have a prefix
        if (adi.indexOf(":") !== -1) {
            return {
                name: adi.substring(0, adi.indexOf(":")),
                value: adi.substring(adi.indexOf(":") + 1)
            };
        }
        SegmentationUpidParser._logger.warn("no ADI prefix found: " + adi);
    };
    SegmentationUpidParser.prototype._getNibbles = function (count, formatted) {
        if (formatted === void 0) { formatted = true; }
        var arr = [];
        for (var i = 0; i < count; i++) {
            arr.push(this._bitfield.getHex(4, formatted));
        }
        return arr;
    };
    SegmentationUpidParser.prototype._parseEidr = function () {
        return "10." + this._bitfield.getNumber(16) + "/" + this._getNibbles(20).join("-");
    };
    SegmentationUpidParser.prototype._parseMid = function (length) {
        if (length === void 0) { length = this._getLengthFromParent(); }
        var arr = [];
        var pos = 0;
        while (pos < length) {
            var type = this._bitfield.getHex(8);
            var upidLength = (this._bitfield.getNumber(8) * 8);
            var upid = this._parse(type, upidLength);
            arr.push({
                segmentation_upid_type: type,
                length: upidLength,
                segmentation_upid: upid
            });
            pos += (upidLength + 16);
        }
        return arr;
    };
    SegmentationUpidParser.prototype._parseMpu = function () {
        var formatIdentifier = this._bitfield.getString(4 * 8);
        if (formatIdentifier === "VMNU") {
            this._bitfield.getNumber(8);
            var nibbles = this._getNibbles(32, false);
            var processed = 0;
            var chunks = [];
            for (var i = 0, j = this._uuidChunks.length; i < j; i++) {
                var toProcess = this._uuidChunks[i];
                chunks.push(nibbles.slice(processed, processed + toProcess).join(""));
                processed += toProcess;
            }
            return chunks.join("-");
        }
        return undefined;
    };
    SegmentationUpidParser._logger = new Logger_1.Logger("SegmentationUpidParser");
    return SegmentationUpidParser;
}());
exports.SegmentationUpidParser = SegmentationUpidParser;

},{"../../util/Logger":571,"./Bitfield":510}],519:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Custom parser for splice descriptors in a SCTE 35 message.
 */
var Bitfield_1 = require("./Bitfield");
var schemas = require("./schemas/schemas");
var SCTE35TagDecoder_1 = require("./SCTE35TagDecoder");
var SpliceDescriptorParser = /** @class */ (function () {
    function SpliceDescriptorParser() {
        var _a;
        this._schemas = (_a = {},
            _a[SCTE35TagDecoder_1.SPLICE_DESCRIPTOR_TAGS.AVAIL] = schemas.availDescriptorSchema,
            _a[SCTE35TagDecoder_1.SPLICE_DESCRIPTOR_TAGS.SEGMENTATION] = schemas.segmentationDescriptorSchema,
            _a);
    }
    SpliceDescriptorParser.prototype.parse = function (bitstring, options) {
        if (!options.bitfield) {
            throw new Error("this requires a bitfield parent to retrieve length values.");
        }
        this._parent = options.bitfield;
        this._bitfield = new Bitfield_1.Bitfield(bitstring);
        var descriptorLength = this._parent.get("descriptor_loop_length") * 8;
        var arr = [];
        while (this._bitfield.position < descriptorLength) {
            var tag = this._bitfield.getNumber(8);
            var length_1 = this._bitfield.getNumber(8) * 8; // descriptor length in bytes
            var definedBitfield = new Bitfield_1.DefinedBitfield(bitstring.substr(this._bitfield.position, length_1), this._schemas[tag]);
            definedBitfield.schemas = this._parent.schemas;
            definedBitfield.parsers = this._parent.parsers;
            this._bitfield.position += length_1; // update bitfield position to get next descriptor tag & length
            var result = definedBitfield.parse();
            result.splice_descriptor_tag = tag;
            result.descriptor_length = length_1;
            arr.push(result);
        }
        return arr;
    };
    return SpliceDescriptorParser;
}());
exports.SpliceDescriptorParser = SpliceDescriptorParser;

},{"./Bitfield":510,"./SCTE35TagDecoder":517,"./schemas/schemas":525}],520:[function(require,module,exports){
"use strict";
/**
 * Created by chesli200 on 10/12/15.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.breakDurationSchema = {
    name: "break_duration",
    schema: [
        {
            name: "auto_return",
            bits: 1
        },
        {
            ignore: true,
            bits: 6
        },
        {
            name: "duration",
            bits: 33
        }
    ]
};

},{}],521:[function(require,module,exports){
"use strict";
/**
 * Created by chesli200 on 10/6/15.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.scte35Schema = {
    name: "scte35",
    schema: [
        {
            name: "table_id",
            bits: 8
        },
        {
            name: "section_syntax_indicator",
            bits: 1
        },
        {
            name: "private_indicator",
            bits: 1
        },
        {
            bits: 2,
            ignore: true
        },
        {
            name: "section_length",
            bits: 12
        },
        {
            name: "protocol_version",
            bits: 8
        },
        {
            name: "encrypted_packet",
            bits: 1
        },
        {
            name: "encryption_algorithm",
            bits: 6
        },
        {
            name: "pts_adjustment",
            bits: 33
        },
        {
            name: "cw_index",
            bits: 8
        },
        {
            name: "tier",
            bits: 12,
            type: "hex"
        },
        {
            name: "splice_command_length",
            bits: 12
        },
        {
            name: "splice_command_type",
            bits: 8
        },
        {
            name: "splice_command",
            condition: "eq, splice_command_type, 0",
            bits: "splice_command_length",
            multiplier: 8,
            schema: "splice_null"
        },
        {
            name: "splice_command",
            condition: "eq, splice_command_type, 4",
            bits: "splice_command_length",
            multiplier: 8,
            schema: "splice_schedule"
        },
        {
            name: "splice_command",
            condition: "eq, splice_command_type, 5",
            bits: "splice_command_length",
            multiplier: 8,
            schema: "splice_insert"
        },
        {
            name: "splice_command",
            condition: "eq, splice_command_type, 6",
            bits: "splice_command_length",
            multiplier: 8,
            schema: "time_signal"
        },
        {
            name: "splice_command",
            condition: "eq, splice_command_type, 7",
            bits: "splice_command_length",
            multiplier: 8,
            schema: "bandwidth_reservation"
        },
        {
            name: "splice_command",
            condition: "eq, splice_command_type, 255",
            bits: "splice_command_length",
            multiplier: 8,
            schema: "private_command"
        },
        {
            name: "descriptor_loop_length",
            bits: 16
        },
        {
            name: "splice_descriptor",
            bits: "descriptor_loop_length",
            multiplier: 8,
            custom: "splice_descriptor"
        }
    ]
};

},{}],522:[function(require,module,exports){
"use strict";
/**
 * Created by chesli200 on 10/6/15.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.segmentationDescriptorSchema = {
    name: "segmentation_descriptor",
    schema: [
        // skip splice_descriptor_tag and descriptor_length these are read imperatively in code
        {
            name: "identifier",
            bits: 32
        },
        {
            name: "segmentation_event_id",
            bits: 32
        },
        {
            name: "segmentation_event_cancel_indicator",
            bits: 1
        },
        {
            bits: 7,
            ignore: true
        },
        {
            condition: "false, segmentation_event_cancel_indicator",
            items: [
                {
                    name: "program_segmentation_flag",
                    bits: 1
                },
                {
                    name: "segmentation_duration_flag",
                    bits: 1
                },
                {
                    name: "delivery_not_restricted_flag",
                    bits: 1
                },
                {
                    condition: "false, delivery_not_restricted_flag",
                    items: [
                        {
                            name: "web_delivery_allowed_flag",
                            bits: 1
                        },
                        {
                            name: "no_regional_blackout_flag",
                            bits: 1
                        },
                        {
                            name: "archive_allowed_flag",
                            bits: 1
                        },
                        {
                            name: "device_restrictions",
                            bits: 2
                        },
                    ]
                },
                {
                    condition: "true, delivery_not_restricted_flag",
                    bits: 5,
                    ignore: true
                },
                {
                    condition: "false, program_segmentation_flag",
                    items: [
                        {
                            name: "component_count",
                            bits: 8
                        },
                        {
                            name: "components",
                            type: "array",
                            length: "component_count",
                            items: [
                                {
                                    name: "component_tag",
                                    bits: 8
                                },
                                {
                                    bits: 7,
                                    ignore: true
                                },
                                {
                                    name: "pts_offset",
                                    bits: 33
                                }
                            ]
                        }
                    ]
                },
                {
                    name: "segmentation_duration",
                    condition: "true, segmentation_duration_flag",
                    bits: 40
                },
                {
                    name: "segmentation_upid_type",
                    bits: 8,
                    type: "hex"
                },
                {
                    name: "segmentation_upid_length",
                    bits: 8
                },
                {
                    name: "segmentation_upid",
                    bits: "segmentation_upid_length",
                    multiplier: 8,
                    custom: "segmentation_upid"
                },
                {
                    name: "segmentation_type_id",
                    bits: 8,
                    type: "hex"
                },
                {
                    name: "segment_num",
                    bits: 8
                },
                {
                    name: "segments_expected",
                    bits: 8
                }
            ]
        }
    ]
};
exports.availDescriptorSchema = {
    name: "avail_descriptor",
    schema: [
        {
            name: "splice_descriptor_tag",
            bits: 8
        },
        {
            name: "descriptor_length",
            bits: 8
        },
        {
            name: "identifier",
            bits: 32
        },
        {
            name: "provider_avail_id",
            bits: 32
        }
    ]
};

},{}],523:[function(require,module,exports){
"use strict";
/**
 * Created by chesli200 on 10/12/15.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.spliceInsertSchema = {
    name: "splice_insert",
    schema: [
        {
            name: "splice_event_id",
            bits: 32
        },
        {
            name: "splice_event_cancel_indicator",
            bits: 1
        },
        {
            ignore: true,
            bits: 7
        },
        {
            condition: "false, splice_event_cancel_indicator",
            items: [
                {
                    name: "out_of_network_indicator",
                    bits: 1
                },
                {
                    name: "program_splice_flag",
                    bits: 1
                },
                {
                    name: "duration_flag",
                    bits: 1
                },
                {
                    name: "splice_immediate_flag",
                    bits: 1
                },
                {
                    bits: 4,
                    ignore: true
                },
                {
                    condition: "eval, this.program_splice_flag == true && this.splice_immediate_flag == false",
                    schema: "time_signal",
                    name: "splice_time"
                },
                {
                    condition: "false, program_splice_flag",
                    items: [
                        {
                            name: "component_count",
                            bits: 8
                        },
                        {
                            condition: "false, splice_immediate_flag",
                            length: "component_count",
                            type: "array",
                            items: [
                                {
                                    name: "component_tag",
                                    bits: 8
                                },
                                {
                                    condition: "false, splice_immediate_flag",
                                    name: "splice_time",
                                    schema: "time_signal"
                                }
                            ]
                        }
                    ]
                },
                {
                    condition: "true, duration_flag",
                    name: "break_duration",
                    schema: "break_duration"
                },
                {
                    name: "unique_program_id",
                    bits: 16
                },
                {
                    name: "avail_num",
                    bits: 8
                },
                {
                    name: "avails_expected",
                    bits: 8
                }
            ]
        }
    ]
};

},{}],524:[function(require,module,exports){
"use strict";
/**
 * Created by chesli200 on 10/6/15.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.timeSignalSchema = {
    name: "time_signal",
    schema: [
        {
            name: "time_specified_flag",
            bits: 1
        },
        {
            condition: "true, time_specified_flag",
            bits: 6,
            ignore: true
        },
        {
            condition: "true, time_specified_flag",
            name: "pts_time",
            bits: 33
        },
        {
            condition: "false, time_specified_flag",
            bits: 7,
            ignore: true
        }
    ]
};

},{}],525:[function(require,module,exports){
"use strict";
/**
 * Created by chesli200 on 10/6/15.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var SCTE35Schema_1 = require("./SCTE35Schema");
exports.scte35Schema = SCTE35Schema_1.scte35Schema;
var BreakDurationSchema_1 = require("./BreakDurationSchema");
exports.breakDurationSchema = BreakDurationSchema_1.breakDurationSchema;
var SpliceDescriptorSchemas_1 = require("./SpliceDescriptorSchemas");
exports.segmentationDescriptorSchema = SpliceDescriptorSchemas_1.segmentationDescriptorSchema;
exports.availDescriptorSchema = SpliceDescriptorSchemas_1.availDescriptorSchema;
var SpliceInsertSchema_1 = require("./SpliceInsertSchema");
exports.spliceInsertSchema = SpliceInsertSchema_1.spliceInsertSchema;
var TimeSignalSchema_1 = require("./TimeSignalSchema");
exports.timeSignalSchema = TimeSignalSchema_1.timeSignalSchema;

},{"./BreakDurationSchema":520,"./SCTE35Schema":521,"./SpliceDescriptorSchemas":522,"./SpliceInsertSchema":523,"./TimeSignalSchema":524}],526:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var _a, _b;
var Application_1 = require("../../Application");
var PlayerPlatformConstants_1 = require("../../PlayerPlatformConstants");
var Logger_1 = require("../../util/Logger");
var ProgressWindow_1 = require("../../util/ProgressWindow");
var PlayerPlatformAPIEvents_1 = require("../../PlayerPlatformAPIEvents");
var TimelineTracker_1 = require("./TimelineTracker");
var TrackerEvent_1 = require("./TrackerEvent");
var VideoAdBreak_1 = require("../VideoAdBreak");
var rxjs_1 = require("rxjs");
require("rxjs/add/observable/from");
require("rxjs/add/observable/merge");
require("rxjs/add/observable/never");
require("rxjs/add/operator/distinctUntilChanged");
require("rxjs/add/operator/do");
require("rxjs/add/operator/filter");
require("rxjs/add/operator/mergeMap");
require("rxjs/add/operator/takeUntil");
/**
 * This module starts tracking ads and firing ad events when it is initialized. It tracks
 * the ads that are returned by `AdManager.getTimelien()` which is exposed on the sandbox.
 * An instance of `TimelineTracker` is used to track ads by passing desired event types and
 * then mapping those to the appropriate ad events.
 *
 * The Observables are created in such a way that the following order of events is preserved:
 * 1. AdBreakStartEvent
 * 2. AdStartEvent
 * 3. AdProgressEvent
 * 4. AdCompleteEvent/AdExitedEvent
 * 5. AdBreakCompleteEvent/AdBreakExitedEvent
 */
var AdTracker = /** @class */ (function () {
    function AdTracker() {
    }
    AdTracker.prototype.init = function (sandbox, tracker) {
        this._sandbox = sandbox;
        var _a = this._setupTrackerObservables(), start = _a[0], progress = _a[1];
        tracker = this._tracker = tracker || new TimelineTracker_1.TimelineTracker(start, progress);
        // observable for ad complete/exit events first
        var adCompleteObs = tracker.trackCb(this._ads.bind(this), [TrackerEvent_1.TrackerEventType.COMPLETE, TrackerEvent_1.TrackerEventType.EXIT, TrackerEvent_1.TrackerEventType.INTERRUPT]);
        // observable for ads skipped by progress events
        var adSkippedObs = tracker.trackCb(this._ads.bind(this), [TrackerEvent_1.TrackerEventType.SKIPPED]);
        // observable for all adBreak events
        var adBreakObs = tracker.trackCb(this._adBreaks.bind(this), [TrackerEvent_1.TrackerEventType.COMPLETE, TrackerEvent_1.TrackerEventType.EXIT, TrackerEvent_1.TrackerEventType.INTERRUPT,
            TrackerEvent_1.TrackerEventType.START, TrackerEvent_1.TrackerEventType.ENTER, TrackerEvent_1.TrackerEventType.UPCOMING]);
        // observable for the rest of the ad events
        var adObs = tracker.trackCb(this._ads.bind(this), [TrackerEvent_1.TrackerEventType.START, TrackerEvent_1.TrackerEventType.ENTER, TrackerEvent_1.TrackerEventType.PROGRESS]);
        // merge the above observables, map to events and fire
        rxjs_1.Observable.merge(adCompleteObs, adSkippedObs, adBreakObs, adObs)
            .takeUntil(sandbox.destroyed)
            .flatMap(mapEvent) // convert ITrackerEvent to PlayerPlatformAPIEvent
            .filter(Boolean) // filter out undefineds if returned by mapEvent
            .subscribe(PlayerPlatformAPIEvents_1.emit); // fire event
        return this;
    };
    AdTracker.prototype.destroy = function () {
        this._tracker.destroy();
    };
    AdTracker.prototype._setupTrackerObservables = function () {
        var _this = this;
        var startObs = this._sandbox.streams.getPlayState(PlayerPlatformConstants_1.STATUS_INITIALIZED);
        var stopObs = this._sandbox.streams.getPlayState(PlayerPlatformConstants_1.STATUS_IDLE);
        var progWindow = ProgressWindow_1.ProgressWindow.createStopObservable(this._sandbox.streams.mediaProgresses, stopObs)
            .do(function (progress) { return progress.seeking = _this._sandbox.getPlayerStatus() === PlayerPlatformConstants_1.STATUS_SEEKING; })
            .distinctUntilChanged(function (x, y) { return x.equals(y); })
            .filter(filterDrift);
        return [startObs, progWindow];
    };
    /**
     * Creates a VideoAdBreak observable from the adManager timeline
     */
    AdTracker.prototype._adBreaks = function () {
        return rxjs_1.Observable.from(this._sandbox.getTimeline() || []);
    };
    /**
     * Creates a VideoAd observable by concatenating all ads from the ad breaks
     * retrieved from the timeline.
     */
    AdTracker.prototype._ads = function (progress) {
        var adBreaks = this._sandbox.getTimeline() || [];
        var ads = adBreaks.reduce(function (l, r) { return l.concat(r.ads); }, []);
        return rxjs_1.Observable.from(progress.nextRate < 0 ? ads.reverse() : ads);
    };
    AdTracker.logger = new Logger_1.Logger("AdTracker");
    return AdTracker;
}());
exports.AdTracker = AdTracker;
/**
 * Maps an `ITrackerEvent` to a `PlayerPlatformAPIEvent`
 */
function mapEvent(event) {
    var map = event.trackable instanceof VideoAdBreak_1.VideoAdBreak ? VIDEO_AD_BREAK_EVENT_MAP : VIDEO_AD_EVENT_MAP;
    var fn = map[event.type];
    if (!fn) {
        AdTracker.logger.error("A corresponding event was not found for tracking event " + TrackerEvent_1.TrackerEventType[event.type]);
        return rxjs_1.Observable.never();
    }
    else {
        // convert to array
        var arr = [].concat(fn);
        // convert array items to PlayerPlatformAPIEvents
        return rxjs_1.Observable.from(arr.map(function (val) { return val.fromTrackerEvent(event); }));
    }
}
/**
 * This filters out progress events that "drift" backwards or forwards
 * during trickplay. "Drift" happens when the position reported by a
 * progress event moves in the opposite direction when trickplaying.
 */
function filterDrift(progWindow) {
    if (progWindow.nextRate > 1) {
        return progWindow.prev < progWindow.next;
    }
    if (progWindow.nextRate < 0) {
        return progWindow.prev > progWindow.next;
    }
    return true;
}
var VIDEO_AD_EVENT_MAP = (_a = {},
    _a[TrackerEvent_1.TrackerEventType.START] = PlayerPlatformAPIEvents_1.AdStartEvent,
    _a[TrackerEvent_1.TrackerEventType.ENTER] = PlayerPlatformAPIEvents_1.AdStartEvent,
    _a[TrackerEvent_1.TrackerEventType.COMPLETE] = PlayerPlatformAPIEvents_1.AdCompleteEvent,
    _a[TrackerEvent_1.TrackerEventType.EXIT] = PlayerPlatformAPIEvents_1.AdExitedEvent,
    _a[TrackerEvent_1.TrackerEventType.INTERRUPT] = PlayerPlatformAPIEvents_1.AdExitedEvent,
    _a[TrackerEvent_1.TrackerEventType.PROGRESS] = PlayerPlatformAPIEvents_1.AdProgressEvent,
    _a[TrackerEvent_1.TrackerEventType.SKIPPED] = [PlayerPlatformAPIEvents_1.AdStartEvent, PlayerPlatformAPIEvents_1.AdCompleteEvent],
    _a);
var VIDEO_AD_BREAK_EVENT_MAP = (_b = {},
    _b[TrackerEvent_1.TrackerEventType.START] = PlayerPlatformAPIEvents_1.AdBreakStartEvent,
    _b[TrackerEvent_1.TrackerEventType.ENTER] = PlayerPlatformAPIEvents_1.AdBreakStartEvent,
    _b[TrackerEvent_1.TrackerEventType.COMPLETE] = PlayerPlatformAPIEvents_1.AdBreakCompleteEvent,
    _b[TrackerEvent_1.TrackerEventType.EXIT] = PlayerPlatformAPIEvents_1.AdBreakExitedEvent,
    _b[TrackerEvent_1.TrackerEventType.INTERRUPT] = PlayerPlatformAPIEvents_1.AdBreakExitedEvent,
    _b[TrackerEvent_1.TrackerEventType.UPCOMING] = PlayerPlatformAPIEvents_1.AdBreakUpcomingEvent,
    _b);
Application_1.registerModule("AdTracker", AdTracker);

},{"../../Application":483,"../../PlayerPlatformAPIEvents":489,"../../PlayerPlatformConstants":490,"../../util/Logger":571,"../../util/ProgressWindow":573,"../VideoAdBreak":498,"./TimelineTracker":527,"./TrackerEvent":528,"rxjs":281,"rxjs/add/observable/from":241,"rxjs/add/observable/merge":246,"rxjs/add/observable/never":247,"rxjs/add/operator/distinctUntilChanged":257,"rxjs/add/operator/do":259,"rxjs/add/operator/filter":260,"rxjs/add/operator/mergeMap":266,"rxjs/add/operator/takeUntil":276}],527:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var TrackerEvent_1 = require("./TrackerEvent");
var TrackerPredicates_1 = require("./TrackerPredicates");
var rxjs_1 = require("rxjs");
require("rxjs/add/observable/from");
require("rxjs/add/operator/mergeMap");
require("rxjs/add/operator/multicast");
require("rxjs/add/operator/switchMap");
var DEFAULT_TYPES = [
    TrackerEvent_1.TrackerEventType.COMPLETE,
    TrackerEvent_1.TrackerEventType.EXIT,
    TrackerEvent_1.TrackerEventType.START,
    TrackerEvent_1.TrackerEventType.ENTER,
    TrackerEvent_1.TrackerEventType.PROGRESS,
    TrackerEvent_1.TrackerEventType.SKIPPED,
    TrackerEvent_1.TrackerEventType.INTERRUPT
];
/**
 * Provides the ability to track certain events on a timeline given a `ITrackable` object.
 * These are tracked using an Observable returned from one of these methods. The stream
 * will fire `ITrackerEvent`s when the appropriate event is reached on the timeline.
 */
var TimelineTracker = /** @class */ (function () {
    function TimelineTracker(startObs, progressObs) {
        this._window = new rxjs_1.Subject();
        // use switchMap to start the progress stream over when a new item in the start stream is received
        startObs.switchMap(function () { return progressObs; }).multicast(this._window).connect();
    }
    /**
     * Tears down ProgressWindow subject by firing the complete event.
     */
    TimelineTracker.prototype.destroy = function () {
        this._window.complete();
    };
    /**
     * Determines what `ITrackerEvent`s should be fired for `trackable` given the location contained in the
     * given `progress` window.
     */
    TimelineTracker.prototype._trackProgress = function (progress, trackable, types) {
        return types
            .filter(function (type) { return TrackerPredicates_1.predicates[type](progress, trackable); })
            .map(function (type) { return ({ type: type, progress: progress, trackable: trackable }); });
    };
    /**
     * Tracks a given `trackable` object by monitoring the timeline and firing `ITrackerEvents` on the returned
     * observable stream. On each progress event, all event types given in the `types` array will be checked.
     */
    TimelineTracker.prototype.track = function (trackable, types) {
        var _this = this;
        if (types === void 0) { types = DEFAULT_TYPES; }
        return this._window.flatMap(function (progress) {
            return rxjs_1.Observable.from(_this._trackProgress(progress, trackable, types));
        });
    };
    /**
     * Tracks an Observable of `ITrackable` objects returned from the given callback by monitoring the timeline and
     * firing `ITrackerEvents` on the returned observable stream. On each progress event, all event types given in
     * the `types` array will be checked for every `ITrackable` in the Observable returned by the callback.
     */
    TimelineTracker.prototype.trackCb = function (cb, types) {
        var _this = this;
        if (types === void 0) { types = DEFAULT_TYPES; }
        return this._window.flatMap(function (progress) {
            return cb(progress).flatMap(function (trackable) {
                return rxjs_1.Observable.from(_this._trackProgress(progress, trackable, types));
            });
        });
    };
    return TimelineTracker;
}());
exports.TimelineTracker = TimelineTracker;

},{"./TrackerEvent":528,"./TrackerPredicates":529,"rxjs":281,"rxjs/add/observable/from":241,"rxjs/add/operator/mergeMap":266,"rxjs/add/operator/multicast":267,"rxjs/add/operator/switchMap":274}],528:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Available events for tracking on a timeline.
 */
var TrackerEventType;
(function (TrackerEventType) {
    TrackerEventType[TrackerEventType["START"] = 0] = "START";
    TrackerEventType[TrackerEventType["COMPLETE"] = 1] = "COMPLETE";
    TrackerEventType[TrackerEventType["ENTER"] = 2] = "ENTER";
    TrackerEventType[TrackerEventType["EXIT"] = 3] = "EXIT";
    TrackerEventType[TrackerEventType["PROGRESS"] = 4] = "PROGRESS";
    TrackerEventType[TrackerEventType["SKIPPED"] = 5] = "SKIPPED";
    TrackerEventType[TrackerEventType["INTERRUPT"] = 6] = "INTERRUPT";
    TrackerEventType[TrackerEventType["UPCOMING"] = 7] = "UPCOMING";
})(TrackerEventType = exports.TrackerEventType || (exports.TrackerEventType = {}));

},{}],529:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var _a;
var PlayerPlatformConstants_1 = require("../../PlayerPlatformConstants");
var TrackerEvent_1 = require("./TrackerEvent");
exports.predicates = (_a = {},
    /**
     * When a progress event goes from a position outside of a trackable to
     * a position inside of a trackable during playback/trickplay (NOT seeking).
     */
    _a[TrackerEvent_1.TrackerEventType.START] = function (progress, trackable) {
        return !progress.seeking && intoTrackable(progress, trackable);
    },
    /**
     * When a progress event goes from a position inside of a trackable to
     * a position inside of a trackable during playback/trickplay (NOT seeking).
     */
    _a[TrackerEvent_1.TrackerEventType.COMPLETE] = function (progress, trackable) {
        return !progress.seeking && outOfTrackable(progress, trackable);
    },
    /**
     * When a progress event goes from a position outside of a trackable to
     * a position inside of a trackable due to a seek.
     */
    _a[TrackerEvent_1.TrackerEventType.ENTER] = function (progress, trackable) {
        return progress.seeking && intoTrackable(progress, trackable);
    },
    /**
     * When a progress event goes from a position inside of a trackable to
     * a position inside of a trackable due to a seek.
     */
    _a[TrackerEvent_1.TrackerEventType.EXIT] = function (progress, trackable) {
        return progress.seeking && outOfTrackable(progress, trackable);
    },
    /**
     * When a progress event occurs while inside of a trackable.
     */
    _a[TrackerEvent_1.TrackerEventType.PROGRESS] = function (progress, trackable) {
        return !progress.stopped && trackable.coversLocation(progress.next);
    },
    /**
     * When a progress event goes from a position before the trackable startTime to a position
     * after the trackable endTime. OR when a progress event goes from a position after the
     * trackable endTime to a position before the trackable startTime. Essentially this should
     * determine if a trackable has been skipped or jumped over, likely due to trickplay.
     */
    _a[TrackerEvent_1.TrackerEventType.SKIPPED] = function (progress, trackable) {
        return skipped(progress, trackable);
    },
    /**
     * When the progress window is stopped while inside a trackable.
     */
    _a[TrackerEvent_1.TrackerEventType.INTERRUPT] = function (progress, trackable) {
        return progress.stopped && trackable.coversLocation(progress.prev);
    },
    /**
     * This determines if a trackable is coming up in the future. The amount of time to look
     * ahead into the future is calculated by multiplying the playback rate by 1000 (ms/sec).
     * This will only return true if the playback rate is greater than 1.
     */
    _a[TrackerEvent_1.TrackerEventType.UPCOMING] = function (progress, trackable) {
        if (progress.nextRate > 1) {
            var lookahead = progress.nextRate * PlayerPlatformConstants_1.MILLISECONDS_PER_SECOND;
            return trackable.isInRange(progress.next, progress.next + lookahead);
        }
        return false;
    },
    _a);
function intoTrackable(progress, trackable) {
    return !trackable.coversLocation(progress.prev) && trackable.coversLocation(progress.next);
}
function outOfTrackable(progress, trackable) {
    return trackable.coversLocation(progress.prev) && !trackable.coversLocation(progress.next);
}
function skipped(progress, trackable) {
    return (!progress.seeking && progress.duringTrickPlay())
        && ((trackable.startTime > progress.prev && trackable.endTime <= progress.next) ||
            (trackable.endTime <= progress.prev && trackable.startTime > progress.next));
}

},{"../../PlayerPlatformConstants":490,"./TrackerEvent":528}],530:[function(require,module,exports){
"use strict";
/**
 * Handles dispatching of analytics messages
 * @module
 */
Object.defineProperty(exports, "__esModule", { value: true });
var rxjs_1 = require("rxjs");
var Logger_1 = require("../util/Logger");
var Messages_1 = require("./Messages");
var FailedMessageStore_1 = require("./FailedMessageStore");
var SessionManager_1 = require("../handlers/SessionManager");
var logger = new Logger_1.Logger("AnalyticsProvider");
var protocol = "2.0";
var pluginName = "PlayerPlatformJS";
var messages = [];
var events = {};
var messageSeperator = "\u001E";
var isConfigured;
var isEnabled;
var deviceInfo;
var applicationInfo;
var timerId;
var failedTimerId;
var easUriPath = null;
var AnalyticsProvider = /** @class */ (function () {
    function AnalyticsProvider() {
    }
    /**
     * @param devInfo
     * @param config
     */
    AnalyticsProvider.prototype.configureAnalytics = function (devInfo, config) {
        this._config = config;
        this._messageOptions = devInfo.messageOptions;
        deviceInfo = {
            DEV_NAME: devInfo.deviceName,
            DEV_VER: devInfo.deviceVersion,
            DEV_ID: devInfo.deviceId,
            PHYSICAL_DEVICE_ID: devInfo.physicalId
        };
        applicationInfo = {
            APP_NAME: devInfo.appName,
            APP_VER: devInfo.appVersion,
            PLAYER_NAME: "",
            PLAYER_VER: "",
            PLUGIN_NAME: pluginName,
            PLUGIN_VER: __viperversion,
            SERVICE_ACCOUNT_ID: devInfo.accountId,
            xsctPartnerId: devInfo.xsctPartnerId
        };
        Messages_1.BaseMessage.inHomeStateCallback = this.createInHomeStateCallback(devInfo.inHomeState);
        isConfigured = true;
        isEnabled = true;
        easUriPath = null;
        if (isEnabled) {
            this.startTimers();
        }
        // Section 4.1.1 : xuaPluginInitialized sent any time configuration changes or plugin initialized.
        var pluginInitMessage = new Messages_1.PluginInitializedMessage();
        this.buildMessage(pluginInitMessage);
    };
    /**
     * Enable analytics. Analytics must also be configured to be used.
     */
    AnalyticsProvider.prototype.enable = function () {
        isEnabled = true;
        if (isConfigured) {
            this.startTimers();
        }
        else {
            logger.error("Analytics must be configured to send messages.s");
        }
    };
    /**
     * Disable analytics to prevent any messages from being sent.
     */
    AnalyticsProvider.prototype.disable = function () {
        clearInterval(timerId);
        clearInterval(failedTimerId);
        isEnabled = false;
    };
    AnalyticsProvider.prototype._getMONEY = function () {
        return {
            TRACE_ID: SessionManager_1.SessionManager.instance.moneyTrace.traceId,
            PARENT_ID: SessionManager_1.SessionManager.instance.moneyTrace.parentId,
            SPAN_ID: SessionManager_1.SessionManager.instance.moneyTrace.spanId
        };
    };
    AnalyticsProvider.prototype.setPlayerInfo = function (name, version) {
        applicationInfo.PLAYER_NAME = name;
        applicationInfo.PLAYER_VER = version;
    };
    /**
     * buildMessage will automtically queue a message to be sent.
     * @param {BaseMessage} message
     * @returns void
     */
    AnalyticsProvider.prototype.buildMessage = function (message) {
        if (!isEnabled || !isConfigured) {
            return;
        }
        message.APV = protocol;
        message.APP = applicationInfo;
        message.DEV = deviceInfo;
        message.SES.PSI = SessionManager_1.SessionManager.instance.sessionId;
        message.SES.PBI = SessionManager_1.SessionManager.instance.playbackCount;
        //message xuaEAS sets/clears easUriPath for future messages
        this.toggleXuaEAS(message);
        if (messages.length >= this._config.maxQueueSize) {
            messages.shift();
        }
        // Some assets may have overrideing values for accountId & deviceId
        // for the message. Expect preDispatch to be the last place for mutation
        // of the message object to occur.
        if (this._messageOptions && typeof this._messageOptions.preDispatch === "function") {
            this._messageOptions.preDispatch(message);
        }
        // plugin initialized is sent without delay and is not batched
        if (message.EVT.NAME === "xuaPluginInitialized") {
            this.sendMessages([message]);
        }
        else {
            messages.push(message);
            if ((this._config.maxBatchSize <= messages.length) || (message.EVT.NAME === "xuaHeartBeat")) {
                this.sendMessages(messages.splice(0));
            }
        }
    };
    /**
     * Either sets or clears the easUriPath by xuaEAS
     * @param {BaseMessage} message
     * @returns void
     */
    AnalyticsProvider.prototype.toggleXuaEAS = function (message) {
        var lastEasMessage = false;
        if (message.EVT.NAME === "xuaEAS") {
            if (message.EVT.VALUE.ACT === "Identified" || message.EVT.VALUE.ACT === "Initiated") {
                easUriPath = this.getPathnameFromUrl(message.EVT.VALUE.URI);
            }
            if (message.EVT.VALUE.ACT === "Completed" ||
                message.EVT.VALUE.ACT === "Exempted" ||
                message.EVT.VALUE.ACT === "Failed") {
                lastEasMessage = true;
            }
        }
        // Stuff EAS into message if within an EAS
        // Reset if this is the end of the EAS
        if (easUriPath) {
            message.EVT.EAS = easUriPath;
            if (lastEasMessage) {
                easUriPath = null;
            }
        }
    };
    AnalyticsProvider.prototype.getPathnameFromUrl = function (url) {
        if (!url) {
            return null;
        }
        var parser = document.createElement("a");
        var searchObject = {};
        var queries;
        var split;
        var i;
        // Let the browser do the work
        parser.href = url;
        // Convert query string to object
        queries = parser.search.replace(/^\?/, "").split("&");
        for (i = 0; i < queries.length; i++) {
            split = queries[i].split("=");
            searchObject[split[0]] = split[1];
        }
        return parser.pathname;
    };
    AnalyticsProvider.prototype.startTimers = function () {
        clearInterval(timerId);
        clearInterval(failedTimerId);
        timerId = setInterval(this.forceSendMessages.bind(this), this._config.batchInterval);
        failedTimerId = setInterval(this.sendFailedMessages.bind(this), FailedMessageStore_1.FAILED_BATCH_INTERVAL);
    };
    AnalyticsProvider.prototype.addListener = function (eventName, callback) {
        if (!events[eventName]) {
            events[eventName] = [];
        }
        var callbacks = events[eventName];
        callbacks.push(callback);
    };
    AnalyticsProvider.prototype.raiseEvent = function (eventName, args) {
        var callbacks = events[eventName];
        if (!callbacks) {
            return;
        }
        for (var i = 0, l = callbacks.length; i < l; i++) {
            callbacks[i].apply(null, args);
        }
    };
    AnalyticsProvider.prototype.forceSendMessages = function () {
        if (isEnabled && isConfigured) {
            this.sendMessages(messages.splice(0));
        }
    };
    AnalyticsProvider.prototype.sendFailedMessages = function () {
        if (isEnabled && isConfigured) {
            this.sendMessages(FailedMessageStore_1.getFailedMessages());
        }
    };
    AnalyticsProvider.prototype.handleErrorResponse = function (statusCode, failedMessages) {
        if (statusCode && statusCode !== 403) {
            FailedMessageStore_1.addFailedMessages(failedMessages);
        }
        this.raiseEvent("analyticsFailure", [statusCode, failedMessages]);
    };
    AnalyticsProvider.prototype.handleSuccessResponse = function (statusCode) {
        this.raiseEvent("analyticsSuccess", [statusCode]);
    };
    AnalyticsProvider.prototype._appendMONEY = function (message) {
        if (message.EVT.NAME !== "xuaPluginInitialized") {
            message.MONEY = this._getMONEY();
            SessionManager_1.SessionManager.instance.moneyTrace.createTraceMessage();
        }
        return message;
    };
    /**
     * Concatenate messages with message separator and send the resulting string to
     * the analytics endpoint.
     *
     * @param messageArr - Array of message objects
     */
    AnalyticsProvider.prototype.sendMessages = function (messageArr) {
        var _this = this;
        if (!messageArr.length) {
            return;
        }
        // stringify each element and join with message separator
        var jsonToSend = messageArr
            .map(this._appendMONEY.bind(this))
            .map(function (value) { return JSON.stringify(value); })
            .join(messageSeperator);
        rxjs_1.Observable.ajax({
            url: this._config.analyticsUrl,
            headers: { "X-Date": Date.now().toString() },
            body: jsonToSend,
            method: "POST"
        })
            .subscribe(function () { return _this.handleSuccessResponse(200); }, function (error) { return _this.handleErrorResponse(error ? error.status : null, messageArr); });
    };
    /**
     * Creates a function using a given callback and returns another
     * function with the correct format for an "in home" state string.
     * If <code>inHomeState</code> is any type other than a function, the
     * state will default to "unknown"
     *
     * @param {Function} inHomeState - callback that returns in home state
     * @returns {Function}
     */
    AnalyticsProvider.prototype.createInHomeStateCallback = function (inHomeState) {
        return function () {
            var state = typeof inHomeState === "function" ? inHomeState() : "unknown";
            switch (state.toLowerCase()) {
                case "inhome":
                    return "inHome";
                case "outofhome":
                    return "outOfHome";
                default:
                    logger.warn("Invalid in home state (" + state.toLowerCase() + "), defaulting to 'unknown'");
                    return "unknown";
            }
        };
    };
    return AnalyticsProvider;
}());
exports.AnalyticsProvider = AnalyticsProvider;

},{"../handlers/SessionManager":565,"../util/Logger":571,"./FailedMessageStore":532,"./Messages":533,"rxjs":281}],531:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var T6_RE = /^(title6|cDvr)/;
var LINEAR_RE = /Linear$/;
var VOD_RE = /Vod$/;
var CDVR_RE = /cDvr/;
function toRegulatoryClass(assetType) {
    var regClass = "NONE";
    if (T6_RE.test(assetType)) {
        regClass = "T6";
    }
    return regClass;
}
function toAssetClass(assetType) {
    var assetClass = null;
    if (LINEAR_RE.test(assetType)) {
        assetClass = "Linear";
    }
    else if (VOD_RE.test(assetType)) {
        assetClass = "VOD";
    }
    else if (CDVR_RE.test(assetType)) {
        assetClass = "cDVR";
    }
    return assetClass;
}
var PAIDAsset = /** @class */ (function () {
    function PAIDAsset(providerId, assetId, assetType, mediaGuid) {
        this.ID_TYPE = "PAID";
        this.PLAYBACK_TYPE = "STREAM";
        this.INFO = {};
        this.SECURITY = "FALSE";
        this.CLASS = toAssetClass(assetType) || "VOD";
        this.RegulatoryClass = toRegulatoryClass(assetType);
        this.IDS = {
            PID: providerId,
            AID: assetId,
            MediaGUID: mediaGuid
        };
        this.INFO = {};
    }
    return PAIDAsset;
}());
exports.PAIDAsset = PAIDAsset;
var GenericAsset = /** @class */ (function () {
    function GenericAsset(mediaGuid, assetType, mediaId) {
        this.ID_TYPE = "GenericId";
        this.PLAYBACK_TYPE = "STREAM";
        this.INFO = {};
        this.SECURITY = "FALSE";
        this.CLASS = toAssetClass(assetType) || "VOD";
        this.RegulatoryClass = toRegulatoryClass(assetType);
        this.IDS = {
            NS: "CIM",
            MediaGUID: mediaGuid,
            MEDIA_ID: mediaId
        };
    }
    return GenericAsset;
}());
exports.GenericAsset = GenericAsset;
var STRIDAsset = /** @class */ (function () {
    function STRIDAsset(streamId, assetType, vstrm) {
        this.vstrm = vstrm;
        this.ID_TYPE = "StreamId";
        this.CLASS = "Linear";
        this.PLAYBACK_TYPE = "STREAM";
        this.INFO = {};
        this.SECURITY = "FALSE";
        this.RegulatoryClass = toRegulatoryClass(assetType);
        this.IDS = {
            STRID: streamId
        };
        this.VSTRM = vstrm || {};
    }
    return STRIDAsset;
}());
exports.STRIDAsset = STRIDAsset;
var RIDAsset = /** @class */ (function () {
    function RIDAsset(recordingId, assetType) {
        this.ID_TYPE = "RecordingId";
        this.CLASS = "cDVR";
        this.PLAYBACK_TYPE = "STREAM";
        this.INFO = {};
        this.SECURITY = "FALSE";
        this.RegulatoryClass = toRegulatoryClass(assetType);
        this.IDS = {
            RECID: recordingId
        };
    }
    return RIDAsset;
}());
exports.RIDAsset = RIDAsset;
var EASAsset = /** @class */ (function () {
    function EASAsset(easPath) {
        this.ID_TYPE = "EAS_URI";
        this.CLASS = "EAS";
        this.PLAYBACK_TYPE = "STREAM";
        this.RegulatoryClass = "NONE";
        this.INFO = {};
        this.SECURITY = "FALSE";
        this.IDS = {
            EAS_URI: easPath
        };
    }
    return EASAsset;
}());
exports.EASAsset = EASAsset;

},{}],532:[function(require,module,exports){
"use strict";
/**
 * Created by chesli200 on 2/3/15.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * This store uses localStorage when available, otherwise it just saves
 * messages in memory.
 */
var Logger_1 = require("../util/Logger");
var KEY = "failedMessages";
var MAX_SIZE = 10000;
var BATCH_SIZE = 1000;
exports.FAILED_BATCH_INTERVAL = 60000;
var logger = new Logger_1.Logger("FailedMessageStore");
var messageQueue = isLocalStorageAvailable() ? getSavedMessages() : [];
/**
 * Add messages to queue and write to localStorage if it's available.
 * This sorts messages by EVT.ETS value and then resizes array to be
 * of length <code>MAX_SIZE</code> (default 10000)
 *
 * @param messages
 */
function addFailedMessages(messages) {
    logger.trace("Saving messages in failed message store.");
    if (Array.isArray(messages)) {
        messageQueue = messageQueue.concat(messages);
    }
    else {
        messageQueue.push(messages);
    }
    // sort by timestamp
    messageQueue.sort(sortByETS);
    // resize
    messageQueue.splice(0, messageQueue.length - MAX_SIZE);
    write();
}
exports.addFailedMessages = addFailedMessages;
/**
 * Removes <code>num</code> messages from the start of the queue and returns
 * an array. If no <code>num</code> parameter is given, it will return an array
 * of length <code>BATCH_SIZE</code> (default 1000). This method also removes those
 * messages from the queue.
 *
 * @param num - number of messages to retrieve
 * @returns {Array.<Object>|*}
 */
function getFailedMessages(num) {
    if (num === void 0) { num = BATCH_SIZE; }
    var messages = messageQueue.splice(0, num);
    write();
    return messages;
}
exports.getFailedMessages = getFailedMessages;
function getSavedMessages() {
    return JSON.parse(localStorage.getItem(KEY)) || [];
}
function write() {
    if (isLocalStorageAvailable()) {
        localStorage.setItem(KEY, JSON.stringify(messageQueue));
    }
}
function isLocalStorageAvailable() {
    var test = "test";
    try {
        localStorage.setItem(test, test);
        localStorage.removeItem(test);
        return true;
    }
    catch (e) {
        return false;
    }
}
function sortByETS(msg1, msg2) {
    return msg1.EVT.ETS - msg2.EVT.ETS;
}

},{"../util/Logger":571}],533:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var SECONDS_IN_YEAR = 60 * 60 * 24 * 365;
var MAX_BIT_RATE = 600000000;
// Some Analytics have fields which are recommended. Test a value for validity.
function validateNumber(val, legalMin, legalMax) {
    return (!isNaN(val) && val >= legalMin && val <= legalMax);
}
// Some Analytics have fields which are required. Coalesce a value to a valid value.
function enforceNumber(val, legalMin, legalMax) {
    var retValue;
    if (!isNaN(val)) {
        retValue = Math.max(legalMin, Math.min(legalMax, val));
    }
    else {
        retValue = legalMin;
    }
    return retValue;
}
var BaseMessage = /** @class */ (function () {
    function BaseMessage(eventName, xuaAsset) {
        this.APP = {};
        this.DEV = {};
        this.SES = {};
        this.MONEY = {};
        this.EVT = {};
        this.EVT = {
            ETS: 0,
            NAME: eventName,
            ASSET: xuaAsset,
            VALUE: {},
            NET: { IHS: BaseMessage.inHomeStateCallback() }
        };
        if (xuaAsset) {
            this.EVT.NET.SECURITY = xuaAsset.SECURITY;
        }
        this.setTimestamp(new Date());
    }
    BaseMessage.prototype.setTimestamp = function (eventTimestamp) {
        this.EVT.ETS = eventTimestamp.getTime().toString();
    };
    return BaseMessage;
}());
exports.BaseMessage = BaseMessage;
var HeartbeatMessage = /** @class */ (function (_super) {
    __extends(HeartbeatMessage, _super);
    function HeartbeatMessage(xuaAsset, currentPosition, bitrate, fps, cc, sap, envInfo, fragmentInfo) {
        var _this = _super.call(this, "xuaHeartBeat", xuaAsset) || this;
        // Recommended but not required fields.
        _this.validateAndSetPosition(currentPosition);
        _this.validateAndSetBitrate(bitrate);
        _this.validateAndSetFPS(fps);
        _this.validateAndSetCC(cc);
        _this.setFragmentInfo(fragmentInfo);
        _this.setEnvInfo(envInfo);
        _this.validateAndSetSAP(sap);
        if (Object.keys(_this.EVT.VALUE).length === 0) {
            delete _this.EVT.VALUE;
        }
        return _this;
    }
    HeartbeatMessage.prototype.validateAndSetPosition = function (position) {
        if (validateNumber(position, 0, SECONDS_IN_YEAR)) {
            this.EVT.VALUE.POS = position;
        }
    };
    HeartbeatMessage.prototype.validateAndSetBitrate = function (bitrate) {
        if (validateNumber(bitrate, 1, MAX_BIT_RATE)) {
            this.EVT.VALUE.XBR = bitrate;
        }
    };
    HeartbeatMessage.prototype.validateAndSetFPS = function (fps) {
        if (validateNumber(fps, 0, 60)) {
            this.EVT.VALUE.XFS = fps;
        }
    };
    HeartbeatMessage.prototype.validateAndSetCC = function (cc) {
        if (cc && (cc.length !== 0)) {
            this.EVT.VALUE.CC = cc;
        }
    };
    HeartbeatMessage.prototype.validateAndSetSAP = function (sap) {
        if (sap && (sap.length !== 0)) {
            this.EVT.VALUE.SAP = sap;
        }
    };
    HeartbeatMessage.prototype.setFragmentInfo = function (fragmentInfo) {
        if (fragmentInfo) {
            this.EVT.FRAGMENT = {
                NOF: fragmentInfo.count,
                FSZ: fragmentInfo.fragmentSize,
                LAT: 0,
                DLD: fragmentInfo.downloadDuration,
                DUR: fragmentInfo.fragmentDuration
            };
        }
    };
    HeartbeatMessage.prototype.setEnvInfo = function (envInfo) {
        if (envInfo) {
            this.EVT.ENV = envInfo;
        }
    };
    return HeartbeatMessage;
}(BaseMessage));
exports.HeartbeatMessage = HeartbeatMessage;
var PluginInitializedMessage = /** @class */ (function (_super) {
    __extends(PluginInitializedMessage, _super);
    function PluginInitializedMessage() {
        var _this = _super.call(this, "xuaPluginInitialized") || this;
        _this.EVT.VALUE = {
            PLAYER_ID: "PlayerPlatformJS",
            PLAYER_VER: __viperversion,
            ORGANIZATION: "VIPER",
            NATIVE: false,
            SUPPORT_VOD: true,
            SUPPORT_LINEAR: true,
            SUPPORT_CDVR: true
        };
        return _this;
    }
    return PluginInitializedMessage;
}(BaseMessage));
exports.PluginInitializedMessage = PluginInitializedMessage;
/**
 * Core Event
 * Section 4.2.1 : xuaOpeningMedia
 */
var OpeningMediaMessage = /** @class */ (function (_super) {
    __extends(OpeningMediaMessage, _super);
    function OpeningMediaMessage(xuaAsset, manifestUrl) {
        var _this = _super.call(this, "xuaOpeningMedia", xuaAsset) || this;
        _this.EVT.VALUE.MANIF = manifestUrl;
        return _this;
    }
    return OpeningMediaMessage;
}(BaseMessage));
exports.OpeningMediaMessage = OpeningMediaMessage;
/**
 * Core Event
 * Section 4.2.2 : xuaMediaOpened
 */
var MediaOpenedMessage = /** @class */ (function (_super) {
    __extends(MediaOpenedMessage, _super);
    function MediaOpenedMessage(xuaAsset, channelOpenningLatency, currentPosition, manifestUrl, numAds) {
        if (numAds === void 0) { numAds = 0; }
        var _this = _super.call(this, "xuaMediaOpened", xuaAsset) || this;
        _this.EVT.VALUE.POS = enforceNumber(currentPosition, 0, SECONDS_IN_YEAR);
        _this.EVT.VALUE.LAT = channelOpenningLatency;
        _this.EVT.VALUE.MANIF = manifestUrl;
        _this.EVT.VALUE.NUMADS = numAds;
        return _this;
    }
    return MediaOpenedMessage;
}(BaseMessage));
exports.MediaOpenedMessage = MediaOpenedMessage;
/**
 * Core Event
 * Section 4.2.3 : xuaMediaFailed
 */
var MediaFailedMessage = /** @class */ (function (_super) {
    __extends(MediaFailedMessage, _super);
    function MediaFailedMessage(xuaAsset, code, description, errPosition, manifestUrl, adError, playerStatus) {
        var _this = _super.call(this, "xuaMediaFailed", xuaAsset) || this;
        _this.EVT.VALUE.CODE = code;
        _this.EVT.VALUE.DESCR = description;
        _this.EVT.VALUE.POS = enforceNumber(errPosition, 0, SECONDS_IN_YEAR);
        _this.EVT.VALUE.MANIF = manifestUrl;
        _this.EVT.VALUE.AD_ERROR = adError;
        if (playerStatus) {
            _this.EVT.VALUE.STATUS = playerStatus;
        }
        return _this;
    }
    return MediaFailedMessage;
}(BaseMessage));
exports.MediaFailedMessage = MediaFailedMessage;
/**
 * Core Event
 * Section 4.2.4 : xuaMediaEnded
 */
var MediaEndedMessage = /** @class */ (function (_super) {
    __extends(MediaEndedMessage, _super);
    function MediaEndedMessage(xuaAsset) {
        return _super.call(this, "xuaMediaEnded", xuaAsset) || this;
    }
    return MediaEndedMessage;
}(BaseMessage));
exports.MediaEndedMessage = MediaEndedMessage;
var MediaInfoMessage = /** @class */ (function (_super) {
    __extends(MediaInfoMessage, _super);
    function MediaInfoMessage(xuaAsset, position, description) {
        var _this = _super.call(this, "xuaMediaInfo", xuaAsset) || this;
        _this.EVT.VALUE.POS = enforceNumber(position, 0, SECONDS_IN_YEAR);
        _this.EVT.VALUE.DESCR = description;
        return _this;
    }
    return MediaInfoMessage;
}(BaseMessage));
exports.MediaInfoMessage = MediaInfoMessage;
/**
 * Core Event
 * Section 4.2.5 : xuaBitrateChanged
 */
var BitrateChangedMessage = /** @class */ (function (_super) {
    __extends(BitrateChangedMessage, _super);
    function BitrateChangedMessage(xuaAsset, bitrate) {
        var _this = _super.call(this, "xuaBitrateChanged", xuaAsset) || this;
        _this.EVT.VALUE.XBR = enforceNumber(bitrate, 0, MAX_BIT_RATE);
        return _this;
    }
    return BitrateChangedMessage;
}(BaseMessage));
exports.BitrateChangedMessage = BitrateChangedMessage;
/**
 * Core Event
 * Section 4.2.6 : xuaFPSChanged
 */
var FPSChangedMessage = /** @class */ (function (_super) {
    __extends(FPSChangedMessage, _super);
    function FPSChangedMessage(xuaAsset, fps) {
        var _this = _super.call(this, "xuaFPSChanged", xuaAsset) || this;
        _this.EVT.VALUE.XFS = enforceNumber(fps, 1, 60);
        return _this;
    }
    return FPSChangedMessage;
}(BaseMessage));
exports.FPSChangedMessage = FPSChangedMessage;
var PlayStateChangedMessage = /** @class */ (function (_super) {
    __extends(PlayStateChangedMessage, _super);
    function PlayStateChangedMessage(xuaAsset, playerState) {
        var _this = _super.call(this, "xuaPlayStateChanged", xuaAsset) || this;
        _this.EVT.VALUE.VAL = playerState;
        return _this;
    }
    return PlayStateChangedMessage;
}(BaseMessage));
exports.PlayStateChangedMessage = PlayStateChangedMessage;
/**
 * Core Event
 * Section 4.2.10 : xuaAdProgress
 */
var AdProgressMessage = /** @class */ (function (_super) {
    __extends(AdProgressMessage, _super);
    function AdProgressMessage(xuaAsset, adProgress, adService, adId) {
        var _this = _super.call(this, "xuaAdProgress", xuaAsset) || this;
        _this.EVT.VALUE.VAL = enforceNumber(adProgress, 0, 100);
        _this.EVT.VALUE.AD_SERVICE = adService ? adService : "Other";
        _this.EVT.VALUE.AD_ID = adId ? adId : "Unknown";
        return _this;
    }
    return AdProgressMessage;
}(BaseMessage));
exports.AdProgressMessage = AdProgressMessage;
/**
 * Custom Event
 *               : xuaAdExited
 */
var AdExitedMessage = /** @class */ (function (_super) {
    __extends(AdExitedMessage, _super);
    function AdExitedMessage(xuaAsset) {
        return _super.call(this, "xuaAdExited", xuaAsset) || this;
    }
    return AdExitedMessage;
}(BaseMessage));
exports.AdExitedMessage = AdExitedMessage;
/**
 * Custom Event
 *               : xuaAdBreakStart
 */
var AdBreakStartMessage = /** @class */ (function (_super) {
    __extends(AdBreakStartMessage, _super);
    function AdBreakStartMessage(xuaAsset) {
        return _super.call(this, "xuaAdBreakStart", xuaAsset) || this;
    }
    return AdBreakStartMessage;
}(BaseMessage));
exports.AdBreakStartMessage = AdBreakStartMessage;
/**
 * Custom Event
 *               : xuaAdBreakComplete
 */
var AdBreakCompleteMessage = /** @class */ (function (_super) {
    __extends(AdBreakCompleteMessage, _super);
    function AdBreakCompleteMessage(xuaAsset) {
        return _super.call(this, "xuaAdBreakComplete", xuaAsset) || this;
    }
    return AdBreakCompleteMessage;
}(BaseMessage));
exports.AdBreakCompleteMessage = AdBreakCompleteMessage;
var AdBreakExitedMessage = /** @class */ (function (_super) {
    __extends(AdBreakExitedMessage, _super);
    function AdBreakExitedMessage(xuaAsset) {
        return _super.call(this, "xuaAdBreakExited", xuaAsset) || this;
    }
    return AdBreakExitedMessage;
}(BaseMessage));
exports.AdBreakExitedMessage = AdBreakExitedMessage;
/**
 * Core Event
 * Section 4.2.10 : xuaFragmentWarning
 */
var FragmentWarningMessage = /** @class */ (function (_super) {
    __extends(FragmentWarningMessage, _super);
    function FragmentWarningMessage(xuaAsset, fragmentInfo) {
        var _this = _super.call(this, "xuaFragmentWarning", xuaAsset) || this;
        _this.EVT.VALUE = {
            URL: fragmentInfo.fragmentUrl,
            FSZ: fragmentInfo.fragmentSize,
            LAT: 0,
            DLD: fragmentInfo.downloadDuration,
            DUR: fragmentInfo.fragmentDuration
        };
        return _this;
    }
    return FragmentWarningMessage;
}(BaseMessage));
exports.FragmentWarningMessage = FragmentWarningMessage;
/**
 * Core Event
 * Section 4.2.11 : xuaError
 */
var ApplicationErrorMessage = /** @class */ (function (_super) {
    __extends(ApplicationErrorMessage, _super);
    function ApplicationErrorMessage(xuaAsset, errorCode, errorClass, errorDescription, warning, retryCount, adError, fallback, fallbackType, manifestUrl, playerStatus) {
        var _this = _super.call(this, "xuaError", xuaAsset) || this;
        _this.EVT.VALUE.CODE = errorCode;
        _this.EVT.VALUE.AD_ERROR = adError;
        _this.EVT.VALUE.WARNING = warning;
        _this.EVT.VALUE.MANIF = manifestUrl;
        if (errorClass) {
            _this.EVT.VALUE.CLASS = errorClass;
        }
        if (errorDescription) {
            _this.EVT.VALUE.DESCR = errorDescription;
        }
        if (retryCount) {
            _this.EVT.VALUE.RETRY = retryCount;
        }
        if (fallback) {
            _this.EVT.VALUE.FALLBACK = fallback;
        }
        if (fallbackType) {
            _this.EVT.VALUE.FALLBACK_TYPE = fallbackType;
        }
        if (playerStatus) {
            _this.EVT.VALUE.STATUS = playerStatus;
        }
        return _this;
    }
    return ApplicationErrorMessage;
}(BaseMessage));
exports.ApplicationErrorMessage = ApplicationErrorMessage;
/**
 * Core Event
 * Section 4.2.13 : xuaEAS
 */
var EmergencyAlertMessage = /** @class */ (function (_super) {
    __extends(EmergencyAlertMessage, _super);
    function EmergencyAlertMessage(action, easLang, uriPath, errorCode) {
        var _this = _super.call(this, "xuaEAS") || this;
        _this.EVT.VALUE.ACT = action;
        _this.EVT.VALUE.LANG = easLang;
        _this.EVT.VALUE.URI = uriPath;
        if (errorCode) {
            _this.EVT.VALUE.CODE = errorCode;
        }
        return _this;
    }
    return EmergencyAlertMessage;
}(BaseMessage));
exports.EmergencyAlertMessage = EmergencyAlertMessage;
/**
 * Trick Play Event
 * Section 4.3.1 : xuaTrickPlay
 */
var TrickPlayMessage = /** @class */ (function (_super) {
    __extends(TrickPlayMessage, _super);
    function TrickPlayMessage(xuaAsset, currentPosition, trickPlayType) {
        var _this = _super.call(this, "xuaTrickPlay", xuaAsset) || this;
        _this.EVT.VALUE.TYPE = trickPlayType;
        _this.EVT.VALUE.POS = enforceNumber(currentPosition, 0, SECONDS_IN_YEAR);
        return _this;
    }
    return TrickPlayMessage;
}(BaseMessage));
exports.TrickPlayMessage = TrickPlayMessage;
/**
 * Trick Play Event
 * Section 4.3.2 : xuaScrubStarted
 */
var ScrubStartedMessage = /** @class */ (function (_super) {
    __extends(ScrubStartedMessage, _super);
    function ScrubStartedMessage(currentPosition, xuaAsset) {
        var _this = _super.call(this, "xuaScrubStarted", xuaAsset) || this;
        _this.EVT.VALUE.POS = enforceNumber(currentPosition, 0, SECONDS_IN_YEAR);
        return _this;
    }
    return ScrubStartedMessage;
}(BaseMessage));
exports.ScrubStartedMessage = ScrubStartedMessage;
/**
 * Trick Play Event
 * Section 4.3.3 : xuaScrubEnded
 *
 */
var ScrubEndedMessage = /** @class */ (function (_super) {
    __extends(ScrubEndedMessage, _super);
    function ScrubEndedMessage(currentPosition, xuaAsset) {
        var _this = _super.call(this, "xuaScrubEnded", xuaAsset) || this;
        _this.EVT.VALUE.POS = enforceNumber(currentPosition, 0, SECONDS_IN_YEAR);
        return _this;
    }
    return ScrubEndedMessage;
}(BaseMessage));
exports.ScrubEndedMessage = ScrubEndedMessage;
/**
 * Buffer Start Event
 */
var BufferStartMessage = /** @class */ (function (_super) {
    __extends(BufferStartMessage, _super);
    function BufferStartMessage(xuaAsset, betype, position) {
        var _this = _super.call(this, "xuaBufferEvent", xuaAsset) || this;
        _this.EVT.VALUE.TYPE = betype;
        _this.EVT.VALUE.STATE = "start";
        _this.EVT.VALUE.POS = position;
        return _this;
    }
    BufferStartMessage.prototype.setTimestamp = function (date) {
        _super.prototype.setTimestamp.call(this, date);
        this.EVT.VALUE.START = this.EVT.ETS;
    };
    return BufferStartMessage;
}(BaseMessage));
exports.BufferStartMessage = BufferStartMessage;
/**
 * Buffer Complete Event
 */
var BufferCompleteMessage = /** @class */ (function (_super) {
    __extends(BufferCompleteMessage, _super);
    function BufferCompleteMessage(xuaAsset, betype, startPosition, position) {
        var _this = _super.call(this, "xuaBufferEvent", xuaAsset) || this;
        _this.EVT.VALUE.TYPE = betype;
        _this.EVT.VALUE.STATE = "stop";
        _this.EVT.VALUE.START = startPosition;
        _this.EVT.VALUE.POS = position;
        return _this;
    }
    return BufferCompleteMessage;
}(BaseMessage));
exports.BufferCompleteMessage = BufferCompleteMessage;
/**
 * PlaybackStarted Event : xuaPlaybackStarted
 */
var PlaybackStartedMessage = /** @class */ (function (_super) {
    __extends(PlaybackStartedMessage, _super);
    function PlaybackStartedMessage(xuaAsset) {
        return _super.call(this, "xuaPlaybackStarted", xuaAsset) || this;
    }
    return PlaybackStartedMessage;
}(BaseMessage));
exports.PlaybackStartedMessage = PlaybackStartedMessage;
/**
 * xuaDiagnosticEvent
 */
var DiagnosticEventMessage = /** @class */ (function (_super) {
    __extends(DiagnosticEventMessage, _super);
    function DiagnosticEventMessage(results) {
        var _this = _super.call(this, "xuaDiagnosticEvent") || this;
        var totalDuration = 0;
        for (var _i = 0, results_1 = results; _i < results_1.length; _i++) {
            var result = results_1[_i];
            _this.EVT.VALUE[result.test.name] = {
                SUCCESS: result.success,
                DURATION: result.duration
            };
            totalDuration += result.duration;
        }
        _this.EVT.VALUE.DURATION = totalDuration;
        return _this;
    }
    return DiagnosticEventMessage;
}(BaseMessage));
exports.DiagnosticEventMessage = DiagnosticEventMessage;
/**
 * xuaStreamSwitch
 */
var StreamSwitchMessage = /** @class */ (function (_super) {
    __extends(StreamSwitchMessage, _super);
    function StreamSwitchMessage(xuaAsset) {
        return _super.call(this, "xuaStreamSwitch", xuaAsset) || this;
    }
    return StreamSwitchMessage;
}(BaseMessage));
exports.StreamSwitchMessage = StreamSwitchMessage;

},{}],534:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var events = require("../PlayerPlatformAPIEvents");
/**
 * Playback State Monitor
 * Monitors playback to determine the state of playback.
 * @constructor
 */
var PlaybackStateMonitor = /** @class */ (function () {
    function PlaybackStateMonitor() {
    }
    PlaybackStateMonitor.prototype.init = function () {
        this.attachEvents();
    };
    PlaybackStateMonitor.prototype.attachEvents = function () {
        events.addEventListener(events.AD_START, this.onAdEvent, {}, this);
        events.addEventListener(events.AD_EXITED, this.onAdEvent, {}, this);
        events.addEventListener(events.AD_COMPLETE, this.onAdEvent, {}, this);
    };
    PlaybackStateMonitor.prototype.onAdEvent = function (event) {
        this.lastAdEvent = event;
    };
    /**
     * Determines if an ad is currently playing.
     * @returns iff an ad is being played
     */
    PlaybackStateMonitor.prototype.isAdPlaying = function () {
        return this.lastAdEvent instanceof events.AdStartEvent;
    };
    PlaybackStateMonitor.prototype.destroy = function () {
        events.removeEventListener(events.AD_START, this.onAdEvent);
        events.removeEventListener(events.AD_EXITED, this.onAdEvent);
        events.removeEventListener(events.AD_COMPLETE, this.onAdEvent);
    };
    return PlaybackStateMonitor;
}());
exports.PlaybackStateMonitor = PlaybackStateMonitor;

},{"../PlayerPlatformAPIEvents":489}],535:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Assets_1 = require("./Assets");
var ContentOptions_1 = require("../assets/ContentOptions");
var Logger_1 = require("../util/Logger");
var VssAsset_1 = require("../assets/VssAsset");
var ConfigurationManager_1 = require("../ConfigurationManager");
var XuaAssetFactory = /** @class */ (function () {
    function XuaAssetFactory() {
        this._logger = new Logger_1.Logger("XuaAssetFactory");
    }
    XuaAssetFactory.prototype._isPAIDAsset = function (asset) {
        return asset.providerId > "" && asset.assetId > "";
    };
    XuaAssetFactory.prototype._isGENERICAsset = function (asset) {
        return Boolean(asset.mediaGuid || asset.assetId);
    };
    XuaAssetFactory.prototype._isRIDAsset = function (asset) {
        return asset.recordingId > "";
    };
    XuaAssetFactory.prototype._isSTRIDAsset = function (asset) {
        return asset.streamId > "";
    };
    XuaAssetFactory.prototype.create = function (asset) {
        var xuaAsset;
        if (this._isPAIDAsset(asset)) {
            xuaAsset = new Assets_1.PAIDAsset(asset.providerId, asset.assetId, asset.assetType, asset.mediaGuid);
        }
        else if (this._isGENERICAsset(asset)) {
            xuaAsset = new Assets_1.GenericAsset(asset.mediaGuid, asset.assetType, asset.assetId);
        }
        else if (this._isRIDAsset(asset)) {
            xuaAsset = new Assets_1.RIDAsset(asset.recordingId, asset.assetType);
        }
        else if (this._isSTRIDAsset(asset)) {
            xuaAsset = new Assets_1.STRIDAsset(asset.streamId, asset.assetType, this.buildVstream(asset));
        }
        else if (ContentOptions_1.isEAS(asset)) {
            xuaAsset = new Assets_1.EASAsset(asset.easPath);
        }
        else {
            this._logger.warn("Unable to build XuaAsset for provided asset", asset);
        }
        if (xuaAsset && ContentOptions_1.FOG_RE.test(asset.url)) {
            xuaAsset.PLAYBACK_TYPE = "FOG";
        }
        if (xuaAsset && ConfigurationManager_1.ConfigurationManager.getInstance().getByAssetType(asset.assetType, ConfigurationManager_1.ConfigurationManager.FORCE_HTTPS, false)) {
            xuaAsset.SECURITY = "TRUE";
        }
        return xuaAsset;
    };
    XuaAssetFactory.prototype.buildVstream = function (asset) {
        if (asset instanceof VssAsset_1.VssAsset) {
            return {
                SRCID: asset.sourceStreamId,
                SIGID: asset.signalId,
                SRVZONE: asset.serviceZone
            };
        }
    };
    return XuaAssetFactory;
}());
exports.XuaAssetFactory = XuaAssetFactory;

},{"../ConfigurationManager":484,"../assets/ContentOptions":538,"../assets/VssAsset":542,"../util/Logger":571,"./Assets":531}],536:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var BaseAsset_1 = require("./BaseAsset");
var ConfigurationManager_1 = require("../ConfigurationManager");
var OttAsset_1 = require("./OttAsset");
var VssAsset_1 = require("./VssAsset");
/**
 * Factory class for creating assets
 */
var AssetFactory = /** @class */ (function () {
    function AssetFactory() {
    }
    AssetFactory.isVssEnabled = function (assetType) {
        var type = BaseAsset_1.AssetTypeMapping[assetType] || assetType;
        return ConfigurationManager_1.ConfigurationManager.getInstance().getByAssetType(type, ConfigurationManager_1.ConfigurationManager.VSS_ENABLED, false);
    };
    AssetFactory.create = function (url, contentOptions) {
        if (contentOptions === void 0) { contentOptions = {}; }
        var asset;
        if (contentOptions.assetType === BaseAsset_1.TVE_LINEAR_VSS &&
            AssetFactory.isVssEnabled(contentOptions.assetType)) {
            asset = new VssAsset_1.VssAsset(url, contentOptions);
        }
        else if (contentOptions.assetType === BaseAsset_1.OTT) {
            asset = new OttAsset_1.OttAsset(url, contentOptions);
        }
        else {
            asset = new BaseAsset_1.BaseAsset(url, contentOptions);
        }
        return asset;
    };
    return AssetFactory;
}());
exports.AssetFactory = AssetFactory;

},{"../ConfigurationManager":484,"./BaseAsset":537,"./OttAsset":540,"./VssAsset":542}],537:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var _a;
var ContentOptions_1 = require("./ContentOptions");
var Logger_1 = require("../util/Logger");
exports.RESUME_FROM_LIVE_POINT = -1;
exports.RESUME_FROM_START = 0;
/**
 * Asset url formats
 */
exports.AssetUrlType = {
    URLTYPE_M3U: "m3u8",
    URLTYPE_MPD: "mpd",
    URLTYPE_F4M: "f4m",
    URLTYPE_MP4: "mp4"
};
exports.TVE_LINEAR_VSS = "TVE_LINEAR_VSS";
exports.OTT = "OTT";
/**
 *
 * Asset type mappings
 */
exports.AssetTypeMapping = {
    CDVR: "cDvr",
    DEFAULT: "defaultAsset",
    LINEAR: "Linear",
    T6_LINEAR: "title6Linear",
    T6_VOD: "title6Vod",
    TVE_LINEAR: "tveLinear",
    TVE_VOD: "tveVod",
    VOD: "Vod",
    TVE_LINEAR_VSS: "tveLinearVss",
    OTT: "ott",
    IVOD: "iVod"
};
exports.VodAssetTypes = (_a = {},
    _a[exports.AssetTypeMapping.T6_VOD] = true,
    _a[exports.AssetTypeMapping.TVE_VOD] = true,
    _a[exports.AssetTypeMapping.VOD] = true,
    _a);
function getUrlExtension(url) {
    var keys = Object.keys(exports.AssetUrlType);
    url = url.toLowerCase();
    var urlExtension;
    var idx;
    var prev;
    var next;
    var exp = /[^0-9A-Za-z]/;
    var length = keys.length;
    for (var i = 0; i < length; i++) {
        var key = keys[i];
        var len = exports.AssetUrlType[key].length;
        idx = url.lastIndexOf(exports.AssetUrlType[keys[i]]);
        if ((idx !== -1) && (idx > 0)) {
            prev = url.charAt(idx - 1);
            next = url.charAt(idx + len);
            if (exp.test(prev) && ((next === "") || (exp.test(next)))) {
                urlExtension = exports.AssetUrlType[keys[i]];
                break;
            }
        }
    }
    return urlExtension;
}
exports.getUrlExtension = getUrlExtension;
var BaseAsset = /** @class */ (function () {
    function BaseAsset(originalUrl, contentOptions) {
        if (contentOptions === void 0) { contentOptions = {}; }
        this.originalUrl = originalUrl;
        this.contentOptions = contentOptions;
        this._urls = [];
        this._subscribedTags = [];
        // deprecated content options
        // do NOT rely on these
        this.isContentPosition = true;
        this.isRetry = false;
        this.preventModify = false;
        this.preventRedirect = false;
        this.isRollback = false;
        this._logger = new Logger_1.Logger("Asset");
        this._logger.trace("new Asset: originalUrl=" + originalUrl + " contentOptions=" + JSON.stringify(contentOptions, null, 2));
        this._url = originalUrl;
        this.adMetadata = {};
        // add deprecated props
        this.isRetry = contentOptions.isRetry;
        this.preventModify = contentOptions.preventModify;
        this.preventRedirect = contentOptions.preventRedirect;
        this.isContentPosition = contentOptions.isContentPosition;
        // set all options from contentOptions:
        this.assetEngine = contentOptions.assetEngine || ContentOptions_1.AssetEngine.GENERIC;
        this.assetType = this._mapAssetType(contentOptions.assetType);
        this.resumePosition = isNaN(contentOptions.resumePosition) ? 0 : contentOptions.resumePosition * 1;
        this.adId = contentOptions.adId;
        this.assetId = contentOptions.assetId;
        this.providerId = contentOptions.providerId;
        this.streamId = contentOptions.streamId;
        this.recordingId = contentOptions.recordingId;
        this.metadata = contentOptions.metadata;
        this.mediaId = contentOptions.mediaId;
        this.platformId = contentOptions.platformId;
        this.easPath = contentOptions.easPath;
        this.drmKey = contentOptions.drmKey;
        this.endPosition = contentOptions.endPosition;
        this.brand = contentOptions.brand;
        this.surround = contentOptions.surround;
        this.mediaGuid = contentOptions.mediaGuid;
        this.mediaAccountName = contentOptions.mediaAccountName;
        this.aspectRatio = contentOptions.aspectRatio;
        this.serviceZip = contentOptions.serviceZip;
        this.encryptedServiceZip = contentOptions.encryptedServiceZip;
        if (this.missingAssetIdentifier()) {
            this._logger.warn("Warning! No asset identifiers provided in content options");
        }
    }
    BaseAsset.prototype.addSubscribedTag = function (tag) {
        if (this._subscribedTags.indexOf(tag) === -1) {
            this._subscribedTags.push(tag);
        }
    };
    Object.defineProperty(BaseAsset.prototype, "subscribedTags", {
        get: function () {
            return this._subscribedTags;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseAsset.prototype, "adConfig", {
        get: function () {
            return this.contentOptions.adConfig;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseAsset.prototype, "authToken", {
        get: function () {
            return this.contentOptions.authToken;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseAsset.prototype, "deviceAuthenticationResult", {
        get: function () {
            return this.contentOptions.deviceAuthenticationResult;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Determines if we were provided some way to identify
     * the asset within our analytics systems.
     */
    BaseAsset.prototype.missingAssetIdentifier = function () {
        return !(this.providerId && this.assetId) &&
            !this.mediaGuid &&
            !this.recordingId &&
            !this.streamId &&
            !(this.mediaId && this.platformId) &&
            !this.easPath;
    };
    /**
     * Returns JSON object with Asset Details
     * @returns {{url: string, assetEngine: string, assetType: string, assetId: string, providerId: string, recordingId: string,
     * streamId: string, surround: boolean, isRetry: boolean, isRollback: boolean, mediaGuid: string, mediaId: string}}
     */
    BaseAsset.prototype.toJSON = function () {
        return { url: this.url,
            assetEngine: this.assetEngine,
            assetType: this.assetType,
            assetId: this.assetId,
            providerId: this.providerId,
            recordingId: this.recordingId,
            streamId: this.streamId,
            surround: this.surround,
            isRetry: this.isRetry,
            isRollback: this.isRollback,
            mediaGuid: this.mediaGuid,
            mediaId: this.mediaId
        };
    };
    Object.defineProperty(BaseAsset.prototype, "url", {
        get: function () {
            return this._url;
        },
        set: function (url) {
            this._logger.trace("set url", url);
            this._url = url;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseAsset.prototype, "urls", {
        get: function () {
            return this._urls;
        },
        set: function (urls) {
            this._logger.trace("set urls", urls);
            this._urls = urls;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseAsset.prototype, "id", {
        get: function () {
            return this.assetId || this.streamId || this.recordingId;
        },
        enumerable: true,
        configurable: true
    });
    BaseAsset.prototype.getUrlType = function () {
        return getUrlExtension(this.url);
    };
    /**
     * Determines whether the asset is a VOD asset by checking all asset IDs
     *
     * @returns {boolean}
     */
    BaseAsset.prototype.isVOD = function () {
        return (this.assetId !== undefined) && (this.providerId !== undefined) && (!this.streamId) && (!this.recordingId);
    };
    BaseAsset.prototype.assetTypeIsVod = function () {
        return (Boolean)(exports.VodAssetTypes[this.assetType]);
    };
    BaseAsset.prototype.isCDVR = function () {
        return this.recordingId !== undefined && this.recordingId !== null;
    };
    BaseAsset.prototype.isT6VODAsset = function () {
        return this.assetType === exports.AssetTypeMapping.T6_VOD;
    };
    BaseAsset.prototype.isIVODAsset = function () {
        return this.assetType === exports.AssetTypeMapping.IVOD;
    };
    BaseAsset.prototype.shouldRetry = function () {
        return !ContentOptions_1.XTV_RE.test(this.url) && !this.recordingId;
    };
    BaseAsset.prototype.shouldStartFromLivePoint = function (videoType) {
        if (videoType !== "live") {
            return false;
        }
        else if (ContentOptions_1.isEAS(this.contentOptions)) {
            return this.resumePosition === exports.RESUME_FROM_LIVE_POINT;
        }
        else {
            return !this.isCDVR() && !this.isVOD();
        }
    };
    BaseAsset.prototype._mapAssetType = function (assetType) {
        return exports.AssetTypeMapping[assetType] || assetType;
    };
    return BaseAsset;
}());
exports.BaseAsset = BaseAsset;

},{"../util/Logger":571,"./ContentOptions":538}],538:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// URL pattern of expected URL for FOG service on set top boxes with RDK
exports.FOG_RE = /tsb\?((clientId=[^&]*&recordedUrl=[^&]*)|(recordedUrl=[^&]*&clientId=[^&]*)){1}/;
// URL pattern of expected URL for manifest manipulator service
exports.MM_RE = /^(http|https):\/\/mm\./;
// URL pattern of expected URL for xtvapi service assets
exports.XTV_RE = /^(http|https):\/\/xtvapi\./;
function isEAS(options) {
    return Boolean(options.easPath);
}
exports.isEAS = isEAS;
/**
 * Known asset types (global properties)
 */
exports.AssetEngine = {
    GENERIC: "generic",
    FLASH: "flash",
    PSDK: "psdk",
    CBS: "cbs",
    HULU: "hulu",
    ESPN: "espn",
    DISNEY: "disney",
    NBCUNI: "nbcUni",
    HELIO: "helio",
    AAMP: "aamp"
};

},{}],539:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var rxjs_1 = require("rxjs");
var Logger_1 = require("../util/Logger");
var PPError_1 = require("../PPError");
require("rxjs/add/observable/dom/ajax");
require("rxjs/add/operator/catch");
require("rxjs/add/observable/of");
require("rxjs/add/observable/throw");
require("rxjs/add/operator/switchMap");
exports.NBCU_API_ERROR_CODE = 8100;
exports.TIMEOUT_ERROR_CODE = 1;
exports.UNRECOGNIZED_RESPONSE_FORMAT = 2;
exports.CHANNEL_CONFIGURATION_ERROR = 3;
var NbcConditionedStreamApi = /** @class */ (function () {
    function NbcConditionedStreamApi(config) {
        this.config = config;
    }
    NbcConditionedStreamApi.prototype.getConditionedAssetUrl = function (channel, serviceZip) {
        var _this = this;
        channel = channel ? channel.toLowerCase() : "";
        if (!this.config.channels || !this.config.channels[channel] || !this.config.channels[channel].apiKey) {
            return rxjs_1.Observable.throw(new PPError_1.PPError(exports.NBCU_API_ERROR_CODE, exports.CHANNEL_CONFIGURATION_ERROR, ""));
        }
        return this.sendRequest(channel, serviceZip)
            .switchMap(function (ajax) {
            return _this.succeeded(ajax) ?
                rxjs_1.Observable.of(ajax.response.streamUrl) :
                rxjs_1.Observable.throw(_this.buildValidationPPError(ajax));
        });
    };
    NbcConditionedStreamApi.prototype.succeeded = function (ajax) {
        return Boolean(ajax && ajax.status === 200 && ajax.response && !ajax.response.restricted && ajax.response.streamUrl);
    };
    NbcConditionedStreamApi.prototype.sendRequest = function (channel, serviceZip) {
        var _this = this;
        return rxjs_1.Observable.ajax({
            url: this.config.serviceUrl + "/" + channel,
            method: "POST",
            body: JSON.stringify(this.buildRequestBody(serviceZip)),
            crossDomain: true,
            responseType: "json",
            headers: {
                Authorization: "NBC-Referrer key=" + this.config.channels[channel].apiKey + ", version=3.0, type=cpc",
                "Content-Type": "application/json; charset=UTF-8"
            }
        })
            // it's possible we can get a standard javascript error
            // in that case let it go up the stack
            .catch(function (err) { return rxjs_1.Observable.throw(err.xhr ? _this.buildAjaxPPError(err) : err); });
    };
    NbcConditionedStreamApi.prototype.buildValidationPPError = function (ajax) {
        NbcConditionedStreamApi._logger.warn("API returned erroneous response: " + JSON.stringify(ajax));
        if (!ajax.response || !ajax.response.restrictionDetails || !ajax.response.restrictionDetails.code) {
            return new PPError_1.PPError(exports.NBCU_API_ERROR_CODE, exports.UNRECOGNIZED_RESPONSE_FORMAT, "NBC api response format not recognized");
        }
        var subCode = ajax.response.restrictionDetails.code;
        var message = ajax.response.restrictionDetails.description;
        return new PPError_1.PPError(exports.NBCU_API_ERROR_CODE, subCode, message);
    };
    NbcConditionedStreamApi.prototype.buildAjaxPPError = function (err) {
        var logInfo = JSON.stringify({
            status: err.status,
            request: err.request,
            response: (err.xhr && err.xhr.response) || ""
        });
        NbcConditionedStreamApi._logger.warn("API request caused an error: " + JSON.stringify(logInfo));
        return err.status === 0 ? this.buildTimeoutAjaxPPError() : this.buildAjaxWithStatusPPError(err);
    };
    NbcConditionedStreamApi.prototype.buildTimeoutAjaxPPError = function () {
        return new PPError_1.PPError(exports.NBCU_API_ERROR_CODE, exports.TIMEOUT_ERROR_CODE, "");
    };
    NbcConditionedStreamApi.prototype.buildAjaxWithStatusPPError = function (err) {
        var subCode = (err.xhr && err.xhr.response && err.xhr.response.code) || "";
        var statusCode = err.status || "";
        var message = (err.xhr && err.xhr.response && err.xhr.response.message) || "";
        return new PPError_1.PPError(exports.NBCU_API_ERROR_CODE, subCode, statusCode + " " + message);
    };
    NbcConditionedStreamApi.prototype.buildRequestBody = function (serviceZip) {
        return {
            serviceZip: serviceZip,
            adobeMvpdId: this.config.adobeMvpdId,
            device: "web"
        };
    };
    NbcConditionedStreamApi._logger = new Logger_1.Logger("NBCConditionedStreamApi");
    return NbcConditionedStreamApi;
}());
exports.NbcConditionedStreamApi = NbcConditionedStreamApi;

},{"../PPError":487,"../util/Logger":571,"rxjs":281,"rxjs/add/observable/dom/ajax":239,"rxjs/add/observable/of":248,"rxjs/add/observable/throw":249,"rxjs/add/operator/catch":253,"rxjs/add/operator/switchMap":274}],540:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Logger_1 = require("../util/Logger");
var BaseAsset_1 = require("./BaseAsset");
var OttLocatorParser_1 = require("./OttLocatorParser");
require("rxjs/add/observable/fromPromise");
require("rxjs/add/operator/map");
/**
 * This asset type is for 3rd party hosted assets that require player platform to authenticate with the 3rd party
 * before accessing the asset files.  The asset url provided to Asset.create will be a locator.  Authentication
 * occurs in a function provided to player platform by the host application.  The authentication function accepts
 * the locator and returns a promise with the resolved http url of the authenticated asset.
 *
 * see https://etwiki.sys.comcast.net/display/AAE/Third+Party+Hosted+IP+Stream+Authorization+and+Playback
 */
var OttAsset = /** @class */ (function (_super) {
    __extends(OttAsset, _super);
    function OttAsset(url, contentOptions) {
        if (contentOptions === void 0) { contentOptions = {}; }
        var _this = _super.call(this, url, contentOptions) || this;
        _this.ottAuthCallback = contentOptions.ottAuthCallback;
        _this.locatorProperties = OttAsset._locatorParser.parse(url);
        _this.provider = _this.locatorProperties.provider;
        _this.mediaGuid = _this.locatorProperties.mediaGuid;
        _this.mediaAccountName = _this.locatorProperties.mediaAccountName;
        _this.providerId = _this.locatorProperties.provider;
        return _this;
    }
    OttAsset.prototype.assetTypeIsVod = function () {
        return this.locatorProperties && this.locatorProperties.playbackType === OttLocatorParser_1.OTT_PLAYBACK_TYPE_VOD;
    };
    OttAsset.prototype.shouldStartFromLivePoint = function (_videoType) {
        return false;
    };
    OttAsset.prototype.getProvider = function () {
        return this.provider;
    };
    OttAsset._logger = new Logger_1.Logger("OttAsset");
    OttAsset._locatorParser = new OttLocatorParser_1.OttLocatorParser();
    return OttAsset;
}(BaseAsset_1.BaseAsset));
exports.OttAsset = OttAsset;

},{"../util/Logger":571,"./BaseAsset":537,"./OttLocatorParser":541,"rxjs/add/observable/fromPromise":244,"rxjs/add/operator/map":263}],541:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var PPError_1 = require("../PPError");
var JSUtil_1 = require("../util/JSUtil");
var ESPN_3_OTT = "EspnOTT";
exports.OTT_PLAYBACK_TYPE_LIVE = "live";
exports.OTT_PLAYBACK_TYPE_VOD = "vod";
exports.OTT_ESPN_AUTH_TYPE = "DisneyEspn";
var OTT_PROVIDERS;
(function (OTT_PROVIDERS) {
    OTT_PROVIDERS["ESPN"] = "espn";
})(OTT_PROVIDERS = exports.OTT_PROVIDERS || (exports.OTT_PROVIDERS = {}));
var OttLocatorParser = /** @class */ (function () {
    function OttLocatorParser() {
    }
    OttLocatorParser.prototype.parse = function (locator) {
        var matches = OttLocatorParser.LocatorPattern.exec(locator);
        if (!matches || matches.length < 4) {
            throw new PPError_1.PPError(7900, 7, "OTT locator is invalid " + locator);
        }
        // skip first item in matches array, which is the entire locator
        var provider = matches[1], mediaAccountName = matches[2], mediaGuid = matches[3];
        var playbackType = mediaAccountName === ESPN_3_OTT ? exports.OTT_PLAYBACK_TYPE_LIVE : this.getPlaybackType(locator);
        return {
            provider: provider,
            mediaAccountName: mediaAccountName,
            mediaGuid: mediaGuid,
            playbackType: playbackType
        };
    };
    OttLocatorParser.prototype.getPlaybackType = function (locator) {
        var params = JSUtil_1.parseQueryParams(locator);
        var paramValue;
        for (var param in params) {
            if (params.hasOwnProperty(param) && param.toLowerCase() === "playbacktype") {
                paramValue = params[param].toLowerCase();
                if (paramValue !== exports.OTT_PLAYBACK_TYPE_LIVE && paramValue !== exports.OTT_PLAYBACK_TYPE_VOD) {
                    throw new PPError_1.PPError(7900, 9, "OTT locator playbackType is unrecognized: " + params.playbackType);
                }
                return paramValue;
            }
        }
        throw new PPError_1.PPError(7900, 8, "OTT locator does not have playbackType query string parameter: " + locator);
    };
    // expected format comcast:ott-stream:<provider>:<mediaAccountName>:<mediaGuid>?<queryParam>&<queryParam>...
    OttLocatorParser.LocatorPattern = /^comcast:ott-stream:([^=:]+):([^=:]+):([^=:\?]+)\??(.*)$/;
    return OttLocatorParser;
}());
exports.OttLocatorParser = OttLocatorParser;

},{"../PPError":487,"../util/JSUtil":569}],542:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var HlsTagFactory_1 = require("../util/hls/HlsTagFactory");
var BaseAsset_1 = require("./BaseAsset");
var VssAsset = /** @class */ (function (_super) {
    __extends(VssAsset, _super);
    function VssAsset(url, contentOptions) {
        if (contentOptions === void 0) { contentOptions = {}; }
        var _this = _super.call(this, url, contentOptions) || this;
        _this.addSubscribedTag(HlsTagFactory_1.TAG_SOURCE_STREAM);
        _this.addSubscribedTag(HlsTagFactory_1.TAG_SERVICE_ZONE_REQUIRED);
        return _this;
    }
    return VssAsset;
}(BaseAsset_1.BaseAsset));
exports.VssAsset = VssAsset;

},{"../util/hls/HlsTagFactory":579,"./BaseAsset":537}],543:[function(require,module,exports){
module.exports={
  "productType": "cdvr",
  "drmNetworkRequestTimeout": 10000,
  "cimaEndPoint": "https://consecservice-stage.ccp.xcal.tv/cima/login",
  "metadataEndPoint": "https://consecservice-stage.ccp.xcal.tv/flashaccess/resource/metadata?env=stage",

  "easNetworkRequestTimeout": 10000,
  "zipToFipsEndPoint": "https://easip-client-po.ccp.xcal.tv/easws/api/fips/zip/",
  "alertServiceEndPoint": "https://easip-client-po.ccp.xcal.tv/easws/api/alert/active/fipscode/",
  "easUpdateInterval": 15000,
  "easAlertRepeat": 1,
  "easAlertFontSize": "20.0f",
  "easAlertFont": "Helvetica-Bold",
  "easLanguage": "en-US",
  "helioEas": false,

  "analyticsNetworkRequestTimeout": 10000,
  "analyticsEndPoint": "https://analytics.xcal.tv/comcast/player",
  "analyticsProtocol": "2.0",
  "maxBatchSize": 10,
  "maxQueueSize": 100,
  "batchInterval": 5000,

  "playerNetworkRequestTimeout": 10000,
  "heartbeatInterval": 60000,
  "autoplay": true,
  "retryInterval": 1000,
  "manifestManipulatorRetries": 1,
  "manifestManipulatorTimeout": 4000,
  "enableMultiSiteVODDAI": false,
  "retryOnMediaFailed": true,
  "updateInterval": 1000,
  "vpaidTimeout": 5000,
  "partnerId": "Comcast",
  "enableAds": false,
  "watermark": false,
  "defaultEngine": "flash",
  "domainId": "",
  "zoneId": "",
  "customParams": {},
  "auditudeTimeout": 20000,
  "crsRulesEndpoint": "https://player.ccp.xcal.tv/desktop/config/crs/AdobeTVSDKConfig.json",
  "failOnNetworkDown": false,
  "handleClicks": false,
  "crossStreamPrevention": "None",

  "reportHelioMetrics": true,

  "cbsChromelessPath": "http://can.cbs.com/thunder/player/chromeless/wrapper.swf",
  "cbsPartner": "comcast",
  "disneyChromelessPath": "http://watchabc.go.com/vp2/s/vp2k/latest/ext/watchvp2k.swf",
  "disneyLoadTimeout": 45000,
  "disneyPartner": "comcast",
  "espnChromelessPath": "https://www.espn.com/watchespn/player.swf",
  "espnPartner": "comcast",
  "espnConfigUrl": "https://www.espn.com/watchespn/player/config?key=xfinity",
  "huluNewSiteUrlStd": "https://secure.hulu.com/dp-player/js/hulu_global.js?guid=8FD85DB6-E19C-ED04-72DC-15CEE4B3DB20",
  "huluNewSiteUrlWide": "https://secure.hulu.com/dp-player/js/hulu_global.js?guid=1B826623-ABFA-78F3-5EAC-6150B0FD8F76",
  "nbcConditionedStreamApi": {
    "serviceUrl": "https://stage-access-cloudpath.media.nbcuni.com/access/live",
    "adobeMvpdId": "",
    "channels": {
      "nbc": {
        "apiKey": ""
      },
      "tlmd": {
        "apiKey": ""
      }
    }
  },
  "comScore": {
    "enabled": false,
    "clientId": "",
    "relyOnAssetTagApi": false,
    "enableC4": false,
    "enableC6": false
  },
  "audienceManager": {
    "enabled": false,
    "dilOptions": {
      "default":{
        "partner": "comcastathena",
        "containerNSID": 1,
        "uuidCookieName": "aam_uuid",
        "uuidCookieDays": 30,
        "namespace": "5BFD123F5245AECB0A490D45@AdobeOrg"
      },
      "parentCompanies": {
        "fox": {
          "partner": "foxnet",
          "namespace": "723C39F756ABCD0B7F000101@AdobeOrg"
        }
      }
    },
    "fieldPrefix": "c_",
    "mvpd": "comcast",
    "platform": "",
    "playerId": "Player Platform",
    "heartbeatInterval": 60000
  },
  "clinear": {
    "placementRequestEndPoint": "http://69.241.63.185/slr-director/v2/PlacementRequest",
    "placementStatusNotificationEndPoint": "http://69.241.63.185/slr-director/v2/psn"
  },
  "vssServiceZoneCallbackTimeout": 10000,
  "defaultAsset": {
    "maximumRetries": 5,
    "ddPlus": false,
    "cdnRedundant": false,
    "initialBitrate": 0,
    "initialBufferTime": 2000,
    "playingVODBufferTime": 80000,
    "playingLinearBufferTime": 15000,
    "initialPolicy": 0,
    "playingPolicy": 2,
    "playbackStalledEnabled": false,
    "maximumBitrate": 12000000,
    "minimumBitrate": 0,
    "trickPlayMaxFps": 2,
    "placementRequestEndPoint": "https://ccpvab-po-v103-p.po.ccp.cable.comcast.com/PlacementRequest",
    "placementStatusNotificationEndPoint": "https://altcon-vexdr-prod1.ccp.xcal.tv/vex-director/PlacementStatusNotification",
    "urlRewrite": "",
    "easEnabled": false,
    "httpStartTransferTimeout": 15000,
    "httpTotalTimeout": 20000,
    "comScoreEnabled": false,
    "cLinearDAIEnabled": false,
    "forceHttps": false,
    "hnaEnabled": false,
    "hnaAWSEndpoint": "http://d2nuj85jf6t0f3.cloudfront.net/OddEvenPattern.test",
    "hnaCDNEndpoint": "OddEvenPattern.test",
    "hnaTimeout": 5000,
    "vssEnabled": false,
    "freeWheelConfig": {
      "mvpdString": "xtv",
      "networkId": "384777",
      "serverUrl": "https://mssl.fwmrm.net",
      "contentType": "video/hls-viper",
      "freewheelPlatform": "web",
      "preventFreeWheelTrackingEvents": false
    }
  },

  "easAsset": {
    "httpStartTransferTimeout": 2000,
    "httpTotalTimeout": 3000
  },

  "title6Linear": {
    "easEnabled": true,
    "trickPlayMaxFps": 8,
    "httpStartTransferTimeout": 3000,
    "forceHttps": false
  },

  "cDvr": {
    "easEnabled": true
  },

  "title6Vod": {
    "easEnabled": true
  },

  "tveLinear": {
    "comScoreEnabled": true,
    "audienceManagerEnabled": true
  },

  "tveLinearVss": {
    "vssEnabled": true,
    "audienceManagerEnabled": true
  },

  "tveVod": {
    "comScoreEnabled": true,
    "audienceManagerEnabled": true
  },

  "ott": {
    "freeWheelConfig": {
      "mvpdString": "xtv",
      "playerProfileMvpd": "comcast_sports",
      "freewheelPlatform": "web",
      "playerProfilePlatform": "js",
      "networkId": "384777",
      "serverUrl": "http://5df09.v.fwmrm.net/",
      "contentType": "application/x-mpegurl",
      "preventFreeWheelTrackingEvents": false,
      "siteSectionFallbackBrand": "fallbacksitesection"
    }
  }
}

},{}],544:[function(require,module,exports){
"use strict";
/**
 * Created by chesli200 on 8/31/15.
 */
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var Logger_1 = require("../util/Logger");
var publicious_1 = require("publicious");
var EmergencyAlert_1 = require("./EmergencyAlert");
var JSUtil_1 = require("../util/JSUtil");
var x2json_1 = require("x2json");
var MoneyTrace_1 = require("../util/MoneyTrace");
var rxjs_1 = require("rxjs");
require("rxjs/add/observable/dom/ajax");
var xml2js = new x2json_1.X2JS();
var EASPoller = /** @class */ (function () {
    function EASPoller(options) {
        this.logger = new Logger_1.Logger("EASPoller");
        this._mediator = new publicious_1.PubSub();
        this._alerts = [];
        this._alertsAdded = {};
        this._options = __assign({}, options);
        this._options.moneyTrace = this._options.moneyTrace || new MoneyTrace_1.MoneyTrace();
    }
    EASPoller.prototype.start = function () {
        var _this = this;
        if (this._fips) {
            this._startTimer();
        }
        else {
            this._getFips(function (err, fips) {
                if (err) {
                    _this.logger.error("Error retrieving fips code. EAS polling will not start: " + err.toString());
                    return;
                }
                _this._fips = fips;
                _this._startTimer();
            });
        }
    };
    EASPoller.prototype.stop = function () {
        clearInterval(this._timer);
    };
    EASPoller.prototype.add = function (alert) {
        this._alerts.push(alert);
    };
    EASPoller.prototype.onAlertReceived = function (fn) {
        this._mediator.on(EASPoller.ALERT_RECEIVED, fn);
    };
    EASPoller.prototype.onAlertsAvailable = function (fn) {
        this._mediator.on(EASPoller.ALERTS_AVAILABLE, fn);
    };
    EASPoller.prototype.onAlertsFailureCheck = function (fn) {
        this._mediator.on(EASPoller.ALERTS_FAILURE_CHECK, fn);
    };
    EASPoller.prototype.onEanStart = function (fn) {
        this._mediator.on(EASPoller.EAN_START, fn);
    };
    EASPoller.prototype.onEanComplete = function (fn) {
        this._mediator.on(EASPoller.EAN_COMPLETE, fn);
    };
    EASPoller.prototype._startTimer = function () {
        clearInterval(this._timer);
        this._timer = setInterval(this._onTimerFired.bind(this), this._options.interval);
    };
    EASPoller.prototype._onTimerFired = function () {
        var _this = this;
        rxjs_1.Observable.ajax({
            url: this._options.alertUrl + this._fips,
            headers: { "X-MoneyTrace": this._options.moneyTrace.createTraceMessage() },
            method: "get",
            responseType: "text",
            crossDomain: true
        })
            .subscribe(function (res) {
            _this._parseAlertResponse(res.response);
            if (_this._alerts.length) {
                _this._mediator.emit(EASPoller.ALERTS_AVAILABLE, _this._alerts);
            }
            else {
                _this.logger.trace("EAS Timer Fired with no alerts");
            }
        }, function (err) {
            _this.logger.error("Error retrieving EAS alerts: " + err.toString());
            return;
        });
    };
    EASPoller.prototype._parseAlertResponse = function (data) {
        var _this = this;
        var parser = typeof data === "string" ? xml2js.xml_str2json : xml2js.xml2json;
        var easData = parser.call(xml2js, data);
        var alerts = JSUtil_1.getNestedProperty(easData, "alerts.alert") || [];
        alerts = Array.isArray(alerts) ? alerts : [alerts];
        var easAlerts = alerts.map(function (alert) { return new EmergencyAlert_1.EmergencyAlert(alert, _this._options.preferredLanguage, _this._options.mimeType); });
        easAlerts.filter(function (alert) { return !alert.isEan(); }).forEach(this._processAlert.bind(this));
        this._checkEan(easAlerts);
    };
    EASPoller.prototype._processAlert = function (alert) {
        if (!this._alertsAdded[alert.id] && alert.uri) {
            this._alertsAdded[alert.id] = true;
            this._alerts.push(alert);
            this._mediator.emit(EASPoller.ALERT_RECEIVED, alert);
        }
        else if (!alert.uri) {
            this.logger.warn("Encountered EAS alert with no attached media. " + JSON.stringify(alert));
        }
    };
    EASPoller.prototype._isEanAlertWithUri = function (alert) {
        return alert.isEan() && alert.uri >= "";
    };
    EASPoller.prototype._checkEan = function (alerts) {
        var ean = alerts.filter(this._isEanAlertWithUri.bind(this))[0];
        if (this._currentEan && !ean) {
            this._mediator.publish(EASPoller.EAN_COMPLETE, this._currentEan);
            this._currentEan = null;
        }
        else if (!this._currentEan && ean) {
            this._currentEan = ean;
            this._mediator.emit(EASPoller.ALERT_RECEIVED, ean);
            this._mediator.publish(EASPoller.EAN_START, ean);
        }
    };
    EASPoller.prototype._getFips = function (cb) {
        var _this = this;
        rxjs_1.Observable.ajax({
            url: this._options.zipToFipsUrl + this._options.zip,
            headers: { "X-MoneyTrace": this._options.moneyTrace.createTraceMessage() },
            method: "get",
            responseType: "text",
            crossDomain: true
        })
            .subscribe(function (res) {
            cb(null, _this._parseFipsResponse(res.response || "000000"));
        }, function (err) { return cb(err); });
    };
    EASPoller.prototype._parseFipsResponse = function (data) {
        var parser = typeof data === "string" ? xml2js.xml_str2json : xml2js.xml2json;
        var easData = parser.call(xml2js, data);
        var fips = JSUtil_1.getNestedProperty(easData, "zips.zip.countyFips") || JSUtil_1.getNestedProperty(easData, "zips.zip[0].countyFips");
        this.logger.trace("received fips code " + fips);
        return fips;
    };
    EASPoller.ALERT_RECEIVED = "alertReceived";
    EASPoller.ALERTS_AVAILABLE = "alertsAvailable";
    EASPoller.ALERTS_FAILURE_CHECK = "alertsFailureCheck";
    EASPoller.EAN_START = "eanStart";
    EASPoller.EAN_COMPLETE = "eanComplete";
    return EASPoller;
}());
exports.EASPoller = EASPoller;

},{"../util/JSUtil":569,"../util/Logger":571,"../util/MoneyTrace":572,"./EmergencyAlert":545,"publicious":165,"rxjs":281,"rxjs/add/observable/dom/ajax":239,"x2json":482}],545:[function(require,module,exports){
"use strict";
/// <reference path="../../typings/eas/EmergencyAlert.d.ts" />
Object.defineProperty(exports, "__esModule", { value: true });
var Logger_1 = require("../util/Logger");
var EmergencyAlertType;
(function (EmergencyAlertType) {
    EmergencyAlertType["VIDEO_REPLACE"] = "videoReplace";
    EmergencyAlertType["TEXT_SCROLL"] = "textScroll";
})(EmergencyAlertType = exports.EmergencyAlertType || (exports.EmergencyAlertType = {}));
var EmergencyAlert = /** @class */ (function () {
    function EmergencyAlert(_rawJSON, language, _mimeType) {
        if (_mimeType === void 0) { _mimeType = EmergencyAlert.MIME_HLS; }
        this._rawJSON = _rawJSON;
        this._mimeType = _mimeType;
        this._info = this._resolveInfo(_rawJSON, language);
    }
    Object.defineProperty(EmergencyAlert.prototype, "eventCode", {
        get: function () {
            if (this._info && this._info.eventCode) {
                return this._info.eventCode.valueName === "SAME" ? this._info.eventCode.value : "";
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EmergencyAlert.prototype, "uri", {
        get: function () {
            var resources = this.resources;
            if (!resources || !resources.length) {
                EmergencyAlert._logger.warn("No URI available on emergency alert!");
                return;
            }
            var uri;
            var hlsUri;
            for (var _i = 0, resources_1 = resources; _i < resources_1.length; _i++) {
                var resource = resources_1[_i];
                if (resource.mimeType === EmergencyAlert.MIME_HLS) {
                    hlsUri = resource.uri;
                }
                if (resource.mimeType === this._mimeType) {
                    uri = resource.uri;
                }
            }
            return uri || hlsUri; // default to HLS
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EmergencyAlert.prototype, "id", {
        get: function () {
            return this._rawJSON.identifier;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EmergencyAlert.prototype, "language", {
        get: function () {
            return this._info ? this._normalizeLanguage(this._info.language) : "";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EmergencyAlert.prototype, "parameters", {
        get: function () {
            return [].concat(this._info.parameter || []);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EmergencyAlert.prototype, "resources", {
        get: function () {
            return [].concat(this._info.resource || []);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EmergencyAlert.prototype, "startPosition", {
        get: function () {
            var positionParam = this.parameters.filter(function (param) { return param.valueName === EmergencyAlert.PLAYBACK_START_POSITION; })[0];
            if (positionParam && (positionParam.value === EmergencyAlert.START || positionParam.value === EmergencyAlert.LIVE)) {
                return positionParam.value;
            }
            else {
                EmergencyAlert._logger.warn("No start position defined, returning 0 to start from beginning");
                return EmergencyAlert.START;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EmergencyAlert.prototype, "alertMessage", {
        get: function () {
            var message = "A ";
            message += this._info.event;
            message += " has been issued for the following counties: ";
            message += this._info.area.areaDesc;
            message += " effective ";
            message += new Date(this._info.effective);
            message += " until ";
            message += new Date(this._info.expires);
            message += ". ";
            if (this._info.description) {
                message += this._info.description + ". ";
            }
            if (this._info.instruction) {
                message += this._info.instruction + ". ";
            }
            return message;
        },
        enumerable: true,
        configurable: true
    });
    EmergencyAlert.prototype.isEan = function () {
        return this.eventCode === "EAN";
    };
    EmergencyAlert.prototype._resolveInfo = function (alert, language) {
        var _this = this;
        if (!Array.isArray(alert.info)) {
            return alert.info;
        }
        if (alert.info.length === 0) {
            return undefined;
        }
        var result = alert.info[0];
        var normalized = this._normalizeLanguage(language);
        alert.info.forEach(function (info) {
            if (_this._normalizeLanguage(info.language) === normalized) {
                result = info;
            }
        });
        return result;
    };
    EmergencyAlert.prototype._normalizeLanguage = function (language) {
        var parts = /([A-Za-z]+)[-_]([A-Za-z]+)/.exec(language);
        if (!parts) {
            EmergencyAlert._logger.warn("EAS language " + language + " is not in expected format.");
            return language;
        }
        return parts[1].toLowerCase() + "-" + parts[2].toUpperCase();
    };
    EmergencyAlert.PLAYBACK_START_POSITION = "PLAYBACK_START_POSITION";
    EmergencyAlert.START = "START";
    EmergencyAlert.LIVE = "LIVE";
    EmergencyAlert.MIME_HLS = "application/vnd.apple.mpegurl";
    EmergencyAlert.MIME_DASH = "application/dash+xml";
    EmergencyAlert._logger = new Logger_1.Logger("EmergencyAlert");
    return EmergencyAlert;
}());
exports.EmergencyAlert = EmergencyAlert;

},{"../util/Logger":571}],546:[function(require,module,exports){
(function (global){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var _a, _b;
var app = require("../Application");
var constants = require("../PlayerPlatformConstants");
var ConfigurationManager_1 = require("../ConfigurationManager");
var BaseAsset_1 = require("../assets/BaseAsset");
var ContentOptions_1 = require("../assets/ContentOptions");
var Logger_1 = require("../util/Logger");
var OttAsset_1 = require("../assets/OttAsset");
var OttLocatorParser_1 = require("../assets/OttLocatorParser");
var AdobePSDKType;
(function (AdobePSDKType) {
    // AdobePSDK not present
    AdobePSDKType[AdobePSDKType["NONE"] = 0] = "NONE";
    // native/embedded PSDK (Digital Home Porting Kit)
    AdobePSDKType[AdobePSDKType["DHPK"] = 1] = "DHPK";
})(AdobePSDKType = exports.AdobePSDKType || (exports.AdobePSDKType = {}));
/**
 *  EngineSelector constructor
 */
var EngineSelector = /** @class */ (function () {
    function EngineSelector() {
        // create the logger for this component
        this.logger = new Logger_1.Logger("EngineSelector");
        this.logger.trace("new");
        this.currentPlayer = null;
        this.supportedAssets = [];
    }
    EngineSelector.prototype.init = function (sandbox) {
        this.sandbox = sandbox;
        sandbox.subscribe("api:setAsset", this.publishEngine, { priority: constants.PRIORITY_HIGH }, this);
        sandbox.subscribe("api:destroy", this.onPlayerDestroy, {}, this);
        sandbox.subscribe("api:playerCheck", this.playerCheck, {}, this);
        this.defaultEngineType = ConfigurationManager_1.ConfigurationManager.getInstance().get(ConfigurationManager_1.ConfigurationManager.DEFAULT_ENGINE, EngineSelector.PSDK);
        return this;
    };
    EngineSelector.prototype.destroy = function (sandbox) {
        sandbox.remove("api:setAsset", this.publishEngine);
        sandbox.remove("api:destroy", this.onPlayerDestroy);
        sandbox.remove("api:playerCheck", this.playerCheck);
        this.currentPlayer = null;
    };
    EngineSelector.prototype.nullEngine = function () {
        // start module
        var player = app.startModule(ENGINE_PLAYER_MAP[EngineSelector.NULL]);
        if (!player) {
            return;
        }
        player.assetEngine = EngineSelector.NULL;
        this.currentPlayer = player;
        this.sandbox.publish("api:engineSelected", player);
    };
    EngineSelector.prototype.playerCheck = function () {
        this.checkSupportedAssets();
        if (!!this.currentPlayer) {
            this.sandbox.publish("api:engineSelected", this.currentPlayer);
        }
        else {
            this.nullEngine();
        }
    };
    /**
     * Selects and creates the appropriate player engine for the asset passed in.
     * @param {BaseAsset} asset
     * @returns void
     */
    EngineSelector.prototype.publishEngine = function (asset) {
        var player;
        var engineType;
        if (asset instanceof OttAsset_1.OttAsset && asset.getProvider() === OttLocatorParser_1.OTT_PROVIDERS.ESPN) {
            engineType = EngineSelector.ESPN;
        }
        else if (!asset.assetEngine || asset.assetEngine === ContentOptions_1.AssetEngine.GENERIC) {
            engineType = this.findEngineFromUrlType(asset.getUrlType());
        }
        else {
            engineType = this.findEngineTypeFromAssetEngine(asset.assetEngine);
        }
        var playerName = ENGINE_PLAYER_MAP[engineType];
        this.logger.trace("getEngine: type selected: " + engineType);
        if (!playerName || !app.contains(playerName)) {
            throw new Error("Engine type: " + engineType + " not supported");
        }
        if (this.currentPlayer) {
            var doPlayerStart = this.handleAssetsLoadedOnInitialization(engineType);
            if (!doPlayerStart) {
                return;
            }
        }
        // start module
        player = app.startModule(playerName);
        player.assetEngine = engineType;
        this.currentPlayer = player;
        this.sandbox.publish("api:engineInitialized", player);
        this.sandbox.publish("api:engineSelected", player);
    };
    // workaround for players only loading assets on initialization. We can never use the cached player.
    // players: ESPN & Disney
    EngineSelector.prototype.handleAssetsLoadedOnInitialization = function (engineType) {
        if (this.currentPlayer.assetEngine === engineType &&
            this.currentPlayer.assetEngine !== EngineSelector.ESPN &&
            this.currentPlayer.assetEngine !== EngineSelector.DISNEY &&
            this.currentPlayer.assetEngine !== EngineSelector.HULU) {
            this.sandbox.publish("api:engineSelected", this.currentPlayer);
            return false;
        }
        // stop module
        try {
            app.stopModule(ENGINE_PLAYER_MAP[this.currentPlayer.assetEngine]);
        }
        catch (error) {
            this.logger.warn("Error encountered stopping module: " + this.currentPlayer.assetEngine + " error: " + error);
        }
        try {
            // clear out player container
//WMR no videoElement
//            this.sandbox.params.videoElement.innerHTML = "";
        }
        catch (err) {
            //unit tests do not have a player container
        }
        return true;
    };
    EngineSelector.prototype.onPlayerDestroy = function () {
        app.stopModule(ENGINE_PLAYER_MAP[this.currentPlayer.assetEngine]);
    };
    /**
     * Builds a list of supported asset engine types
     */
    EngineSelector.prototype.checkSupportedAssets = function () {
        this.supportedAssets = [
            ContentOptions_1.AssetEngine.GENERIC,
            ContentOptions_1.AssetEngine.FLASH,
            ContentOptions_1.AssetEngine.PSDK,
            ContentOptions_1.AssetEngine.CBS,
            ContentOptions_1.AssetEngine.DISNEY,
            ContentOptions_1.AssetEngine.ESPN,
            ContentOptions_1.AssetEngine.HULU,
            ContentOptions_1.AssetEngine.NBCUNI,
            ContentOptions_1.AssetEngine.HELIO,
            ContentOptions_1.AssetEngine.AAMP
        ];
        this.sandbox.publish("api:playersAvailable", this.supportedAssets);
    };
    /**
     * Returns the appropriate engine type based on the asset engine
     * @param {string} engine
     * @returns {string} engineType
     */
    EngineSelector.prototype.findEngineTypeFromAssetEngine = function (engine) {
        this.logger.trace("findEngineTypeFromAssetEngine: default: " + this.defaultEngineType + ", assetEngine: " + engine);
        if (engine === ContentOptions_1.AssetEngine.GENERIC) {
            return this._getAdobePSDKType() === AdobePSDKType.DHPK ? EngineSelector.PSDK : EngineSelector.FLASH;
        }
        return ASSET_ENGINE_MAP[engine] || this.defaultEngineType;
    };
    /**
     * Selects and returns the appropriate engine type based on the url type
     * @param {string} urlType
     * @returns {string} engineType
     */
    EngineSelector.prototype.findEngineFromUrlType = function (urlType) {
        this.logger.trace("findEngineTypeFromExtension: default: " + this.defaultEngineType + ", urlType: " + urlType);
        switch (urlType) {
            case BaseAsset_1.AssetUrlType.URLTYPE_MPD:
                return EngineSelector.HELIO;
            case BaseAsset_1.AssetUrlType.URLTYPE_M3U:
                if (this._getAdobePSDKType() === AdobePSDKType.DHPK) {
                    return EngineSelector.PSDK;
                }
                else {
                    return EngineSelector.FLASH;
                }
            default:
                return this.defaultEngineType;
        }
    };
    /**
     * Returns a boolean indicating whether MediaSourceExtensions are present.
     * @method supportsMediaSource
     * @returns {Boolean} True if MediaSourceExtensions are present.
     */
    EngineSelector.supportsMediaSource = function () {
        return "WebKitMediaSource" in window || "MediaSource" in window;
    };
    /**
     * Determines type of AdobePSDK if present.
     *
     * @method _getAdobePSDKType
     * @returns {AdobePSDKType}
     */
    EngineSelector.prototype._getAdobePSDKType = function () {
        var type = AdobePSDKType.DHPK;
        if (!global.AdobePSDK) {
            type = AdobePSDKType.NONE;
        }
        this.logger.info("AdobePSDK type is " + AdobePSDKType[type]);
        return type;
    };
    EngineSelector.PSDK = "psdk";
    EngineSelector.FLASH = "flash";
    EngineSelector.CBS = "cbs";
    EngineSelector.DISNEY = "disney";
    EngineSelector.ESPN = "espn";
    EngineSelector.HULU = "hulu";
    EngineSelector.HELIO = "helio";
    EngineSelector.AAMP = "aamp";
    EngineSelector.NULL = "null";
    return EngineSelector;
}());
exports.EngineSelector = EngineSelector;
var ENGINE_PLAYER_MAP = (_a = {},
    _a[EngineSelector.PSDK] = "PSDKPlayer",
    _a[EngineSelector.FLASH] = "FlashPlayer",
    _a[EngineSelector.CBS] = "CBSPlayer",
    _a[EngineSelector.DISNEY] = "DisneyPlayer",
    _a[EngineSelector.ESPN] = "ESPNPlayer",
    _a[EngineSelector.HULU] = "HuluPlayer",
    _a[EngineSelector.HELIO] = "HelioPlayer",
    _a[EngineSelector.AAMP] = "AAMPPlayer",
    _a[EngineSelector.NULL] = "NullPlayer",
    _a);
var ASSET_ENGINE_MAP = (_b = {},
    _b[ContentOptions_1.AssetEngine.FLASH] = EngineSelector.FLASH,
    _b[ContentOptions_1.AssetEngine.PSDK] = EngineSelector.PSDK,
    _b[ContentOptions_1.AssetEngine.CBS] = EngineSelector.CBS,
    _b[ContentOptions_1.AssetEngine.DISNEY] = EngineSelector.DISNEY,
    _b[ContentOptions_1.AssetEngine.ESPN] = EngineSelector.ESPN,
    _b[ContentOptions_1.AssetEngine.HULU] = EngineSelector.HULU,
    _b[ContentOptions_1.AssetEngine.NBCUNI] = EngineSelector.FLASH,
    _b[ContentOptions_1.AssetEngine.HELIO] = EngineSelector.HELIO,
    _b[ContentOptions_1.AssetEngine.AAMP] = EngineSelector.AAMP,
    _b);
app.registerModule("EngineSelector", EngineSelector, { autostart: true });

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"../Application":483,"../ConfigurationManager":484,"../PlayerPlatformConstants":490,"../assets/BaseAsset":537,"../assets/ContentOptions":538,"../assets/OttAsset":540,"../assets/OttLocatorParser":541,"../util/Logger":571}],547:[function(require,module,exports){
(function (global){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var _a;
require("../../handlers/CrossStreamPreventionHandler");
require("../../handlers/NetworkDownHandler");
require("./AAMPPlayerEvents");
var Application_1 = require("../../Application");
var BasePlayer_1 = require("../base/BasePlayer");
var Logger_1 = require("../../util/Logger");
var constants = require("../../PlayerPlatformConstants");
var urlService = require("../../services/URLService");
var SessionManager_1 = require("../../handlers/SessionManager");
var AAMPPlayerState;
(function (AAMPPlayerState) {
    AAMPPlayerState[AAMPPlayerState["IDLE"] = 0] = "IDLE";
    AAMPPlayerState[AAMPPlayerState["INITIALIZING"] = 1] = "INITIALIZING";
    AAMPPlayerState[AAMPPlayerState["INITIALIZED"] = 2] = "INITIALIZED";
    AAMPPlayerState[AAMPPlayerState["PREPARING"] = 3] = "PREPARING";
    AAMPPlayerState[AAMPPlayerState["PREPARED"] = 4] = "PREPARED";
    AAMPPlayerState[AAMPPlayerState["BUFFERING"] = 5] = "BUFFERING";
    AAMPPlayerState[AAMPPlayerState["PAUSED"] = 6] = "PAUSED";
    AAMPPlayerState[AAMPPlayerState["SEEKING"] = 7] = "SEEKING";
    AAMPPlayerState[AAMPPlayerState["PLAYING"] = 8] = "PLAYING";
    AAMPPlayerState[AAMPPlayerState["STOPPING"] = 9] = "STOPPING";
    AAMPPlayerState[AAMPPlayerState["STOPPED"] = 10] = "STOPPED";
    AAMPPlayerState[AAMPPlayerState["COMPLETE"] = 11] = "COMPLETE";
    AAMPPlayerState[AAMPPlayerState["ERROR"] = 12] = "ERROR";
    AAMPPlayerState[AAMPPlayerState["RELEASED"] = 13] = "RELEASED";
})(AAMPPlayerState = exports.AAMPPlayerState || (exports.AAMPPlayerState = {}));
exports.AAMP_PLAYERSTATE_MAP = (_a = {},
    _a[AAMPPlayerState.IDLE] = constants.STATUS_IDLE,
    _a[AAMPPlayerState.INITIALIZING] = constants.STATUS_INITIALIZING,
    _a[AAMPPlayerState.INITIALIZED] = constants.STATUS_INITIALIZED,
    _a[AAMPPlayerState.PREPARING] = constants.STATUS_PREPARING,
    _a[AAMPPlayerState.PREPARED] = constants.STATUS_PREPARED,
    _a[AAMPPlayerState.BUFFERING] = constants.STATUS_BUFFERING,
    _a[AAMPPlayerState.PAUSED] = constants.STATUS_PAUSED,
    _a[AAMPPlayerState.SEEKING] = constants.STATUS_SEEKING,
    _a[AAMPPlayerState.PLAYING] = constants.STATUS_PLAYING,
    _a[AAMPPlayerState.STOPPING] = constants.STATUS_STOPPING,
    _a[AAMPPlayerState.STOPPED] = constants.STATUS_STOPPED,
    _a[AAMPPlayerState.COMPLETE] = constants.STATUS_COMPLETE,
    _a[AAMPPlayerState.ERROR] = constants.STATUS_ERROR,
    _a[AAMPPlayerState.RELEASED] = constants.STATUS_RELEASED,
    _a);
var AAMPPlayer = /** @class */ (function (_super) {
    __extends(AAMPPlayer, _super);
    function AAMPPlayer() {
        var _this = _super.call(this) || this;
        _this.playerVersion = "unavailable";
        _this.supportedPlaybackSpeeds = [-64, -32, -16, -4, -1, 0, 1, 4, 16, 32, 64];
        _this.startTime = 0;
        _this.logger = new Logger_1.Logger("AAMPPlayer");
        return _this;
    }
    AAMPPlayer.prototype.init = function (sandbox) {
        _super.prototype.init.call(this, sandbox);
        this.width = 1280;
        this.height = 720;
        this.offsetx = 0;
        this.offsety = 0;
        this.volume = 1.0;
        this.currentLanguage = "";
        this.availableLanguages = undefined;
        this.availableBitrates = [];
        this.hasDrm = false;
        this.currentBitrate = 0;
        this.initPlayer();
        this.playerState = AAMPPlayerState.IDLE;
        this.currentPosition = 0;
        this.totalDuration = 0;
        this.startPosition = 0;
        this.endPosition = 0;
        this.currentPlaybackSpeed = 0;
        this.isFirstTune = false;
        this.setPlayerReady();
        return this;
    };
    AAMPPlayer.prototype.destroy = function (sandbox) {
        _super.prototype.destroy.call(this, sandbox);
        this.player.stop();
    };
    /**
     * AAMPPlayer Functions
     */
    AAMPPlayer.prototype.initPlayer = function () {
        this.logger.trace("initPlayer");
        // AAMP is attached to window on certain RDK builds
        // it is never included as a javascript library.
        this.player = rdkMediaPlayer;
        //Required for XRE-10360
        this.player.toString = function () {
            return "[object _RDKMediaPlayer]";
        };
        /*
         * AAMPPlayer Engine Version stats
         * 1.0 - Initial AAMPPlayer Engine
         * 2.0 - Includes server side DAI support
         */
        if (this.player.version) {
            this.playerVersion = "AAMP_VERSION=" + this.player.version;
        }
        else {
            this.playerVersion = "AAMP_VERSION=UNAVAILABLE";
        }
        this.logger.info("initPlayer: " + this.playerVersion);
    };
    AAMPPlayer.prototype.play = function () {
        this.logger.trace("play");
        // Avoid play being invoked prematurely during channel change. setAsset invokes play internally
        if (this.playerState === AAMPPlayerState.PAUSED) {
            this.player.play();
        }
    };
    AAMPPlayer.prototype.pause = function () {
        this.logger.trace("pause");
        this.player.pause();
    };
    AAMPPlayer.prototype.stop = function () {
        this.logger.trace("stop");
        this.availableLanguages = undefined;
        this.availableBitrates = [];
        this.currentBitrate = 0;
        this.currentLanguage = "";
        this.hasDrm = false;
        this.player.stop();
    };
    AAMPPlayer.prototype.seekToLive = function () {
        this.logger.trace("seekToLive");
        this.player.seekToLive();
    };
    /**
     * AAMPPlayer Setters
     */
    AAMPPlayer.prototype.setAsset = function (asset) {
        this.logger.trace("setAsset: asset=" + JSON.stringify(asset));
        this.asset = asset;
        //To fix seek() call that was missed, because AAMPPlayer was not initialized at that time
        if (this.isFirstTune === false && this.asset.resumePosition > 0) {
            this.logger.trace("Asset ResumePosition:" + this.asset.resumePosition);
            this.isFirstTune = true;
            this.player.position = this.asset.resumePosition / 1000.00;
        }
        this.asset.addSubscribedTag("#EXT-X-TARGETDURATION");
        try {//WMR TODO
            //this.player.setSubscribeTags(this.asset.subscribedTags);
        }
        catch (error) {
            this.logger.warn("setAsset: Error occurred while setting subscribedTags: " + JSON.stringify(error));
        }
        this.logger.warn("setAsset: asset.url=" + this.asset.url);
        // addCustomHTTPHeader is not supported in AAMP player version 2.1 or older
        try {/*WMR TODO
            this.player.addCustomHTTPHeader("X-MoneyTrace", [
                SessionManager_1.SessionManager.instance.moneyTrace.traceId,
                SessionManager_1.SessionManager.instance.moneyTrace.parentId,
                SessionManager_1.SessionManager.instance.moneyTrace.spanId
            ]);*/
            SessionManager_1.SessionManager.instance.moneyTrace.createTraceMessage();
        }
        catch (error) {
            this.logger.warn("setAsset: Error occurred while adding custom X-MoneyTrace HTTP header: " + JSON.stringify(error));
        }
        this.startTime = Date.now();
        this.player.url = urlService.getURLForPlayback(this.asset.url, this.asset);
        this.currentPlaybackSpeed = 1;
    };
    AAMPPlayer.prototype.setBitrateRange = function (min, max) {
        /*
         * AAMP doesn't support this API right now.
         */
        this.logger.warn("AAMPPlayer.setBitrateRange(" + min + ", " + max + ") is unsupported as its not required by AAMP!");
    };
    AAMPPlayer.prototype.setBlock = function (flag) {
        this.logger.trace("setBlock: " + flag);
        if (flag === true) {
            this.player.volume = 0;
           // this.player.setVideoMute(true); WMR TODO
        }
        else {
            this.player.volume = this.volume * 100;
           // this.player.setVideoMute(false); WMR TODO
        }
    };
    AAMPPlayer.prototype.setBufferControlParameters = function (initial, playback) {
        /*
         * AAMP doesn't support this API right now.
         */
        this.logger.warn("AAMPPlayer.setBufferControlParameters(" + initial + ", " + playback + ") is unsupported as its not required by AAMP!");
    };
    AAMPPlayer.prototype.setClosedCaptionsEnabled = function (flag) {
        /*
         * AAMP doesn't include ClosedCaptions support.
         * CC is handled by ClosedCaption module in XRE Native Receiver (in STB).
         */
        this.logger.warn("AAMPPlayer.setClosedCaptionsEnabled(" + flag + ") is unsupported by AAMP");
    };
    AAMPPlayer.prototype.setClosedCaptionsTrack = function (track) {
        /*
         * AAMP doesn't include ClosedCaptions support.
         * CC is handled by ClosedCaption module in XRE Native Receiver (in STB).
         */
        this.logger.warn("AAMPPlayer.setClosedCaptionsTrack(" + track + ") is unsupported by AAMP");
    };
    AAMPPlayer.prototype.setCurrentTimeUpdateInterval = function (interval) {
        /*
         * AAMP doesn't support this API right now.
         */
        this.logger.warn("AAMPPlayer.setCurrentTimeUpdateInterval(" + interval + ") is unsupported as its not required by AAMP!");
    };
    AAMPPlayer.prototype.setDimensionsOfVideo = function (width, height) {
        this.logger.trace("setDimensionsOfVideo: " + width + "x" + height);
        this.width = width;
        this.height = height;
        this.player.setVideoRectangle(this.offsetx, this.offsety, this.width, this.height);
    };
    AAMPPlayer.prototype.setInitialBitrate = function (initialBitrate) {
        /*
         * AAMP doesn't support this API right now.
         */
        this.logger.warn("AAMPPlayer.setInitialBitrate(" + initialBitrate + ") is unsupported as its not required by AAMP!");
    };
    AAMPPlayer.prototype.setPosition = function (msecs) {
        this.logger.trace("setPosition: " + msecs);
        this.player.position = msecs / 1000.00;
    };
    AAMPPlayer.prototype.setPositionRelative = function (msecs) {
        this.logger.trace("setPositionRelative: " + msecs);
        var position = this.currentPosition + msecs;
        this.setPosition(position);
    };
    AAMPPlayer.prototype.setPreferredAudioLanguage = function (language) {
        this.logger.trace("setPreferredAudioLanguage: " + language);
        if (this.availableLanguages === undefined) {
            // When availableLanguages is undefined AAMP needs to set the language in-order to send it to native
            this.currentLanguage = language;
            this.player.audioLanguage = this.currentLanguage;
        }
        else {
            // When availableLanguages list is not empty
            var len = this.availableLanguages.length;
            if (len > 0) {
                var langFound = false;
                for (var langCount = 0; langCount < len; langCount++) {
                    if (this.availableLanguages[langCount] === language) {
                        langFound = true;
                        this.currentLanguage = language;
                        this.player.audioLanguage = this.currentLanguage;
                        break;
                    }
                }
                if (langFound === false) {
                    // If user provided language is not available in availableLanguages list
                    this.logger.warn("Requested language " + language + " not available in this asset " + this.availableLanguages);
                    return;
                }
            }
            else {
                this.logger.warn("Language list is empty ");
            }
        }
    };
    AAMPPlayer.prototype.setPreferredZoomSetting = function (setting) {
        this.logger.trace("setPreferredZoomSetting " + setting);
        this.player.zoom = setting;
    };
    AAMPPlayer.prototype.setSpeed = function (speed, overshootCorrection) {
        this.logger.trace("setSpeed: spd=" + speed + " ovr=" + overshootCorrection);
        this.player.changeSpeed(speed, overshootCorrection);
    };
    AAMPPlayer.prototype.setVolume = function (volume) {
        this.logger.trace("setVolume: " + volume);
        this.volume = volume;
        this.player.volume = volume * 100;
    };
    AAMPPlayer.prototype.setInitialBufferTime = function (msecs) {
        /*
         * AAMP doesn't support this API right now.
         */
        this.logger.warn("AAMPPlayer.setInitialBufferTime(" + msecs + ") is unsupported as its not required by AAMP!");
    };
    AAMPPlayer.prototype.setPlayingVODBufferTime = function (msecs) {
        /*
         * AAMP doesn't support this API right now.
         */
        this.logger.warn("AAMPPlayer.setPlayingVODBufferTime(" + msecs + ") is unsupported as its not required by AAMP!");
    };
    AAMPPlayer.prototype.setPlayingLinearBufferTime = function (msecs) {
        /*
         * AAMP doesn't support this API right now.
         */
        this.logger.warn("AAMPPlayer.setPlayingLinearBufferTime(" + msecs + ") is unsupported as its not required by AAMP!");
    };
    AAMPPlayer.prototype.setScale = function (w, h) {
        this.logger.trace("setScale: " + w + "x" + h);
        this.width = (this.width * w);
        this.height = (this.height * h);
        this.player.setVideoRectangle(this.offsetx, this.offsety, this.width, this.height);
    };
    AAMPPlayer.prototype.setOffset = function (x, y) {
        this.logger.trace("setOffset: x=" + x + "y=" + y);
        this.offsetx = x;
        this.offsety = y;
        this.player.setVideoRectangle(this.offsetx, this.offsety, this.width, this.height);
    };
    AAMPPlayer.prototype.setTrickplayMaxFps = function (maxFps) {
        /*
         * AAMP doesn't support this API right now.
         */
        this.logger.warn("AAMPPlayer.setTrickplayMaxFps(" + maxFps + ") is unsupported as its not required by AAMP!");
    };
    AAMPPlayer.prototype.setAudioOnly = function (mute) {
        this.logger.trace("setAudioOnly: " + mute);
        //this.player.setVideoMute(mute);WMR TODO
    };
    AAMPPlayer.prototype.getVideoHeight = function () {
        return this.height;
    };
    AAMPPlayer.prototype.getVideoWidth = function () {
        return this.width;
    };
    AAMPPlayer.prototype.getVideoType = function () {
        return "";//this.player.mediaType;WMR TODO
    };
    AAMPPlayer.prototype.getAvailableBitrates = function () {
        this.logger.trace("getAvailableBitrates: " + this.availableBitrates);
        return this.availableBitrates || [];
    };
    AAMPPlayer.prototype.getAvailableAudioLanguages = function () {
        this.logger.trace("getAvailableAudioLanguages: " + this.availableLanguages);
        return this.availableLanguages;
    };
    AAMPPlayer.prototype.getPlayerStatus = function () {
        return exports.AAMP_PLAYERSTATE_MAP[this.playerState];
    };
    AAMPPlayer.prototype.getCurrentAudioLanguage = function () {
        return this.player.audioLanguage || this.currentLanguage;
    };
    AAMPPlayer.prototype.getCurrentBitrate = function () {
        return this.currentBitrate;
    };
    AAMPPlayer.prototype.getVersion = function () {
        return this.playerVersion;
    };
    AAMPPlayer.prototype.getCurrentPosition = function () {
        this.logger.trace("currentPosition :" + this.currentPosition);
        return this.currentPosition;
    };
    AAMPPlayer.prototype.getDuration = function () {
        this.logger.trace("duration :" + this.totalDuration);
        return this.totalDuration;
    };
    AAMPPlayer.prototype.getStartPosition = function () {
        this.logger.trace("StartPosition :" + this.startPosition);
        return this.startPosition;
    };
    AAMPPlayer.prototype.getEndPosition = function () {
        this.logger.trace("EndPosition :" + this.endPosition);
        return this.endPosition;
    };
    AAMPPlayer.prototype.getCurrentPlaybackSpeed = function () {
        this.logger.trace("currentPlaybackSpeed :" + this.currentPlaybackSpeed);
        return this.currentPlaybackSpeed;
    };
    AAMPPlayer.prototype.getSupportedPlaybackSpeeds = function () {
        this.logger.trace("SupportedPlaybackSpeeds :" + this.supportedPlaybackSpeeds);
        return this.supportedPlaybackSpeeds;
    };
    AAMPPlayer.prototype.getVolume = function () {
        return this.volume;
    };
    AAMPPlayer.prototype.hasDRM = function () {
        return this.hasDrm;
    };
    AAMPPlayer.prototype.updateMetaDataInfo = function (event) {
        this.availableLanguages = event.languages;
        this.totalDuration = event.durationMiliseconds;
        this.availableBitrates = event.bitrates;
        this.width = event.width;
        this.height = event.height;
        this.hasDrm = true;
        if (typeof event.hasDrm !== "undefined") {
            this.hasDrm = event.hasDrm;
        }
    };
    AAMPPlayer.prototype.updateOnProgressMetaData = function (position, duration, start, end) {
        this.currentPosition = position;
        this.totalDuration = duration;
        this.startPosition = start;
        this.endPosition = end;
    };
    AAMPPlayer.prototype.updateOnSpeedChangedMetaData = function (speed) {
        this.currentPlaybackSpeed = speed;
    };
    AAMPPlayer.prototype.updatePlayerState = function (state) {
        this.playerState = state;
    };
    AAMPPlayer.prototype.updateBitrate = function (bitrate) {
        this.currentBitrate = bitrate;
    };
    return AAMPPlayer;
}(BasePlayer_1.BasePlayer));
exports.AAMPPlayer = AAMPPlayer;
Application_1.registerModule("AAMPPlayer", AAMPPlayer, {
    children: [
        "CrossStreamPreventionHandler",
        "AAMPPlayerEvents"
    ]
});

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"../../Application":483,"../../PlayerPlatformConstants":490,"../../handlers/CrossStreamPreventionHandler":560,"../../handlers/NetworkDownHandler":562,"../../handlers/SessionManager":565,"../../services/URLService":568,"../../util/Logger":571,"../base/BasePlayer":549,"./AAMPPlayerEvents":548}],548:[function(require,module,exports){
(function (global){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var events = require("../../PlayerPlatformAPIEvents");
var Application_1 = require("../../Application");
var AAMPPlayer_1 = require("./AAMPPlayer");
var Logger_1 = require("../../util/Logger");
var PPError_1 = require("../../PPError");
var HlsTagFactory_1 = require("../../util/hls/HlsTagFactory");
var CONTENT_UNAUTHORIZED = 40;
var EventListener = /** @class */ (function () {
    function EventListener() {
    }
    return EventListener;
}());
exports.EventListener = EventListener;
var AAMPPlayerEvents = /** @class */ (function () {
    function AAMPPlayerEvents() {
        this.logger = new Logger_1.Logger("AAMPPlayerEvents");
        this.listeners = [];
    }
    AAMPPlayerEvents.prototype.init = function (sandbox) {
        this.sandbox = sandbox;
        this.aamp = sandbox.parent;
        this.initEvents();
        return this;
    };
    AAMPPlayerEvents.prototype.destroy = function () {
        this.logger.trace("destroy");
        while (this.listeners.length > 0) {
            var lastListener = this.listeners.pop();
            if (lastListener) {
                lastListener.object.removeEventListener(lastListener.type, lastListener.handler);
            }
        }
    };
    AAMPPlayerEvents.prototype.addListener = function (object, type, handler) {
        var newHandler = handler.bind(this);
        object.on(type,newHandler);//WMR - switched to player.on 
        //object.addEventListener(type, newHandler, null);
        var trio = { object: object, type: type, handler: newHandler };
        this.listeners.push(trio);
    };
    AAMPPlayerEvents.prototype.initEvents = function () {
        this.logger.trace("initEvents");
//WMR new events
        this.addListener(this.aamp.player, "onMediaOpened", this.onMediaOpened);
        this.addListener(this.aamp.player, "onProgress", this.onProgress);
        this.addListener(this.aamp.player, "onPlaying", this.onPlaying);
/* WMR old events
        this.addListener(this.aamp.player, "tuned", this.onTuned);
        this.addListener(this.aamp.player, "tuneFailed", this.onTuneFailed);
        this.addListener(this.aamp.player, "speedChanged", this.onSpeedChanged);
        this.addListener(this.aamp.player, "eos", this.onPlaybackEnded);
        this.addListener(this.aamp.player, "playlistIndexed", this.onPlaylistIndexed);
        this.addListener(this.aamp.player, "progress", this.onProgress);
        this.addListener(this.aamp.player, "decoderAvailable", this.onDecoderAvailable);
        this.addListener(this.aamp.player, "jsEvent", this.onJSEvent);
        this.addListener(this.aamp.player, "metadata", this.onMetadata);
        this.addListener(this.aamp.player, "enteringLive", this.onEnteringLive);
        this.addListener(this.aamp.player, "bitrateChanged", this.onBitrateChanged);
        this.addListener(this.aamp.player, "timedMetadata", this.onTimedMetadata);
        this.addListener(this.aamp.player, "statusChanged", this.onStatusChanged);
*/
    };
    //WMR new events
    AAMPPlayerEvents.prototype.onMediaOpened = function (event) {
        this.logger.trace("[AAMP_JS_EVENT] event onTuned");
        global.XREReceiver.onEvent("onMediaOpened", event);
    };
    AAMPPlayerEvents.prototype.onProgress = function (event) {
        this.logger.trace("[AAMP_JS_EVENT] event onTuned");
        global.XREReceiver.onEvent("onProgress", event);
    };
    AAMPPlayerEvents.prototype.onPlaying = function (event) {
        this.logger.trace("[AAMP_JS_EVENT] event onTuned");
        global.XREReceiver.onEvent("onPlaying", event);
    };
/* WMR old events
    AAMPPlayerEvents.prototype.onTuned = function () {
        this.logger.trace("[AAMP_JS_EVENT] event onTuned");
        global.XREReceiver.onEvent("onTuned", {});
    };
    AAMPPlayerEvents.prototype.onTuneFailed = function (event) {
        this.logger.trace("[AAMP_JS_EVENT] event onTuneFailed");
        var ppErr = new PPError_1.PPError(event.code, null, event.description);
        var isRetry = (event.recoveryEnabled === true) || (event.code !== CONTENT_UNAUTHORIZED);
        events.dispatchEvent(new events.MediaFailedEvent(ppErr, isRetry));
    };
    AAMPPlayerEvents.prototype.onSpeedChanged = function (event) {
        this.logger.trace("[AAMP_JS_EVENT] event onSpeedChanged speed=" + event.speed + " reason=" + event.reason);
        this.aamp.updateOnSpeedChangedMetaData(event.speed);
        events.dispatchEvent(new events.PlaybackSpeedChangedEvent(event.speed));
    };
    AAMPPlayerEvents.prototype.onPlaybackEnded = function () {
        this.logger.trace("[AAMP_JS_EVENT] event onEOS");
        events.dispatchEvent(new events.MediaEndedEvent());
    };
    AAMPPlayerEvents.prototype.onPlaylistIndexed = function () {
        this.logger.trace("[AAMP_JS_EVENT] event onPlaylistIndexed");
    };
    AAMPPlayerEvents.prototype.onProgress = function (event) {
        var playerEvent = new events.MediaProgressEvent(event.positionMiliseconds, event.playbackSpeed, event.startMiliseconds, event.endMiliseconds, 1000);
        this.aamp.updateOnProgressMetaData(event.positionMiliseconds, event.durationMiliseconds, event.startMiliseconds, event.endMiliseconds);
        events.dispatchEvent(playerEvent);
    };
    AAMPPlayerEvents.prototype.onDecoderAvailable = function (event) {
        this.logger.trace("[AAMP_JS_EVENT] event onDecoderAvailable decoderHandle=" + event.decoderHandle);
        global.XREReceiver.onEvent("onDecoderAvailable", { decoderHandle: event.decoderHandle });
    };
    AAMPPlayerEvents.prototype.onJSEvent = function () {
        this.logger.trace("[AAMP_JS_EVENT] event onJSEvent");
    };
    AAMPPlayerEvents.prototype.onMetadata = function (event) {
        this.logger.trace("[AAMP_JS_EVENT] event onMetadata " + JSON.stringify(event));
        var len = event.languages.length;
        var langs3 = [];
        for (var i = 0; i < len; i++) {
            langs3.push(event.languages[i]);
        }
        this.aamp.updateMetaDataInfo(event);
        var width = event.width || 1280;
        var height = event.height || 720;
        var openingLatency = (Date.now() - this.aamp.startTime);
        var hasDRM = true;
        if (typeof event.hasDrm !== "undefined") {
            hasDRM = event.hasDrm;
        }
        var playerEvent = new events.MediaOpenedEvent(this.aamp.getVideoType(), //mediaType
        this.aamp.getSupportedPlaybackSpeeds(), //playbackSpeeds
        langs3, //availableAudioLanguages
        width, //width
        height, //height
        openingLatency, //openingLatency
        hasDRM, //hasDRM
        true);
        events.dispatchEvent(playerEvent);
    };
    AAMPPlayerEvents.prototype.onEnteringLive = function () {
        this.logger.trace("[AAMP_JS_EVENT] event onEnteringLive");
        this.sandbox.publish("xre:onenteringlive");
    };
    AAMPPlayerEvents.prototype.onBitrateChanged = function (event) {
        this.logger.trace("[AAMP_JS_EVENT] event onBitrateChanged at time: " + event.time);
        this.aamp.updateBitrate(event.bitRate);
        var playerEvent = new events.BitrateChangedEvent(event.bitRate, //bitrate
        event.description, //change reason
        event.width, //width
        event.height); //height
        events.dispatchEvent(playerEvent);
    };
    AAMPPlayerEvents.prototype.onTimedMetadata = function (event) {
        this.logger.trace("[AAMP_JS_EVENT] onTimedMetadata time: " + event.timedMetadata.time);
        this.sandbox.publish("player:timedMetadata", event.timedMetadata);
        try {
            var metadata = event.timedMetadata;
            this.logger.trace("onTimedMetadata metadata: ", JSON.stringify(metadata));
            var hlsTag = HlsTagFactory_1.create(metadata.name, metadata.time, metadata.content);
            this.sandbox.publish("player:tag", hlsTag);
        }
        catch (error) {
            this.logger.error("[AAMP_JS_EVENT] Error occurred while responding to timed metadata event: ");
        }
    };
    AAMPPlayerEvents.prototype.onStatusChanged = function (event) {
        this.logger.trace("[AAMP_JS_EVENT] onStatusChanged status: " + event.state);
        //Temp workaround for timedMetaData not getting processed before initialized state change
        var playState = event.state;
        if (playState === AAMPPlayer_1.AAMPPlayerState.INITIALIZED || playState === AAMPPlayer_1.AAMPPlayerState.PREPARING) {
            return;
        }
        else if (playState === AAMPPlayer_1.AAMPPlayerState.PREPARED) {
            this.aamp.updatePlayerState(AAMPPlayer_1.AAMPPlayerState.INITIALIZED);
            events.dispatchEvent(new events.PlayStateChangedEvent(AAMPPlayer_1.AAMP_PLAYERSTATE_MAP[AAMPPlayer_1.AAMPPlayerState.INITIALIZED]));
            this.aamp.updatePlayerState(AAMPPlayer_1.AAMPPlayerState.PREPARING);
            events.dispatchEvent(new events.PlayStateChangedEvent(AAMPPlayer_1.AAMP_PLAYERSTATE_MAP[AAMPPlayer_1.AAMPPlayerState.PREPARING]));
        }
        this.aamp.updatePlayerState(event.state);
        events.dispatchEvent(new events.PlayStateChangedEvent(AAMPPlayer_1.AAMP_PLAYERSTATE_MAP[event.state]));
    };
    */
    return AAMPPlayerEvents;
}());
exports.AAMPPlayerEvents = AAMPPlayerEvents;
Application_1.registerModule("AAMPPlayerEvents", AAMPPlayerEvents);

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"../../Application":483,"../../PPError":487,"../../PlayerPlatformAPIEvents":489,"../../util/Logger":571,"../../util/hls/HlsTagFactory":579,"./AAMPPlayer":547}],549:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var BasePlayer = /** @class */ (function () {
    function BasePlayer() {
        this.playerReadyCallbacks = [];
        this.subs = [];
        this.playerReady = false;
    }
    BasePlayer.prototype.init = function (sandbox) {
        var _args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            _args[_i - 1] = arguments[_i];
        }
        this.sandbox = sandbox;
        this.subs = [
            sandbox.subscribe("api:play", this.play, {}, this),
            sandbox.subscribe("api:pause", this.pause, {}, this),
            sandbox.subscribe("api:stop", this.stop, {}, this),
            sandbox.subscribe("api:setAsset", this.setAsset, {}, this),
            sandbox.subscribe("api:setPosition", this.setPosition, {}, this),
            sandbox.subscribe("api:setAutoPlay", this.setAutoPlay, {}, this),
            sandbox.subscribe("api:setVolume", this.setVolume, {}, this),
            sandbox.subscribe("api:setSpeed", this.setSpeed, {}, this),
            sandbox.subscribe("api:setBlock", this.setBlock, {}, this),
            sandbox.subscribe("api:setScale", this.setScale, {}, this),
            sandbox.subscribe("api:setDimensionsOfVideo", this.setDimensionsOfVideo, {}, this),
            sandbox.subscribe("api:setInitialBitrate", this.setInitialBitrate, {}, this),
            sandbox.subscribe("api:setBitrateRange", this.setBitrateRange, {}, this),
            sandbox.subscribe("api:setBitratePolicy", this.setBitratePolicy, {}, this),
            sandbox.subscribe("api:setInitialBufferTime", this.setInitialBufferTime, {}, this),
            sandbox.subscribe("api:setPlayingVODBufferTime", this.setPlayingVODBufferTime, {}, this),
            sandbox.subscribe("api:setPlayingLinearBufferTime", this.setPlayingLinearBufferTime, {}, this),
            sandbox.subscribe("api:setPreferredZoomSetting", this.setPreferredZoomSetting, {}, this),
            sandbox.subscribe("api:setPreferredAudioLanguage", this.setPreferredAudioLanguage, {}, this),
            sandbox.subscribe("api:setClosedCaptionsEnabled", this.setClosedCaptionsEnabled, {}, this),
            sandbox.subscribe("api:setClosedCaptionsStyle", this.setClosedCaptionsStyle, {}, this),
            sandbox.subscribe("api:setClosedCaptionsTrack", this.setClosedCaptionsTrack, {}, this),
            sandbox.subscribe("api:setCurrentTimeUpdateInterval", this.setCurrentTimeUpdateInterval, {}, this),
            sandbox.subscribe("api:setOffset", this.setOffset, {}, this),
            sandbox.subscribe("api:seekToLive", this.seekToLive, {}, this),
            sandbox.subscribe("api:setAudioOnly", this.setAudioOnly, {}, this),
            // for when ads modify positioning
            sandbox.subscribe("ads:setPosition", this.setPosition, {}, this)
        ];
        return this;
    };
    BasePlayer.prototype.destroy = function (sandbox) {
        this.playerReady = false;
        this.stop();
        // remove all subscriptions
        this.subs.forEach(function (sub) {
            sandbox.remove(sub.channel.namespace, sub.fn);
        });
    };
    BasePlayer.prototype.onPlayerReady = function (callback) {
        if (this.playerReady) {
            // if it's already ready, execute callback immediately
            callback.call(this, this.player);
        }
        else {
            this.playerReadyCallbacks.push(callback);
        }
    };
    BasePlayer.prototype.setPlayerReady = function () {
        this.playerReady = true;
        for (var i = 0; i < this.playerReadyCallbacks.length; i++) {
            var callback = this.playerReadyCallbacks[i];
            if (callback && typeof callback === "function") {
                try {
                    callback.call(this, this.player);
                }
                catch (error) {
                    // need to call the rest of the callbacks if one fails.
                    this.logger.error("onPlayerReady callback failed: " + error);
                }
            }
        }
        // remove all callbacks
        this.playerReadyCallbacks = [];
    };
    BasePlayer.prototype.getAssetEngineType = function () {
        return this.assetEngine;
    };
    BasePlayer.prototype.getAutoPlay = function () {
        return this.autoPlay;
    };
    BasePlayer.prototype.getAvailableBitrates = function () {
        return [];
    };
    BasePlayer.prototype.getAvailableAudioLanguages = function () {
        return [];
    };
    BasePlayer.prototype.getAvailableClosedCaptionTracks = function () {
        return [];
    };
    BasePlayer.prototype.getBitrateRange = function () {
        return [];
    };
    BasePlayer.prototype.getBufferFilledLength = function () {
        return -1;
    };
    BasePlayer.prototype.getBufferTime = function () {
        return -1;
    };
    BasePlayer.prototype.getClosedCaptionsStatus = function () {
        return false;
    };
    BasePlayer.prototype.getCurrentAudioLanguage = function () {
        return null;
    };
    BasePlayer.prototype.getCurrentBitrate = function () {
        return 0;
    };
    BasePlayer.prototype.getCurrentClosedCaptionsStyle = function () {
        return null;
    };
    BasePlayer.prototype.getCurrentClosedCaptionTrack = function () {
        return null;
    };
    BasePlayer.prototype.getCurrentDroppedFrames = function () {
        return -1;
    };
    BasePlayer.prototype.getCurrentFPS = function () {
        return 0;
    };
    BasePlayer.prototype.getCurrentPlaybackSpeed = function () {
        return -1;
    };
    BasePlayer.prototype.getCurrentPosition = function () {
        return 0;
    };
    BasePlayer.prototype.getDuration = function () {
        return -1;
    };
    BasePlayer.prototype.getEndPosition = function () {
        return -1;
    };
    BasePlayer.prototype.getInitialBitrate = function () {
        return -1;
    };
    BasePlayer.prototype.getPlayerStatus = function () {
        return "";
    };
    BasePlayer.prototype.getSeenCount = function () {
        return -1;
    };
    BasePlayer.prototype.getStartPosition = function () {
        return -1;
    };
    BasePlayer.prototype.getSupportedClosedCaptionsOptions = function () {
        return null;
    };
    BasePlayer.prototype.getSupportedPlaybackSpeeds = function () {
        return [];
    };
    BasePlayer.prototype.getVersion = function () {
        return "";
    };
    BasePlayer.prototype.getVideoHeight = function () {
        return -1;
    };
    BasePlayer.prototype.getVideoWidth = function () {
        return -1;
    };
    BasePlayer.prototype.getVideoType = function () {
        return "";
    };
    BasePlayer.prototype.getVolume = function () {
        return 0;
    };
    BasePlayer.prototype.hasCC = function () {
        return false;
    };
    BasePlayer.prototype.hasDRM = function () {
        return false;
    };
    BasePlayer.prototype.setAutoPlay = function (flag) {
        this.autoPlay = flag;
    };
    BasePlayer.prototype.setAsset = function (_asset) { };
    BasePlayer.prototype.setVolume = function (_volume) { };
    BasePlayer.prototype.setPosition = function (_position) { };
    BasePlayer.prototype.seekToLive = function () { };
    BasePlayer.prototype.setBitratePolicy = function (_policy) { };
    BasePlayer.prototype.setBitrateRange = function (_min, _max) { };
    BasePlayer.prototype.setBlock = function (_flag) { };
    BasePlayer.prototype.setClosedCaptionsEnabled = function (_flag) { };
    BasePlayer.prototype.setClosedCaptionsStyle = function (_style) { };
    BasePlayer.prototype.setClosedCaptionsTrack = function (_track) { };
    BasePlayer.prototype.setCurrentTimeUpdateInterval = function (_interval) { };
    BasePlayer.prototype.setDimensionsOfVideo = function (_width, _height) { };
    BasePlayer.prototype.setInitialBitrate = function (_initial) { };
    BasePlayer.prototype.setInitialBufferTime = function (_time) { };
    BasePlayer.prototype.setOffset = function (_x, _y) { };
    BasePlayer.prototype.setPlayingLinearBufferTime = function (_time) { };
    BasePlayer.prototype.setPlayingVODBufferTime = function (_time) { };
    BasePlayer.prototype.setPreferredAudioLanguage = function (_language) { };
    BasePlayer.prototype.setPreferredZoomSetting = function (_setting) { };
    BasePlayer.prototype.setScale = function (_x, _y) { };
    BasePlayer.prototype.setSpeed = function (_speed, _overshootCorrect) { };
    BasePlayer.prototype.setAudioOnly = function (_mute) { };
    BasePlayer.prototype.stop = function () { };
    BasePlayer.prototype.play = function () { };
    BasePlayer.prototype.pause = function () { };
    BasePlayer.containerId = "viper-player-container";
    return BasePlayer;
}());
exports.BasePlayer = BasePlayer;

},{}],550:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var events = require("../../PlayerPlatformAPIEvents");
var Application_1 = require("../../Application");
var VideoAd_1 = require("../../ads/VideoAd");
var VideoAdBreak_1 = require("../../ads/VideoAdBreak");
var FlashPlayerEvents_1 = require("../../engines/flash/FlashPlayerEvents");
var Application_2 = require("../../Application");
var rxjs_1 = require("rxjs");
require("rxjs/add/observable/fromEvent");
require("rxjs/add/operator/map");
require("rxjs/add/operator/mapTo");
require("rxjs/add/operator/takeUntil");
require("rxjs/add/operator/distinctUntilChanged");
var FlashEventToEventMapper = /** @class */ (function () {
    function FlashEventToEventMapper() {
        this.adStartTime = 0;
    }
    FlashEventToEventMapper.prototype.init = function (sandbox) {
        var _this = this;
        this.sandbox = sandbox;
        Application_2.toObservable(FlashPlayerEvents_1.AD_START)
            .do(function (event) { return _this.adStartTime = event.time; })
            .map(function (event) { return _this._toAdStartEvent(event); })
            .takeUntil(this.sandbox.destroyed)
            .subscribe(function (event) { return events.emit(event); });
        Application_2.toObservable(FlashPlayerEvents_1.AD_COMPLETE)
            .map(function (event) { return _this._toAdCompleteEvent(event); })
            .takeUntil(this.sandbox.destroyed)
            .subscribe(function (event) { return events.emit(event); });
        /**
         *  SWF based flash ads will emit progress
         *  events even when playback is paused.
         *  The distinctUntilChanged captures only
         *  when progress is actually happening.
         */
        Application_2.toObservable(FlashPlayerEvents_1.AD_PROGRESS)
            .distinctUntilChanged(function (event1, event2) { return event1.position === event2.position; })
            .map(function (event) { return _this._toAdProgressEvent(event); })
            .takeUntil(this.sandbox.destroyed)
            .subscribe(function (event) { return events.emit(event); });
        Application_2.toObservable(FlashPlayerEvents_1.AD_BREAK_START)
            .map(function (event) { return _this._toAdBreakStartEvent(event); })
            .takeUntil(this.sandbox.destroyed)
            .subscribe(function (event) { return events.emit(event); });
        Application_2.toObservable(FlashPlayerEvents_1.AD_BREAK_COMPLETE)
            .map(function (event) { return _this._toAdBreakCompleteEvent(event); })
            .takeUntil(this.sandbox.destroyed)
            .subscribe(function (event) { return events.emit(event); });
        /**
         * Flash does not provide us with an ad exited or an ad break
         * exited event. This observable chain listens for an `api:stop`
         * and then determines if we are currently displaying a flash ad.
         * If we are displaying a flash ad then a PlayerPlatformAPI
         * AdBreakExited and AdExited event are emitted
         */
        Application_2.toObservable("api:stop")
            .withLatestFrom(rxjs_1.Observable.merge(Application_2.toObservable(FlashPlayerEvents_1.AD_START), Application_2.toObservable(FlashPlayerEvents_1.AD_PROGRESS), Application_2.toObservable(FlashPlayerEvents_1.AD_COMPLETE).mapTo(undefined)), rxjs_1.Observable.merge(Application_2.toObservable(FlashPlayerEvents_1.AD_BREAK_START), Application_2.toObservable(FlashPlayerEvents_1.AD_BREAK_COMPLETE).mapTo(undefined)), function (_, adEvent, adBreakEvent) {
            return {
                adBreak: adBreakEvent,
                ad: adEvent
            };
        })
            .filter(function (last) { return last.adBreak !== undefined && last.ad !== undefined; })
            .map(function (last) {
            return [
                _this._toAdExitedEvent(last.ad),
                _this._toAdBreakExitedEvent(last.adBreak)
            ];
        })
            .takeUntil(this.sandbox.destroyed)
            .subscribe(function (mappedEvents) {
            mappedEvents.forEach(function (event) { return events.emit(event); });
        });
        return this;
    };
    FlashEventToEventMapper.prototype.destroy = function () {
    };
    FlashEventToEventMapper.prototype._toAdBreakStartEvent = function (event) {
        return new events.AdBreakStartEvent(this._toVideoAdBreak(event));
    };
    FlashEventToEventMapper.prototype._toAdBreakCompleteEvent = function (event) {
        return new events.AdBreakCompleteEvent(this._toVideoAdBreak(event));
    };
    FlashEventToEventMapper.prototype._toAdBreakExitedEvent = function (event) {
        return new events.AdBreakExitedEvent(this._toVideoAdBreak(event));
    };
    FlashEventToEventMapper.prototype._toVideoAdBreak = function (event) {
        var ads = [];
        var startTime = 0;
        // Actionscript will give us an array like object and
        // not an actual array.
        for (var i = 0, length_1 = event.adBreak.ads.length; i < length_1; i++) {
            var ad = event.adBreak.ads[i];
            ads.push(this._toVideoAd(ad, startTime));
            startTime += ad.duration;
        }
        return new VideoAdBreak_1.VideoAdBreak(ads);
    };
    FlashEventToEventMapper.prototype._toAdProgressEvent = function (event) {
        return new events.AdProgressEvent(this._toVideoAd(event.ad, this.adStartTime), event.progress, event.playbackSpeed, event.position - this.adStartTime);
    };
    FlashEventToEventMapper.prototype._toAdCompleteEvent = function (event) {
        return new events.AdCompleteEvent(this._toVideoAd(event.ad, this.adStartTime), event.progress, event.playbackSpeed, event.position - this.adStartTime);
    };
    FlashEventToEventMapper.prototype._toAdExitedEvent = function (event) {
        return new events.AdExitedEvent(this._toVideoAd(event.ad, this.adStartTime), event.progress, event.playbackSpeed, event.position - this.adStartTime);
    };
    FlashEventToEventMapper.prototype._toAdStartEvent = function (event) {
        return new events.AdStartEvent(this._toVideoAd(event.ad, this.adStartTime), event.progress, event.playbackSpeed, event.position - this.adStartTime);
    };
    FlashEventToEventMapper.prototype._toVideoAd = function (ad, startTime) {
        var videoAd = new VideoAd_1.VideoAd(ad.id, startTime, ad.duration, {
            vpaid: ad.vpaid,
            clickThrough: ad.clickUrl,
            companionAds: ad.companionAds,
            cLinearAdAssetParams: ad.adAssetParams
        });
        videoAd.watched = ad.watched;
        return videoAd;
    };
    return FlashEventToEventMapper;
}());
exports.FlashEventToEventMapper = FlashEventToEventMapper;
Application_1.registerModule("FlashEventToEventMapper", FlashEventToEventMapper);

},{"../../Application":483,"../../PlayerPlatformAPIEvents":489,"../../ads/VideoAd":497,"../../ads/VideoAdBreak":498,"../../engines/flash/FlashPlayerEvents":551,"rxjs":281,"rxjs/add/observable/fromEvent":242,"rxjs/add/operator/distinctUntilChanged":257,"rxjs/add/operator/map":263,"rxjs/add/operator/mapTo":264,"rxjs/add/operator/takeUntil":276}],551:[function(require,module,exports){
(function (global){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var PPError_1 = require("../../PPError");
var constants = require("../../PlayerPlatformConstants");
var events = require("../../PlayerPlatformAPIEvents");
var Application_1 = require("../../Application");
var ConfigurationManager_1 = require("../../ConfigurationManager");
var Logger_1 = require("../../util/Logger");
var HlsTagFactory_1 = require("../../util/hls/HlsTagFactory");
var NetworkDownHandler_1 = require("../../handlers/NetworkDownHandler");
var rxjs_1 = require("rxjs");
require("rxjs/add/operator/take");
require("rxjs/add/operator/takeUntil");
require("rxjs/add/operator/timeout");
require("rxjs/add/observable/fromEvent");
var AdManagerFactory_1 = require("../../ads/AdManagerFactory");
var AdManager_1 = require("../../ads/AdManager");
exports.AD_BREAK_COMPLETE = "ads:adBreakComplete";
exports.AD_BREAK_START = "ads:adBreakStart";
exports.AD_COMPLETE = "ads:adComplete";
exports.AD_PROGRESS = "ads:adProgress";
exports.AD_START = "ads:adStart";
exports.AD_VPAID = "ads:vpaid";
var FlashPlayerEvents = /** @class */ (function () {
    function FlashPlayerEvents() {
        this.logger = new Logger_1.Logger("FlashPlayerEvents");
        this.sizeEvent = { width: 0, height: 0 };
        this.progressSubject = new rxjs_1.BehaviorSubject(null);
    }
    FlashPlayerEvents.prototype.init = function (sandbox) {
        this.sandbox = sandbox;
        this.flashPlayer = sandbox.parent;
        if (this.pendingCleanup) {
            this.pendingCleanup.unsubscribe();
            this.pendingCleanup = null;
        }
        // set up as a global variable for External Interface calls
        global.flashPlayerEvents = this;
        this.initFlashInitialSeekWorkaroundForAuditude();
        this.workaroundForVPAIDPauseForAuditude();
        return this;
    };
    /**
     * As of adobe SWC version 1.4.32.859 when we performed
     * a seek when any flash ad metadata was used the seek
     * cause the following.
     * 1. Initial playback would begin at 0
     * 2. All segments would be requested until the resume point was reached
     * 3. Playback would then begin at resume point.
     *
     * This workaround manually emits a seek once playback has started.
     */
    FlashPlayerEvents.prototype.initFlashInitialSeekWorkaroundForAuditude = function () {
        var _this = this;
        this.sandbox.streams.getPlayState(constants.STATUS_PREPARED)
            .filter(function () { return _this.flashPlayer.getAutoPlay(); }) // only if auto play
            .switchMap(function () { return _this.sandbox.streams.getPlayState(constants.STATUS_PLAYING).take(1); }) // wait until first playing state
            .filter(function () { return _this.needsFlashAdManagerInitialSeekForAuditude(); })
            .takeUntil(this.sandbox.destroyed)
            .subscribe(function () {
            _this.logger.warn("Manually performing initial seek");
            _this.flashPlayer.setPosition(_this.sandbox.asset.resumePosition);
        });
    };
    /**
     * Determines if we will need the initial seek fix
     * with the current state. Any ad manager which
     * utilizes the internal flash code will need the fix.
     */
    FlashPlayerEvents.prototype.needsFlashAdManagerInitialSeekForAuditude = function () {
        return this.sandbox && // we have a sandbox
            this.sandbox.asset && this.sandbox.asset.resumePosition > 0 && // with an asset
            this.sandbox.adManager && this.sandbox.adManager.type === AdManagerFactory_1.AdManagerKeys.AUDITUDE; // and an ad manager
    };
    FlashPlayerEvents.prototype.destroy = function () {
        this.logger.trace("destroy");
        // This needs to be the last one out so that other destroy's may fire
        // events.
        this.pendingCleanup = this.sandbox.streams.getPlayState(constants.STATUS_IDLE)
            .timeout(250)
            .take(1)
            .subscribe(function () { return delete global.flashPlayerEvents; }, function () { return delete global.flashPlayerEvents; });
    };
    FlashPlayerEvents.prototype.onVPAID = function (event) {
        events.emit(new events.VPAIDAdEvent(event.type));
    };
    FlashPlayerEvents.prototype.onStateChanged = function (event) {
        var _a;
        var _this = this;
        this.logger.info("onStateChanged: " + event.state);
        if (event.state === this.flashPlayer.currentStatus) {
            return;
        }
        if (this.flashPlayer.currentStatus === constants.STATUS_STOPPING) {
            switch (event.state) {
                case constants.STATUS_IDLE:
                    event.state = constants.STATUS_COMPLETE;
                    this.logger.info("onStateChanged: stopping forces " + event.state);
                    break;
                case constants.STATUS_INITIALIZING:
                    // This should not occur but keeps an incomplete stop from preventing a new asset loading
                    this.logger.warn("onStateChanged: " + constants.STATUS_STOPPING + " to " + constants.STATUS_INITIALIZING);
                    break;
                default:
                    return;
            }
        }
        if (!this.vpaidAdOnTimelineWithAuditude() || event.state !== constants.STATUS_PAUSED) {
            this.flashPlayer.currentStatus = event.state;
            // THE INITIALIZED EVENT emitted here MUST happen prior
            // to `prepareToPlay` being called. There is a dependency
            // on this event happening for the underlying flash code.
            this.dispatch(new events.PlayStateChangedEvent(event.state));
        }
        var stateMap = (_a = {},
            _a[constants.STATUS_INITIALIZED] = function () { return _this.flashPlayer.prepareToPlay(); },
            _a[constants.STATUS_PREPARED] = function () { return _this.onPrepared(); },
            _a[constants.STATUS_COMPLETE] = function () {
                _this.progressSubject
                    .take(1)
                    .takeUntil(_this.sandbox.destroyed)
                    .subscribe(function (progressEvent) { return _this.dispatch(new events.MediaProgressEvent(progressEvent.endposition, progressEvent.playbackSpeed, progressEvent.startposition, progressEvent.endposition, progressEvent.updateinterval)); });
                _this.dispatch(new events.MediaEndedEvent());
            },
            _a);
        if (stateMap.hasOwnProperty(event.state)) {
            stateMap[event.state]();
        }
    };
    FlashPlayerEvents.prototype.onPrepared = function () {
        if (!(this.sandbox.adManager && this.sandbox.adManager.controlsInitialPlayback())) {
            this.flashPlayer.play();
        }
    };
    /**
     * Called by actionscript to resolve an opportunity
     */
    FlashPlayerEvents.prototype.doResolve = function (settings) {
        this.sandbox.publish("ads:resolve", settings);
    };
    /**
     * This is invoked by actionscript through ExternalInterface each time the timeline is updated.
     * A timeline is updated as we insert ads and as a live asset plays out. The provided timeline
     * always reflects what actionscript has on the timeline
     */
    FlashPlayerEvents.prototype.onTimelineUpdated = function (timeline) {
        this.logger.trace("onTimelineUpdated", timeline);
        for (var i = 0; i < timeline.length; i++) {
            this.addAds(timeline[i].ads);
        }
        // Setup ad breaks with ad manager for freewheel
        if (this.sandbox.adManager && (this.sandbox.adManager.type === "freewheel" || this.sandbox.adManager.type === "tvelinear")) {
            this.sandbox.adManager.adBreaks = AdManager_1.AdManager.sortIntoAdBreaks(this.sandbox.adManager.ads);
        }
    };
    FlashPlayerEvents.prototype.onMediaOpened = function (event) {
        this.logger.info("onMediaOpened: " + JSON.stringify(event));
        this.onTimelineUpdated(event.timeline);
        this.dispatch(new events.MediaOpenedEvent(event.videoType, event.playbackSpeeds, event.languages, event.width, event.height, event.openingLatency, event.hasDRM, event.hasCC));
    };
    FlashPlayerEvents.prototype.onProgress = function (event) {
        if (this.flashPlayer.getPlayerStatus() === constants.STATUS_COMPLETE) {
            return;
        }
        var progress = new events.MediaProgressEvent(event.time, event.rate, event.rangeBegin, event.rangeEnd, event.updateInterval);
        this.dispatch(progress);
        this.progressSubject.next(progress);
    };
    FlashPlayerEvents.prototype.onProfileChanged = function (event) {
        this.dispatch(new events.BitrateChangedEvent(event.profile, event.description, this.sizeEvent.width, this.sizeEvent.height));
    };
    FlashPlayerEvents.prototype.onPlayerReady = function () {
        this.flashPlayer.setPlayerReady();
    };
    FlashPlayerEvents.prototype.onError = function (event) {
        var ppError = this.getPPError(event);
        this.dispatch(new events.MediaFailedEvent(ppError, ppError.shouldRetry()));
    };
    FlashPlayerEvents.prototype.getPPError = function (event) {
        var _a = event.parameters, runtimeCode = _a.runtimeCode, runtime_suberror_code = _a.runtime_suberror_code, runtimeCodeMessage = _a.runtimeCodeMessage;
        var major;
        var minor;
        if (runtime_suberror_code) {
            major = runtimeCode;
            minor = runtime_suberror_code;
        }
        else {
            major = event.code;
            minor = runtimeCode;
        }
        var code = major + "." + minor;
        var description = event.description || runtimeCodeMessage;
        this.logger.info("flash error observed: code=" + code + ", event=" + JSON.stringify(event));
        return new PPError_1.PPError(major, minor, description);
    };
    FlashPlayerEvents.prototype.onNetworkDown = function (event) {
        this.sandbox.publish(NetworkDownHandler_1.NetworkDownHandler.CHANNEL_NAME, this.getPPError(event));
    };
    FlashPlayerEvents.prototype.onSegmentSkipped = function (event) {
        this.dispatch(new events.MediaWarningEvent(this.getPPError(event)));
    };
    FlashPlayerEvents.prototype.onBufferStart = function () {
        this.dispatch(new events.BufferStartEvent());
    };
    FlashPlayerEvents.prototype.onBufferComplete = function () {
        this.dispatch(new events.BufferCompleteEvent());
    };
    FlashPlayerEvents.prototype.onSeekStart = function () {
        this.dispatch(new events.SeekStartEvent(this.flashPlayer.getCurrentPosition()));
    };
    FlashPlayerEvents.prototype.onSeekComplete = function () {
        this.dispatch(new events.SeekCompleteEvent(this.flashPlayer.getCurrentPosition()));
    };
    FlashPlayerEvents.prototype.onRatePlaying = function (event) {
        this.dispatch(new events.PlaybackSpeedChangedEvent(event.rate));
    };
    FlashPlayerEvents.prototype.onSize = function (event) {
        this.logger.trace("onSize: width: " + event.width + " height: " + event.height);
        this.sizeEvent.width = event.width;
        this.sizeEvent.height = event.height;
    };
    FlashPlayerEvents.prototype.onCaptionUpdated = function (event) {
        this.logger.trace("onCaptionUpdated");
        this.dispatch(new events.NumberOfClosedCaptionsStreamsChanged(event.tracks.length));
    };
    FlashPlayerEvents.prototype.onAudioUpdated = function (event) {
        this.logger.trace("onAudioUpdated");
        this.dispatch(new events.NumberOfAlternativeAudioStreamsChangedEvent(event.languages.length));
    };
    FlashPlayerEvents.prototype.onItemUpdated = function (timedMetadata) {
        var _this = this;
        if (timedMetadata === void 0) { timedMetadata = []; }
        this.sandbox.publish("player:timedMetadata", timedMetadata);
        timedMetadata
            .filter(function (metadata) { return !!metadata.name; })
            .map(function (metadata) { return HlsTagFactory_1.create(metadata.name, metadata.time, metadata.content); })
            .forEach(function (tag) { return _this.sandbox.publish("player:tag", tag); });
    };
    /**
     * Ad break start for auditude ads.
     * @param event
     */
    FlashPlayerEvents.prototype.onAdBreakStarted = function (event) {
        this.logger.trace("onAdBreakStarted");
        this.sandbox.publish(exports.AD_BREAK_START, event);
    };
    /**
     * Ad break complete for auditude ads.
     * @param event
     */
    FlashPlayerEvents.prototype.onAdBreakCompleted = function (event) {
        this.logger.trace("onAdBreakCompleted");
        this.sandbox.publish(exports.AD_BREAK_COMPLETE, event);
    };
    /**
     * Ad start for auditude ads.
     * @param event
     */
    FlashPlayerEvents.prototype.onAdStart = function (event) {
        this.logger.trace("onAdStart");
        this.sandbox.publish(exports.AD_START, event);
    };
    /**
     * Ad complete for auditude ads.
     * @param event
     */
    FlashPlayerEvents.prototype.onAdComplete = function (event) {
        this.sandbox.publish(exports.AD_COMPLETE, event);
    };
    /**
     * Ad progress for auditude ads.
     * @param event
     */
    FlashPlayerEvents.prototype.onAdProgress = function (event) {
        this.sandbox.publish(exports.AD_PROGRESS, event);
    };
    FlashPlayerEvents.prototype.onLoadInfo = function (event) {
        this.dispatch(new events.FragmentInfoEvent(event.downloadDuration, event.size, event.url, event.mediaDuration));
    };
    FlashPlayerEvents.prototype.onDRMMetadataAvailable = function () {
        this.dispatch(new events.DRMMetadataEvent());
    };
    FlashPlayerEvents.prototype.onClick = function () {
        if (ConfigurationManager_1.ConfigurationManager.getInstance().get(ConfigurationManager_1.ConfigurationManager.HANDLE_CLICKS)) {
            this.sandbox.publish("api:notifyClick");
        }
    };
    FlashPlayerEvents.prototype.addAds = function (ads) {
        for (var i = 0; i < ads.length; i++) {
            var ad = ads[i];
            var alreadyHaveAd = false;
            // Check if we have already added this
            if (this.sandbox.adManager) {
                for (var _i = 0, _a = this.sandbox.adManager.ads; _i < _a.length; _i++) {
                    var knownAd = _a[_i];
                    if (knownAd.id === ad.id && knownAd.startTime === ad.time && knownAd.duration === ad.duration) {
                        this.logger.trace("Already have " + ad.id + " skipping");
                        alreadyHaveAd = true;
                        break;
                    }
                }
            }
            if (!alreadyHaveAd) {
                this.sandbox.publish("ads:ad", ad.id, ad.time, ad.duration, {
                    clickThrough: ad.clickThrough,
                    vpaid: ad.vpaid
                });
            }
        }
    };
    FlashPlayerEvents.prototype.addRestrictions = function (restrictions) {
        for (var i = 0; i < restrictions.length; i++) {
            var restriction = restrictions[i];
            this.sandbox.publish("ads:restriction", restriction.ADID, restriction.MODE, restriction.SCALE, restriction.LIMIT);
        }
    };
    FlashPlayerEvents.prototype.onOpportunitiesSent = function (opportunities) {
        this.sandbox.publish("ads:opportunitiesSent", opportunities);
    };
    FlashPlayerEvents.prototype.dispatch = function (playerEvent) {
        try {
            events.dispatchEvent(playerEvent);
        }
        catch (error) {
            this.logger.error(error.toString() + ": " + error.stack);
        }
    };
    /**
     * Before playing a vpaid ad, flash player sends STATUS_PAUSED and then STATUS_PLAYING.
     * XTV does not want these change notification
     */
    FlashPlayerEvents.prototype.workaroundForVPAIDPauseForAuditude = function () {
        var _this = this;
        rxjs_1.Observable.fromEvent(events, events.MEDIA_OPENED)
            .switchMap(function () {
            // if we have a vpaid api:pause
            if (_this.vpaidAdOnTimelineWithAuditude()) {
                return Application_1.toObservable("api:pause").mapTo(constants.STATUS_PAUSED)
                    .filter(function (state) { return state !== _this.flashPlayer.currentStatus; });
            }
            else {
                return rxjs_1.Observable.empty();
            }
        })
            .takeUntil(this.sandbox.destroyed)
            .subscribe(function (status) {
            _this.flashPlayer.currentStatus = status;
            _this.dispatch(new events.PlayStateChangedEvent(status));
        });
    };
    /**
     * Returns true, if at least one vpaid ad is in the timeline
     * @returns {boolean}
     */
    FlashPlayerEvents.prototype.vpaidAdOnTimelineWithAuditude = function () {
        var retStatus = false;
        if (this.sandbox.adManager && this.sandbox.adManager.type === AdManagerFactory_1.AdManagerKeys.AUDITUDE &&
            this.sandbox.getTimeline()
                .map(function (adBreak) { return adBreak.ads; })
                .reduce(function (a, b) { return a.concat(b); }, [])
                .filter(function (ad) { return ad.vpaid; })[0]) {
            retStatus = true;
        }
        return retStatus;
    };
    return FlashPlayerEvents;
}());
exports.FlashPlayerEvents = FlashPlayerEvents;
Application_1.registerModule("FlashPlayerEvents", FlashPlayerEvents);

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"../../Application":483,"../../ConfigurationManager":484,"../../PPError":487,"../../PlayerPlatformAPIEvents":489,"../../PlayerPlatformConstants":490,"../../ads/AdManager":493,"../../ads/AdManagerFactory":494,"../../handlers/NetworkDownHandler":562,"../../util/Logger":571,"../../util/hls/HlsTagFactory":579,"rxjs":281,"rxjs/add/observable/fromEvent":242,"rxjs/add/operator/take":275,"rxjs/add/operator/takeUntil":276,"rxjs/add/operator/timeout":277}],552:[function(require,module,exports){
"use strict";
/*jslint browser: true, plusplus: true, devel: true, sloppy: true, todo: true, white: true */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var BasePlayer_1 = require("../base/BasePlayer");
var Application_1 = require("../../Application");
var Logger_1 = require("../../util/Logger");
var PlayerPlatformConstants_1 = require("../../PlayerPlatformConstants");
/**
 * NullPlayer Constructor
 */
var NullPlayer = /** @class */ (function (_super) {
    __extends(NullPlayer, _super);
    function NullPlayer() {
        var _this = _super.call(this) || this;
        _this.logger = new Logger_1.Logger("NullPlayer");
        return _this;
    }
    NullPlayer.prototype.init = function (sandbox) {
        _super.prototype.init.call(this, sandbox);
        this.setPlayerReady();
        return this;
    };
    NullPlayer.prototype.getPlayerStatus = function () {
        return PlayerPlatformConstants_1.STATUS_IDLE;
    };
    return NullPlayer;
}(BasePlayer_1.BasePlayer));
exports.NullPlayer = NullPlayer;
Application_1.registerModule("NullPlayer", NullPlayer);

},{"../../Application":483,"../../PlayerPlatformConstants":490,"../../util/Logger":571,"../base/BasePlayer":549}],553:[function(require,module,exports){
(function (global){
"use strict";
/**
 * AdobePSDK is a defined global that runs on the set top box
 * and is built into webkit. This module exposes it to our
 * internal typescript code.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.AdobePSDK = global.AdobePSDK;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],554:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var hasOwnProperty = Object.prototype.hasOwnProperty;
function has(obj, prop) {
    return hasOwnProperty.call(obj, prop);
}
var AdobePSDK_1 = require("./AdobePSDK");
var PSDKEventTypeClass = "PSDKEventType";
var AdobeRuntimeWrapper = /** @class */ (function () {
    function AdobeRuntimeWrapper() {
    }
    AdobeRuntimeWrapper.SUPPORTS_ENTERING_LIVE = function () {
        return hasOwnProperty.call(AdobePSDK_1.AdobePSDK, PSDKEventTypeClass) && AdobePSDK_1.AdobePSDK.PSDKEventType.CC_ENTERING_LIVE_EVENT !== undefined;
    };
    // MediaPlayerStatus
    AdobeRuntimeWrapper.STATUS_IDLE = function () {
        var key = "PLAYER_STATUS_IDLE";
        return has(AdobePSDK_1.AdobePSDK.MediaPlayerStatus, key) ? AdobePSDK_1.AdobePSDK.MediaPlayerStatus[key] : AdobePSDK_1.AdobePSDK.MediaPlayerStatus.IDLE;
    };
    AdobeRuntimeWrapper.STATUS_INITIALIZING = function () {
        var key = "PLAYER_STATUS_INITIALIZING";
        return has(AdobePSDK_1.AdobePSDK.MediaPlayerStatus, key) ? AdobePSDK_1.AdobePSDK.MediaPlayerStatus[key] : AdobePSDK_1.AdobePSDK.MediaPlayerStatus.INITIALIZING;
    };
    AdobeRuntimeWrapper.STATUS_INITIALIZED = function () {
        var key = "PLAYER_STATUS_INITIALIZED";
        return has(AdobePSDK_1.AdobePSDK.MediaPlayerStatus, key) ? AdobePSDK_1.AdobePSDK.MediaPlayerStatus[key] : AdobePSDK_1.AdobePSDK.MediaPlayerStatus.INITIALIZED;
    };
    AdobeRuntimeWrapper.STATUS_PREPARING = function () {
        var key = "PLAYER_STATUS_PREPARING";
        return has(AdobePSDK_1.AdobePSDK.MediaPlayerStatus, key) ? AdobePSDK_1.AdobePSDK.MediaPlayerStatus[key] : AdobePSDK_1.AdobePSDK.MediaPlayerStatus.PREPARING;
    };
    AdobeRuntimeWrapper.STATUS_PREPARED = function () {
        var key = "PLAYER_STATUS_PREPARED";
        return has(AdobePSDK_1.AdobePSDK.MediaPlayerStatus, key) ? AdobePSDK_1.AdobePSDK.MediaPlayerStatus[key] : AdobePSDK_1.AdobePSDK.MediaPlayerStatus.PREPARED;
    };
    AdobeRuntimeWrapper.STATUS_PLAYING = function () {
        var key = "PLAYER_STATUS_PLAYING";
        return has(AdobePSDK_1.AdobePSDK.MediaPlayerStatus, key) ? AdobePSDK_1.AdobePSDK.MediaPlayerStatus[key] : AdobePSDK_1.AdobePSDK.MediaPlayerStatus.PLAYING;
    };
    AdobeRuntimeWrapper.STATUS_PAUSED = function () {
        var key = "PLAYER_STATUS_PAUSED";
        return has(AdobePSDK_1.AdobePSDK.MediaPlayerStatus, key) ? AdobePSDK_1.AdobePSDK.MediaPlayerStatus[key] : AdobePSDK_1.AdobePSDK.MediaPlayerStatus.PAUSED;
    };
    AdobeRuntimeWrapper.STATUS_SEEKING = function () {
        var key = "PLAYER_STATUS_SEEKING";
        return has(AdobePSDK_1.AdobePSDK.MediaPlayerStatus, key) ? AdobePSDK_1.AdobePSDK.MediaPlayerStatus[key] : AdobePSDK_1.AdobePSDK.MediaPlayerStatus.SEEKING;
    };
    AdobeRuntimeWrapper.STATUS_COMPLETE = function () {
        var key = "PLAYER_STATUS_COMPLETE";
        return has(AdobePSDK_1.AdobePSDK.MediaPlayerStatus, key) ? AdobePSDK_1.AdobePSDK.MediaPlayerStatus[key] : AdobePSDK_1.AdobePSDK.MediaPlayerStatus.COMPLETE;
    };
    AdobeRuntimeWrapper.STATUS_ERROR = function () {
        var key = "PLAYER_STATUS_ERROR";
        return has(AdobePSDK_1.AdobePSDK.MediaPlayerStatus, key) ? AdobePSDK_1.AdobePSDK.MediaPlayerStatus[key] : AdobePSDK_1.AdobePSDK.MediaPlayerStatus.ERROR;
    };
    AdobeRuntimeWrapper.STATUS_RELEASED = function () {
        var key = "PLAYER_STATUS_RELEASED";
        return has(AdobePSDK_1.AdobePSDK.MediaPlayerStatus, key) ? AdobePSDK_1.AdobePSDK.MediaPlayerStatus[key] : AdobePSDK_1.AdobePSDK.MediaPlayerStatus.RELEASED;
    };
    AdobeRuntimeWrapper.STATUS_SUSPENDED = function () {
        // TODO: Is this a new status?
        return AdobePSDK_1.AdobePSDK.MediaPlayerStatus.SUSPENDED || -1;
    };
    // MediaResource
    AdobeRuntimeWrapper.HLS = function () {
        var key = "TYPE_HLS";
        return has(AdobePSDK_1.AdobePSDK.MediaResource, key) ? AdobePSDK_1.AdobePSDK.MediaResource[key] : AdobePSDK_1.AdobePSDK.MediaResourceType.HLS;
    };
    AdobeRuntimeWrapper.DASH = function () {
        var key = "TYPE_DASH";
        return has(AdobePSDK_1.AdobePSDK.MediaResource, key) ? AdobePSDK_1.AdobePSDK.MediaResource[key] : AdobePSDK_1.AdobePSDK.MediaResourceType.DASH;
    };
    AdobeRuntimeWrapper.ISOBMFF = function () {
        var key = "TYPE_ISOBMFF";
        return has(AdobePSDK_1.AdobePSDK.MediaResource, key) ? AdobePSDK_1.AdobePSDK.MediaResource[key] : AdobePSDK_1.AdobePSDK.MediaResourceType.ISOBMFF;
    };
    AdobeRuntimeWrapper.INVALID_ARGUMENT = function () {
        // TODO: Was this exposed in 2.3 ??
        return has.call(AdobePSDK_1.AdobePSDK.PSDKErrorCode, "kECInvalidArgument") ? AdobePSDK_1.AdobePSDK.PSDKErrorCode["kECInvalidArgument"] : AdobePSDK_1.AdobePSDK.PSDKErrorCode.INVALID_ARGUMENT;
    };
    // ABRPolicies
    AdobeRuntimeWrapper.ABR_MIN = function () {
        var key = "ABR_POLICY_CONSERVATIVE";
        return has(AdobePSDK_1.AdobePSDK.ABRControlParameters, key) ? AdobePSDK_1.AdobePSDK.ABRControlParameters[key] : AdobePSDK_1.AdobePSDK.ABRControlParameters.CONSERVATIVE_POLICY;
    };
    AdobeRuntimeWrapper.ABR_MAX = function () {
        // NOTE(estobb200): Yes, Adobe misspelled AGGRESSIVE in 2.3. In 2.4 it was spelled correctly.
        var key = "ABR_POLICY_AGGRESIVE";
        return has(AdobePSDK_1.AdobePSDK.ABRControlParameters, key) ? AdobePSDK_1.AdobePSDK.ABRControlParameters[key] : AdobePSDK_1.AdobePSDK.ABRControlParameters.AGGRESSIVE_POLICY;
    };
    // AdSignalingMode
    AdobeRuntimeWrapper.MANIFEST_CUES = function () {
        var key = "MODE_MANIFEST_CUES";
        return has(AdobePSDK_1.AdobePSDK.AdSignalingMode, key) ? AdobePSDK_1.AdobePSDK.AdSignalingMode[key] : AdobePSDK_1.AdobePSDK.AdSignalingMode.MANIFEST_CUES;
    };
    // AdBreakPolicy
    AdobeRuntimeWrapper.AD_BREAK_POLICY_PLAY = function () {
        var key = "AD_BREAK_POLICY_PLAY";
        return has(AdobePSDK_1.AdobePSDK.AdBreakPolicy, key) ? AdobePSDK_1.AdobePSDK.AdBreakPolicy[key] : AdobePSDK_1.AdobePSDK.AdBreakPolicy.PLAY;
    };
    // AdBreakWatchedPolicy
    AdobeRuntimeWrapper.AD_BREAK_WATCHED_ON_END = function () {
        var key = "AD_BREAK_WATCHED_ON_END";
        return has(AdobePSDK_1.AdobePSDK.AdBreakWatchedPolicy, key) ? AdobePSDK_1.AdobePSDK.AdBreakWatchedPolicy[key] : AdobePSDK_1.AdobePSDK.AdBreakWatchedPolicy.WATCHED_ON_END;
    };
    // AdPolicy
    AdobeRuntimeWrapper.AD_POLICY_PLAY_FROM_AD_BREAK_BEGIN = function () {
        var key = "AD_POLICY_PLAY_FROM_AD_BREAK_BEGIN";
        return has.call(AdobePSDK_1.AdobePSDK.AdPolicy, key) ? AdobePSDK_1.AdobePSDK.AdPolicy[key] : AdobePSDK_1.AdobePSDK.AdPolicy.PLAY_FROM_AD_BREAK_BEGIN;
    };
    // PlacementType
    AdobeRuntimeWrapper.PLACEMENT_PREROLL = function () {
        var key = "TYPE_PRE_ROLL";
        return has(AdobePSDK_1.AdobePSDK.Placement, key) ? AdobePSDK_1.AdobePSDK.Placement[key] : AdobePSDK_1.AdobePSDK.PlacementType.PRE_ROLL;
    };
    AdobeRuntimeWrapper.PLACEMENT_MIDROLL = function () {
        var key = "TYPE_MID_ROLL";
        return has(AdobePSDK_1.AdobePSDK.Placement, key) ? AdobePSDK_1.AdobePSDK.Placement[key] : AdobePSDK_1.AdobePSDK.PlacementType.MID_ROLL;
    };
    // PlacementMode
    AdobeRuntimeWrapper.PLACEMENT_MODE_INSERT = function () {
        var key = "MODE_INSERT";
        return has(AdobePSDK_1.AdobePSDK.Placement, key) ? AdobePSDK_1.AdobePSDK.Placement[key] : AdobePSDK_1.AdobePSDK.PlacementMode.INSERT;
    };
    AdobeRuntimeWrapper.PLACEMENT_MODE_REPLACE = function () {
        var key = "MODE_REPLACE";
        return has(AdobePSDK_1.AdobePSDK.Placement, key) ? AdobePSDK_1.AdobePSDK.Placement[key] : AdobePSDK_1.AdobePSDK.PlacementMode.REPLACE;
    };
    // AdType
    AdobeRuntimeWrapper.ADTYPE_LINEAR = function () {
        var key = "ADTYPE_LINEAR";
        return has(AdobePSDK_1.AdobePSDK.Ad, key) ? AdobePSDK_1.AdobePSDK.Ad[key] : AdobePSDK_1.AdobePSDK.AdType.LINEAR;
    };
    // PSDKEventType Comcast Extensions
    AdobeRuntimeWrapper.CC_ENTERING_LIVE_EVENT = function () {
        return hasOwnProperty.call(AdobePSDK_1.AdobePSDK, PSDKEventTypeClass) ? AdobePSDK_1.AdobePSDK.PSDKEventType.CC_ENTERING_LIVE_EVENT || "enteringlive" : "enteringlive";
    };
    AdobeRuntimeWrapper.CC_DECODER_AVAILABLE_EVENT = function () {
        return hasOwnProperty.call(AdobePSDK_1.AdobePSDK, PSDKEventTypeClass) ? AdobePSDK_1.AdobePSDK.PSDKEventType.CC_DECODER_AVAILABLE_EVENT || "decoderAvailable" : "decoderAvailable";
    };
    // PSDKEventType
    AdobeRuntimeWrapper.FIRST_EVENT = function () {
        // Added in 2.4.1
        return hasOwnProperty.call(AdobePSDK_1.AdobePSDK, PSDKEventTypeClass) ? AdobePSDK_1.AdobePSDK.PSDKEventType.FIRST_EVENT : "psdkFirstEvent";
    };
    AdobeRuntimeWrapper.AD_BREAK_STARTED = function () {
        return hasOwnProperty.call(AdobePSDK_1.AdobePSDK, PSDKEventTypeClass) ? AdobePSDK_1.AdobePSDK.PSDKEventType.AD_BREAK_STARTED : "adBreakStarted";
    };
    AdobeRuntimeWrapper.AD_BREAK_COMPLETED = function () {
        return hasOwnProperty.call(AdobePSDK_1.AdobePSDK, PSDKEventTypeClass) ? AdobePSDK_1.AdobePSDK.PSDKEventType.AD_BREAK_COMPLETED : "adBreakCompleted";
    };
    AdobeRuntimeWrapper.AD_BREAK_SKIPPED = function () {
        return hasOwnProperty.call(AdobePSDK_1.AdobePSDK, PSDKEventTypeClass) ? AdobePSDK_1.AdobePSDK.PSDKEventType.AD_BREAK_SKIPPED : "adBreakSkipped";
    };
    AdobeRuntimeWrapper.AD_CLICK = function () {
        // NOTE(estobb200): They renamed it from click to clicked.
        // It's sort of broken because the type when it's disptached is 'adClick', but to be able
        // to listen to it, it's 'adClicked' in callbacks.cpp.
        return hasOwnProperty.call(AdobePSDK_1.AdobePSDK, PSDKEventTypeClass) ? AdobePSDK_1.AdobePSDK.PSDKEventType.AD_CLICK : "adClicked";
    };
    AdobeRuntimeWrapper.AD_STARTED = function () {
        return hasOwnProperty.call(AdobePSDK_1.AdobePSDK, PSDKEventTypeClass) ? AdobePSDK_1.AdobePSDK.PSDKEventType.AD_STARTED : "adStarted";
    };
    AdobeRuntimeWrapper.AD_PROGRESS = function () {
        return hasOwnProperty.call(AdobePSDK_1.AdobePSDK, PSDKEventTypeClass) ? AdobePSDK_1.AdobePSDK.PSDKEventType.AD_PROGRESS : "adProgress";
    };
    AdobeRuntimeWrapper.AD_COMPLETED = function () {
        return hasOwnProperty.call(AdobePSDK_1.AdobePSDK, PSDKEventTypeClass) ? AdobePSDK_1.AdobePSDK.PSDKEventType.AD_COMPLETED : "adCompleted";
    };
    AdobeRuntimeWrapper.BUFFERING_BEGIN = function () {
        return hasOwnProperty.call(AdobePSDK_1.AdobePSDK, PSDKEventTypeClass) ? AdobePSDK_1.AdobePSDK.PSDKEventType.BUFFERING_BEGIN : "bufferingBegin";
    };
    AdobeRuntimeWrapper.BUFFERING_END = function () {
        return hasOwnProperty.call(AdobePSDK_1.AdobePSDK, PSDKEventTypeClass) ? AdobePSDK_1.AdobePSDK.PSDKEventType.BUFFERING_END : "bufferingEnd";
    };
    AdobeRuntimeWrapper.DRM_METADATA_INFO_AVAILABLE = function () {
        return hasOwnProperty.call(AdobePSDK_1.AdobePSDK, PSDKEventTypeClass) ? AdobePSDK_1.AdobePSDK.PSDKEventType.DRM_METADATA_INFO_AVAILABLE : "drmMetadataInfoAvailable";
    };
    AdobeRuntimeWrapper.LOAD_INFORMATION_AVAILABLE = function () {
        return hasOwnProperty.call(AdobePSDK_1.AdobePSDK, PSDKEventTypeClass) ? AdobePSDK_1.AdobePSDK.PSDKEventType.LOAD_INFORMATION_AVAILABLE : "loadInformationAvailable";
    };
    AdobeRuntimeWrapper.ITEM_CREATED = function () {
        return hasOwnProperty.call(AdobePSDK_1.AdobePSDK, PSDKEventTypeClass) ? AdobePSDK_1.AdobePSDK.PSDKEventType.ITEM_CREATED : "itemCreated";
    };
    AdobeRuntimeWrapper.CAPTIONS_UPDATED = function () {
        return hasOwnProperty.call(AdobePSDK_1.AdobePSDK, PSDKEventTypeClass) ? AdobePSDK_1.AdobePSDK.PSDKEventType.CAPTIONS_UPDATED : "captionUpdated";
    };
    AdobeRuntimeWrapper.AUDIO_UPDATED = function () {
        return hasOwnProperty.call(AdobePSDK_1.AdobePSDK, PSDKEventTypeClass) ? AdobePSDK_1.AdobePSDK.PSDKEventType.AUDIO_UPDATED : "audioUpdated";
    };
    AdobeRuntimeWrapper.PLAYBACK_RANGE_UPDATED = function () {
        return hasOwnProperty.call(AdobePSDK_1.AdobePSDK, PSDKEventTypeClass) ? AdobePSDK_1.AdobePSDK.PSDKEventType.PLAYBACK_RANGE_UPDATED : "playbackRangeUpdated";
    };
    AdobeRuntimeWrapper.MASTER_UPDATED = function () {
        return hasOwnProperty.call(AdobePSDK_1.AdobePSDK, PSDKEventTypeClass) ? AdobePSDK_1.AdobePSDK.PSDKEventType.MASTER_UPDATED : "masterUpdated";
    };
    AdobeRuntimeWrapper.STATUS_CHANGED = function () {
        return hasOwnProperty.call(AdobePSDK_1.AdobePSDK, PSDKEventTypeClass) ? AdobePSDK_1.AdobePSDK.PSDKEventType.STATUS_CHANGED : "statusChanged";
    };
    AdobeRuntimeWrapper.RATE_SELECTED = function () {
        return hasOwnProperty.call(AdobePSDK_1.AdobePSDK, PSDKEventTypeClass) ? AdobePSDK_1.AdobePSDK.PSDKEventType.RATE_SELECTED : "rateSelected";
    };
    AdobeRuntimeWrapper.RATE_PLAYING = function () {
        return hasOwnProperty.call(AdobePSDK_1.AdobePSDK, PSDKEventTypeClass) ? AdobePSDK_1.AdobePSDK.PSDKEventType.RATE_PLAYING : "ratePlaying";
    };
    AdobeRuntimeWrapper.PROFILE_CHANGED = function () {
        return hasOwnProperty.call(AdobePSDK_1.AdobePSDK, PSDKEventTypeClass) ? AdobePSDK_1.AdobePSDK.PSDKEventType.PROFILE_CHANGED : "profileChanged";
    };
    AdobeRuntimeWrapper.RESERVATION_REACHED = function () {
        return hasOwnProperty.call(AdobePSDK_1.AdobePSDK, PSDKEventTypeClass) ? AdobePSDK_1.AdobePSDK.PSDKEventType.RESERVATION_REACHED : "reservationReached";
    };
    AdobeRuntimeWrapper.SEEK_POSITION_ADJUSTED = function () {
        return hasOwnProperty.call(AdobePSDK_1.AdobePSDK, PSDKEventTypeClass) ? AdobePSDK_1.AdobePSDK.PSDKEventType.SEEK_POSITION_ADJUSTED : "seekPositionAdjusted";
    };
    AdobeRuntimeWrapper.SEEK_BEGIN = function () {
        return hasOwnProperty.call(AdobePSDK_1.AdobePSDK, PSDKEventTypeClass) ? AdobePSDK_1.AdobePSDK.PSDKEventType.SEEK_BEGIN : "seekBegin";
    };
    AdobeRuntimeWrapper.SEEK_END = function () {
        return hasOwnProperty.call(AdobePSDK_1.AdobePSDK, PSDKEventTypeClass) ? AdobePSDK_1.AdobePSDK.PSDKEventType.SEEK_END : "seekEnd";
    };
    AdobeRuntimeWrapper.SIZE_AVAILABLE = function () {
        return hasOwnProperty.call(AdobePSDK_1.AdobePSDK, PSDKEventTypeClass) ? AdobePSDK_1.AdobePSDK.PSDKEventType.SIZE_AVAILABLE : "sizeAvailable";
    };
    AdobeRuntimeWrapper.TIME_CHANGED = function () {
        return hasOwnProperty.call(AdobePSDK_1.AdobePSDK, PSDKEventTypeClass) ? AdobePSDK_1.AdobePSDK.PSDKEventType.TIME_CHANGED : "timeChanged";
    };
    AdobeRuntimeWrapper.TIMED_METADATA_AVAILABLE = function () {
        return hasOwnProperty.call(AdobePSDK_1.AdobePSDK, PSDKEventTypeClass) ? AdobePSDK_1.AdobePSDK.PSDKEventType.TIMED_METADATA_AVAILABLE : "timedMetadataAvailable";
    };
    AdobeRuntimeWrapper.TIMELINE_UPDATED = function () {
        return hasOwnProperty.call(AdobePSDK_1.AdobePSDK, PSDKEventTypeClass) ? AdobePSDK_1.AdobePSDK.PSDKEventType.TIMELINE_UPDATED : "timelineUpdated";
    };
    AdobeRuntimeWrapper.PLAY_START = function () {
        return hasOwnProperty.call(AdobePSDK_1.AdobePSDK, PSDKEventTypeClass) ? AdobePSDK_1.AdobePSDK.PSDKEventType.PLAY_START : "playStart";
    };
    AdobeRuntimeWrapper.OPERATION_FAILED = function () {
        return hasOwnProperty.call(AdobePSDK_1.AdobePSDK, PSDKEventTypeClass) ? AdobePSDK_1.AdobePSDK.PSDKEventType.OPERATION_FAILED : "operationFailed";
    };
    AdobeRuntimeWrapper.TIMED_METADATA_IN_BACKGROUND = function () {
        return hasOwnProperty.call(AdobePSDK_1.AdobePSDK, PSDKEventTypeClass) ? AdobePSDK_1.AdobePSDK.PSDKEventType.TIMED_METADATA_IN_BACKGROUND : "timedMetadataInBackground";
    };
    AdobeRuntimeWrapper.TIMED_EVENT = function () {
        return hasOwnProperty.call(AdobePSDK_1.AdobePSDK, PSDKEventTypeClass) ? AdobePSDK_1.AdobePSDK.PSDKEventType.TIMED_EVENT : "timedEvent";
    };
    AdobeRuntimeWrapper.BUFFER_PREPARED = function () {
        return hasOwnProperty.call(AdobePSDK_1.AdobePSDK, PSDKEventTypeClass) ? AdobePSDK_1.AdobePSDK.PSDKEventType.BUFFER_PREPARED : "bufferPrepared";
    };
    AdobeRuntimeWrapper.AD_RESOLUTION_COMPLETE = function () {
        return hasOwnProperty.call(AdobePSDK_1.AdobePSDK, PSDKEventTypeClass) ? AdobePSDK_1.AdobePSDK.PSDKEventType.AD_RESOLUTION_COMPLETE : "adResolutionComplete";
    };
    AdobeRuntimeWrapper.LAST_EVENT = function () {
        return hasOwnProperty.call(AdobePSDK_1.AdobePSDK, PSDKEventTypeClass) ? AdobePSDK_1.AdobePSDK.PSDKEventType.LAST_EVENT : "psdkLastEvent";
    };
    AdobeRuntimeWrapper.FIRST_USER_EVENT = function () {
        return hasOwnProperty.call(AdobePSDK_1.AdobePSDK, PSDKEventTypeClass) ? AdobePSDK_1.AdobePSDK.PSDKEventType.FIRST_USER_EVENT : "psdkFirstUserEvent";
    };
    return AdobeRuntimeWrapper;
}());
exports.AdobeRuntimeWrapper = AdobeRuntimeWrapper;

},{"./AdobePSDK":553}],555:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var BaseAsset_1 = require("../../assets/BaseAsset");
var SessionManager_1 = require("../../handlers/SessionManager");
var AdobeRuntimeWrapper_1 = require("./AdobeRuntimeWrapper");
function getMediaPlayerConfig(asset, contentFactory) {
    var config = new AdobePSDK.MediaPlayerItemConfig();
    config.subscribeTags = asset.subscribedTags;
    config.adTags = asset.subscribedTags.filter(includeInAdTags);
    config.adSignalingMode = AdobeRuntimeWrapper_1.AdobeRuntimeWrapper.MANIFEST_CUES();
    config.advertisingFactory = contentFactory;
    if (asset.assetType === BaseAsset_1.AssetTypeMapping.OTT) {
        config.networkConfiguration.readSetCookieHeader = true;
        config.networkConfiguration.useCookieHeaderForAllRequests = true;
    }
    config.networkConfiguration
        .addCustomHeader("X-MoneyTrace", [
        SessionManager_1.SessionManager.instance.moneyTrace.traceId,
        SessionManager_1.SessionManager.instance.moneyTrace.parentId,
        SessionManager_1.SessionManager.instance.moneyTrace.spanId
    ]);
    // Causes the asset to "step"
    SessionManager_1.SessionManager.instance.moneyTrace.createTraceMessage();
    return config;
}
exports.getMediaPlayerConfig = getMediaPlayerConfig;
function includeInAdTags(subscribedTag) {
    return subscribedTag !== "#EXT-X-TARGETDURATION" && subscribedTag !== "#EXT-NOM-I-FRAME-DISTANCE";
}

},{"../../assets/BaseAsset":537,"../../handlers/SessionManager":565,"./AdobeRuntimeWrapper":554}],556:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var PPError_1 = require("../../PPError");
require("./PSDKPlayerEvents");
require("../../handlers/CrossStreamPreventionHandler");
require("../../handlers/NetworkDownHandler");
require("../../handlers/XRECCHandler");
var constants = require("../../PlayerPlatformConstants");
var events = require("../../PlayerPlatformAPIEvents");
var PSDKGetMediaPlayerConfig_1 = require("./PSDKGetMediaPlayerConfig");
var Application_1 = require("../../Application");
var BaseAsset_1 = require("../../assets/BaseAsset");
var BasePlayer_1 = require("../base/BasePlayer");
var ConfigurationManager_1 = require("../../ConfigurationManager");
var Logger_1 = require("../../util/Logger");
var AdobeRuntimeWrapper_1 = require("./AdobeRuntimeWrapper");
var urlService = require("../../services/URLService");
var Observable_1 = require("rxjs/Observable");
require("rxjs/add/observable/fromEventPattern");
var PSDKPlayer = /** @class */ (function (_super) {
    __extends(PSDKPlayer, _super);
    function PSDKPlayer() {
        var _this = _super.call(this) || this;
        _this.latencyStart = 0;
        _this.updateInterval = 250;
        _this.initialBufferTime = ConfigurationManager_1.ConfigurationManager.DEFAULT_INITIAL_BUFFER_TIME;
        _this.playingVODBufferTime = ConfigurationManager_1.ConfigurationManager.DEFAULT_PLAYING_VOD_BUFFER_TIME;
        _this.playingLinearBufferTime = ConfigurationManager_1.ConfigurationManager.DEFAULT_PLAYING_LINEAR_BUFFER_TIME;
        _this.maxFragmentDuration = 0;
        //This variable ensures that the value in the manifest takes precedence over the configured value of TRICPLAY_MAX_FPS
        _this.playerTrickPlayFPSMaxAlreadySet = false;
        _this.bufferingFlag = false;
        _this.playerVersion = "unavailable";
        _this.shouldInterruptLive = false;
        _this.logger = new Logger_1.Logger("PSDKPlayer");
        return _this;
    }
    PSDKPlayer.prototype.init = function (sandbox) {
        _super.prototype.init.call(this, sandbox);
        var element = null;//sandbox.params.videoElement;//WMR no videoElement
        this.initPlayer(element);
        this.setPlayerReady();
        this._updateMaxFragmentDuration();
        this._updateTrickplayMaxFps();
        this.seekToLiveInterrupt();
        return this;
    };
    PSDKPlayer.prototype.destroy = function (sandbox) {
        _super.prototype.destroy.call(this, sandbox);
        this.player.release();
    };
    /**
     * used internally in seekToLiveInterrupt which intentionally needs
     * a higher default priority, emits the channel object in the observable.
     */
    PSDKPlayer.prototype.applicationObservable = function (name) {
        var _this = this;
        return Observable_1.Observable.fromEventPattern(function (handler) { return _this.sandbox.subscribe(name, handler, { priority: 3 }, null); }, function (handler) { return _this.sandbox.remove(name, handler); })
            .map(function (t) { return Array.isArray(t) ? t[t.length - 1] : t; });
    };
    /**
     * seekToLiveInterrupt is an observable that listens to seekToLive requests
     * and interrupts that channel based on conditions being met so that
     * a seek request doesn't make it to PSDK if the playhead is considered to
     * be at the live point.
     */
    PSDKPlayer.prototype.seekToLiveInterrupt = function () {
        var _this = this;
        var assetObservable = this.applicationObservable("api:setAsset").defaultIfEmpty();
        assetObservable.switchMap(function () {
            // We set the interrupt flag on the first time we get the playing
            // event, which we're using as the "live playhead position"
            //
            // "f'it we'll do it live" - Bill O'Reilly
            return _this.sandbox.streams
                .getPlayState(constants.STATUS_PLAYING)
                .take(1);
        })
            .takeUntil(this.sandbox.destroyed)
            .subscribe(function () { return _this.shouldInterruptLive = _this._isLive(); }, function () { return undefined; }, function () { return _this.shouldInterruptLive = false; });
        assetObservable.switchMap(function () {
            return _this.applicationObservable("api:seekToLive");
        })
            .filter(function () { return _this._isLive() && _this.shouldInterruptLive; })
            .takeUntil(this.sandbox.destroyed)
            .subscribe(function (channel) {
            _this.logger.warn("Considered to be at live point, seekToLive request interrupted");
            channel.stopPropagation();
        });
    };
    PSDKPlayer.prototype.getContentFactory = function () {
        return !this.sandbox.adManager || !this.sandbox.adManager.hasContentFactory() ? null : this.sandbox.adManager.getContentFactory();
    };
    PSDKPlayer.prototype._assetTimeouts = function (asset) {
        var configMgr = ConfigurationManager_1.ConfigurationManager.getInstance();
        return {
            httpStartTransferTimeout: configMgr.getByAssetType(configMgr.getAssetType(asset), ConfigurationManager_1.ConfigurationManager.HTTP_START_TRANSFER_TIMEOUT),
            httpTotalTimeout: configMgr.getByAssetType(configMgr.getAssetType(asset), ConfigurationManager_1.ConfigurationManager.HTTP_TOTAL_TIMEOUT)
        };
    };
    /**
     *
     * @param tag
     * @returns {boolean}
     * @private
     */
    PSDKPlayer.prototype._isTargetDurationTag = function (tag) {
        return tag.name === PSDKPlayer.TARGET_DURATION_TAG;
    };
    PSDKPlayer.prototype._isIFrameDistanceTag = function (tag) {
        return tag.name === PSDKPlayer.I_FRAME_DISTANCE_TAG;
    };
    /**
     * Updates maxFragmentDuration with #EXT-X-TARGETDURATION value
     * @private
     */
    PSDKPlayer.prototype._updateMaxFragmentDuration = function () {
        var _this = this;
        this.sandbox.streams.tags
            .takeUntil(this.sandbox.destroyed)
            .filter(function (tag) { return _this._isTargetDurationTag(tag); })
            .subscribe(function (tag) {
            _this.maxFragmentDuration = parseInt(tag.content) * 1000;
        });
    };
    /**
     * Updates trickPlayMaxFps with  #EXT-NOM-I-FRAME-DISTANCE value
     * @private
     */
    PSDKPlayer.prototype._updateTrickplayMaxFps = function () {
        var _this = this;
        this.sandbox.streams.tags
            .takeUntil(this.sandbox.destroyed)
            .filter(function (tag) { return _this._isIFrameDistanceTag(tag); })
            .subscribe(function (tag) {
            _this.setTrickplayMaxFps(parseFloat(tag.content));
        });
    };
    /**
     * Adobe set's the exception pointer when accessing MediaPlayer.currentItem
     * if no item exists. This wrapper protects us from that exception.
     */
    PSDKPlayer.prototype._getCurrentItem = function () {
        try {
            return this.player.currentItem;
        }
        catch (e) {
            this.logger.warn("this.player.currentItem is undefined: " + e);
        }
        return undefined;
    };
    /**
     * Since _getCurrentItem() can be undefined, this convenience function wraps
     * that undefined check and returns a boolean.
     */
    PSDKPlayer.prototype._isLive = function () {
        var currentItem = this._getCurrentItem();
        return currentItem && currentItem.live;
    };
    /**
     * PSDKPlayer Functions
     */
    PSDKPlayer.prototype.initPlayer = function (element) {
        this.logger.trace("initPlayer");
        this.view = new AdobePSDK.MediaPlayerView(element);
        this.player = new AdobePSDK.MediaPlayer();
        // TODO(estobb200): Remove when either we start using the latest rxjs
        // with this commit..
        // https://github.com/ReactiveX/rxjs/commit/e036e79b30c35df19aa036390e7fe0c94b7a8ff6
        // or when this merges..
        // https://gerrit.teamccp.com/#/c/95282/
        // Thanks Adobe.
        this.player.toString = function () {
            return "[object _AdobePSDK_MediaPlayer]";
        };
        this.player.view = this.view;
        // get the PSDK version
        // note: early versions of the PSDK throw an exception when the version function is called
        // therefore assume version 1.0 if an exception is thrown
        try {
            this.playerVersion = AdobePSDK.version.description;
            this.logger.info("initPlayer: PSDK version=" + this.playerVersion);
        }
        catch (error) {
            this.logger.warn("initPlayer: Warning!! Error occurred while getting PSDK player version: " + JSON.stringify(error));
        }
        try {
            this.qosProvider = new AdobePSDK.QOSProvider();
            this.qosProvider.attachMediaPlayer(this.player);
        }
        catch (error) {
            this.logger.warn("Warning!! Error occurred while creating PSDK QOS Provider: " + JSON.stringify(error));
        }
    };
    PSDKPlayer.prototype.play = function () {
        this.logger.trace("play");
        if (this.player.status === AdobeRuntimeWrapper_1.AdobeRuntimeWrapper.STATUS_PLAYING()) {
            // Note - this can occur when in trickplay mode.
            this.logger.warn("Warning! PSDKPlayer.play() called while status == 'PLAYER_STATUS_PLAYING'");
        }
        else {
            this.player.play();
        }
    };
    //TODO: If state comes in as paused due to buffering, does this fail?
    PSDKPlayer.prototype.pause = function () {
        this.logger.trace("pause");
        if (this.player.status === AdobeRuntimeWrapper_1.AdobeRuntimeWrapper.STATUS_PLAYING()) {
            this.player.pause();
            this.shouldInterruptLive = false;
        }
        else if (this.player.status === AdobeRuntimeWrapper_1.AdobeRuntimeWrapper.STATUS_PAUSED()) {
            this.player.play();
        }
    };
    PSDKPlayer.prototype.stop = function () {
        this.logger.trace("stop");
        this.player.reset();
    };
    PSDKPlayer.prototype.seekToLive = function () {
        this.logger.trace("seekToLive");
        this.setPosition(this.player.seekableRange.end);
    };
    PSDKPlayer.prototype.prepareToPlay = function () {
        this.logger.trace("prepareToPlay.ResumePosition:" + this.sandbox.asset.resumePosition);
        this.player.prepareToPlay(this.sandbox.asset.resumePosition);
    };
    /**
     * PSDKPlayer Setters
     */
    PSDKPlayer.prototype.setAsset = function (asset) {
        this.logger.trace("setAsset: asset=" + JSON.stringify(asset));
        this.asset = asset;
        this.asset.addSubscribedTag(PSDKPlayer.TARGET_DURATION_TAG);
        this.asset.addSubscribedTag(PSDKPlayer.I_FRAME_DISTANCE_TAG);
        this.latencyStart = Date.now();
        this.logger.info("PSDKPlayer reset status = " + this.player.status);
        this.player.reset();
        this.playerTrickPlayFPSMaxAlreadySet = false;
        var res = new AdobePSDK.MediaResource();
        this.logger.info("PSDKPlayer replaceCurrentResource status = " + this.player.status);
        var resourceType;
        switch (asset.getUrlType()) {
            case BaseAsset_1.AssetUrlType.URLTYPE_M3U:
                resourceType = AdobeRuntimeWrapper_1.AdobeRuntimeWrapper.HLS();
                break;
            case BaseAsset_1.AssetUrlType.URLTYPE_MPD:
                resourceType = AdobeRuntimeWrapper_1.AdobeRuntimeWrapper.DASH();
                break;
            case BaseAsset_1.AssetUrlType.URLTYPE_MP4:
                resourceType = AdobeRuntimeWrapper_1.AdobeRuntimeWrapper.ISOBMFF();
                break;
            default:
                var desc = "Resource type not supported. Only types supported are HLS and DASH";
                var error = new PPError_1.PPError(AdobeRuntimeWrapper_1.AdobeRuntimeWrapper.INVALID_ARGUMENT() || 1, null, desc);
                events.emit(new events.MediaFailedEvent(error));
                return;
        }
        res.url = urlService.getURLForPlayback(asset.url, asset);
        res.type = resourceType;
        var mediaPlayerConfig = PSDKGetMediaPlayerConfig_1.getMediaPlayerConfig(asset, this.getContentFactory());
        this.player.mediaPlayerConfig = mediaPlayerConfig;
        var timeouts = this._assetTimeouts(asset);
        this.setHTTPTimeouts(timeouts.httpStartTransferTimeout, timeouts.httpTotalTimeout);
        this.player.replaceCurrentResource(res, mediaPlayerConfig);
    };
    PSDKPlayer.prototype.setBitrateRange = function (min, max) {
        var currentParams;
        var newParams;
        this.logger.trace("setBitrateRange: " + min + "-" + max);
        currentParams = this.player.abrControlParameters;
        newParams = new AdobePSDK.ABRControlParameters(currentParams.initialBitRate, min, max, currentParams.abrPolicy);
        this.player.abrControlParameters = newParams;
    };
    PSDKPlayer.prototype.setBlock = function (flag) {
        this.logger.trace("setBlock: " + flag);
        // stop presenting sound samples
        var presenter = new AdobePSDK.VideoPresenter();
        presenter.StopSound();
        // hide the view by moving it offscreen
        this.view.setPos(-this.view.width, -this.view.height);
    };
    PSDKPlayer.prototype.setBufferControlParameters = function (initial, playback) {
        this.player.bufferControlParameters = new AdobePSDK.BufferControlParameters(initial, playback);
    };
    PSDKPlayer.prototype.setClosedCaptionsEnabled = function (flag) {
        this.player.ccVisibility = flag ? this.player.VISIBLE : this.player.INVISIBLE;
    };
    PSDKPlayer.prototype.setClosedCaptionsTrack = function (track) {
        this.logger.trace("setClosedCaptionsTrack: " + track);
        var currentItem = this._getCurrentItem();
        if (currentItem && currentItem.selectedClosedCaptionsTrack.language === track) {
            return;
        }
        var ccTracks = currentItem ? currentItem.closedCaptionsTracks : [];
        if (!ccTracks || !ccTracks.length) {
            return;
        }
        for (var _i = 0, ccTracks_1 = ccTracks; _i < ccTracks_1.length; _i++) {
            var ccTrack = ccTracks_1[_i];
            if (ccTrack.language === track) {
                currentItem.selectClosedCaptionsTrack(ccTrack);
                return;
            }
        }
        this.logger.warn("Closed caption track \"" + track + "\" not found.");
    };
    PSDKPlayer.prototype.setCurrentTimeUpdateInterval = function (interval) {
        this.logger.trace("setCurrentTimeUpdateInterval: " + interval);
        // 0 disables, min accepted is 50
        if (interval === 0 || interval >= 50) {
            this.updateInterval = interval;
        }
    };
    PSDKPlayer.prototype.setDimensionsOfVideo = function (width, height) {
        this.logger.trace("setDimensionsOfVideo: " + width + "x" + height);
        this.view.setSize(width, height);
        this.player.view = this.view;
    };
    PSDKPlayer.prototype.setInitialBitrate = function (initialBitrate) {
        var currentParams;
        var newParams;
        this.logger.trace("setInitialBitrate: " + initialBitrate);
        currentParams = this.player.abrControlParameters;
        newParams = new AdobePSDK.ABRControlParameters(initialBitrate, currentParams.minBitRate, currentParams.maxBitRate, currentParams.abrPolicy);
        this.player.abrControlParameters = newParams;
    };
    PSDKPlayer.prototype.setPosition = function (msecs) {
        this.logger.trace("setPosition: " + msecs);
        var curPos = this.getCurrentPosition();
        if (curPos !== msecs) {
            if (msecs < curPos) {
                this.shouldInterruptLive = false;
            }
            if (msecs < this.player.seekableRange.begin) {
                this.logger.info("setPosition: requested position below range - seek to range begin: " + this.player.seekableRange.begin + " msec");
                this.player.seek(this.player.seekableRange.begin);
            }
            else if (msecs >= this.player.seekableRange.end) {
                if (this._isLive()) {
                    if ((this.player.seekableRange.end - this.getCurrentPosition() > this.maxFragmentDuration)) {
                        this.logger.info("setPosition: requested position above range - seek to range end: " + this.player.seekableRange.end + " msec");
                        if (AdobeRuntimeWrapper_1.AdobeRuntimeWrapper.SUPPORTS_ENTERING_LIVE()) {
                            this.player.seek(PSDKPlayer.LIVE_POINT);
                        }
                        else {
                            this.player.seek(this.player.seekableRange.end);
                        }
                        this.shouldInterruptLive = true;
                    }
                    else {
                        this.logger.info("setPosition: requested position falls in the current loaded fragment");
                        this.sandbox.publish("xre:onenteringlive");
                    }
                }
                else {
                    this.logger.info("setPosition: requested position above range - seek to range end: " + this.player.seekableRange.end + " msec");
                    this.player.seek(this.player.seekableRange.end);
                }
            }
            else {
                this.logger.info("setPosition: requested position is in range - seek to: " + msecs + " msec");
                this.player.seek(msecs);
            }
        }
    };
    PSDKPlayer.prototype.setPositionRelative = function (msecs) {
        this.logger.trace("setPositionRelative: " + msecs);
        var position = this.player.playbackMetrics.time + msecs;
        this.setPosition(position);
    };
    PSDKPlayer.prototype.setPreferredAudioLanguage = function (language) {
        var i;
        var len;
        var track;
        var currentItem = this._getCurrentItem();
        this.logger.trace("setPreferredAudioLanguage: " + language);
        len = currentItem ? currentItem.audioTracks.length : 0;
        this.logger.trace("setPreferredAudioLanguage: audioTracks.length=" + len);
        for (i = 0; i < len; i++) {
            track = currentItem.audioTracks[i];
            if (track.language === language) {
                this.logger.info("setPreferredAudioLanguage selected language: " + track.language + " name: " + track.name);
                currentItem.selectAudioTrack(track);
                // perform a seek to the current position. This forces the player to flush its buffers,
                // re-evaluate currentItem, and implement the language change without delay
                var pos = this.getCurrentPosition();
                if (pos) {
                    try {
                        // PSDK Throws ILLEGAL_STATE here because onMediaOpened hasn't fired yet.
                        // 2017 May 16 22:13:52.229988 pacexi3v2 Receiver[18164]:  Thread-18164 [JavaScript] - console [:0]: PSDKPlayer: willSeek:1500
                        // 2017 May 16 22:13:52.239359 pacexi3v2 Receiver[18164]:  Thread-18164 [JavaScript] - console [:0]: PSDKPlayer: ILLEGAL_STATE
                        // This doesn't appear to be causing an issue, it still seems to seek correctly.
                        this.player.seek(pos);
                    }
                    catch (err) {
                        this.logger.error(err);
                    }
                }
                break;
            }
            else {
                this.logger.info("PSDKPlayer.setPreferredAudioLanguage skip[" + i + "] language: " + track.language);
                this.logger.info("PSDKPlayer.setPreferredAudioLanguage skip[" + i + "] name: " + track.name);
            }
        }
        if (i >= len) {
            this.logger.error("setPreferredAudioLanguage: no match found for " + language);
        }
    };
    PSDKPlayer.prototype.setPreferredZoomSetting = function (setting) {
        this.logger.trace("setPreferredZoomSetting");
        this.player.setPreferredZoomSetting(setting);
    };
    PSDKPlayer.prototype._isSpeedChangeAtEOS = function (rateRequest) {
        // This logic matches the fix in PSDK MediaPlayerPrivate
        // PSDK will set the rate to 1 and ignore this request.
        return (rateRequest > 1 && this._isLive() &&
            (this.getCurrentPosition() + rateRequest * this.updateInterval >= this.player.seekableRange.end));
    };
    PSDKPlayer.prototype.setSpeed = function (speed, overshootCorrection) {
        this.logger.trace("setSpeed: spd=" + speed + " ovr=" + overshootCorrection);
        if (!isNaN(overshootCorrection)) {
            this.player.overshootCorrection = overshootCorrection;
            this.logger.info("Setting overshootCorrection = " + overshootCorrection);
        }
        var floatRate = speed;
        if (!isNaN(floatRate)) {
            if (floatRate === 1) {
                this.player.play();
            }
            else {
                if (floatRate <= 0) {
                    this.shouldInterruptLive = false;
                }
                if (this._isSpeedChangeAtEOS(floatRate)) {
                    var error = new PPError_1.PPError(events.MEDIA_WARNING_TRICKMODE_DISALLOWED, null, "speed change not allowed @ EOS");
                    events.dispatchEvent(new events.MediaWarningEvent(error));
                    return;
                }
                else if (floatRate > 1 && this._isLive() &&
                    (this.player.seekableRange.end - this.getCurrentPosition() <= this.maxFragmentDuration)) {
                    this.sandbox.publish("xre:onenteringlive");
                    return;
                }
                try {
                    this.player.rate = floatRate;
                }
                catch (err) {
                    this.logger.info("error setting player.rate = " + floatRate + " exception: " + err);
                }
            }
            this.logger.info("Setting rate = " + this.player.rate);
        }
    };
    PSDKPlayer.prototype.setVolume = function (volume) {
        //PPJS:TID02 volume comes in as a float (.5 == 50%, 1 == 100%) psdk expects an int between 0 & 100
        this.logger.trace("setVolume: " + volume);
        this.player.volume = volume * 100;
    };
    PSDKPlayer.prototype.setInitialBufferTime = function (msec) {
        this.logger.trace("setInitialBufferTime: " + msec);
        this.initialBufferTime = msec;
        this.setBufferControlParameters(msec, this.player.bufferControlParameters.playBufferTime);
    };
    PSDKPlayer.prototype.setPlayingVODBufferTime = function (msec) {
        this.logger.trace("setPlayingVODBufferTime: " + msec);
        this.playingVODBufferTime = msec;
        this.setBufferControlParameters(this.player.bufferControlParameters.initialBufferTime, msec);
    };
    PSDKPlayer.prototype.setPlayingLinearBufferTime = function (msec) {
        this.logger.trace("setPlayingLinearBufferTime: " + msec);
        this.playingLinearBufferTime = msec;
        this.setBufferControlParameters(this.player.bufferControlParameters.initialBufferTime, msec);
    };
    PSDKPlayer.prototype.setScale = function (width, height) {
        this.logger.trace("setScale: " + width + "x" + height);
        this.view.setScale(width, height);
        this.player.view = this.view;
    };
    PSDKPlayer.prototype.setOffset = function (x, y) {
        this.logger.trace("setOffset: x=" + x + "y=" + y);
        this.view.setOffset(x, y);
        this.player.view = this.view;
    };
    PSDKPlayer.prototype.setTrickplayMaxFps = function (maxFps) {
        this.logger.trace("setTrickplayMaxFps: " + maxFps);
        this.playerTrickPlayFPSMaxAlreadySet = true;
        this.player.trickPlayMaxFps = maxFps;
    };
    PSDKPlayer.prototype.setAudioOnly = function (mute) {
        this.logger.trace("setAudioOnly: " + mute);
        this.player.setVideoMute(mute);
    };
    /**
     * Set's the HTTPReader's timeout values.
     * @param {Number} startTransferTimeout in milliseconds
     * @param {Number} totalTimeout in milliseconds
     * @return {boolean} result if function exists on PSDK.
     */
    PSDKPlayer.prototype.setHTTPTimeouts = function (startTransferTimeout, totalTimeout) {
        if (this.player.setHTTPTimeouts) {
            this.logger.info("MediaPlayer setHTTPTimeouts: " + startTransferTimeout + ", " + totalTimeout);
            this.player.setHTTPTimeouts(startTransferTimeout, totalTimeout);
            return true;
        }
        this.logger.warn("MediaPlayer setHTTPTimeouts not available in PSDK.");
        return false;
    };
    /**
     * PSDKPlayer Getters
     */
    PSDKPlayer.prototype.getAutoPlay = function () {
        //Autoplay is a state kept locally, not available as a PSDK API.
        this.logger.trace("getAutoPlay: " + this.autoPlay);
        return this.autoPlay;
    };
    PSDKPlayer.prototype.getAvailableAudioLanguages = function () {
        var languages = [];
        var currentItem = this._getCurrentItem();
        if (!currentItem || !currentItem.audioTracks) {
            return languages;
        }
        for (var i = 0; i < currentItem.audioTracks.length; i++) {
            languages.push(currentItem.audioTracks[i].language);
        }
        return languages;
    };
    PSDKPlayer.prototype.getAvailableBitrates = function () {
        var bitRates = [];
        var profile;
        var currentItem = this._getCurrentItem();
        this.logger.trace("getAvailableBitrates");
        if (!currentItem) {
            return;
        }
        for (var i = 0; i < currentItem.profiles.length; i++) {
            profile = currentItem.profiles[i];
            bitRates.push(profile.bitRate !== undefined ? profile.bitRate : profile.bitrate);
        }
        return bitRates;
    };
    PSDKPlayer.prototype.getAvailableClosedCaptionTracks = function () {
        var currentItem = this._getCurrentItem();
        var tracks = (currentItem && currentItem.closedCaptionsTracks) || [];
        return tracks.map(function (track) {
            return track.language;
        });
    };
    PSDKPlayer.prototype.getBitrateRange = function () {
        var currentParams = this.player.abrControlParameters;
        var range = [currentParams.minBitRate, currentParams.maxBitRate];
        this.logger.trace("getBitrateRange: " + range);
        return range;
    };
    PSDKPlayer.prototype.getBufferFilledLength = function () {
        var len = this.playbackInformation.bufferLength;
        this.logger.trace("getBufferFilledLength: " + len);
        return len;
    };
    PSDKPlayer.prototype.getBufferTime = function () {
        return this.playbackInformation.bufferTime;
    };
    PSDKPlayer.prototype.getClosedCaptionsStatus = function () {
        //TODO: Can we get this from XRE to keep them in sync??
        var stat = this.player.ccVisibility;
        this.logger.trace("getClosedCaptionsStatus: " + stat);
        return stat;
    };
    PSDKPlayer.prototype.getCurrentAudioLanguage = function () {
        var currentItem = this._getCurrentItem();
        if (!currentItem) {
            return undefined;
        }
        var lang = currentItem.selectedAudioTrack.language;
        this.logger.trace("getCurrentAudioLanguage: " + lang);
        return lang;
    };
    PSDKPlayer.prototype.getCurrentBitrate = function () {
        var br = this.playbackInformation.bitRate !== undefined ? this.playbackInformation.bitRate : this.playbackInformation.bitrate;
        this.logger.trace("getCurrentBitrate: " + br);
        return br;
    };
    PSDKPlayer.prototype.getCurrentClosedCaptionTrack = function () {
        this.logger.trace("getCurrentClosedCaptionTrack");
        var currentItem = this._getCurrentItem();
        if (!currentItem) {
            return "";
        }
        var trk = currentItem.selectedClosedCaptionsTrack;
        return trk ? trk.language : "";
    };
    PSDKPlayer.prototype.getCurrentPlaybackSpeed = function () {
        return this.player.rate;
    };
    PSDKPlayer.prototype.getCurrentPosition = function () {
        return this.player.currentTime;
    };
    PSDKPlayer.prototype.getDuration = function () {
        return this.player.playbackRange.duration;
    };
    PSDKPlayer.prototype.getEndPosition = function () {
        var endpos = this.player.playbackRange.end;
        if (this._isLive()) {
            endpos = this.getCurrentPosition() + this.getBufferTime();
        }
        return endpos;
    };
    /**
     * Non PlayerPlatformAPI's
     */
    PSDKPlayer.prototype.getInitialBitrate = function () {
        var br = this.player.abrControlParameters.initialBitRate;
        this.logger.trace("getInitialBitrate: " + br);
        return br;
    };
    // tslint:disable:cyclomatic-complexity
    // translates PSDK state into PlayerPlatformAPI status
    PSDKPlayer.prototype.mapStateToStatus = function (state) {
        // PlayerPlatformAPI available status:
        //  complete, error, initialized, initializing
        //  paused, playing, ready, released
        // PSDK Player states:
        //  PLAYER_STATUS_IDLE, PLAYER_STATUS_INITIALIZING, PLAYER_STATUS_INITIALIZED,
        //  PLAYER_STATUS_PREPARING, PLAYER_STATUS_PREPARED, PLAYER_STATUS_PLAYING,
        //  PLAYER_STATUS_PAUSED, PLAYER_STATUS_SEEKING, PLAYER_STATUS_COMPLETE,
        //  PLAYER_STATUS_ERROR, PLAYER_STATUS_RELEASED
        var status = constants.STATUS_ERROR;
        if (this.bufferingFlag) {
            status = constants.STATUS_BUFFERING;
        }
        else {
            switch (state) {
                case AdobeRuntimeWrapper_1.AdobeRuntimeWrapper.STATUS_IDLE():
                    status = constants.STATUS_IDLE;
                    break;
                case AdobeRuntimeWrapper_1.AdobeRuntimeWrapper.STATUS_INITIALIZING():
                    status = constants.STATUS_INITIALIZING;
                    break;
                case AdobeRuntimeWrapper_1.AdobeRuntimeWrapper.STATUS_INITIALIZED():
                    status = constants.STATUS_INITIALIZED;
                    break;
                case AdobeRuntimeWrapper_1.AdobeRuntimeWrapper.STATUS_PREPARING():
                    status = constants.STATUS_PREPARING;
                    break;
                case AdobeRuntimeWrapper_1.AdobeRuntimeWrapper.STATUS_PREPARED():
                    status = constants.STATUS_READY;
                    break;
                case AdobeRuntimeWrapper_1.AdobeRuntimeWrapper.STATUS_PLAYING():
                    status = constants.STATUS_PLAYING;
                    break;
                case AdobeRuntimeWrapper_1.AdobeRuntimeWrapper.STATUS_SEEKING():
                    status = constants.STATUS_SEEKING;
                    break;
                case AdobeRuntimeWrapper_1.AdobeRuntimeWrapper.STATUS_PAUSED():
                    status = constants.STATUS_PAUSED;
                    break;
                case AdobeRuntimeWrapper_1.AdobeRuntimeWrapper.STATUS_COMPLETE():
                    status = constants.STATUS_COMPLETE;
                    break;
                case AdobeRuntimeWrapper_1.AdobeRuntimeWrapper.STATUS_ERROR():
                    status = constants.STATUS_ERROR;
                    break;
                case AdobeRuntimeWrapper_1.AdobeRuntimeWrapper.STATUS_RELEASED():
                    status = constants.STATUS_RELEASED;
                    break;
                // TODO: SUSPENDED ??
                default:
                    break;
            }
        }
        return status;
    };
    // tslint:enable:cyclomatic-complexity
    PSDKPlayer.prototype.getPlayerStatus = function () {
        return this.mapStateToStatus(this.player.status);
    };
    PSDKPlayer.prototype.getStartPosition = function () {
        var startpos = this.player.playbackRange.begin;
        if (this._isLive()) {
            startpos = this.sandbox.asset.resumePosition;
        }
        this.logger.trace("getStartPosition: " + startpos);
        return startpos;
    };
    PSDKPlayer.prototype.getSupportedPlaybackSpeeds = function () {
        var currentItem = this._getCurrentItem();
        if (!currentItem) {
            return [];
        }
        return currentItem.availablePlaybackRates;
    };
    PSDKPlayer.prototype.getVersion = function () {
        var version = "PSDK_PLAYER_VERSION=" + this.playerVersion;
        this.logger.trace("getVersion: " + version);
        return version;
    };
    PSDKPlayer.prototype.getVideoHeight = function () {
        //TODO: Assuming view not media..
        var h = this.view.height;
        this.logger.trace("getVideoHeight: " + h);
        return h;
    };
    PSDKPlayer.prototype.getVideoType = function () {
        var typ = "vod";
        if (this._isLive()) {
            typ = "live";
        }
        this.logger.trace("getVideoType: " + typ);
        return typ;
    };
    PSDKPlayer.prototype.getVideoWidth = function () {
        //TODO: Assuming View not media..
        var w = this.view.width;
        this.logger.trace("getVideoWidth: " + w);
        return w;
    };
    PSDKPlayer.prototype.hasCC = function () {
        this.logger.trace("hasCC");
        var currentItem = this._getCurrentItem();
        return currentItem && currentItem.hasClosedCaptions;
    };
    PSDKPlayer.prototype.hasDRM = function () {
        this.logger.trace("hasDRM");
        var drm = false;
        // note: old PSDK versions called this function "protected", which is a reserved word
        // and hence can't be called. Later it was changed to "isProtected". Try to call that.
        try {
            drm = this.player.currentItem.isProtected;
        }
        catch (error) {
            this.logger.error("Warning: error occurred while attempting to check current item for DRM: " + JSON.stringify(error) + "; assuming unprotected");
        }
        return drm;
    };
    // PSDKPlayer API's for PlayerPlatformPSDKExtensions
    PSDKPlayer.prototype.setBitratePolicy = function (policy) {
        this.logger.trace("setBitratePolicy: " + policy);
        var currentParams = this.player.abrControlParameters;
        var min = AdobeRuntimeWrapper_1.AdobeRuntimeWrapper.ABR_MIN();
        var max = AdobeRuntimeWrapper_1.AdobeRuntimeWrapper.ABR_MAX();
        if (min <= policy && policy <= max) {
            this.logger.info("new AdobePSDK.ABRControlParameters: min=" + currentParams.minBitRate +
                " max=" + currentParams.maxBitRate + " policy=" + policy);
            this.player.abrControlParameters = new AdobePSDK.ABRControlParameters(currentParams.initialBitRate, currentParams.minBitRate, currentParams.maxBitRate, policy);
            return true;
        }
        else {
            this.logger.error("setBitratePolicy: invalid policy value: " + policy);
        }
        return false;
    };
    PSDKPlayer.prototype.getCurrentFPS = function () {
        return this.playbackInformation.frameRate;
    };
    PSDKPlayer.prototype.getCurrentDroppedFrames = function () {
        return this.playbackInformation.droppedFrameCount;
    };
    PSDKPlayer.prototype.getVolume = function () {
        return this.player.volume;
    };
    Object.defineProperty(PSDKPlayer.prototype, "playbackInformation", {
        get: function () {
            return this.qosProvider.playbackInformation || this.qosProvider.getPlaybackInformation();
        },
        enumerable: true,
        configurable: true
    });
    PSDKPlayer.TARGET_DURATION_TAG = "#EXT-X-TARGETDURATION";
    PSDKPlayer.I_FRAME_DISTANCE_TAG = "#EXT-NOM-I-FRAME-DISTANCE";
    PSDKPlayer.LIVE_POINT = -2;
    return PSDKPlayer;
}(BasePlayer_1.BasePlayer));
exports.PSDKPlayer = PSDKPlayer;
Application_1.registerModule("PSDKPlayer", PSDKPlayer, {
    children: [
        "CrossStreamPreventionHandler",
        "NetworkDownHandler",
        "PSDKPlayerEvents",
        "XRECCHandler"
    ]
});

},{"../../Application":483,"../../ConfigurationManager":484,"../../PPError":487,"../../PlayerPlatformAPIEvents":489,"../../PlayerPlatformConstants":490,"../../assets/BaseAsset":537,"../../handlers/CrossStreamPreventionHandler":560,"../../handlers/NetworkDownHandler":562,"../../handlers/XRECCHandler":566,"../../services/URLService":568,"../../util/Logger":571,"../base/BasePlayer":549,"./AdobeRuntimeWrapper":554,"./PSDKGetMediaPlayerConfig":555,"./PSDKPlayerEvents":557,"rxjs/Observable":237,"rxjs/add/observable/fromEventPattern":243}],557:[function(require,module,exports){
"use strict";
/**
 * Initialize the PSDK event system and register listeners
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
var constants = require("../../PlayerPlatformConstants");
var events = require("../../PlayerPlatformAPIEvents");
var PlayerPlatformAPIEvents_1 = require("../../PlayerPlatformAPIEvents");
var Application_1 = require("../../Application");
var XREErrors_1 = require("./XREErrors");
var Logger_1 = require("../../util/Logger");
var PPError_1 = require("../../PPError");
var HlsTagFactory_1 = require("../../util/hls/HlsTagFactory");
var ConfigurationManager_1 = require("../../ConfigurationManager");
var NetworkDownHandler_1 = require("../../handlers/NetworkDownHandler");
var AdobeRuntimeWrapper_1 = require("./AdobeRuntimeWrapper");
var AdManager_1 = require("../../ads/AdManager");
var rxjs_1 = require("rxjs");
require("rxjs/add/operator/takeUntil");
require("rxjs/add/operator/filter");
require("rxjs/add/operator/map");
// PSDKPlayerEvent Methods
/**
 * PSDKPlayerEvents
 * @constructor
 */
var PSDKPlayerEvents = /** @class */ (function () {
    function PSDKPlayerEvents() {
        this.logger = new Logger_1.Logger("PSDKPlayerEvents");
        this.sizeEvent = { "width": 0, "height": 0 };
        this.listeners = [];
        this.lastProgressParams = { position: undefined, rate: undefined };
    }
    PSDKPlayerEvents.prototype.init = function (sandbox) {
        this.sandbox = sandbox;
        this.psdk = sandbox.parent;
        this.initEvents();
        this.callPreparetoPlayStream();
        this._ignoreSeek = false;
        return this;
    };
    PSDKPlayerEvents.prototype.destroy = function () {
        this.logger.trace("destroy");
        if (this.queuedPlayingEvent) {
            this.queuedPlayingEvent = undefined;
        }
        this.lastProgressParams.position = undefined;
        this.lastProgressParams.rate = undefined;
        while (this.listeners.length > 0) {
            var lastListener = this.listeners.pop();
            if (!!lastListener) {
                lastListener.object.removeEventListener(lastListener.type, lastListener.handler);
            }
        }
    };
    PSDKPlayerEvents.prototype.addListener = function (object, type, handler) {
        var newHandler = handler.bind(this);
        object.addEventListener(type, newHandler);
        var trio = { object: object, type: type, handler: newHandler };
        this.listeners.push(trio);
    };
    PSDKPlayerEvents.prototype.initEvents = function () {
        var _this = this;
        this.logger.trace("initEvents");
        this.addListener(this.psdk.player, AdobeRuntimeWrapper_1.AdobeRuntimeWrapper.PROFILE_CHANGED(), this.onProfileChanged);
        this.addListener(this.psdk.player, "bitrateChanged", this.onBitrateChanged);
        this.addListener(this.psdk.player, AdobeRuntimeWrapper_1.AdobeRuntimeWrapper.STATUS_CHANGED(), this.onStatusChanged);
        this.addListener(this.psdk.player, AdobeRuntimeWrapper_1.AdobeRuntimeWrapper.SIZE_AVAILABLE(), this.onSize);
        this.addListener(this.psdk.player, AdobeRuntimeWrapper_1.AdobeRuntimeWrapper.RATE_PLAYING(), this.onRatePlaying);
        this.addListener(this.psdk.player, AdobeRuntimeWrapper_1.AdobeRuntimeWrapper.LOAD_INFORMATION_AVAILABLE(), this.onLoadInfoAvailable);
        this.addListener(this.psdk.player, AdobeRuntimeWrapper_1.AdobeRuntimeWrapper.AUDIO_UPDATED(), this.onAudioUpdated);
        this.addListener(this.psdk.player, AdobeRuntimeWrapper_1.AdobeRuntimeWrapper.CAPTIONS_UPDATED(), this.onCaptionsUpdated);
        this.addListener(this.psdk.player, AdobeRuntimeWrapper_1.AdobeRuntimeWrapper.CC_DECODER_AVAILABLE_EVENT(), this.onDecoderAvailable);
        this.addListener(this.psdk.player, AdobeRuntimeWrapper_1.AdobeRuntimeWrapper.TIMED_METADATA_AVAILABLE(), this.onTimedMetadata);
        this.addListener(this.psdk.player, AdobeRuntimeWrapper_1.AdobeRuntimeWrapper.TIMELINE_UPDATED(), this.onTimelineUpdated);
        this.addListener(this.psdk.player, AdobeRuntimeWrapper_1.AdobeRuntimeWrapper.BUFFERING_BEGIN(), this.onBufferStart);
        this.addListener(this.psdk.player, AdobeRuntimeWrapper_1.AdobeRuntimeWrapper.BUFFERING_END(), this.onBufferComplete);
        rxjs_1.Observable.fromEvent(this.psdk.player, AdobeRuntimeWrapper_1.AdobeRuntimeWrapper.OPERATION_FAILED())
            .merge(this.getRNG150OperationFaileds())
            .map(function (event) { return _this.mapToEvent(event); })
            .filter(function (event) { return !_this.shouldIgnore(event); })
            .filter(function (event) { return !_this.isNetworkDownEvent(event); })
            .map(function (event) { return _this.mapToPPError(event); })
            .map(function (error) { return _this.mapToMediaEvent(error); })
            .takeUntil(this.sandbox.destroyed)
            .subscribe(function (event) { return events.dispatchEvent(event); });
        rxjs_1.Observable.fromEvent(this.psdk.player, AdobeRuntimeWrapper_1.AdobeRuntimeWrapper.OPERATION_FAILED())
            .merge(this.getRNG150OperationFaileds())
            .map(function (event) { return _this.mapToEvent(event); })
            .filter(function (event) { return _this.isNetworkDownEvent(event); })
            .map(function (event) { return _this.mapToPPError(event); })
            .takeUntil(this.sandbox.destroyed)
            .subscribe(function (error) { return _this.sandbox.publish(NetworkDownHandler_1.NetworkDownHandler.CHANNEL_NAME, error); });
        this.addListener(this.psdk.player, "drmError", this.onDrmError);
        this.addListener(this.psdk.player, AdobeRuntimeWrapper_1.AdobeRuntimeWrapper.DRM_METADATA_INFO_AVAILABLE(), this.onDRMMetadata);
        this.addListener(this.psdk.player, AdobeRuntimeWrapper_1.AdobeRuntimeWrapper.CC_ENTERING_LIVE_EVENT(), this.onEnteringLive);
        this.setupOnProgressSubscriber();
        this.setUpSeekSubscribers();
    };
    PSDKPlayerEvents.prototype.callPreparetoPlayStream = function () {
        var _this = this;
        this.sandbox.streams.getPlayState(constants.STATUS_INITIALIZED)
            .takeUntil(this.sandbox.destroyed)
            .subscribe(function () {
            if (_this.sandbox.asset.shouldStartFromLivePoint(_this.psdk.getVideoType())) {
                _this.sandbox.asset.resumePosition = -2;
            }
            _this.logger.info("onStatusChanged: PLAYER_STATUS_INITIALIZED. Calling prepareToPlay with resumePosition=" + _this.sandbox.asset.resumePosition);
            _this.psdk.prepareToPlay();
        });
    };
    PSDKPlayerEvents.prototype.mapToMediaEvent = function (error) {
        return error.isWarning ? new events.MediaWarningEvent(error) :
            new events.MediaFailedEvent(error, error.shouldRetry());
    };
    PSDKPlayerEvents.prototype.mapToPPError = function (event) {
        var nativeErrorCode = this.getNativeErrorCode(event);
        var subErrorCode = this.getNativeSubErrorCode(event);
        var xreError = XREErrors_1.getByErrorCode("" + nativeErrorCode);
        var ppError = new PPError_1.PPError(nativeErrorCode, subErrorCode, xreError.name + " - " + xreError.description, this.isAVERetryingEvent(event));
        return ppError;
    };
    /**
     * The RNG150 1.x does not send onOperationFailed
     * events. It's operation faileds come through as a
     * statusChanged event as PLAYER_STATUS_ERROR. If
     * we get an operationFailed we stop listening..
     */
    PSDKPlayerEvents.prototype.getRNG150OperationFaileds = function () {
        var _this = this;
        return rxjs_1.Observable.fromEvent(this.psdk.player, AdobeRuntimeWrapper_1.AdobeRuntimeWrapper.STATUS_CHANGED())
            .filter(function (event) { return _this.getStatus(event) === AdobeRuntimeWrapper_1.AdobeRuntimeWrapper.STATUS_ERROR(); })
            .takeUntil(rxjs_1.Observable.fromEvent(this.psdk.player, AdobeRuntimeWrapper_1.AdobeRuntimeWrapper.OPERATION_FAILED()));
    };
    //Safe to call play after it's been prepared..
    PSDKPlayerEvents.prototype.onPrepared = function () {
        this.logger.trace("onPrepared");
        this.logger.info("onPrepared dispatching MediaOpened event");
        this._ignoreSeek = false;
        this.lastProgressParams.position = undefined;
        this.lastProgressParams.rate = undefined;
        var playerEvent = new events.MediaOpenedEvent(this.psdk.getVideoType(), //mediaType TODO: Same as videoType ??
        this.psdk.getSupportedPlaybackSpeeds(), //playbackSpeeds
        this.psdk.getAvailableAudioLanguages(), //availableAudioLanguages
        this.psdk.getVideoWidth(), //width
        this.psdk.getVideoHeight(), //height
        Date.now() - this.psdk.latencyStart, //openingLatency
        this.psdk.hasDRM(), //hasDRM
        this.psdk.hasCC());
        events.dispatchEvent(playerEvent);
        if (this.psdk.getAutoPlay() === true) {
            this.psdk.play();
        }
    };
    /**
     * Rumor has it some set top boxes send the status
     * on the `state` property and not the `status` property.
     */
    PSDKPlayerEvents.prototype.getStatus = function (event) {
        return event.hasOwnProperty("status") ? event.status : event.state;
    };
    PSDKPlayerEvents.prototype.onStatusChanged = function (event) {
        var status = this.getStatus(event);
        if (this.lastStatus === status) {
            this.logger.warn("Received duplicate state changed event: status=" + status);
            return;
        }
        if (this._ignoreSeek && status === AdobeRuntimeWrapper_1.AdobeRuntimeWrapper.STATUS_SEEKING()) {
            this.logger.warn("Ignoring PSDK seek state during rewinding to start position");
            return;
        }
        this.lastStatus = status;
        this.logger.trace("onStatusChanged: event status=" + status);
        if (status === AdobeRuntimeWrapper_1.AdobeRuntimeWrapper.STATUS_PREPARED()) {
            this.onPrepared();
        }
        var newStatus = this.psdk.mapStateToStatus(status);
        this.logger.trace("onStatusChanged: event status=" + newStatus);
        var playerEvent = new events.PlayStateChangedEvent(newStatus);
        if (status === AdobeRuntimeWrapper_1.AdobeRuntimeWrapper.STATUS_PLAYING() && !this.queuedPlayingEvent) {
            this.logger.info("Queueing up playing status change");
            this.queuedPlayingEvent = playerEvent;
            return;
        }
        events.dispatchEvent(playerEvent);
        // The PlayStateChangeEvent complete should occur before MediaEnededEvent
        if (status === AdobeRuntimeWrapper_1.AdobeRuntimeWrapper.STATUS_COMPLETE()) {
            events.dispatchEvent(new events.MediaEndedEvent());
        }
    };
    /**
     * Notes: Size event will dispatch prior to onBitrateChanged
     * Custom event properties
     * .width
     * .height
     */
    PSDKPlayerEvents.prototype.onSize = function (event) {
        this.logger.trace("onSize: " + event.width + "x" + event.height);
        this.sizeEvent.width = event.width;
        this.sizeEvent.height = event.height;
    };
    /**
     * Custom event properties
     * .time
     * .bitRate
     */
    PSDKPlayerEvents.prototype.onBitrateChanged = function (event) {
        if (!event.bitRate) {
            return;
        }
        this.logger.trace("onBitrateChanged Time:" + event.time + " BitRate:" + event.bitRate);
        var playerEvent = new events.BitrateChangedEvent(event.bitRate, // bitrate
        "BitrateChanged", // change reason
        this.sizeEvent.width, //width
        this.sizeEvent.height); // height
        events.dispatchEvent(playerEvent);
    };
    PSDKPlayerEvents.prototype.onProfileChanged = function (event) {
        var bitrates = this.psdk.getAvailableBitrates();
        var bitrate = bitrates[event.profile] || this.psdk.getCurrentBitrate();
        this.logger.trace("onProfileChanged Time:" + event.time + " Profile:" + event.profile + " Bitrate:" + bitrate);
        var playerEvent = new events.BitrateChangedEvent(bitrate, // bitrate
        event.description, // change reason
        event.width, //width
        event.height); // height
        events.dispatchEvent(playerEvent);
    };
    /**
     * Custom event properties
     * .rate
     */
    PSDKPlayerEvents.prototype.onRatePlaying = function (event) {
        this.logger.trace("onRatePlaying: " + event.rate);
        if (event.rate === 1 && this.queuedPlayingEvent) {
            events.dispatchEvent(this.queuedPlayingEvent);
            this.queuedPlayingEvent = undefined;
        }
        if (this.lastRate !== event.rate) {
            this.lastRate = event.rate;
            var playerEvent = new events.PlaybackSpeedChangedEvent(event.rate); //playbackSpeed
            events.dispatchEvent(playerEvent);
        }
    };
    PSDKPlayerEvents.prototype.onLoadInfoAvailable = function (event) {
        // TODO(estobb200): This error occurs if you try to log the event..
        // DATA_NOT_AVAILABLE. Have you defined PORTING_KIT_DIR and PORTING_KIT_DATA_DIR?
        var loadInfo = event.loadInformation;
        var playerEvent = new events.FragmentInfoEvent(loadInfo.downloadDuration, //downloadDuration
        loadInfo.size, //fragmentSize
        loadInfo.url, //fragmentUrl
        loadInfo.mediaDuration //mediaDuration
        );
        events.dispatchEvent(playerEvent);
    };
    PSDKPlayerEvents.prototype.onAudioUpdated = function (event) {
        if (!event.item.audioTracks) {
            return;
        }
        events.dispatchEvent(new events.NumberOfAlternativeAudioStreamsChangedEvent(event.item.audioTracks.length));
    };
    PSDKPlayerEvents.prototype.onCaptionsUpdated = function (event) {
        if (!event.item.closedCaptionsTracks) {
            return;
        }
        events.dispatchEvent(new events.NumberOfClosedCaptionsStreamsChanged(event.item.closedCaptionsTracks.length));
    };
    /**
     * Event containing the address of the Decoder or DecoderStruct
     * to be passed to the AVEWebVideoItem for use with CC.
     * .data
     */
    PSDKPlayerEvents.prototype.onDecoderAvailable = function (event) {
        this.logger.trace("onDecoderAvailable");
        this.sandbox.publish("api:updatePlayerConfig");
        try {
            //set trickplayMaxFPS from config only if it isn't already set from the EXT-NOM-I-FRAME-DISTANCE tag
            if (!this.psdk.playerTrickPlayFPSMaxAlreadySet) {
                this.psdk.setTrickplayMaxFps(ConfigurationManager_1.ConfigurationManager.getInstance().get(ConfigurationManager_1.ConfigurationManager.TRICKPLAY_MAX_FPS));
            }
            if (this.psdk.getVideoType() === "live") {
                this.logger.info("play: setting live BufferControlParameters: initial=" +
                    this.psdk.initialBufferTime + " msec; playing=" + this.psdk.playingLinearBufferTime + " msec");
                this.psdk.setBufferControlParameters(this.psdk.initialBufferTime, this.psdk.playingLinearBufferTime);
            }
            else {
                this.logger.info("play: setting VOD BufferControlParameters: initial=" +
                    this.psdk.initialBufferTime + " msec; playing=" + this.psdk.playingVODBufferTime + " msec");
                this.psdk.setBufferControlParameters(this.psdk.initialBufferTime, this.psdk.playingVODBufferTime);
            }
        }
        catch (error) {
            this.logger.warn("Warning!! Error occurred while setting PSDK buffer control parameters: " + JSON.stringify(error));
        }
        this.sandbox.publish("xre:decoderAvailable", event.data);
    };
    /**
     * onTimedMetadata
     * time: msec
     * duration: sec
     */
    PSDKPlayerEvents.prototype.onTimedMetadata = function (event) {
        this.sandbox.publish("player:timedMetadata", event.timedMetadata);
        try {
            var metadata = event.timedMetadata;
            var hlsTag = HlsTagFactory_1.create(metadata.name, metadata.time, metadata.content);
            this.sandbox.publish("player:tag", hlsTag);
        }
        catch (error) {
            this.logger.error("Error!! Error occurred while responding to timed metadata event: ");
        }
    };
    /**
     * Called when the underlying timeline is updated.
     * Situations where the timeline gets updated
     * * Inserted content
     * * Removed content
     * * Rolling window
     * * Growing window
     */
    PSDKPlayerEvents.prototype.onTimelineUpdated = function (_event) {
        this.logger.trace("onTimelineUpdated");
        if (this.sandbox.adManager) {
            this.logger.trace("Updating ads for ad manager");
            this.sandbox.adManager.ads = [];
            this.sandbox.adManager.adBreaks = [];
            for (var _i = 0, _a = this.psdk.player.timeline.timelineItems; _i < _a.length; _i++) {
                var timelineItem = _a[_i];
                var totalDuration = 0;
                for (var _b = 0, _c = timelineItem.adBreak.ads; _b < _c.length; _b++) {
                    var ad = _c[_b];
                    this.sandbox.publish("ads:ad", ad.id, timelineItem.time + totalDuration, ad.duration, {});
                    totalDuration += ad.duration;
                }
            }
            this.sandbox.adManager.adBreaks = AdManager_1.AdManager.sortIntoAdBreaks(this.sandbox.adManager.ads);
        }
    };
    /**
     *
     */
    PSDKPlayerEvents.prototype.onPlayStart = function () {
        this.logger.trace("onPlayStart");
        // Note: a separate state changed event is posted to mark entry to play state. No need to duplicate that here.
    };
    /**
     *
     */
    PSDKPlayerEvents.prototype.onBufferStart = function () {
        this.logger.trace("onBufferStart");
        var playerEvent = new events.BufferStartEvent();
        events.dispatchEvent(playerEvent);
    };
    /**
     *
     */
    PSDKPlayerEvents.prototype.onBufferComplete = function () {
        this.logger.trace("onBufferComplete");
        var playerEvent = new events.BufferCompleteEvent();
        events.dispatchEvent(playerEvent);
    };
    PSDKPlayerEvents.prototype.setUpSeekSubscribers = function () {
        var _this = this;
        //SeekStart Event
        rxjs_1.Observable.fromEvent(this.psdk.player, AdobeRuntimeWrapper_1.AdobeRuntimeWrapper.SEEK_BEGIN())
            .filter(function (event) {
            //ignore PSDK Seek during rewind to start position
            if (event.actualPosition === 0 && _this.lastRate < 0) {
                _this._ignoreSeek = true;
                _this.logger.warn("Ignoring PSDK seekBegin during rewinding to start position");
                return false;
            }
            return true;
        })
            .map(function () {
            return new events.SeekStartEvent(_this.psdk.getCurrentPosition());
        })
            .takeUntil(this.sandbox.destroyed)
            .subscribe(function (event) {
            _this.logger.trace("onSeekStart");
            events.dispatchEvent(event);
        });
        //SeekComplete Event
        rxjs_1.Observable.fromEvent(this.psdk.player, AdobeRuntimeWrapper_1.AdobeRuntimeWrapper.SEEK_END())
            .filter(function () {
            //ignore PSDK Seek during rewind to start position
            if (_this._ignoreSeek) {
                _this._ignoreSeek = false;
                _this.logger.warn("Ignoring PSDK seekEnd during rewinding to start position");
                return false;
            }
            return true;
        })
            .map(function () {
            return new events.SeekCompleteEvent(_this.psdk.getCurrentPosition());
        })
            .takeUntil(this.sandbox.destroyed)
            .subscribe(function (event) {
            _this.logger.trace("onSeekComplete");
            events.dispatchEvent(event);
        });
    };
    /**
     *  MediaProgress Event
     */
    PSDKPlayerEvents.prototype.setupOnProgressSubscriber = function () {
        var _this = this;
        rxjs_1.Observable.fromEvent(this.psdk.player, "timeChanged")
            .map(function (event) {
            var position = event.time;
            var playbackSpeed = _this.seekToStartDuringRewind(position, _this.psdk.getCurrentPlaybackSpeed())
                ? _this.lastProgressParams.rate
                : _this.psdk.getCurrentPlaybackSpeed();
            var startPosition = _this.psdk.player.seekableRange.begin;
            var endPosition = (position > _this.psdk.player.seekableRange.end) ? position : _this.psdk.player.seekableRange.end;
            var updateInterval = _this.psdk.updateInterval;
            _this.lastProgressParams.position = event.time;
            _this.lastProgressParams.rate = _this.psdk.getCurrentPlaybackSpeed();
            return new events.MediaProgressEvent(position, // current play/pause position relative to tune time - starts at zero)
            playbackSpeed, // current trick speed (1.0 for normal play rate)
            startPosition, // time shift buffer start position (relative to tune time - starts at zero)
            endPosition, // time shift buffer end position (relative to tune time - starts at zero)
            updateInterval);
        })
            .takeUntil(this.sandbox.destroyed)
            .subscribe(function (event) {
            events.dispatchEvent(event);
        });
    };
    /**
     * During rewind action in STB, when the timeline is near to startPosition
     * Adobe calls a seek to 0 and the playRate is changed to 1.
     * @param position
     * @param plabackSpeed
     * @returns {boolean}
     */
    PSDKPlayerEvents.prototype.seekToStartDuringRewind = function (position, playbackSpeed) {
        var retStatus = (position === 0 && playbackSpeed === 1 && this.lastProgressParams.rate
            && this.lastProgressParams.rate < 0);
        if (retStatus) {
            this.logger.warn("Seek to start position during rewind. Using last progress playback rate.");
        }
        return retStatus;
    };
    PSDKPlayerEvents.prototype.getOperationFailedMetadata = function (event) {
        return Object.prototype.hasOwnProperty.call(event, "metadata") ? event["metadata"] : event.notification.metadata;
    };
    /**
     * Determines a native sub error code from an OperationFailedEvent
     */
    PSDKPlayerEvents.prototype.getNativeSubErrorCode = function (event) {
        var subErrorCode;
        var metadata = this.getOperationFailedMetadata(event);
        if (metadata && !isNaN(parseInt(metadata.NATIVE_SUBERROR_CODE))) {
            subErrorCode = parseInt(metadata.NATIVE_SUBERROR_CODE);
        }
        return subErrorCode;
    };
    /**
     * Determines the native error code from an OperationFailedEvent.
     */
    PSDKPlayerEvents.prototype.getNativeErrorCode = function (event) {
        var metadata = this.getOperationFailedMetadata(event);
        var nativeErrorCode = event["code"] || 6;
        if (metadata && (metadata.NATIVE_ERROR_CODE || metadata.PSDK_ERROR_CODE)) {
            nativeErrorCode = parseInt(metadata.NATIVE_ERROR_CODE || metadata.PSDK_ERROR_CODE);
        }
        return nativeErrorCode;
    };
    /**
     * According to old comments in the code base, something version 2.0
     * introduced a change where the event we expected was stored in
     * a notification property. This method finds the event we need. It
     * is most likely not needed anymore.
     */
    PSDKPlayerEvents.prototype.mapToEvent = function (event) {
        if (Object.prototype.hasOwnProperty.call(event, "notification")) {
            return event.notification;
        }
        return event;
    };
    /**
     * Determines if we can ignore the operation failed event.
     * The PSDK player currently send a magnitude of kECHold warnings
     * during live playback. These errors can be ignored.
     */
    PSDKPlayerEvents.prototype.shouldIgnore = function (event) {
        var nativeErrorCode = this.getNativeErrorCode(event);
        var xreError = XREErrors_1.getByErrorCode("" + nativeErrorCode);
        return nativeErrorCode === XREErrors_1.XREErrorCode.kECHold ||
            (this.isAVERetryingEvent(event) && xreError.code === PlayerPlatformAPIEvents_1.MEDIA_WARNING_TRICKMODE_DISALLOWED);
    };
    /**
     * note - some media failure events arrive with WARNING in the description
     * This indicates that AVE is continuing to retry the operation that failed.
     * If and when AVE gives up, it will issue the same event with ERROR in the
     * description, at which point it will fall through the test below and pass
     * the event along to the PlayerPlatformAPI.
     */
    PSDKPlayerEvents.prototype.isAVERetryingEvent = function (event) {
        var nativeErrorCode = this.getNativeErrorCode(event);
        var xreError = XREErrors_1.getByErrorCode("" + nativeErrorCode);
        var metadata = this.getOperationFailedMetadata(event);
        return xreError.warning || (metadata && metadata.hasOwnProperty("WARNING"));
    };
    /**
     * Adobe sends network down events as a warning. This method
     * determines if a provided operation failed event is a network down
     * event.
     */
    PSDKPlayerEvents.prototype.isNetworkDownEvent = function (event) {
        var metadata = this.getOperationFailedMetadata(event);
        return metadata && metadata.WARNING && metadata.NATIVE_ERROR === "NETWORK_DOWN";
    };
    /**
     * DRMError is a placeholder for DRM errors while Adobe finishes
     * DRMOperationError
     */
    PSDKPlayerEvents.prototype.onDrmError = function (event) {
        this.logger.error("onDrmError major: " + event.majorError + " minor: " + event.minorError);
        var descCode = "DRM Major Error:" + event.majorError + " Minor Error:" + event.minorError;
        var error = new PPError_1.PPError(event.majorError, event.minorError, descCode);
        // 3329.12017 signals that it's a blackout license failure and should
        // not retry, 12000 being the CAM code and 17 for CAM's blackout subcode.
        events.dispatchEvent(new events.MediaFailedEvent(error, error.shouldRetry()));
    };
    // event prop drmMetadataInfo
    PSDKPlayerEvents.prototype.onDRMMetadata = function (event) {
        this.logger.trace("onDRMMetadata");
        events.dispatchEvent(new events.DRMMetadataEvent(event.drmMetadataInfo));
    };
    /**
     * Event notification to notify livepoint is reached
     * @param None
     */
    PSDKPlayerEvents.prototype.onEnteringLive = function () {
        this.logger.trace("onEnteringLive");
        this.sandbox.publish("xre:onenteringlive");
    };
    // create an ad from a timed metadata event
    PSDKPlayerEvents.prototype.createAd = function (metadata) {
        this.sandbox.publish("ads:ad", metadata.metadata.ID, metadata.time, metadata.metadata.DURATION * constants.MILLISECONDS_PER_SECOND, {});
    };
    PSDKPlayerEvents.prototype.createTrickModeRestriction = function (metadata) {
        this.logger.trace("createTrickModeRestriction");
        if ((metadata === undefined) || (metadata === null)) {
            metadata = {};
        }
        var id = metadata.ADID;
        var mode = metadata.MODE;
        var scale = metadata.SCALE;
        var limit = metadata.LIMIT;
        this.sandbox.publish("ads:restriction", id, mode, scale, limit);
    };
    return PSDKPlayerEvents;
}());
exports.PSDKPlayerEvents = PSDKPlayerEvents;
Application_1.registerModule("PSDKPlayerEvents", PSDKPlayerEvents);

},{"../../Application":483,"../../ConfigurationManager":484,"../../PPError":487,"../../PlayerPlatformAPIEvents":489,"../../PlayerPlatformConstants":490,"../../ads/AdManager":493,"../../handlers/NetworkDownHandler":562,"../../util/Logger":571,"../../util/hls/HlsTagFactory":579,"./AdobeRuntimeWrapper":554,"./XREErrors":558,"rxjs":281,"rxjs/add/operator/filter":260,"rxjs/add/operator/map":263,"rxjs/add/operator/takeUntil":276}],558:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var _a;
var XREError = /** @class */ (function () {
    function XREError(name, code, warning) {
        if (warning === void 0) { warning = false; }
        this.name = name;
        this.code = code;
        this.warning = warning;
    }
    Object.defineProperty(XREError.prototype, "description", {
        get: function () {
            return this.name + " (" + this.code + ")";
        },
        enumerable: true,
        configurable: true
    });
    return XREError;
}());
exports.XREError = XREError;
var XREErrorType;
(function (XREErrorType) {
    XREErrorType[XREErrorType["NETWORK_ERROR"] = 10] = "NETWORK_ERROR";
    XREErrorType[XREErrorType["RESOURCE_UNAVAILABLE"] = 20] = "RESOURCE_UNAVAILABLE";
    XREErrorType[XREErrorType["UNSUPPORTED_CONTENT"] = 30] = "UNSUPPORTED_CONTENT";
    XREErrorType[XREErrorType["CONTENT_UNAUTHORIZED"] = 40] = "CONTENT_UNAUTHORIZED";
    XREErrorType[XREErrorType["DRM_FAILURE"] = 50] = "DRM_FAILURE";
    XREErrorType[XREErrorType["CONTENT_CANCELLED"] = 60] = "CONTENT_CANCELLED";
    XREErrorType[XREErrorType["PLAYBACK_FAILURE"] = 70] = "PLAYBACK_FAILURE";
    XREErrorType[XREErrorType["PLAYBACK_TERMINATED"] = 80] = "PLAYBACK_TERMINATED";
    XREErrorType[XREErrorType["INVALID_PARAMS"] = 90] = "INVALID_PARAMS";
    XREErrorType[XREErrorType["OTHER"] = 100] = "OTHER";
    XREErrorType[XREErrorType["TUNE_ERROR"] = 110] = "TUNE_ERROR";
    XREErrorType[XREErrorType["PROGRAM_DATA_UNAVAILABLE"] = 120] = "PROGRAM_DATA_UNAVAILABLE";
    XREErrorType[XREErrorType["VOD_PLAYBACK_FAILURE"] = 130] = "VOD_PLAYBACK_FAILURE";
    XREErrorType[XREErrorType["BLACKOUT_DRM_FAILURE"] = 150] = "BLACKOUT_DRM_FAILURE";
})(XREErrorType || (XREErrorType = {}));
var XREErrorCode;
(function (XREErrorCode) {
    XREErrorCode[XREErrorCode["kECGenericError"] = 6] = "kECGenericError";
    XREErrorCode[XREErrorCode["kECAborted"] = 40] = "kECAborted";
    XREErrorCode[XREErrorCode["kECNetworkDown"] = 44] = "kECNetworkDown";
    XREErrorCode[XREErrorCode["kECNetworkError"] = 33] = "kECNetworkError";
    XREErrorCode[XREErrorCode["kECHttpTimeOut"] = 43] = "kECHttpTimeOut";
    XREErrorCode[XREErrorCode["kECHold"] = 53] = "kECHold";
})(XREErrorCode = exports.XREErrorCode || (exports.XREErrorCode = {}));
var adobeXREErrors = (_a = {
        //Adobe Codes
        "-1": new XREError("kECEndOfPeriod", XREErrorType.OTHER),
        "0": new XREError("kECSuccess", XREErrorType.OTHER),
        "1": new XREError("kECAsyncOperationInProgress", XREErrorType.OTHER),
        "2": new XREError("kECEOF", XREErrorType.INVALID_PARAMS),
        "3": new XREError("kECDecoderFailed", XREErrorType.PLAYBACK_TERMINATED),
        "4": new XREError("kECDeviceOpenError", XREErrorType.RESOURCE_UNAVAILABLE),
        "5": new XREError("kECFileNotFound", XREErrorType.INVALID_PARAMS)
    },
    _a[XREErrorCode.kECGenericError] = new XREError("kECGenericError", XREErrorType.OTHER),
    _a["7"] = new XREError("kECIrrecoverableError", XREErrorType.PLAYBACK_TERMINATED),
    _a["8"] = new XREError("kECLostConnectionRecoverable", XREErrorType.NETWORK_ERROR),
    _a["9"] = new XREError("kECNoFixedSize", XREErrorType.INVALID_PARAMS),
    _a["10"] = new XREError("kECNotImplemented", XREErrorType.RESOURCE_UNAVAILABLE),
    _a["11"] = new XREError("kECOutOfMemory", XREErrorType.PLAYBACK_TERMINATED),
    _a["12"] = new XREError("kECParseError", XREErrorType.INVALID_PARAMS),
    _a["13"] = new XREError("kECSizeUnknown", XREErrorType.INVALID_PARAMS),
    _a["14"] = new XREError("kECUnderFlow", XREErrorType.OTHER),
    _a["15"] = new XREError("kECUnsupportedConfig", XREErrorType.RESOURCE_UNAVAILABLE),
    _a["16"] = new XREError("kECUnsupportedOperation", XREErrorType.RESOURCE_UNAVAILABLE),
    _a["17"] = new XREError("kECWaitingForInit", XREErrorType.PLAYBACK_FAILURE),
    _a["18"] = new XREError("kECInvalidParameter", XREErrorType.INVALID_PARAMS),
    _a["19"] = new XREError("kECInvalidOperation", XREErrorType.PLAYBACK_FAILURE),
    _a["20"] = new XREError("kECOpOnlyAllowedInPausedState", XREErrorType.PLAYBACK_TERMINATED),
    _a["21"] = new XREError("kECOpInvalidWithAudioOnlyFile", XREErrorType.PLAYBACK_FAILURE),
    _a["22"] = new XREError("kECPreviousStepSeekInProgress", XREErrorType.PLAYBACK_FAILURE),
    _a["23"] = new XREError("kECSourceNotSpecified", XREErrorType.INVALID_PARAMS),
    _a["24"] = new XREError("kECRangeError", XREErrorType.INVALID_PARAMS),
    _a["25"] = new XREError("kECInvalidSeekTime", XREErrorType.INVALID_PARAMS),
    _a["26"] = new XREError("kECFileStructureInvalid", XREErrorType.INVALID_PARAMS),
    _a["27"] = new XREError("kECComponentCreationFailure", XREErrorType.RESOURCE_UNAVAILABLE),
    _a["28"] = new XREError("kECDRMInitError", XREErrorType.DRM_FAILURE),
    _a["29"] = new XREError("kECContainerNotSupported", XREErrorType.RESOURCE_UNAVAILABLE),
    _a["30"] = new XREError("kECSeekFailed", XREErrorType.PLAYBACK_FAILURE),
    _a["31"] = new XREError("kECCodecNotSupported", XREErrorType.RESOURCE_UNAVAILABLE),
    _a["32"] = new XREError("kECNetworkUnavailable", XREErrorType.NETWORK_ERROR),
    _a[XREErrorCode.kECNetworkError] = new XREError("kECNetworkError", XREErrorType.NETWORK_ERROR),
    _a["34"] = new XREError("kECOverflow", XREErrorType.PLAYBACK_FAILURE),
    _a["35"] = new XREError("kECVideoProfileNotSupported", XREErrorType.RESOURCE_UNAVAILABLE),
    _a["36"] = new XREError("kECPeriodNotLoaded", XREErrorType.PLAYBACK_TERMINATED),
    _a["37"] = new XREError("kECInvalidReplaceDuration", XREErrorType.PLAYBACK_TERMINATED),
    _a["38"] = new XREError("kECCalledFromWrongThread", XREErrorType.PLAYBACK_TERMINATED),
    _a["39"] = new XREError("kECFragmentReadError", XREErrorType.PLAYBACK_TERMINATED),
    _a[XREErrorCode.kECAborted] = new XREError("kECAborted", XREErrorType.PLAYBACK_TERMINATED),
    _a["41"] = new XREError("kECUnsupportedHLSVersion", XREErrorType.UNSUPPORTED_CONTENT),
    _a["42"] = new XREError("kECCannotFailOver", XREErrorType.PLAYBACK_FAILURE),
    _a[XREErrorCode.kECHttpTimeOut] = new XREError("kECHttpTimeOut", XREErrorType.NETWORK_ERROR),
    _a[XREErrorCode.kECNetworkDown] = new XREError("kECNetworkDown", XREErrorType.NETWORK_ERROR),
    _a["45"] = new XREError("kECNoUsableBitrateProfile", XREErrorType.UNSUPPORTED_CONTENT),
    _a["46"] = new XREError("kECBadManifestSignature", XREErrorType.CONTENT_UNAUTHORIZED),
    _a["47"] = new XREError("kECCannotLoadPlaylist", XREErrorType.RESOURCE_UNAVAILABLE),
    _a["48"] = new XREError("kECReplacementFailed", XREErrorType.PLAYBACK_TERMINATED),
    _a["49"] = new XREError("kECSwitchToAsymmetricProfile", XREErrorType.PLAYBACK_TERMINATED),
    _a["50"] = new XREError("kECLiveWindowMovedBackward", XREErrorType.PLAYBACK_TERMINATED),
    _a["51"] = new XREError("kECCurrentPeriodExpired", XREErrorType.INVALID_PARAMS),
    _a["52"] = new XREError("kECContentLengthMismatch", XREErrorType.INVALID_PARAMS),
    _a[XREErrorCode.kECHold] = new XREError("kECHold", XREErrorType.INVALID_PARAMS),
    _a["54"] = new XREError("kECLiveHold", XREErrorType.INVALID_PARAMS),
    _a["55"] = new XREError("kECBadMediaInterleaving", XREErrorType.PLAYBACK_FAILURE),
    _a["56"] = new XREError("kECDRMNotAvailable", XREErrorType.DRM_FAILURE),
    _a["57"] = new XREError("kECPlaybackNotAuthorized", XREErrorType.CONTENT_UNAUTHORIZED),
    _a["58"] = new XREError("kECBadMediaSampleFound", XREErrorType.PLAYBACK_TERMINATED),
    _a["59"] = new XREError("kECRangeSpansReadHead", XREErrorType.PLAYBACK_TERMINATED),
    _a["60"] = new XREError("kECPostrollWithLiveNotAllowed", XREErrorType.PLAYBACK_FAILURE),
    _a["61"] = new XREError("kECInternalError", XREErrorType.OTHER),
    _a["62"] = new XREError("kECSPSPPSFoundOutsideAVCC", XREErrorType.PLAYBACK_TERMINATED),
    _a["63"] = new XREError("kECPartialReplacement", XREErrorType.PLAYBACK_FAILURE),
    _a["64"] = new XREError("kECRenditionM3U8Error", XREErrorType.RESOURCE_UNAVAILABLE),
    _a["65"] = new XREError("kECNullOperation", XREErrorType.OTHER),
    _a["66"] = new XREError("kECSegmentSkippedOnFailure", XREErrorType.PLAYBACK_TERMINATED),
    _a["67"] = new XREError("kECIncompatibleRenderMode", XREErrorType.PLAYBACK_FAILURE),
    _a["68"] = new XREError("kECProtocolNotSupported", XREErrorType.PLAYBACK_FAILURE),
    _a["69"] = new XREError("kECParseErrorIncompatibleVersion", XREErrorType.RESOURCE_UNAVAILABLE),
    _a["70"] = new XREError("kECManifestFileUnexpectedlyChanged", XREErrorType.PLAYBACK_FAILURE),
    _a["71"] = new XREError("kECCannotSplitTimeline", XREErrorType.PLAYBACK_FAILURE),
    _a["72"] = new XREError("kECCannotEraseTimeline", XREErrorType.PLAYBACK_FAILURE),
    _a["73"] = new XREError("kECDidNotGetNextFragment", XREErrorType.PLAYBACK_TERMINATED),
    _a["74"] = new XREError("kECNoTimeline", XREErrorType.OTHER),
    _a["75"] = new XREError("kECListenerNotFound", XREErrorType.OTHER),
    _a["76"] = new XREError("kECAudioStartError", XREErrorType.PLAYBACK_FAILURE),
    _a["77"] = new XREError("kECNoAudioSink", XREErrorType.RESOURCE_UNAVAILABLE),
    _a["78"] = new XREError("kECFileOpenError", XREErrorType.RESOURCE_UNAVAILABLE),
    _a["79"] = new XREError("kECFileWriteError", XREErrorType.RESOURCE_UNAVAILABLE),
    _a["80"] = new XREError("kECFileReadError", XREErrorType.RESOURCE_UNAVAILABLE),
    _a["81"] = new XREError("kECID3ParseError", XREErrorType.RESOURCE_UNAVAILABLE),
    _a["82"] = new XREError("kECSecurityError", XREErrorType.CONTENT_UNAUTHORIZED),
    _a["83"] = new XREError("kECTimelineTooShort", XREErrorType.INVALID_PARAMS),
    _a["84"] = new XREError("kECAudioOnlyStreamStart", XREErrorType.OTHER),
    _a["85"] = new XREError("kECAudioOnlyStreamEnd", XREErrorType.OTHER),
    _a["87"] = new XREError("kECKeyNotFound", XREErrorType.RESOURCE_UNAVAILABLE),
    _a["88"] = new XREError("kECInvalidKey", XREErrorType.RESOURCE_UNAVAILABLE),
    _a["89"] = new XREError("kECKeyServerNotFound", XREErrorType.RESOURCE_UNAVAILABLE),
    _a["200"] = new XREError("kECPlaybackOperationFailed", XREErrorType.PLAYBACK_FAILURE),
    _a["201"] = new XREError("kECNativeWarning", XREErrorType.OTHER, true),
    _a["202"] = new XREError("kECAdResolverFailed", XREErrorType.OTHER, true),
    _a["203"] = new XREError("kECAdManifestLoadFailed", XREErrorType.OTHER, true),
    _a["300"] = new XREError("kCryptoErrorAlgNotSupported", XREErrorType.DRM_FAILURE),
    _a["301"] = new XREError("kCryptoErrorCorruptedData", XREErrorType.DRM_FAILURE),
    _a["302"] = new XREError("kCryptoErrorBufferTooSmall", XREErrorType.DRM_FAILURE),
    _a["303"] = new XREError("kCryptoErrorBadCertificate", XREErrorType.DRM_FAILURE),
    _a["304"] = new XREError("kCryptoErrorDigestUpdate", XREErrorType.DRM_FAILURE),
    _a["305"] = new XREError("kCryptoErrorDigestFinish", XREErrorType.DRM_FAILURE),
    _a["306"] = new XREError("kCryptoErrorBadParameter", XREErrorType.DRM_FAILURE),
    _a["307"] = new XREError("kCryptoErrorUnknown", XREErrorType.DRM_FAILURE),
    _a["3300"] = new XREError("kECAAXS_InvalidVoucher", XREErrorType.DRM_FAILURE),
    _a["3301"] = new XREError("kECAAXS_AuthenticationFailed", XREErrorType.DRM_FAILURE),
    _a["3302"] = new XREError("kECAAXS_RequireSSL", XREErrorType.DRM_FAILURE),
    _a["3303"] = new XREError("kECAAXS_ContentExpired", XREErrorType.DRM_FAILURE),
    _a["3304"] = new XREError("kECAAXS_AuthorizationFailed", XREErrorType.DRM_FAILURE),
    _a["3305"] = new XREError("kECAAXS_ServerConnectionFailed", XREErrorType.DRM_FAILURE),
    _a["3306"] = new XREError("kECAAXS_ClientUpdateRequired", XREErrorType.DRM_FAILURE),
    _a["3307"] = new XREError("kECAAXS_InternalFailure", XREErrorType.DRM_FAILURE),
    _a["3308"] = new XREError("kECAAXS_WrongLicenseKey", XREErrorType.DRM_FAILURE),
    _a["3309"] = new XREError("kECAAXS_CorruptedAdditionalHeader", XREErrorType.DRM_FAILURE),
    _a["3310"] = new XREError("kECAAXS_AppIDMismatch", XREErrorType.DRM_FAILURE),
    _a["3311"] = new XREError("kECAAXS_AppVersionMismatch,", XREErrorType.DRM_FAILURE),
    _a["3312"] = new XREError("kECAAXS_LicenseIntegrity", XREErrorType.DRM_FAILURE),
    _a["3313"] = new XREError("kECAAXS_WriteMicrosafeFailed", XREErrorType.DRM_FAILURE),
    _a["3314"] = new XREError("kECAAXS_CorruptedDRMMetadata", XREErrorType.DRM_FAILURE),
    _a["3315"] = new XREError("kECAAXS_PermissionDenied", XREErrorType.DRM_FAILURE),
    _a["3316"] = new XREError("kECAAXS_NOTUSED_MOVED", XREErrorType.DRM_FAILURE),
    _a["3317"] = new XREError("kECAAXS_LoadAdobeCPFailed", XREErrorType.DRM_FAILURE),
    _a["3318"] = new XREError("kECAAXS_IncompatibleAdobeCPVersion", XREErrorType.DRM_FAILURE),
    _a["3319"] = new XREError("kECAAXS_MissingAdobeCPGetAPI", XREErrorType.DRM_FAILURE),
    _a["3320"] = new XREError("kECAAXS_HostAuthenticateFailed", XREErrorType.DRM_FAILURE),
    _a["3321"] = new XREError("kECAAXS_I15nFailed", XREErrorType.DRM_FAILURE),
    _a["3322"] = new XREError("kECAAXS_DeviceBindingFailed", XREErrorType.DRM_FAILURE),
    _a["3323"] = new XREError("kECAAXS_CorruptGlobalStateStore", XREErrorType.DRM_FAILURE),
    _a["3324"] = new XREError("kECAAXS_MachineTokenInvalid", XREErrorType.DRM_FAILURE),
    _a["3325"] = new XREError("kECAAXS_CorruptServerStateStore", XREErrorType.DRM_FAILURE),
    _a["3326"] = new XREError("kECAAXS_StoreTamperingDetected", XREErrorType.DRM_FAILURE),
    _a["3327"] = new XREError("kECAAXS_ClockTamperingDetected", XREErrorType.DRM_FAILURE),
    _a["3328"] = new XREError("kECAAXS_ServerErrorTryAgain", XREErrorType.DRM_FAILURE),
    _a["3329"] = new XREError("kECAAXS_ApplicationSpecificError", XREErrorType.DRM_FAILURE),
    _a["3329.12012"] = new XREError("kECAAXS_ApplicationSpecificError", XREErrorType.CONTENT_UNAUTHORIZED),
    _a["3329.12013"] = new XREError("kECAAXS_ApplicationSpecificError", XREErrorType.CONTENT_UNAUTHORIZED),
    _a["3329.12017"] = new XREError("kECAAXS_ApplicationSpecificError", XREErrorType.BLACKOUT_DRM_FAILURE),
    _a["3330"] = new XREError("kECAAXS_NeedAuthentication", XREErrorType.DRM_FAILURE),
    _a["3331"] = new XREError("kECAAXS_ContentNotYetValid", XREErrorType.DRM_FAILURE),
    _a["3332"] = new XREError("kECAAXS_CachedLicenseExpired", XREErrorType.DRM_FAILURE),
    _a["3333"] = new XREError("kECAAXS_PlaybackWindowExpired", XREErrorType.DRM_FAILURE),
    _a["3334"] = new XREError("kECAAXS_InvalidDRMPlatform", XREErrorType.DRM_FAILURE),
    _a["3335"] = new XREError("kECAAXS_InvalidDRMVersion", XREErrorType.DRM_FAILURE),
    _a["3336"] = new XREError("kECAAXS_InvalidRuntimePlatform", XREErrorType.DRM_FAILURE),
    _a["3337"] = new XREError("kECAAXS_InvalidRuntimeVersion", XREErrorType.DRM_FAILURE),
    _a["3338"] = new XREError("kECAAXS_UnknownConnectionType", XREErrorType.DRM_FAILURE),
    _a["3339"] = new XREError("kECAAXS_NoAnalogPlaybackAllowed", XREErrorType.DRM_FAILURE),
    _a["3340"] = new XREError("kECAAXS_NoAnalogProtectionAvail", XREErrorType.DRM_FAILURE),
    _a["3341"] = new XREError("kECAAXS_NoDigitalPlaybackAllowed", XREErrorType.DRM_FAILURE),
    _a["3342"] = new XREError("kECAAXS_NoDigitalProtectionAvail", XREErrorType.DRM_FAILURE),
    _a["3343"] = new XREError("kECAAXS_IntegrityVerificationFailed", XREErrorType.DRM_FAILURE),
    _a["3344"] = new XREError("kECAAXS_MissingAdobeCPModule", XREErrorType.DRM_FAILURE),
    _a["3345"] = new XREError("kECAAXS_DRMNoAccessError", XREErrorType.DRM_FAILURE),
    _a["3346"] = new XREError("kECAAXS_MigrationFailed", XREErrorType.DRM_FAILURE),
    _a["3347"] = new XREError("kECAAXS_InsufficientDeviceCapabilites", XREErrorType.DRM_FAILURE),
    _a["3348"] = new XREError("kECAAXS_HardStopIntervalExpired", XREErrorType.DRM_FAILURE),
    _a["3349"] = new XREError("kECAAXS_ServerVersionTooHigh", XREErrorType.DRM_FAILURE),
    _a["3350"] = new XREError("kECAAXS_ServerVersionTooLow", XREErrorType.DRM_FAILURE),
    _a["3351"] = new XREError("kECAAXS_DomainTokenInvalid", XREErrorType.DRM_FAILURE),
    _a["3352"] = new XREError("kECAAXS_DomainTokenTooOld", XREErrorType.DRM_FAILURE),
    _a["3353"] = new XREError("kECAAXS_DomainTokenTooNew", XREErrorType.DRM_FAILURE),
    _a["3354"] = new XREError("kECAAXS_DomainTokenExpired", XREErrorType.DRM_FAILURE),
    _a["3355"] = new XREError("kECAAXS_DomainJoinFailed", XREErrorType.DRM_FAILURE),
    _a["3356"] = new XREError("kECAAXS_NoCorrespondingRoot", XREErrorType.DRM_FAILURE),
    _a["3357"] = new XREError("kECAAXS_NoValidEmbeddedLicense", XREErrorType.DRM_FAILURE),
    _a["3358"] = new XREError("kECAAXS_NoACPProtectionAvail", XREErrorType.DRM_FAILURE),
    _a["3359"] = new XREError("kECAAXS_NoCGMSAProtectionAvail", XREErrorType.DRM_FAILURE),
    _a["3360"] = new XREError("kECAAXS_DomainRegistrationRequired", XREErrorType.DRM_FAILURE),
    _a["3361"] = new XREError("kECAAXS_NotRegisteredToDomain", XREErrorType.DRM_FAILURE),
    _a["3362"] = new XREError("kECAAXS_OperationTimeoutError", XREErrorType.DRM_FAILURE),
    _a["3363"] = new XREError("kECAAXS_UnsupportedIOSPlaylistError", XREErrorType.DRM_FAILURE),
    _a["3364"] = new XREError("kECAAXS_NoDeviceId", XREErrorType.DRM_FAILURE),
    _a["3365"] = new XREError("kECAAXS_IncognitoModeNotAllowed,", XREErrorType.DRM_FAILURE),
    _a["3366"] = new XREError("kECAAXS_BadParameter,", XREErrorType.DRM_FAILURE),
    _a["3367"] = new XREError("kECMAX_ERRORS", XREErrorType.DRM_FAILURE),
    _a);
var helioXREErrors = {
    "1337": new XREError("MEDIA_LOAD_FAILED", XREErrorType.TUNE_ERROR),
    "1.0": new XREError("INVALID_MIMETYPE", XREErrorType.RESOURCE_UNAVAILABLE),
    "1.1": new XREError("INVALID_CONTENTTYPE", XREErrorType.RESOURCE_UNAVAILABLE),
    "1.2": new XREError("INVALID_TIMETYPE", XREErrorType.RESOURCE_UNAVAILABLE),
    "1.3": new XREError("INVALID_MANIFEST", XREErrorType.RESOURCE_UNAVAILABLE),
    "1.4": new XREError("INVALID_DURATION", XREErrorType.RESOURCE_UNAVAILABLE),
    "1.5": new XREError("INVALID_RATIOTYPE", XREErrorType.RESOURCE_UNAVAILABLE),
    "1.6": new XREError("INVALID_BASE_URI", XREErrorType.RESOURCE_UNAVAILABLE),
    "1.7": new XREError("MALFORMED_XML_ERROR", XREErrorType.RESOURCE_UNAVAILABLE),
    "1.8": new XREError("DOCUMENT_FORMAT_ERROR", XREErrorType.RESOURCE_UNAVAILABLE),
    "1.9": new XREError("INVALID_RANGETYPE", XREErrorType.RESOURCE_UNAVAILABLE),
    "2.0": new XREError("LOAD_FAILURE", XREErrorType.NETWORK_ERROR),
    "2.1": new XREError("URL_NOT_FOUND", XREErrorType.RESOURCE_UNAVAILABLE),
    "2.2": new XREError("NETWORK_TIMEOUT", XREErrorType.NETWORK_ERROR),
    "3.0": new XREError("INVALID_PRESENTATIONTYPE", XREErrorType.UNSUPPORTED_CONTENT),
    "3.1": new XREError("UNKNOWN_ADAPTATION_SET", XREErrorType.UNSUPPORTED_CONTENT),
    "3.2": new XREError("UNABLE_TO_ADD_SOURCE_BUFFER", XREErrorType.PLAYBACK_FAILURE),
    "3.3": new XREError("INVALID_BITRATE", XREErrorType.PLAYBACK_FAILURE),
    "3.4": new XREError("MEDIA_ERROR", XREErrorType.PLAYBACK_FAILURE),
    "3.5": new XREError("UNSUPPORTED_MEDIAFORMAT", XREErrorType.UNSUPPORTED_CONTENT),
    "3.6": new XREError("UNSUPPORTED_RESPONSE_TYPE", XREErrorType.UNSUPPORTED_CONTENT),
    "3.7": new XREError("UNSUPPORTED_UPDATE_PERIOD", XREErrorType.UNSUPPORTED_CONTENT),
    "3.8": new XREError("NO_RESPONSE", XREErrorType.PLAYBACK_FAILURE),
    "4.0": new XREError("NO_SEGMENTS_FOUND", XREErrorType.PLAYBACK_FAILURE),
    "5.0": new XREError("UNKNOWN_ERROR", XREErrorType.OTHER),
    "6.1": new XREError("MEDIA_ERR_ABORTED", XREErrorType.PLAYBACK_TERMINATED),
    "6.2": new XREError("MEDIA_ERR_NETWORK", XREErrorType.NETWORK_ERROR),
    "6.3": new XREError("MEDIA_ERR_DECODE", XREErrorType.UNSUPPORTED_CONTENT),
    "6.4": new XREError("MEDIA_ERR_NOT_SUPPORTED", XREErrorType.UNSUPPORTED_CONTENT),
    "6.5": new XREError("MEDIA_ERR_ENCRYPTED", XREErrorType.DRM_FAILURE),
    "7.1": new XREError("UNEXPECTED_BUFFER", XREErrorType.PLAYBACK_FAILURE),
    "7.2": new XREError("UNSUPPORTED_BUFFER", XREErrorType.PLAYBACK_FAILURE),
    "8.1": new XREError("EMPTY_COLLECTION", XREErrorType.PLAYBACK_FAILURE),
    "9.1": new XREError("UNEXPECTED_BUFFER", XREErrorType.PLAYBACK_FAILURE),
    "9.2": new XREError("UNEXPECTED_STATE", XREErrorType.PLAYBACK_FAILURE),
    "10.1": new XREError("KEY_ERROR", XREErrorType.DRM_FAILURE),
    "10.2": new XREError("LICENSE_REQUEST_ERROR", XREErrorType.DRM_FAILURE),
    "10.3": new XREError("MEDIA_KEYS_ERROR", XREErrorType.DRM_FAILURE),
    "11.0": new XREError("PLAY_CALLED_ON_DETACH,", XREErrorType.OTHER),
    "11.1": new XREError("PAUSE_CALLED_ON_DETACH", XREErrorType.OTHER),
    "11.2": new XREError("SEEK_CALLED_ON_DETACH", XREErrorType.OTHER),
    "11.3": new XREError("SETTEXTTRACK_CALLED_ON_DETACH", XREErrorType.OTHER),
    "11.4": new XREError("SETVOLUME_CALLED_ON_DETACH", XREErrorType.OTHER),
    "11.5": new XREError("SETAUDIOBITRATE_CALLED_ON_DETACH", XREErrorType.OTHER),
    "11.6": new XREError("SETVIDEOBITRATE_CALLED_ON_DETACH", XREErrorType.OTHER),
    "11.7": new XREError("SETAUDIOTRACK_CALLED_ON_DETACH", XREErrorType.OTHER),
    "11.8": new XREError("SETPLAYBACKRATE_CALLED_ON_DETACH", XREErrorType.OTHER),
    "11.9": new XREError("DETACH_CALLED_ON_AN_INVALID_STATE", XREErrorType.OTHER)
};
function getByErrorCode(errorCode) {
    // if errorCode cannot be mapped to XREError, send XRE Generic error
    return adobeXREErrors[errorCode]
        || helioXREErrors[errorCode]
        || adobeXREErrors[XREErrorCode.kECGenericError];
}
exports.getByErrorCode = getByErrorCode;

},{}],559:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("./HomeNetworkAnalyticsHandler");
var Logger_1 = require("../util/Logger");
var events = require("../PlayerPlatformAPIEvents");
var constants = require("../PlayerPlatformConstants");
var messages = require("../analytics/Messages");
var ConfigurationManager_1 = require("../ConfigurationManager");
var Application_1 = require("../Application");
var PlayerPlatformConstants_1 = require("../PlayerPlatformConstants");
var XuaAssetFactory_1 = require("../analytics/XuaAssetFactory");
var Observable_1 = require("rxjs/Observable");
require("rxjs/add/observable/interval");
require("rxjs/add/observable/from");
require("rxjs/add/operator/defaultIfEmpty");
require("rxjs/add/operator/distinctUntilKeyChanged");
require("rxjs/add/operator/do");
require("rxjs/add/operator/filter");
require("rxjs/add/operator/map");
require("rxjs/add/operator/mapTo");
require("rxjs/add/operator/merge");
require("rxjs/add/operator/pairwise");
require("rxjs/add/operator/share");
require("rxjs/add/operator/takeUntil");
require("rxjs/add/operator/withLatestFrom");
var FragmentInfo = /** @class */ (function () {
    function FragmentInfo() {
        this.reset();
    }
    FragmentInfo.prototype.reset = function () {
        this.downloadDuration = 0;
        this.fragmentSize = 0;
        this.fragmentDuration = 0;
        this.count = 0;
    };
    return FragmentInfo;
}());
var AdServiceMap = {
    "auditude": "Auditude",
    "c3": "C3",
    "manifest": "VEX",
    "tvelinear": "FreeWheel",
    "tvevod": "FreeWheel"
};
/**
 * Listens for events and creates appropriate analytics messages.
 */
var AnalyticsHandler = /** @class */ (function () {
    function AnalyticsHandler() {
        this._logger = new Logger_1.Logger("AnalyticsHandler");
        this._fragmentInfo = new FragmentInfo();
        this._lastFPS = 0;
        this._fpsThreshold = 2;
        this._quartileSent = -1;
    }
    Object.defineProperty(AnalyticsHandler, "instance", {
        get: function () {
            return AnalyticsHandler._instance;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AnalyticsHandler.prototype, "analyticsProvider", {
        get: function () {
            return this._analyticsProvider;
        },
        enumerable: true,
        configurable: true
    });
    AnalyticsHandler.prototype.init = function (sandbox, hostInfo, analyticsProvider, playbackStateMonitor) {
        this._sandbox = sandbox;
        this._analyticsProvider = analyticsProvider;
        this._playbackStateMonitor = playbackStateMonitor;
        this._bufferStartStream = Observable_1.Observable.fromEvent(events, events.BUFFER_START).map(function (_a) {
            var e = _a[0];
            return e;
        });
        this._bufferCompleteStream = Observable_1.Observable.fromEvent(events, events.BUFFER_COMPLETE).map(function (_a) {
            var e = _a[0];
            return e;
        });
        this._seekStartStream = Observable_1.Observable.fromEvent(events, events.SEEK_START).map(function (_a) {
            var e = _a[0];
            return e;
        });
        this._seekCompleteStream = Observable_1.Observable.fromEvent(events, events.SEEK_COMPLETE).map(function (_a) {
            var e = _a[0];
            return e;
        });
        this._xuaAssetFactory = new XuaAssetFactory_1.XuaAssetFactory();
        this.addEventListeners();
        sandbox.subscribe("api:setAsset", this.onOpeningMedia, {}, this);
        sandbox.subscribe("api:mediaInfo", this.onMediaInfo, {}, this);
        sandbox.subscribe("api:engineSelected", this.onEngineSelected, {}, this);
        this._bufferSubscribe();
        hostInfo.appName = hostInfo.appName || sandbox.config[ConfigurationManager_1.ConfigurationManager.ANALYTICS_DEVICE_TYPE];
        if (!hostInfo.appName) {
            this._logger.error("No app name provided for analytics.");
        }
        analyticsProvider.configureAnalytics(hostInfo, {
            analyticsProtocol: sandbox.config[ConfigurationManager_1.ConfigurationManager.ANALYTICS_PROTOCOL],
            maxBatchSize: sandbox.config[ConfigurationManager_1.ConfigurationManager.MAX_BATCH_SIZE],
            maxQueueSize: sandbox.config[ConfigurationManager_1.ConfigurationManager.MAX_QUEUE_SIZE],
            batchInterval: sandbox.config[ConfigurationManager_1.ConfigurationManager.BATCH_INTERVAL],
            analyticsUrl: sandbox.config[ConfigurationManager_1.ConfigurationManager.ANALYTICS_END_POINT]
        });
        this._setupHeartbeat();
        this._playbackStateMonitor.init();
        this.hostInfo = hostInfo;
        AnalyticsHandler._instance = this;
        return this;
    };
    AnalyticsHandler.prototype.destroy = function (sandbox) {
        this.removeEventListeners();
        sandbox.remove("api:setAsset", this.onOpeningMedia);
        sandbox.remove("api:mediaInfo", this.onMediaInfo);
        sandbox.remove("api:engineSelected", this.onEngineSelected);
        this._analyticsProvider.disable();
        this._playbackStateMonitor.destroy();
        AnalyticsHandler._instance = undefined;
    };
    AnalyticsHandler.prototype.addEventListeners = function () {
        events.addEventListener(events.AD_START, this.onAdStart, {}, this);
        events.addEventListener(events.AD_PROGRESS, this.onAdProgress, {}, this);
        events.addEventListener(events.AD_COMPLETE, this.onAdComplete, {}, this);
        events.addEventListener(events.AD_EXITED, this.onAdExited, {}, this);
        events.addEventListener(events.AD_BREAK_START, this.onAdBreakStart, {}, this);
        events.addEventListener(events.AD_BREAK_COMPLETE, this.onAdBreakComplete, {}, this);
        events.addEventListener(events.AD_BREAK_EXITED, this.onAdBreakExited, {}, this);
        events.addEventListener(events.BITRATE_CHANGED, this.onBitrateChanged, {}, this);
        events.addEventListener(events.FPS_CHANGED, this.onFPSChanged, {}, this);
        events.addEventListener(events.FRAGMENT_INFO, this.onFragmentInfo, {}, this);
        events.addEventListener(events.MEDIA_FALLBACK, this.onMediaFallback, {}, this);
        events.addEventListener(events.MEDIA_ENDED, this.onMediaEnded, {}, this);
        events.addEventListener(events.MEDIA_FAILED, this.onMediaFailed, {}, this);
        events.addEventListener(events.MEDIA_OPENED, this.onMediaOpened, {}, this);
        events.addEventListener(events.MEDIA_RETRY, this.onMediaRetry, {}, this);
        events.addEventListener(events.MEDIA_WARNING, this.onMediaWarning, {}, this);
        events.addEventListener(events.PLAYBACK_SPEED_CHANGED, this.onPlaybackSpeedChanged, {}, this);
        events.addEventListener(events.PLAYBACK_STARTED, this.onPlaybackStarted, {}, this);
        events.addEventListener(events.PLAY_STATE_CHANGED, this.onPlayStateChanged, {}, this);
        events.addEventListener(events.SEEK_COMPLETE, this.onSeekComplete, {}, this);
        events.addEventListener(events.SEEK_START, this.onSeekStart, {}, this);
        events.addEventListener(events.EMERGENCY_ALERT_IDENTIFIED, this.onEmergencyAlertIdentified, {}, this);
        events.addEventListener(events.EMERGENCY_ALERT_STARTED, this.onEmergencyAlertStarted, {}, this);
        events.addEventListener(events.EMERGENCY_ALERT_COMPLETE, this.onEmergencyAlertCompleted, {}, this);
        events.addEventListener(events.EMERGENCY_ALERT_FAILURE, this.onEmergencyAlertFailed, {}, this);
        events.addEventListener(events.EMERGENCY_ALERT_EXEMPTED, this.onEmergencyAlertExempted, {}, this);
        events.addEventListener(events.EMERGENCY_ALERT_ERRORED, this.onEmergencyAlertErrored, {}, this);
        events.addEventListener(events.STREAM_SWITCH, this.onStreamSwitch, {}, this);
    };
    AnalyticsHandler.prototype.removeEventListeners = function () {
        events.removeEventListener(events.AD_START, this.onAdStart);
        events.removeEventListener(events.AD_PROGRESS, this.onAdProgress);
        events.removeEventListener(events.AD_COMPLETE, this.onAdComplete);
        events.removeEventListener(events.AD_EXITED, this.onAdExited);
        events.removeEventListener(events.AD_BREAK_START, this.onAdBreakStart);
        events.removeEventListener(events.AD_BREAK_COMPLETE, this.onAdBreakComplete);
        events.removeEventListener(events.AD_BREAK_EXITED, this.onAdBreakExited);
        events.removeEventListener(events.BITRATE_CHANGED, this.onBitrateChanged);
        events.removeEventListener(events.FPS_CHANGED, this.onFPSChanged);
        events.removeEventListener(events.FRAGMENT_INFO, this.onFragmentInfo);
        events.removeEventListener(events.MEDIA_FALLBACK, this.onMediaFallback);
        events.removeEventListener(events.MEDIA_ENDED, this.onMediaEnded);
        events.removeEventListener(events.MEDIA_FAILED, this.onMediaFailed);
        events.removeEventListener(events.MEDIA_OPENED, this.onMediaOpened);
        events.removeEventListener(events.MEDIA_RETRY, this.onMediaRetry);
        events.removeEventListener(events.MEDIA_WARNING, this.onMediaWarning);
        events.removeEventListener(events.PLAYBACK_SPEED_CHANGED, this.onPlaybackSpeedChanged);
        events.removeEventListener(events.PLAYBACK_STARTED, this.onPlaybackStarted);
        events.removeEventListener(events.PLAY_STATE_CHANGED, this.onPlayStateChanged);
        events.removeEventListener(events.SEEK_COMPLETE, this.onSeekComplete);
        events.removeEventListener(events.SEEK_START, this.onSeekStart);
        events.removeEventListener(events.EMERGENCY_ALERT_IDENTIFIED, this.onEmergencyAlertIdentified);
        events.removeEventListener(events.EMERGENCY_ALERT_STARTED, this.onEmergencyAlertStarted);
        events.removeEventListener(events.EMERGENCY_ALERT_COMPLETE, this.onEmergencyAlertCompleted);
        events.removeEventListener(events.EMERGENCY_ALERT_FAILURE, this.onEmergencyAlertFailed);
        events.removeEventListener(events.EMERGENCY_ALERT_EXEMPTED, this.onEmergencyAlertExempted);
        events.removeEventListener(events.EMERGENCY_ALERT_ERRORED, this.onEmergencyAlertErrored);
        events.removeEventListener(events.STREAM_SWITCH, this.onStreamSwitch);
    };
    AnalyticsHandler.prototype._setupHeartbeat = function () {
        var _this = this;
        Observable_1.Observable.interval(this._sandbox.config.heartbeatInterval)
            .filter(function () { return _this._sandbox.getPlayerStatus() !== PlayerPlatformConstants_1.STATUS_IDLE && _this._sandbox.getPlayerStatus() !== PlayerPlatformConstants_1.STATUS_ERROR; })
            .takeUntil(this._sandbox.destroyed)
            .subscribe(function () { return _this.onHeartBeat(); });
    };
    /**
     * _bufferSubscribe creates a buffer event type stream and passes that type
     * into bufferStart bufferEnd events before dispatching.
     *
     * Points worth mentioning on the bufferTypeStream, any time media is opened
     * the value is "initial", until the playhead has moved, then it becomes "underflow".
     * Media opened can occur n times and will remain subscribed to return the proper buffer types.
     * If a seek occurred the playhead has to move from the seek complete position
     * to become "underflow" again.
     */
    AnalyticsHandler.prototype._bufferSubscribe = function () {
        var _this = this;
        // SeekStream is an observable of SeekInfoObject's, prior to a seek
        // firing we merge in {false, NEGATIVE_INFINITY} so nothing is stuck
        // waiting for a seek event.
        var seekStream = Observable_1.Observable.merge(Observable_1.Observable.from([{ seeking: false, position: Number.NEGATIVE_INFINITY }]), this._seekStartStream
            .map(function (start) {
            return {
                seeking: true,
                position: start.position
            };
        }), this._seekCompleteStream
            .map(function (end) {
            return {
                seeking: false,
                position: end.position
            };
        }));
        // bufferTypeStream is an observable of BufferEventType's defined in
        // `src/analytics/Messages`. These are distinctUtilChanged.
        var bufferTypeStream = Observable_1.Observable.merge(this._sandbox.streams.mediaOpeneds.mapTo("initial"), this._sandbox.streams.mediaProgresses
            .distinctUntilKeyChanged("position")
            .pairwise()
            .withLatestFrom(seekStream, function (mediaProgressEvents, seekInfo) {
            var seeking = seekInfo.seeking, position = seekInfo.position;
            // It's still considered a seek BufferEventType until the position
            // has changed from the seek event.
            if (seeking || mediaProgressEvents[1].position === position) {
                return "seek";
            }
            else if (mediaProgressEvents[1].playbackSpeed < 0 || mediaProgressEvents[1].playbackSpeed > 1) {
                return "trickplay";
            }
            return "underflow";
        }), this._seekStartStream.mapTo("seek"))
            .distinctUntilChanged();
        // bufferStartMessageStream is an Observale that merges bufferStart w/ bufferType
        // to return a bufferStartMessage. This message is used in the complete to extract
        // start values, and it's also shared with the final subscription to submit to
        // analytics provider.
        var bufferStartMessageStream = this._bufferStartStream
            .withLatestFrom(bufferTypeStream, function (event, bufferEventType) {
            _this._logger.trace("onBufferStart: " + JSON.stringify(event) + " type: " + bufferEventType);
            return new messages.BufferStartMessage(_this._xuaAssetFactory.create(_this._sandbox.asset), bufferEventType, _this._sandbox.getCurrentPosition());
        }).share();
        // The final start and complete messages, subscribed to and passed
        // the analyticsProvider.
        Observable_1.Observable.merge(bufferStartMessageStream, this._bufferCompleteStream
            .withLatestFrom(bufferStartMessageStream, function (event, startMessage) {
            _this._logger.trace("onBufferEnd: " + JSON.stringify(event) + " type: " + startMessage.EVT.VALUE.TYPE);
            return new messages.BufferCompleteMessage(startMessage.EVT.ASSET, startMessage.EVT.VALUE.TYPE, startMessage.EVT.VALUE.START, _this._sandbox.getCurrentPosition());
        })).takeUntil(this._sandbox.destroyed.do(function () { return _this._logger.trace("Analytics Handler: onBuffer[Start|Complete] subscription destroyed"); }))
            .subscribe(function (message) {
            _this._analyticsProvider.buildMessage(message);
        });
    };
    AnalyticsHandler.prototype.onAdStart = function (event) {
        this._logger.trace("onAdStart: " + JSON.stringify(event));
        this._quartileSent = 0;
        var adProgressMessage = new messages.AdProgressMessage(this._xuaAssetFactory.create(this._sandbox.asset), 0, this._sandbox.asset.adConfig ? AdServiceMap[this._sandbox.asset.adConfig.type] : undefined, event.videoAd ? event.videoAd.id : undefined);
        this._analyticsProvider.buildMessage(adProgressMessage);
    };
    // tslint:disable:cyclomatic-complexity
    AnalyticsHandler.prototype.onAdProgress = function (event) {
        var lastQuartile = this._quartileSent;
        if ((event.progress >= 0) && (this._quartileSent < 0)) {
            this._quartileSent = 0;
        }
        if ((event.progress >= 25) && (this._quartileSent < 1)) {
            this._quartileSent = 1;
        }
        if ((event.progress >= 50) && (this._quartileSent < 2)) {
            this._quartileSent = 2;
        }
        if ((event.progress >= 75) && (this._quartileSent < 3)) {
            this._quartileSent = 3;
        }
        if ((event.progress >= 100) && (this._quartileSent < 4)) {
            this._quartileSent = 4;
        }
        if (lastQuartile !== this._quartileSent) {
            this._logger.trace("onAdProgress: " + JSON.stringify(event));
            var adProgressMessage = new messages.AdProgressMessage(this._xuaAssetFactory.create(this._sandbox.asset), this._quartileSent * 25, this._sandbox.asset.adConfig ? AdServiceMap[this._sandbox.asset.adConfig.type] : undefined, event.videoAd ? event.videoAd.id : undefined);
            this._analyticsProvider.buildMessage(adProgressMessage);
        }
    };
    // tslint:enable:cyclomatic-complexity
    AnalyticsHandler.prototype.onAdComplete = function (event) {
        this._logger.trace("onAdComplete: " + JSON.stringify(event));
        if (this._quartileSent < 4) {
            this._quartileSent = 4;
            var adProgressMessage = new messages.AdProgressMessage(this._xuaAssetFactory.create(this._sandbox.asset), this._quartileSent * 25, this._sandbox.asset.adConfig ? AdServiceMap[this._sandbox.asset.adConfig.type] : undefined, event.videoAd ? event.videoAd.id : undefined);
            this._analyticsProvider.buildMessage(adProgressMessage);
        }
    };
    AnalyticsHandler.prototype.onAdExited = function (event) {
        this._logger.trace("onAdExited: " + JSON.stringify(event));
        var adExitedMessage = new messages.AdExitedMessage(this._xuaAssetFactory.create(this._sandbox.asset));
        this._analyticsProvider.buildMessage(adExitedMessage);
    };
    AnalyticsHandler.prototype.onAdBreakStart = function (event) {
        this._logger.trace("onAdBreakStart: " + JSON.stringify(event));
        this._quartileSent = -1;
        var adBreakStartMessage = new messages.AdBreakStartMessage(this._xuaAssetFactory.create(this._sandbox.asset));
        this._analyticsProvider.buildMessage(adBreakStartMessage);
    };
    AnalyticsHandler.prototype.onAdBreakComplete = function (event) {
        this._logger.trace("onAdBreakComplete: " + JSON.stringify(event));
        if (this._quartileSent < 4) {
            this._quartileSent = 4;
            var adProgressMessage = new messages.AdProgressMessage(this._xuaAssetFactory.create(this._sandbox.asset), this._quartileSent * 25, this._sandbox.asset.adConfig ? AdServiceMap[this._sandbox.asset.adConfig.type] : undefined, (event.videoAdBreak.ads.length > 0) ? event.videoAdBreak.ads[event.videoAdBreak.ads.length - 1].id : undefined);
            this._analyticsProvider.buildMessage(adProgressMessage);
        }
        var adBreakCompleteMessage = new messages.AdBreakCompleteMessage(this._xuaAssetFactory.create(this._sandbox.asset));
        this._analyticsProvider.buildMessage(adBreakCompleteMessage);
    };
    AnalyticsHandler.prototype.onAdBreakExited = function (event) {
        this._logger.trace("onAdBreakExited: " + JSON.stringify(event));
        this._analyticsProvider.buildMessage(new messages.AdBreakExitedMessage(this._xuaAssetFactory.create(this._sandbox.asset)));
    };
    AnalyticsHandler.prototype.onBitrateChanged = function (event) {
        this._logger.trace("onBitrateChanged: " + JSON.stringify(event));
        var bitrateChangedMessage = new messages.BitrateChangedMessage(this._xuaAssetFactory.create(this._sandbox.asset), event.bitRate);
        this._analyticsProvider.buildMessage(bitrateChangedMessage);
    };
    AnalyticsHandler.prototype.onFPSChanged = function (event) {
        if (Math.abs(event.fps - this._lastFPS) >= this._fpsThreshold) {
            this._logger.trace("onFPSChanged: " + JSON.stringify(event) + ": " + this._lastFPS);
            var fpsChangedMessage = new messages.FPSChangedMessage(this._xuaAssetFactory.create(this._sandbox.asset), event.fps);
            this._analyticsProvider.buildMessage(fpsChangedMessage);
        }
        this._lastFPS = event.fps;
    };
    AnalyticsHandler.prototype.onEngineSelected = function () {
        // Clear out the player info from previously selected engine
        this.analyticsProvider.setPlayerInfo("", "");
    };
    AnalyticsHandler.prototype.onFragmentInfo = function (event) {
        var fragmentDuration = event.fragmentDuration >= 0 ? event.fragmentDuration : 0;
        // considered an warning. Only send if playing at normal speed.
        if (event.downloadDuration > fragmentDuration && this._sandbox.getCurrentPlaybackSpeed() === 1) {
            var data = {
                downloadDuration: event.downloadDuration,
                fragmentDuration: fragmentDuration,
                fragmentSize: event.fragmentSize,
                fragmentUrl: event.fragmentUrl
            };
            var warningMessage = new messages.FragmentWarningMessage(this._xuaAssetFactory.create(this._sandbox.asset), data);
            this._analyticsProvider.buildMessage(warningMessage);
        }
        this._fragmentInfo.downloadDuration += event.downloadDuration;
        this._fragmentInfo.fragmentSize += event.fragmentSize;
        this._fragmentInfo.fragmentDuration += fragmentDuration;
        this._fragmentInfo.count++;
    };
    AnalyticsHandler.prototype.onHeartBeat = function () {
        this._logger.trace("onHeartBeat");
        var heartbeatMessage = new messages.HeartbeatMessage(this._xuaAssetFactory.create(this._sandbox.asset), this._sandbox.getCurrentPosition(), this._sandbox.player.getCurrentBitrate(), this._sandbox.player.getCurrentFPS(), this._sandbox.player.getCurrentClosedCaptionTrack(), this._sandbox.player.getCurrentAudioLanguage(), null, // no access to environment through JS
        this._fragmentInfo.count ? this._fragmentInfo : null);
        this._analyticsProvider.buildMessage(heartbeatMessage);
        this._fragmentInfo.reset();
    };
    AnalyticsHandler.prototype.onMediaEnded = function (event) {
        this._logger.trace("onMediaEnded: " + JSON.stringify(event));
        var mediaEndedMessage = new messages.MediaEndedMessage(this._xuaAssetFactory.create(this._sandbox.asset));
        this._analyticsProvider.buildMessage(mediaEndedMessage);
    };
    AnalyticsHandler.prototype.onMediaFailed = function (event) {
        this._logger.trace("onMediaFailed: " + JSON.stringify(event));
        var mediaFailedMessage = new messages.MediaFailedMessage(this._xuaAssetFactory.create(this._sandbox.asset), event.error.code, event.error.description, this._sandbox.getCurrentPosition(), this._sandbox.asset.url, this._playbackStateMonitor.isAdPlaying(), event.playerStatus);
        this._analyticsProvider.buildMessage(mediaFailedMessage);
        // use the force
        this._analyticsProvider.forceSendMessages();
    };
    AnalyticsHandler.prototype._buildApplicationErrorMessage = function (error, options) {
        if (options === void 0) { options = {}; }
        var errorMessage = new messages.ApplicationErrorMessage(this._xuaAssetFactory.create(this._sandbox.asset), error.code, options.errorClass, error.description, error.isWarning, options.retryCount, this._playbackStateMonitor.isAdPlaying(), options.fallback, options.fallbackType, this._sandbox.asset.url, options.playerStatus);
        this._analyticsProvider.buildMessage(errorMessage);
    };
    AnalyticsHandler.prototype.onMediaRetry = function (event) {
        this._logger.trace("onMediaRetry: " + JSON.stringify(event));
        this._buildApplicationErrorMessage(event.data.error, { errorClass: event.data.errorClass,
            retryCount: event.data.retryCount,
            playerStatus: event.data.playerStatus
        });
    };
    AnalyticsHandler.prototype.onMediaWarning = function (event) {
        this._logger.trace("onMediaWarning: " + JSON.stringify(event));
        this._buildApplicationErrorMessage(event.error);
    };
    AnalyticsHandler.prototype.onMediaFallback = function (event) {
        this._logger.trace("onMediaFallback: " + JSON.stringify(event).replace("\n", ""));
        this._buildApplicationErrorMessage(event.data.error, {
            errorClass: event.data.errorClass,
            retryCount: event.data.retryCount,
            fallback: true,
            fallbackType: event.fallbackType
        });
    };
    AnalyticsHandler.prototype.onMediaOpened = function (event) {
        this._logger.trace("onMediaOpened: " + JSON.stringify(event));
        var mediaOpenMessage = new messages.MediaOpenedMessage(this._xuaAssetFactory.create(this._sandbox.asset), event.openingLatency, this._sandbox.getCurrentPosition(), this._sandbox.asset.url, event.numAds);
        this._analyticsProvider.buildMessage(mediaOpenMessage);
    };
    AnalyticsHandler.prototype.onMediaInfo = function (description) {
        this._logger.trace("onMediaInfo: " + description);
        if (!this._sandbox.asset) {
            return;
        }
        // This happens when setPreferredAudioLanguage happens prior to setAsset
        /*
            XREPlayerPlatform:onCallMethod: setPreferredAudioLanguage
            XREPlayerPlatform:setPreferredAudioLanguage: eng
            PlayerPlatformAPI: setPreferredAudioLanguage: en
            AnalyticsHandler: onMediaInfo: SAP changed. en
        */
        var mediaInfoMessage = new messages.MediaInfoMessage(this._xuaAssetFactory.create(this._sandbox.asset), this._sandbox.getCurrentPosition(), description);
        this._analyticsProvider.buildMessage(mediaInfoMessage);
    };
    AnalyticsHandler.prototype.onPlaybackSpeedChanged = function (event) {
        this._logger.trace("onPlaybackSpeedChanged: " + JSON.stringify(event));
        var trickPlayType = "";
        if (event.playbackSpeed < 0) {
            trickPlayType = "rwd";
        }
        else if (event.playbackSpeed === 0) {
            trickPlayType = "pause";
        }
        else if (event.playbackSpeed === 1) {
            trickPlayType = "play";
        }
        else if (event.playbackSpeed > 1) {
            trickPlayType = "ffwd";
        }
        else {
            trickPlayType = "unknown";
        }
        var trickPlayMessage = new messages.TrickPlayMessage(this._xuaAssetFactory.create(this._sandbox.asset), this._sandbox.getCurrentPosition(), trickPlayType);
        this._analyticsProvider.buildMessage(trickPlayMessage);
    };
    AnalyticsHandler.prototype.onPlaybackStarted = function () {
        this._logger.trace("onPlaybackStarted");
        var playbackStartedMessage = new messages.PlaybackStartedMessage(this._xuaAssetFactory.create(this._sandbox.asset));
        this._analyticsProvider.buildMessage(playbackStartedMessage);
    };
    AnalyticsHandler.prototype.onPlayStateChanged = function (event) {
        if (event.playState === constants.STATUS_INITIALIZING) {
            var player = this._sandbox.player;
            this.analyticsProvider.setPlayerInfo(player.assetEngine, player.getVersion());
        }
        this._logger.trace("onPlayStateChanged: " + JSON.stringify(event));
        var playStateChangeMessage = new messages.PlayStateChangedMessage(this._xuaAssetFactory.create(this._sandbox.asset), event.playState);
        this._analyticsProvider.buildMessage(playStateChangeMessage);
    };
    AnalyticsHandler.prototype.onSeekComplete = function (event) {
        this._logger.trace("onSeekComplete: " + JSON.stringify(event));
        var scrubMessage = new messages.ScrubEndedMessage(this._sandbox.getCurrentPosition(), this._xuaAssetFactory.create(this._sandbox.asset));
        this._analyticsProvider.buildMessage(scrubMessage);
    };
    AnalyticsHandler.prototype.onSeekStart = function (event) {
        this._logger.trace("onSeekStart: " + JSON.stringify(event));
        var scrubMessage = new messages.ScrubStartedMessage(this._sandbox.preSeekPosition, this._xuaAssetFactory.create(this._sandbox.asset));
        this._analyticsProvider.buildMessage(scrubMessage);
    };
    AnalyticsHandler.prototype.onOpeningMedia = function () {
        var openingMediaMessage = new messages.OpeningMediaMessage(this._xuaAssetFactory.create(this._sandbox.asset), this._sandbox.asset.url);
        this._analyticsProvider.buildMessage(openingMediaMessage);
    };
    AnalyticsHandler.prototype.onEmergencyAlertIdentified = function (event) {
        this._logger.trace("onEmergencyAlertIdentified: " + JSON.stringify(event));
        var emergencyAlertIdentifiedMessage = new messages.EmergencyAlertMessage("Identified", event.easLanguage, event.easURI);
        this._analyticsProvider.buildMessage(emergencyAlertIdentifiedMessage);
    };
    AnalyticsHandler.prototype.onEmergencyAlertStarted = function (event) {
        this._logger.trace("onEmergencyAlertStarted: " + JSON.stringify(event));
        var emergencyAlertStartedMessage = new messages.EmergencyAlertMessage("Initiated", event.easLanguage, event.easUri);
        this._analyticsProvider.buildMessage(emergencyAlertStartedMessage);
    };
    AnalyticsHandler.prototype.onEmergencyAlertCompleted = function (event) {
        this._logger.trace("onEmergencyAlertCompleted: " + JSON.stringify(event));
        var emergencyAlertCompletedMessage = new messages.EmergencyAlertMessage("Completed", event.easLanguage, event.easUri);
        this._analyticsProvider.buildMessage(emergencyAlertCompletedMessage);
    };
    AnalyticsHandler.prototype.onEmergencyAlertFailed = function (event) {
        this._logger.trace("onEmergencyAlertFailed: " + JSON.stringify(event));
        var emergencyAlertFailedMessage = new messages.EmergencyAlertMessage("Failed", event.easLanguage, event.easURI, event.easCode);
        this._analyticsProvider.buildMessage(emergencyAlertFailedMessage);
    };
    AnalyticsHandler.prototype.onEmergencyAlertExempted = function (event) {
        this._logger.trace("onEmergencyAlertExempted: " + JSON.stringify(event));
        var emergencyAlertExemptedMessage = new messages.EmergencyAlertMessage("Exempted", event.easLanguage, event.easURI);
        this._analyticsProvider.buildMessage(emergencyAlertExemptedMessage);
    };
    AnalyticsHandler.prototype.onEmergencyAlertErrored = function (event) {
        this._logger.trace("onEmergencyAlertErrored: " + JSON.stringify(event));
        var emergencyAlertErroredMessage = new messages.EmergencyAlertMessage("Errored", event.easLanguage, event.easURI, event.easCode);
        this._analyticsProvider.buildMessage(emergencyAlertErroredMessage);
    };
    AnalyticsHandler.prototype.onStreamSwitch = function (event) {
        this._logger.trace("onVirtualStreamSwitch: " + JSON.stringify(event));
        var message = new messages.StreamSwitchMessage(this._xuaAssetFactory.create(this._sandbox.asset));
        this._analyticsProvider.buildMessage(message);
    };
    return AnalyticsHandler;
}());
exports.AnalyticsHandler = AnalyticsHandler;
Application_1.registerModule("AnalyticsHandler", AnalyticsHandler, {
    children: [
        "HomeNetworkAnalyticsHandler"
    ]
});

},{"../Application":483,"../ConfigurationManager":484,"../PlayerPlatformAPIEvents":489,"../PlayerPlatformConstants":490,"../analytics/Messages":533,"../analytics/XuaAssetFactory":535,"../util/Logger":571,"./HomeNetworkAnalyticsHandler":561,"rxjs/Observable":237,"rxjs/add/observable/from":241,"rxjs/add/observable/interval":245,"rxjs/add/operator/defaultIfEmpty":256,"rxjs/add/operator/distinctUntilKeyChanged":258,"rxjs/add/operator/do":259,"rxjs/add/operator/filter":260,"rxjs/add/operator/map":263,"rxjs/add/operator/mapTo":264,"rxjs/add/operator/merge":265,"rxjs/add/operator/pairwise":268,"rxjs/add/operator/share":271,"rxjs/add/operator/takeUntil":276,"rxjs/add/operator/withLatestFrom":279}],560:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Application_1 = require("../Application");
var events = require("../PlayerPlatformAPIEvents");
var Logger_1 = require("../util/Logger");
var constants = require("../PlayerPlatformConstants");
var PPError_1 = require("../PPError");
require("rxjs/add/operator/buffer");
require("rxjs/add/operator/filter");
require("rxjs/add/operator/first");
require("rxjs/add/operator/map");
require("rxjs/add/operator/takeUntil");
require("rxjs/add/operator/switchMap");
/**
 * This module is used restrict playback based on Cross Stream Prevention tags in
 * the manifest. The main idea is to verify the stream ID on the `BaseAsset` matches the
 * CSP ID in the manifest. If there is a mismatch we error out and restrict playback.
 *
 * There are three settings available for CSP:
 *
 * - `None` - turn the feature completely off, ignoring CSP tags
 * - `CheckIfPresent` - fail on mismatches but allow playback if tag is missing in manifest
 * - `FailIfMissing` - fail on mismatches and do _not_ allow playback if tag is missing
 */
var CrossStreamPreventionHandler = /** @class */ (function () {
    function CrossStreamPreventionHandler() {
        this._logger = new Logger_1.Logger("CrossStreamPreventionHandler");
    }
    CrossStreamPreventionHandler.prototype.init = function (sandbox) {
        this._sandbox = sandbox;
        var cspSetting = sandbox.config.crossStreamPrevention || CrossStreamPreventionHandler.CROSS_STREAM_PREVENTION_MODE_NONE;
        this._logger.trace("Initializing CSP with setting: " + cspSetting);
        sandbox.subscribe("api:setAsset", this.onSetAsset, { priority: constants.PRIORITY_MID }, this);
        // initially add tag if there is currently
        // an asset on sandbox
        if (sandbox.asset) {
            this.onSetAsset(sandbox.asset);
        }
        if (cspSetting === CrossStreamPreventionHandler.CROSS_STREAM_PREVENTION_MODE_CHECKIFPRESENT ||
            cspSetting === CrossStreamPreventionHandler.CROSS_STREAM_PREVENTION_MODE_FAILIFMISSING) {
            this._startCheckIfPresent();
        }
        if (cspSetting === CrossStreamPreventionHandler.CROSS_STREAM_PREVENTION_MODE_FAILIFMISSING) {
            this._startFailIfMissing();
        }
        return this;
    };
    CrossStreamPreventionHandler.prototype.destroy = function (sandbox) {
        sandbox.remove("api:setAsset", this.onSetAsset);
    };
    CrossStreamPreventionHandler.prototype.onSetAsset = function (asset) {
        asset.addSubscribedTag(CrossStreamPreventionHandler.CROSS_STREAM_PREVENTION_TAG);
    };
    CrossStreamPreventionHandler.prototype._isCSPTag = function (tag) {
        return tag.name === CrossStreamPreventionHandler.CROSS_STREAM_PREVENTION_TAG;
    };
    CrossStreamPreventionHandler.prototype._parseContentId = function (tag) {
        var content = tag.content;
        return content.substr(content.lastIndexOf(":") + 1);
    };
    CrossStreamPreventionHandler.prototype._startCheckIfPresent = function () {
        var _this = this;
        this._sandbox.streams.setAssets
            .switchMap(function (asset) {
            return _this._sandbox.streams.tags
                .filter(function (tag) { return _this._isCSPTag(tag); })
                .map(function (tag) { return _this._parseContentId(tag); })
                .filter(function (contentId) { return contentId !== asset.streamId; })
                .switchMap(function (contentId) { return _this._sandbox.streams.getPlayState(constants.STATUS_INITIALIZED)
                .first()
                .filter(function () { return _this._sandbox.player.getVideoType().toLowerCase() === "live"; })
                .map(function () { return [contentId, asset.streamId]; }); });
        })
            .takeUntil(this._sandbox.destroyed)
            .subscribe(function (checks) {
            _this._logger.error("CSP failed, mismatch between asset.streamId " + checks[1] + " and HLS content id " + checks[0]);
            _this._sandbox.publish("api:stop");
            events.emit(new events.MediaFailedEvent(new PPError_1.PPError(8002, 1, "CSP failed, identifiers do not match", false)));
        });
    };
    CrossStreamPreventionHandler.prototype._startFailIfMissing = function () {
        var _this = this;
        this._sandbox.streams.setAssets
            .switchMap(function () {
            return _this._sandbox.streams.tags
                .filter(function (tag) { return _this._isCSPTag(tag); })
                .buffer(_this._sandbox.streams.getPlayState(constants.STATUS_INITIALIZED));
        })
            .filter(function (tags) { return tags.length === 0; })
            .filter(function () { return _this._sandbox.player.getVideoType().toLowerCase() === "live"; })
            .takeUntil(this._sandbox.destroyed)
            .subscribe(function () {
            _this._logger.error("CSP failed, missing CSP tag");
            _this._sandbox.publish("api:stop");
            events.emit(new events.MediaFailedEvent(new PPError_1.PPError(8002, 0, "CSP failed, missing CSP tag.", false)));
        });
    };
    CrossStreamPreventionHandler.CROSS_STREAM_PREVENTION_TAG = "#EXT-X-CONTENT-IDENTIFIER";
    CrossStreamPreventionHandler.CROSS_STREAM_PREVENTION_MODE_NONE = "None";
    CrossStreamPreventionHandler.CROSS_STREAM_PREVENTION_MODE_CHECKIFPRESENT = "CheckIfPresent";
    CrossStreamPreventionHandler.CROSS_STREAM_PREVENTION_MODE_FAILIFMISSING = "FailIfMissing";
    return CrossStreamPreventionHandler;
}());
exports.CrossStreamPreventionHandler = CrossStreamPreventionHandler;
Application_1.registerModule("CrossStreamPreventionHandler", CrossStreamPreventionHandler);

},{"../Application":483,"../PPError":487,"../PlayerPlatformAPIEvents":489,"../PlayerPlatformConstants":490,"../util/Logger":571,"rxjs/add/operator/buffer":251,"rxjs/add/operator/filter":260,"rxjs/add/operator/first":262,"rxjs/add/operator/map":263,"rxjs/add/operator/switchMap":274,"rxjs/add/operator/takeUntil":276}],561:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Logger_1 = require("../util/Logger");
var Application_1 = require("../Application");
var AnalyticsHandler_1 = require("./AnalyticsHandler");
var ConfigurationManager_1 = require("../ConfigurationManager");
var messages = require("../analytics/Messages");
var rxjs_1 = require("rxjs");
require("rxjs/add/operator/takeUntil");
require("rxjs/add/observable/fromEvent");
require("rxjs/add/observable/from");
require("rxjs/add/operator/map");
require("rxjs/add/operator/concatMap");
require("rxjs/add/operator/bufferCount");
var events = require("../PlayerPlatformAPIEvents");
var DEFAULT_HNA_TIMEOUT = 5000;
/**
 * Represents a handler with the responsibility of logic regarding the home
 * network analytics `xuaDiagnosticEvent` message. This module should run the
 * tests needed and build messages for the `xuaDiagnosticEvent`.
 */
var HomeNetworkAnalyticsHandler = /** @class */ (function () {
    function HomeNetworkAnalyticsHandler() {
        this._logger = new Logger_1.Logger("HomeNetworkAnalyticsHandler");
        this.diagnosticTestTimeout = DEFAULT_HNA_TIMEOUT;
    }
    HomeNetworkAnalyticsHandler.prototype.init = function (sandbox) {
        var _this = this;
        this._sandbox = sandbox;
        sandbox.streams.setAssets
            .takeUntil(sandbox.destroyed)
            .subscribe(function (asset) { return _this.onSetAsset(asset); });
        if (this._sandbox.asset) {
            this.onSetAsset(this._sandbox.asset);
        }
        return this;
    };
    HomeNetworkAnalyticsHandler.prototype.onSetAsset = function (asset) {
        var testsNeeded = this.getTestsNeeded(asset);
        // stop any currently running runner
        // for previous assets
        this.stopTestRunner();
        if (testsNeeded.length > 0) {
            this.testRunner = this.getTestRunner(testsNeeded);
        }
        else {
            this._logger.trace("No tests needed for asset");
        }
        this.diagnosticTestTimeout = this.getDiagnosticTestTimeout(asset);
    };
    HomeNetworkAnalyticsHandler.prototype.stopTestRunner = function () {
        if (this.testRunner) {
            this.testRunner.unsubscribe();
            this.testRunner = undefined;
        }
    };
    HomeNetworkAnalyticsHandler.prototype.getDiagnosticTestTimeout = function (asset) {
        var configMgr = ConfigurationManager_1.ConfigurationManager.getInstance();
        var assetType = configMgr.getAssetType(asset);
        return configMgr.getByAssetType(assetType, ConfigurationManager_1.ConfigurationManager.HNA_TIMEOUT, DEFAULT_HNA_TIMEOUT);
    };
    HomeNetworkAnalyticsHandler.prototype.getTestsNeeded = function (asset) {
        var testsNeeded = [];
        var configMgr = ConfigurationManager_1.ConfigurationManager.getInstance();
        var assetType = configMgr.getAssetType(asset);
        var hnaEnabled = configMgr.getByAssetType(assetType, ConfigurationManager_1.ConfigurationManager.HNA_ENABLED, false);
        if (hnaEnabled) {
            var hnaCdnEndpoint = this.getCDNTestUrl(asset.url, configMgr.getByAssetType(assetType, ConfigurationManager_1.ConfigurationManager.HNA_CDN_ENDPOINT, ""));
            var hnaAwsEndpoint = configMgr.getByAssetType(assetType, ConfigurationManager_1.ConfigurationManager.HNA_AWS_ENDPOINT, "");
            if (hnaCdnEndpoint) {
                testsNeeded.push({
                    name: "CDN_DOWN",
                    url: hnaCdnEndpoint
                });
            }
            if (hnaAwsEndpoint) {
                testsNeeded.push({
                    name: "INTERNET_DOWN",
                    url: hnaAwsEndpoint
                });
            }
        }
        return testsNeeded;
    };
    /**
     * For CDN tests we append the configured end point to the asset
     * base URL.
     *
     * ex.
     *    with an asset url of http://www.assets.com/my/asset/foobar.m3u8 and
     *    a cdn enpoint off FOO.test we want to run the test on
     *    http://www.assets.com/FOO.test
     */
    HomeNetworkAnalyticsHandler.prototype.getCDNTestUrl = function (assetUrl, cdnEndpoint) {
        var urlCheck = /^(https?:\/\/[^\/]+\/)(.*)$/i;
        // If we have a URL we cna work with
        if (urlCheck.test(assetUrl)) {
            return assetUrl.replace(urlCheck, "$1" + cdnEndpoint);
        }
    };
    HomeNetworkAnalyticsHandler.prototype.runDiagnosticTests = function (testsNeeded) {
        var _this = this;
        this._logger.trace("Running diagnostic tests");
        rxjs_1.Observable.from(testsNeeded)
            .concatMap(function (diagnosticTest) {
            _this._logger.trace("Requesting " + diagnosticTest.url);
            var requestTime = new Date().getTime();
            return rxjs_1.Observable.ajax({
                method: "GET",
                timeout: _this.diagnosticTestTimeout,
                crossDomain: true,
                url: diagnosticTest.url
            })
                .takeUntil(_this._sandbox.destroyed)
                .map(function (response) { return response.status === 200; })
                .catch(function () { return rxjs_1.Observable.of(false); })
                .map(function (success) { return ({
                test: diagnosticTest,
                success: success,
                duration: (new Date()).getTime() - requestTime
            }); });
        })
            .bufferCount(testsNeeded.length)
            .takeUntil(this._sandbox.destroyed)
            .subscribe(function (results) {
            AnalyticsHandler_1.AnalyticsHandler.instance.analyticsProvider.buildMessage(new messages.DiagnosticEventMessage(results));
        });
    };
    HomeNetworkAnalyticsHandler.prototype.getTestRunner = function (testsNeeded) {
        var _this = this;
        return rxjs_1.Observable.fromEvent(events, events.MEDIA_FAILED)
            .takeUntil(this._sandbox.destroyed)
            .subscribe(function () { return _this.runDiagnosticTests(testsNeeded); });
    };
    HomeNetworkAnalyticsHandler.prototype.destroy = function (_sandbox) {
        this.stopTestRunner();
    };
    return HomeNetworkAnalyticsHandler;
}());
exports.HomeNetworkAnalyticsHandler = HomeNetworkAnalyticsHandler;
Application_1.registerModule("HomeNetworkAnalyticsHandler", HomeNetworkAnalyticsHandler);

},{"../Application":483,"../ConfigurationManager":484,"../PlayerPlatformAPIEvents":489,"../analytics/Messages":533,"../util/Logger":571,"./AnalyticsHandler":559,"rxjs":281,"rxjs/add/observable/from":241,"rxjs/add/observable/fromEvent":242,"rxjs/add/operator/bufferCount":252,"rxjs/add/operator/concatMap":255,"rxjs/add/operator/map":263,"rxjs/add/operator/takeUntil":276}],562:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var events = require("../PlayerPlatformAPIEvents");
var Application_1 = require("../Application");
var Logger_1 = require("../util/Logger");
require("rxjs/add/operator/takeUntil");
require("rxjs/add/operator/filter");
/**
 * Represents the handler for what to do when the network goes down. When
 * the network goes down a player emits an player:networkDown event. Depending
 * on how the application is then configured this player:networkDown is handled
 * in different ways. It can currently be configured by time. The time indicates
 * how long we wait until emitting a MediaFailedEvent. We emit MediaWaringEvent(s)
 * until we reach the configured time.
 */
var NetworkDownHandler = /** @class */ (function () {
    function NetworkDownHandler() {
        this.logger = new Logger_1.Logger("NetworkDownHandler");
    }
    NetworkDownHandler.prototype.init = function (sandbox) {
        // this is deprecated
        var networkDownTimeout = sandbox.config.networkDownTimeout;
        if (networkDownTimeout !== undefined) {
            this.logger.warn("networkDownTimeout is DEPRECATED! Use failOnNetworkDown instead.");
        }
        // use failOnNetworkDown if configured, otherwise convert networkDownTimeout to a boolean
        var shouldFail = sandbox.config.failOnNetworkDown !== undefined ? sandbox.config.failOnNetworkDown : !networkDownTimeout;
        this.logger.trace("NetworkDownHandler init : failOnNetworkDown=" + shouldFail);
        Application_1.toObservable(NetworkDownHandler.CHANNEL_NAME)
            .filter(function () { return shouldFail; })
            .takeUntil(sandbox.destroyed)
            .subscribe(function (error) { return events.emit(new events.MediaFailedEvent(error)); });
        return this;
    };
    NetworkDownHandler.prototype.destroy = function () { };
    NetworkDownHandler.CHANNEL_NAME = "player:networkDown";
    return NetworkDownHandler;
}());
exports.NetworkDownHandler = NetworkDownHandler;
Application_1.registerModule("NetworkDownHandler", NetworkDownHandler);

},{"../Application":483,"../PlayerPlatformAPIEvents":489,"../util/Logger":571,"rxjs/add/operator/filter":260,"rxjs/add/operator/takeUntil":276}],563:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var _a;
var Application_1 = require("../Application");
var events = require("../PlayerPlatformAPIEvents");
var Logger_1 = require("../util/Logger");
var constants = require("../PlayerPlatformConstants");
var PPError_1 = require("../PPError");
var ConfigurationManager_1 = require("../ConfigurationManager");
require("rxjs/add/operator/distinctUntilKeyChanged");
require("rxjs/add/operator/merge");
require("rxjs/add/operator/takeUntil");
require("rxjs/add/operator/switchMap");
require("rxjs/add/observable/never");
var Observable_1 = require("rxjs/Observable");
/**
 * Validates that playback is still continuing and hasn't gotten stalled.
 *
 * There are various situations where we may not be notified of media failures from
 * Adobe or a third party player and playback appears to freeze. This module
 * will attempt to find these moments and emit a MediaFailedEvent when these situations
 * are detected. This MediaFailedEvent will notify people that we have determined playback
 * has stalled for some reason.
 *
 * The timeout period defaults to 10000 but can be configured through our configuration manager.
 */
var PlaybackStalledHandler = /** @class */ (function () {
    function PlaybackStalledHandler() {
        this._logger = new Logger_1.Logger("PlaybackStalledHandler");
    }
    PlaybackStalledHandler.prototype.init = function (sandbox) {
        this._sandbox = sandbox;
        this._stalledTimeout = this._sandbox.config.stalledTimeout || PlaybackStalledHandler.DEFAULT_STALLED_TIMEOUT;
        this._logger.trace("Initializing PlaybackStalledHandler with timeout: " + this._stalledTimeout);
        this._setupValidator();
        return this;
    };
    PlaybackStalledHandler.prototype.destroy = function () {
        window.clearTimeout(this._timeoutID);
    };
    PlaybackStalledHandler.prototype._setupValidator = function () {
        var _this = this;
        this._sandbox.streams.setAssets
            .do(function () { return window.clearTimeout(_this._timeoutID); }) // clear previous handler
            .switchMap(function (asset) { return _this._sandbox.streams.mediaOpeneds.mapTo(asset); }) // wait until media is opened
            .switchMap(function (asset) {
            if (ConfigurationManager_1.ConfigurationManager.getInstance().getByAssetType(asset.assetType, ConfigurationManager_1.ConfigurationManager.PLAYBACKSTALLED_ENABLED)) {
                // listen for progress to be made
                return _this._sandbox.streams.playStates
                    .merge(_this._sandbox.streams.mediaProgresses)
                    .merge(_this._sandbox.streams.adProgresses)
                    .takeUntil(_this._sandbox.streams.setAssets);
            }
            else {
                // don't do anything if not enabled
                return Observable_1.Observable.never();
            }
        })
            .takeUntil(this._sandbox.destroyed)
            .subscribe(function () {
            window.clearTimeout(_this._timeoutID);
            _this._setWindowTimeout();
        });
    };
    PlaybackStalledHandler.prototype._setWindowTimeout = function () {
        var _this = this;
        if (PlaybackStalledHandler.SHOULD_BE_PLAYING_STATUS.hasOwnProperty(this._sandbox.getPlayerStatus())) {
            this._timeoutID = window.setTimeout(function () { return _this._sendError(_this._stalledTimeout, _this._sandbox.getPlayerStatus()); }, this._stalledTimeout);
        }
    };
    PlaybackStalledHandler.prototype._sendError = function (stalledTimeout, playerStatus) {
        var message = "Playback has been stalled for more than " + stalledTimeout + "ms";
        this._logger.warn(message);
        events.emit(new events.MediaFailedEvent(new PPError_1.PPError(PPError_1.STALLED_ERROR, 0, message, false), true, playerStatus));
    };
    /**
     * The default stalled timeout period (in ms)
     */
    PlaybackStalledHandler.DEFAULT_STALLED_TIMEOUT = 30000;
    /**
     * The set of statuses that we should emit a media failed
     * for if we determine the player has been stuck in this
     * status for too long.
     */
    PlaybackStalledHandler.SHOULD_BE_PLAYING_STATUS = (_a = {},
        _a[constants.STATUS_PLAYING] = 1,
        _a[constants.STATUS_SEEKING] = 1,
        _a[constants.STATUS_BUFFERING] = 1,
        _a);
    return PlaybackStalledHandler;
}());
exports.PlaybackStalledHandler = PlaybackStalledHandler;
Application_1.registerModule("PlaybackStalledHandler", PlaybackStalledHandler, { autostart: true });

},{"../Application":483,"../ConfigurationManager":484,"../PPError":487,"../PlayerPlatformAPIEvents":489,"../PlayerPlatformConstants":490,"../util/Logger":571,"rxjs/Observable":237,"rxjs/add/observable/never":247,"rxjs/add/operator/distinctUntilKeyChanged":258,"rxjs/add/operator/merge":265,"rxjs/add/operator/switchMap":274,"rxjs/add/operator/takeUntil":276}],564:[function(require,module,exports){
(function (global){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var events = require("../PlayerPlatformAPIEvents");
var Application_1 = require("../Application");
var BaseAsset_1 = require("../assets/BaseAsset");
var ConfigurationManager_1 = require("../ConfigurationManager");
var Logger_1 = require("../util/Logger");
require("rxjs/add/operator/switchMap");
require("rxjs/add/operator/distinctUntilChanged");
require("rxjs/add/operator/filter");
require("rxjs/add/operator/find");
require("rxjs/add/operator/mapTo");
require("rxjs/add/operator/scan");
require("rxjs/add/operator/takeUntil");
var rxjs_1 = require("rxjs");
exports.MAXIMUM_DELAY = 30000;
exports.RETRY_PLAYBACK_TIME = 10;
exports.UPDATES_PER_SECOND = 4;
var RetryHandler = /** @class */ (function () {
    function RetryHandler() {
        this.logger = new Logger_1.Logger("RetryHandler");
        this.retryCount = 0;
        /**
         * When rolling back, the number of seconds
         * to wait prior to initiating the new asset
         */
        this.rollbackBackoff = 0;
        this.restarter = new rxjs_1.Subject();
    }
    RetryHandler.prototype.init = function (sandbox) {
        this.sandbox = sandbox;
        this.interval = sandbox.config[ConfigurationManager_1.ConfigurationManager.RETRY_INTERVAL];
        this.maxRetries = ConfigurationManager_1.ConfigurationManager.getInstance()
            .getByAssetType(BaseAsset_1.AssetTypeMapping.DEFAULT, ConfigurationManager_1.ConfigurationManager.MAXIMUM_RETRIES);
        if (sandbox.config[ConfigurationManager_1.ConfigurationManager.RETRY_ON_MEDIA_FAILED]) {
            this.logger.trace("RetryHandler init : maxRetries=" + this.maxRetries + " : interval=" + this.interval);
            sandbox.subscribe("api:stop", this.onStop, {}, this);
            events.addEventListener(events.MEDIA_FAILED, this.onMediaFailed, {}, this);
            this.initializeRetryCountResetter(sandbox);
        }
        else {
            this.logger.trace("RetryHandler init : RETRY_ON_MEDIA_FAILED = false, no handlers attached.");
        }
        return this;
    };
    RetryHandler.prototype.destroy = function (sandbox) {
        events.removeEventListener(events.MEDIA_FAILED, this.onMediaFailed);
        sandbox.remove("api:stop", this.onStop);
        this.retryCount = 0;
        this.stopTimer();
    };
    RetryHandler.prototype.onStop = function () {
        this.stopTimer();
    };
    RetryHandler.prototype.stopTimer = function () {
        global.clearTimeout(this.timer);
        this.timer = undefined;
    };
    /**
     * Initializes and returns subscription which after every media failed
     * resets the retry count back to 0 if we get a defined amount of
     * media progress events where a change has been made.
     * @return subscription which resets retry count after threshold
     */
    RetryHandler.prototype.initializeRetryCountResetter = function (sandbox) {
        var _this = this;
        sandbox.streams.setAssets
            .distinctUntilChanged()
            .takeUntil(sandbox.destroyed)
            .subscribe(function (asset) {
            _this.retryCount = 0;
            _this.maxRetries = ConfigurationManager_1.ConfigurationManager.getInstance().getByAssetType(asset.assetType, ConfigurationManager_1.ConfigurationManager.MAXIMUM_RETRIES);
            _this.logger.trace("Attempting a different asset, resetting count to " + _this.retryCount + " and maximum to " + _this.maxRetries);
            _this.stopTimer();
        });
        sandbox.streams.setAssets
            .filter(function (asset) { return asset.isRetry; })
            .switchMap(function () { return takeUntilMillisecondsProgressed(sandbox.streams.mediaProgresses, _this.interval + 1000); })
            .takeUntil(sandbox.destroyed)
            .subscribe(function () {
            _this.logger.info("Playback appears to have resumed, resetting count");
            _this.retryCount = 0;
            _this.stopTimer();
        });
    };
    RetryHandler.prototype.handleRollback = function (asset, _event) {
        var _this = this;
        asset.isRollback = true;
        asset.url = asset.urls.shift();
        this.rollbackBackoff = Math.pow(2, this.rollbackBackoff);
        this.logger.info("Attempting rollback " + asset.url + " in " + this.rollbackBackoff + " seconds");
        this.timer = global.setTimeout(function () {
            _this.sandbox.publish("api:setAsset", asset);
            _this.stopTimer();
        }, this.rollbackBackoff * 1000);
    };
    /**
     * Set a timeout event that fires the retry callback where the delay doubles with
     * each media failed event. If the retry count has been reached, don't cancel the
     * event and reset this handler;
     *
     * @param {MediaFailedEvent} event
     * @param channel - mediator channel
     */
    RetryHandler.prototype.onMediaFailed = function (event, channel) {
        var _this = this;
        var asset = this.sandbox.asset;
        if (this.sandbox.lastKnownPosition !== undefined) {
            this.logger.trace("Setting resumePosition of asset to", this.sandbox.lastKnownPosition);
            asset.resumePosition = this.sandbox.lastKnownPosition;
        }
        if (!event.retry) {
            this.logger.trace("MediaFailedEvent indicates no retry, sending MediaFailedEvent");
            return;
        }
        if (!asset.shouldRetry()) {
            this.logger.trace("Asset indicates no retry, sending MediaFailedEvent");
            return;
        }
        if (asset.urls.length > 0) {
            channel.stopPropagation();
            this.sandbox.player.stop();
            this.handleRollback(asset, event);
            return;
        }
        if (this.retryCount >= this.maxRetries) {
            this.logger.trace("onMediaFailed - retry count exhausted. Media failure is unrecoverable");
            this.sandbox.publish("api:stop");
            return;
        }
        // We could get multiple MediaFailedEvents at a time
        // we let a current retry happen before trying another
        // one.
        if (this.timer === undefined) {
            this.restarter.next(event);
            var delay_1 = Math.min(exports.MAXIMUM_DELAY, this.interval << this.retryCount);
            this.logger.warn("onMediaFailed error: \"" + JSON.stringify(event.error) + "\" will retry in " + delay_1 + " ms");
            this.timer = global.setTimeout(function () {
                _this.onRetryTimerFired(event, asset);
            }, delay_1);
        }
        // stop this event from going further
        channel.stopPropagation();
    };
    RetryHandler.prototype.onRetryTimerFired = function (event, asset) {
        this.stopTimer();
        this.retryCount++;
        this.logger.info("onRetryTimerFired: retry count = " + this.retryCount + " out of " + this.maxRetries);
        // set retry count on event
        event.retryCount = this.retryCount;
        // dispatch event
        events.dispatchEvent(new events.MediaRetryEvent(event));
        this.sandbox.player.stop();
        asset.isRollback = false;
        asset.isRetry = true;
        this.sandbox.setAsset(asset);
    };
    return RetryHandler;
}());
exports.RetryHandler = RetryHandler;
/**
 * creates an observable from progress events that will complete once the total progression
 * reaches given `maxMillis`.
 *
 * @param progressEvents progress event observable
 * @param maxMillis max progression in milliseconds
 */
function takeUntilMillisecondsProgressed(progressEvents, maxMillis) {
    return progressEvents
        .scan(function (acc, curr, idx) {
        if (idx === 0) {
            acc.start = curr.position;
        }
        else {
            acc.total = curr.position - acc.start;
        }
        return acc;
    }, { start: 0, total: 0 })
        .find(function (_a) {
        var total = _a.total;
        return total >= maxMillis;
    })
        .mapTo(undefined);
}
Application_1.registerModule("RetryHandler", RetryHandler, { autostart: true });

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"../Application":483,"../ConfigurationManager":484,"../PlayerPlatformAPIEvents":489,"../assets/BaseAsset":537,"../util/Logger":571,"rxjs":281,"rxjs/add/operator/distinctUntilChanged":257,"rxjs/add/operator/filter":260,"rxjs/add/operator/find":261,"rxjs/add/operator/mapTo":264,"rxjs/add/operator/scan":270,"rxjs/add/operator/switchMap":274,"rxjs/add/operator/takeUntil":276}],565:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var constants = require("../PlayerPlatformConstants");
var app = require("../Application");
var ContentOptions_1 = require("../assets/ContentOptions");
var MoneyTrace_1 = require("../util/MoneyTrace");
var SessionManager = /** @class */ (function () {
    function SessionManager() {
        this._playbackCount = 0;
        this._uuid = MoneyTrace_1.generateUUID();
        this._customTraceId = false;
        if (SessionManager._instance !== undefined) {
            throw new Error("Use this class as a singleton");
        }
        this.moneyTrace = new MoneyTrace_1.MoneyTrace({
            traceId: this.playbackSessionId,
            parentId: "0"
        });
        SessionManager._instance = this;
    }
    Object.defineProperty(SessionManager, "instance", {
        get: function () {
            if (SessionManager._instance === undefined) {
                SessionManager._instance = new SessionManager();
            }
            return SessionManager._instance;
        },
        enumerable: true,
        configurable: true
    });
    SessionManager.prototype.init = function (sandbox) {
        sandbox.subscribe("api:setAsset", this.onSetAsset, { priority: constants.PRIORITY_HIGH }, this);
        return this;
    };
    SessionManager.prototype.destroy = function (sandbox) {
        sandbox.remove("api:setAsset", this.onSetAsset);
    };
    /**
     * Indicates if a custom trace id is being used.
     * If this is true we don't update trace_id with PSI-PBI.
     * If this is false we must update trace_id with new PBI.
     */
    SessionManager.prototype.setCustomTraceId = function (customTrace) {
        this._customTraceId = customTrace;
    };
    SessionManager.prototype.onSetAsset = function (asset) {
        // EAS does not increment count
        if (!ContentOptions_1.isEAS(asset)) {
            this.incrementPlaybackCount(asset);
        }
    };
    SessionManager.prototype.incrementPlaybackCount = function (asset) {
        // If we have been set back to
        // the asset prior to EAS
        // we don't increment
        if (asset !== this._lastNonEAS) {
            this._playbackCount++;
            if (!this._customTraceId) {
                this.moneyTrace.traceId = this.playbackSessionId;
            }
        }
        this._lastNonEAS = asset;
    };
    Object.defineProperty(SessionManager.prototype, "playbackCount", {
        get: function () {
            return this._playbackCount;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SessionManager.prototype, "sessionId", {
        get: function () {
            return this._uuid;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SessionManager.prototype, "playbackSessionId", {
        get: function () {
            return this._uuid + "-" + this._playbackCount;
        },
        enumerable: true,
        configurable: true
    });
    return SessionManager;
}());
exports.SessionManager = SessionManager;
app.registerModule("SessionManager", SessionManager, { autostart: true });

},{"../Application":483,"../PlayerPlatformConstants":490,"../assets/ContentOptions":538,"../util/MoneyTrace":572}],566:[function(require,module,exports){
(function (global){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Application_1 = require("../Application");
var events = require("../PlayerPlatformAPIEvents");
var constants = require("../PlayerPlatformConstants");
var Logger_1 = require("../util/Logger");
/**
 * Initialize the XRE CC Handler event system and register listeners
 *
 * XRECCHandler is responsible for listening to PlayerPlatform events (to turn
 * CC on/off), and an engine event for the decoder handle, in both cases
 * sending this to the XRE client on the STB. Currently this module is used by
 * PSDKPlayer, but eventually will need to be used by Helio also.
 *
 * Future support for this module will include allowing applications to query
 * the XRE client for the CC status. As of now each app will need to manage
 * this state.
 *
 * @constructor
 */
var XRECCHandler = /** @class */ (function () {
    function XRECCHandler() {
        this.logger = new Logger_1.Logger("XRECCHandler");
        this.ignoreNullDecoder = false;
    }
    XRECCHandler.prototype.init = function (sandbox) {
        sandbox.subscribe("api:setClosedCaptionsEnabled", this.setClosedCaptionsEnabled, {}, this);
        sandbox.subscribe("xre:decoderAvailable", this.onDecoderAvailable, {}, this);
        sandbox.subscribe("api:stop", this.stopCC, { priority: constants.PRIORITY_TOP }, this);
        events.addEventListener(events.MEDIA_ENDED, this.stopCC, { priority: constants.PRIORITY_TOP }, this);
        // This is temporary due to a bug in the Receiver & PSDK where an unentitled
        // tune dispatches multiple drm errors, PlayerPlatform then reports multiple
        // null decoderHandle events and gets into a recursive situation
        this.ignoreNullDecoder = global._xrePlayerPlatform !== null;
        return this;
    };
    XRECCHandler.prototype.destroy = function (sandbox) {
        sandbox.remove("api:setClosedCaptionsEnabled", this.setClosedCaptionsEnabled);
        sandbox.remove("xre:decoderAvailable", this.onDecoderAvailable);
        sandbox.remove("api:stop", this.stopCC);
        events.removeEventListener(events.MEDIA_ENDED, this.stopCC);
    };
    /**
     * setClosedCaptionsEnabled is an event handler for playerPlatformAPI's
     * setClosedCaptionsEnabled function call. In non-XRE applications, when
     * a customer needs to show/hide closed captions, PlayerPlatform needs
     * to notify the XRE client, since the XRE client is doing all the CC
     * rendering (see onDecoderAvailable for more info on that process). Even
     * though the app is non-XRE controlled, the XRE client (Receiver) still
     * manages the app process, and the CC presentation.
     *
     * @param {boolean} enable show/hide the closed caption rednering done by
     *                         the XRE client.
     * @returns {void}
     * @private
     *
     */
    XRECCHandler.prototype.setClosedCaptionsEnabled = function (enable) {
        this.logger.trace("XRE:onClosedCaptions");
        if (global.XREReceiver) {
            global.XREReceiver.onEvent("onClosedCaptions", { enable: enable });
        }
    };
    XRECCHandler.prototype.stopCC = function () {
        this.onDecoderAvailable(null);
    };
    /**
     * onDecoderAvailable is an event handler that receives a JavaScript
     * event from an engine. In the current case, PSDK on the STB uses
     * the Broadcom NEXUS or Intel ISMD APIs to play video. This address needs
     * to reach the Receiver to be able to present 608 captions found in the
     * video stream.
     *
     * @param {Number} decoderHandle the address of a NEXUS_VideoDecoderHandle
     * @returns {void}
     * @private
     *
     */
    XRECCHandler.prototype.onDecoderAvailable = function (decoderHandle) {
        this.logger.trace(decoderHandle ? "XRE:onDecoderAvailable" : "stopClosedCaption");
        if (global.XREReceiver) {
            if (decoderHandle === null && this.ignoreNullDecoder) {
                return;
            }
            global.XREReceiver.onEvent("onDecoderAvailable", { decoderHandle: decoderHandle });
        }
    };
    return XRECCHandler;
}());
exports.XRECCHandler = XRECCHandler;
Application_1.registerModule("XRECCHandler", XRECCHandler);

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"../Application":483,"../PlayerPlatformAPIEvents":489,"../PlayerPlatformConstants":490,"../util/Logger":571}],567:[function(require,module,exports){
"use strict";
/**
 * Created by chesli200 on 2/21/15.
 */
Object.defineProperty(exports, "__esModule", { value: true });
// include css in build
require("../static/css/playerPlatform.css");
// required modules
require("./handlers/RetryHandler");
require("./handlers/PlaybackStalledHandler");
require("./handlers/AnalyticsHandler");
require("./engines/EngineSelector");
require("./engines/null/NullPlayer");
require("./handlers/CrossStreamPreventionHandler");
var constants = require("./PlayerPlatformConstants");
var events = require("./PlayerPlatformAPIEvents");
var Logger_1 = require("./util/Logger");
// exposed modules
var AssetFactory_1 = require("./assets/AssetFactory");
exports.Asset = AssetFactory_1.AssetFactory;
var PlayerPlatformAPI_1 = require("./PlayerPlatformAPI");
exports.PlayerPlatformAPI = PlayerPlatformAPI_1.PlayerPlatformAPI;
var ConfigurationManager_1 = require("./ConfigurationManager");
exports.ConfigurationManager = ConfigurationManager_1.ConfigurationManager;
exports.getConfigurationManager = ConfigurationManager_1.getConfigurationManager;
var VideoAd_1 = require("./ads/VideoAd");
exports.VideoAd = VideoAd_1.VideoAd;
var VideoAdBreak_1 = require("./ads/VideoAdBreak");
exports.VideoAdBreak = VideoAdBreak_1.VideoAdBreak;
var Logger_2 = require("./util/Logger");
exports.LogLevel = Logger_2.LogLevel;
exports.setLogLevel = Logger_2.setLogLevel;
exports.setLogSinks = Logger_2.setLogSinks;
exports.addLogSink = Logger_2.addLogSink;
exports.ConsoleSink = Logger_2.ConsoleSink;
exports.Events = events;
exports.Constants = constants;
//Logger_1.setLogLevel(__loglevel);

var XREMain_1 = require("./xre/XREMain");
exports.XREMain = XREMain_1.XREMain;
var PSDKPlayer_1 = require("./engines/psdk/PSDKPlayer");
exports.PSDKPlayer = PSDKPlayer_1.PSDKPlayer;
var AAMPPlayer_1 = require("./engines/aamp/AAMPPlayer");
exports.AAMPPlayer = AAMPPlayer_1.AAMPPlayer;
var ManifestManipulatorAdManager_1 = require("./ads/ManifestManipulator/ManifestManipulatorAdManager");
exports.ManifestManipulatorAdManager = ManifestManipulatorAdManager_1.ManifestManipulatorAdManager;
var CLinearAdManager_1 = require("./ads/scte/CLinearAdManager");
exports.CLinearAdManager = CLinearAdManager_1.CLinearAdManager;
var CustomAdManager_1 = require("./ads/custom/CustomAdManager");
exports.CustomAdManager = CustomAdManager_1.CustomAdManager;


},{"../static/css/playerPlatform.css":592,"./ConfigurationManager":484,"./PlayerPlatformAPI":488,"./PlayerPlatformAPIEvents":489,"./PlayerPlatformConstants":490,"./ads/ManifestManipulator/ManifestManipulatorAdManager":495,"./ads/VideoAd":497,"./ads/VideoAdBreak":498,"./ads/custom/CustomAdManager":500,"./ads/scte/CLinearAdManager":511,"./assets/AssetFactory":536,"./engines/EngineSelector":546,"./engines/aamp/AAMPPlayer":547,"./engines/null/NullPlayer":552,"./engines/psdk/PSDKPlayer":556,"./handlers/AnalyticsHandler":559,"./handlers/CrossStreamPreventionHandler":560,"./handlers/PlaybackStalledHandler":563,"./handlers/RetryHandler":564,"./util/Logger":571,"./xre/XREMain":582}],568:[function(require,module,exports){
(function (global){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var PPError_1 = require("../PPError");
var MpxParser_1 = require("../MpxParser");
var VssAsset_1 = require("../assets/VssAsset");
var AnalyticsHandler_1 = require("../handlers/AnalyticsHandler");
var JSUtil_1 = require("../util/JSUtil");
var OttAsset_1 = require("../assets/OttAsset");
var Logger_1 = require("../util/Logger");
var ConfigurationManager_1 = require("../ConfigurationManager");
var ContentOptions_1 = require("../assets/ContentOptions");
var SessionManager_1 = require("../handlers/SessionManager");
var AdManagerFactory_1 = require("../ads/AdManagerFactory");
var XuaAssetFactory_1 = require("../analytics/XuaAssetFactory");
var NbcConditionedStreamApi_1 = require("../assets/NbcConditionedStreamApi");
var rxjs_1 = require("rxjs");
require("rxjs/add/observable/dom/ajax");
require("rxjs/add/observable/of");
var OttLocatorParser_1 = require("../assets/OttLocatorParser");
exports.MPX_RE = /^(https?):\/\/link\.theplatform\.com\//;
exports.MM_RE = /^(https?):\/\/mm\./;
exports.CCR_RE = /^(https?):\/\/ccr\./;
exports.FOG_RE = /tsb\?((clientId=[^&]*&recordedUrl=[^&]*)|(recordedUrl=[^&]*&clientId=[^&]*)){1}/;
/**
 * FOG provides the URL in a query string parameter.
 * This is they key of that query string parameter.
 */
var FOG_URL_KEY = "recordedUrl";
var logger = new Logger_1.Logger("URLService");
/**
 * The goals of this URLService are to provide additional information on URLs which
 * player platform is provided.
 *
 * These functions should remain stateless. The goal is that one day these functions could reside
 * as a micro service on another server.
 *
 * Anytime we manipulate the URL we are provided we should provide that manipulation through one of the
 * end point functions belows.
 *
 * All of these functions should be the equivalent of some restful service end point.
 */
/**
 * Determines if a provided asset is for use with a manifest manipulator server.
 * This check currently relies on what is provided in the ad config.
 * @param adConfig the ad confuration to check
 * @returns true iff the ad config is of MANIFEST type
 */
function isManifestManipulator(adConfig) {
    return adConfig && adConfig.type === AdManagerFactory_1.AdManagerKeys.MANIFEST;
}
/**
 * Writes a property to an object only if the value is not undefined.
 * @param baseObject the base object to update with the property
 * @param propertyKey the property key to add to the base object
 * @param value the value to add if not undefined
 */
function coalesceProperty(baseObject, propertyKey, value) {
    if (value !== undefined) {
        baseObject[propertyKey] = value;
    }
}
/**
 * The manifest manipulator server relies on player platform to provide it data about the
 * client which is playing it. Some of this data is needed just prior to playing back an
 * asset. This function provides a url which will provide the data the manifest manipulator
 * server requires. It is intended to be used just prior to passing a url to an underlying player.
 * @param url the url which we plan to provide to an underlying player
 * @param asset the asset associated with the url
 * @param adConfig the ad config associated with the asset and url
 * @returns fully resolved url which is used for manifest manipulator playback
 */
function prepareManifestManipulator(url, asset, adConfig) {
    logger.trace("prepareManifestManipulator", url);
    var params = JSUtil_1.parseQueryParams(url);
    params.StreamType = params.StreamType || "VOD_T6";
    params.AssetId = params.AssetId || asset.assetId;
    params.ProviderId = params.ProviderId || asset.providerId;
    params.DeviceId = adConfig.deviceID || adConfig.terminalAddress;
    params.sid = SessionManager_1.SessionManager.instance.playbackSessionId;
    params.dtz = JSUtil_1.formatLocalDateTimeStamp();
    params.PartnerId = "private:" + (params.partnerId || ConfigurationManager_1.ConfigurationManager.getInstance().get(ConfigurationManager_1.ConfigurationManager.PARTNER_ID));
    // Append settings for freewheel, these may not exist
    coalesceProperty(params, "nw", adConfig.networkId);
    coalesceProperty(params, "prof", adConfig.playerProfile);
    coalesceProperty(params, "csid", adConfig.siteSectionId);
    coalesceProperty(params, "caid", adConfig.assetId);
    coalesceProperty(params, "_fw_h_x_country", adConfig.countryCode);
    coalesceProperty(params, "_fw_h_x_postal_code", adConfig.postalCode);
    coalesceProperty(params, "host", adConfig.serverUrl);
    return JSUtil_1.replaceQueryParams(url, params);
}
/**
 * The FOG server relies on player platform to provide it data about the client which is playing it.
 * Some of this data is needed just prior to playing back an asset. This function provides a url which will provide
 * the data the FOG server requires. It is intended to be used just prior to passing a url to an underlying player.
 * @param url the url which we plan to provide to an underlying player
 * @param asset the asset associated with the url
 * @returns fully resolved url which is used for FOG playback
 */
function prepareFOGUrl(url, asset) {
    logger.trace("prepareFOGUrl", url);
    var params = JSUtil_1.parseQueryParams(url);
    var hostInfo = AnalyticsHandler_1.AnalyticsHandler.instance.hostInfo;
    params["analyticsUrl"] = ConfigurationManager_1.ConfigurationManager.getInstance().get(ConfigurationManager_1.ConfigurationManager.FOG_ANALYTICS_END_POINT);
    params["money"] = JSON.stringify({
        PARENT_ID: SessionManager_1.SessionManager.instance.moneyTrace.spanId,
        TRACE_ID: SessionManager_1.SessionManager.instance.moneyTrace.traceId
    });
    params["ses"] = JSON.stringify({
        PSI: SessionManager_1.SessionManager.instance.sessionId,
        PBI: SessionManager_1.SessionManager.instance.playbackCount
    });
    params["asset"] = JSON.stringify(new XuaAssetFactory_1.XuaAssetFactory().create(asset));
    params["appName"] = hostInfo.appName;
    params["appVer"] = hostInfo.appVersion;
    params["acId"] = global._xrePlayerPlatform.contentOptions.accountID;
    params["devName"] = hostInfo.deviceName;
    params["devID"] = hostInfo.deviceId;
    params["phyID"] = global._xrePlayerPlatform.contentOptions.deviceID;
    params[FOG_URL_KEY] = params[FOG_URL_KEY].replace(/^https:\/\//, "http://");
    return JSUtil_1.replaceQueryParams(url, params);
}
/**
 * Prior to playing certain URLs we have to append additional information.
 * We currently do this for the following situations:
 * * MANIFEST MANIPULATOR
 * * FOG
 * These services rely on player platform to provide them information. This function
 * provides that information to these services just before we pass the URL to an underlying
 * player.
 * @param url the url as player platform is about to provide it to an underlying player
 * @param asset associated content options with the provided url
 * @returns url which should be passed to the underlying player
 */
function getURLForPlayback(url, asset) {
    return url;//WMR prepareFOGUrl is failing because analytics is null i think
    logger.trace("getURLForPlayback", url);
    if (isManifestManipulator(asset.adConfig)) {
        return prepareManifestManipulator(url, asset, asset.adConfig);
    }
    if (exports.FOG_RE.test(url)) {
        return prepareFOGUrl(url, asset);
    }
    return url;
}
exports.getURLForPlayback = getURLForPlayback;
/**
 * For linear redundant urls we make a request to a Comcast CDN with
 * a query string parameter of trred, with this included parameter the CDN
 * provides a list of locations it would like player platform to play through.
 * @param url the original CDN location
 * @returns list of URLs from linear redundant CDN endpoint
 */
function getLinearRedundantUrls(url) {
    logger.trace("getLinearRedundantUrls", url);
    return new Promise(function (resolve, _reject) {
        try {
            rxjs_1.Observable.ajax({
                url: JSUtil_1.replaceQueryParams(url, {
                    trred: false
                }),
                method: "GET",
                crossDomain: true,
                responseType: "json",
                timeout: ConfigurationManager_1.ConfigurationManager.getInstance().get(ConfigurationManager_1.ConfigurationManager.PLAYER_NETWORK_REQUEST_TIMEOUT)
            })
                .subscribe(function (ajax) {
                if (ajax.response && Array.isArray(ajax.response.locations)) {
                    resolve(ajax.response["locations"]);
                }
                else {
                    resolve([url]);
                }
            }, function (err) {
                // In case of any error, return the original URL
                logger.error("Error with linear redundancy request", err);
                resolve([url]);
            });
        }
        catch (err) {
            logger.error("Unable to make request", err);
            resolve([url]);
        }
    });
}
/**
 * For over the top requests, we call out to a callback to provide us with our fully resolved URL.
 *
 * This asset type is for 3rd party hosted assets that require player platform to authenticate with the 3rd party
 * before accessing the asset files.  The asset url provided to Asset.create will be a locator.  Authentication
 * occurs in a function provided to player platform by the host application.  The authentication function accepts
 * the locator and returns a promise with the resolved http url of the authenticated asset.
 *
 * see https://etwiki.sys.comcast.net/display/AAE/Third+Party+Hosted+IP+Stream+Authorization+and+Playback
 *
 * Interface for the function that player platform will call on the hosting app for authentication.  This
 * function should be provided as ottAuthCallback in asset content options for OTT assets.
 *  example:
 *
 * let ottAsset = Asset.create(
 * "comcast:ott-stream:nbcsports:NBCSports: .... m3u8",
 * {
 *     assetType: "OTT",
 *     ottAuthCallback: (locator) => {
 *         return new Promise((resolve, reject) => {
 *             try {
 *                 let authResult = ....;
 *                 resolve(authResult);
 *             } catch(e) {
 *                 reject(e);
 *             }
 *         });
 *     }
 * }
 *
 * @param url provided url for use with ott callback
 * @param asset associated asset with url
 * @returns list of URLs from over the top callback
 */
function getOttUrl(url, asset) {
    if (!asset.ottAuthCallback) {
        return Promise.reject(new PPError_1.PPError(7900, 1, "ottAuthCallback was not set in content options for ott asset"));
    }
    try {
        return asset.ottAuthCallback(url).then(function (authResult) {
            if (authResult.authorized === undefined) {
                throw new PPError_1.PPError(7900, 3, "ottAuthCallback returned a response with no authorized property " + JSON.stringify(authResult));
            }
            if (!authResult.authorized) {
                throw new PPError_1.PPError(7900, 2, "OTT authentication failed");
            }
            if (authResult.playbackUrl === undefined) {
                throw new PPError_1.PPError(7900, 4, "ottAuthCallback returned a response with no playbackUrl " + JSON.stringify(authResult));
            }
            logger.trace("Setting assetId to " + authResult.caid);
            asset.assetId = authResult.caid;
            return [authResult.playbackUrl];
        }, function (err) {
            throw new PPError_1.PPError(7900, 5, "ottAuthCallback returned an error " + err.name + " " + err.message + " " + err.stack);
        });
    }
    catch (err) {
        return Promise.reject(new PPError_1.PPError(7900, 6, "ottAuthCallback threw an error " + err.name + " " + err.message + " " + err.stack));
    }
}
function getESPN3airingId(url, asset) {
    if (!asset.ottAuthCallback) {
        return Promise.reject(new PPError_1.PPError(7900, 1, "ottAuthCallback was not set in content options for ott asset"));
    }
    try {
        return asset.ottAuthCallback(url).then(function (authResult) {
            if (authResult.authorized === undefined) {
                throw new PPError_1.PPError(7900, 3, "ottAuthCallback returned a response with no authorized property " + JSON.stringify(authResult));
            }
            if (!authResult.authorized) {
                throw new PPError_1.PPError(7900, 2, "OTT authentication failed");
            }
            if (!authResult.authToken) {
                throw new PPError_1.PPError(7900, 2, "OTT authentication failed due to missing authToken");
            }
            if (!authResult.authType || authResult.authType !== OttLocatorParser_1.OTT_ESPN_AUTH_TYPE) {
                throw new PPError_1.PPError(7900, 2, "OTT authentication failed due to missing or incorrect authentication type");
            }
            if (authResult.simulcastAiringId === undefined) {
                throw new PPError_1.PPError(7900, 4, "ottAuthCallback returned a response with no simulcastAiringId " + JSON.stringify(authResult));
            }
            //we need this auth token for the espn3 api to load by airing id
            asset.contentOptions.authToken = asset.contentOptions.authToken;
            return [authResult.simulcastAiringId];
        }, function (err) {
            throw new PPError_1.PPError(7900, 5, "ottAuthCallback returned an error " + err.name + " " + err.message + " " + err.stack);
        });
    }
    catch (err) {
        return Promise.reject(new PPError_1.PPError(7900, 6, "ottAuthCallback threw an error " + err.name + " " + err.message + " " + err.stack));
    }
}
/**
 * FOG assets need all of the typical modifications but need them on the provided recordedUrl query string parameter.
 * This method recursively calls back to make modifications on the recordedUrl and then maps them back to FOG fully
 * resolved URLs.
 * @param fogUrl fully resolved FOG url as provided to player platform
 * @param recordedUrl the recordedUrl within the provided FOG url
 * @param asset the associated asset provided with the FOG url
 * @param isRetry whether we are querying due to a retry
 * @returns list of fully resolved URLs for use with a FOG server from player platform
 */
function getURLPlaylistForFOGAsset(fogUrl, recordedUrl, asset, isRetry) {
    return getURLPlaylistForAsset(recordedUrl, asset, isRetry)
        .then(function (urls) { return urls.map(function (url) {
        var params = JSUtil_1.parseQueryParams(fogUrl);
        params.recordedUrl = url;
        return JSUtil_1.replaceQueryParams(fogUrl, params);
    }); });
}
/* tslint:disable max-line-length */
/*
 * For DAI RGB assets player platform has to modify the host and URL in a specific way.
 * Player platform gets provided URLs similar to:
 *
 * http://dai-aim.g.comcast.net/TVE/HLS/TBSHD_HD_TVE_12817_0_7062422138357055163/index.m3u8?vservv=live&ProviderId=xfinitytv.com&AssetId=MSTR7062422138357055&DeviceId=x
 *
 * It then modifies this URL to
 * http://dai-aim.g.comcast.net/TBSHD_HD_TVE_12817_0_7062422138357055163.m3u8
 *
 */
/* tslint:enable max-line-length */
function modifyUrlForRgb(rewriteHost, url) {
    // Match the host at index 1 and the new asset name at index 3
    var RGB_RE = /^(https?):\/\/dai-aim[^/]*\/TVE\/(HLS|HDS)\/([^/]*)\//;
    var matches = RGB_RE.exec(url);
    // If we found a match but it doesn't seem right
    // return the original url
    if (!matches || matches.length !== 4) {
        return url;
    }
    return matches[1] + "://" + rewriteHost + "/" + matches[3] + ".m3u8";
}
function getURLPlaylistForManifestManipulator(url, isRetry) {
    var playlist = [url];
    if (!isRetry) {
        var match = exports.CCR_RE.exec(url);
        if (match && match.length > 1) {
            if (ConfigurationManager_1.ConfigurationManager.getInstance().get(ConfigurationManager_1.ConfigurationManager.ENABLE_MULTISITE_VOD_DAI)) {
                playlist.unshift(url.replace(exports.CCR_RE, match[0] + "mm-"));
            }
            else {
                playlist.unshift(url.replace(exports.CCR_RE, match[1] + "://mm."));
            }
        }
    }
    return Promise.resolve(playlist);
}
function getURLPlaylistForNBC(url, asset) {
    return new Promise(function (resolve, reject) {
        if (!asset.serviceZip) {
            return reject(new PPError_1.PPError(7550, 5, "Service zip required for NBC assets"));
        }
        new NbcConditionedStreamApi_1.NbcConditionedStreamApi(ConfigurationManager_1.ConfigurationManager.getInstance().get(ConfigurationManager_1.ConfigurationManager.NBC_CONDITIONED_STREAM_API)).getConditionedAssetUrl(url, asset.serviceZip)
            .subscribe(function (nbcUrl) { return resolve([nbcUrl]); }, function (err) { return reject(err); });
    });
}
function getURLPlaylistForMPX(url) {
    logger.trace("getURLPlaylistForMPX", url);
    var params = JSUtil_1.parseQueryParams(url);
    if (!params.format || params.format.toLowerCase() !== "smil") {
        params.format = "smil";
    }
    var formatSmilUrl = JSUtil_1.replaceQueryParams(url, params);
    logger.trace("Requesting CCR url for MPX locator URL: " + formatSmilUrl);
    return new Promise(function (resolve, reject) {
        rxjs_1.Observable.ajax({
            url: formatSmilUrl,
            method: "get",
            responseType: "text",
            crossDomain: true
        })
            .subscribe(function (res) {
            try {
                var parser = new MpxParser_1.MpxParser();
                var newUrl = parser.parse(res.response);
                if (parser.error) {
                    throw parser.error;
                }
                else if (!newUrl) {
                    reject(new PPError_1.PPError(PPError_1.MPX_ERROR, 0, "MPX parse error, no URL found"));
                }
                resolve([newUrl]);
            }
            catch (err) {
                logger.error("Error parsing MPX response: " + err);
                reject(new PPError_1.PPError(PPError_1.MPX_ERROR, 10, "Error parsing MPX response"));
            }
        }, function (err) {
            logger.error("Error retrieving URL: " + err);
            reject(new PPError_1.PPError(PPError_1.MPX_ERROR, 10, "Error retrieving MPX URL"));
        });
    });
}
function getURLPlaylistForVSS(url, asset) {
    if (!asset.contentOptions.vssServiceZoneCallback) {
        return Promise.reject(new PPError_1.PPError(7700, 1, "VSS service zone callback was not supplied in content options."));
    }
    if (typeof asset.contentOptions.vssServiceZoneCallback !== "function") {
        return Promise.reject(new PPError_1.PPError(7700, 4, "VSS service zone callback must be a function."));
    }
    return new Promise(function (resolve, reject) {
        var timedOut = false;
        var vssCbTimeout = setTimeout(function () {
            timedOut = true;
            reject(new PPError_1.PPError(7700, 3, "VSS service zone callback timed out"));
        }, ConfigurationManager_1.ConfigurationManager.getInstance().get(ConfigurationManager_1.ConfigurationManager.VSS_SERVICE_ZONE_CALLBACK_TIMEOUT) || 10000);
        try {
            asset.contentOptions.vssServiceZoneCallback(asset, function (serviceZone) {
                if (timedOut) {
                    logger.warn("Ignoring VSS response since timed out");
                    return;
                }
                clearTimeout(vssCbTimeout);
                logger.trace("VSS service zone callback returned service zone " + serviceZone);
                var queryParams = JSUtil_1.parseQueryParams(url);
                asset.serviceZone = queryParams["sz"] = serviceZone;
                if (isLinearRedundant(asset)) {
                    resolve(getLinearRedundantUrls(JSUtil_1.replaceQueryParams(url, queryParams)));
                }
                else {
                    resolve([JSUtil_1.replaceQueryParams(url, queryParams)]);
                }
            });
        }
        catch (err) {
            clearTimeout(vssCbTimeout);
            logger.error("VSS service zone callback threw error: " + err + ", name: " + err.name + ", message: " + err.message + ", stack: " + err.stack);
            reject(new PPError_1.PPError(7700, 2, "VSS service zone callback threw an error"));
        }
    });
}
/**
 * Certain modifications are made up front and modify the URL. After these changes
 * we don't modify the URL again. These modifications are included below.
 * They are currently used for:
 *  * Forcing a URL to be HTTPS
 *  * Appending an -eac3.m3u8 suffix for certain super8 servers for DD+
 *  * Modifying host for RGB, working for dynamic ad insertion servers.
 * @param assetType the type of asset
 * @param url the url to modify
 * @returns fully modified initial url
 */
function makeInitialModifications(asset, url) {
    // If this asset always wants https
    if (ConfigurationManager_1.ConfigurationManager.getInstance().getByAssetType(asset.assetType, ConfigurationManager_1.ConfigurationManager.FORCE_HTTPS, false)) {
        url = url.replace(/^http:/, "https:");
        logger.trace("changed url for " + ConfigurationManager_1.ConfigurationManager.FORCE_HTTPS + " " + url, url);
    }
    // If this asset needs DD+ modification
    if (ConfigurationManager_1.ConfigurationManager.getInstance().getByAssetType(asset.assetType, ConfigurationManager_1.ConfigurationManager.DD_PLUS, false) || asset.surround) {
        url = url.replace(/\.m3u8$/, "-eac3.m3u8");
        logger.trace("changed url for " + ConfigurationManager_1.ConfigurationManager.DD_PLUS + " " + url, url);
    }
    var rgbUrlRewriteHost = ConfigurationManager_1.ConfigurationManager.getInstance().getByAssetType(asset.assetType, ConfigurationManager_1.ConfigurationManager.RGB_URL_REWRITE_HOST, "");
    // If RGB URL, change for RGB
    if (rgbUrlRewriteHost) {
        url = modifyUrlForRgb(rgbUrlRewriteHost, url);
        logger.trace("changed url for " + ConfigurationManager_1.ConfigurationManager.RGB_URL_REWRITE_HOST + " " + url);
    }
    return url;
}
function getPlaylist(url, asset, isRetry) {
    logger.trace("getPlaylist", url, asset, isRetry);
    // Get URLs for manifest manipulator service
    if (isManifestManipulator(asset.adConfig)) {
        return getURLPlaylistForManifestManipulator(url, isRetry);
    }
    // Get URLs for NBC Universal Asset
    if (asset.assetEngine === ContentOptions_1.AssetEngine.NBCUNI) {
        return getURLPlaylistForNBC(url, asset);
    }
    // Get URLs for VSS Asset
    if (asset instanceof VssAsset_1.VssAsset && ConfigurationManager_1.ConfigurationManager.getInstance().getByAssetType(asset.assetType, ConfigurationManager_1.ConfigurationManager.VSS_ENABLED, false)) {
        return getURLPlaylistForVSS(url, asset);
    }
    // Get URLs for Over-the-top OTT asset
    if (asset instanceof OttAsset_1.OttAsset) {
        if (asset.getProvider() === OttLocatorParser_1.OTT_PROVIDERS.ESPN) {
            // Get URLs for ESPN3 asset
            return getESPN3airingId(url, asset);
        }
        else {
            //default OTT url mapping
            return getOttUrl(url, asset);
        }
    }
    // Get URLs for a linear redundant CDN asset with apache traffic control
    if (isLinearRedundant(asset)) {
        return getLinearRedundantUrls(url);
    }
    // Get URLs for MPX (mpx.theplatform.com) assets
    if (!asset.preventRedirect && exports.MPX_RE.test(url)) {
        return getURLPlaylistForMPX(url);
    }
    logger.trace("No modifications needed");
    // Return original URL if no modifications detected
    return Promise.resolve([url]);
}
function isLinearRedundant(asset) {
    return ConfigurationManager_1.ConfigurationManager.getInstance().getByAssetType(asset.assetType, ConfigurationManager_1.ConfigurationManager.CDN_REDUNDANT, false);
}
/**
 * Often times in player platform we are given a url which we have to do more work on to get a final list of URLs which
 * we attempt to play through. The result is a queue of arrays which we attempt playback on in a FIFO order.
 * @param url the url as provided to player platform by a user
 * @param asset associated content options with the provided url
 * @param isRetry whether we are querying this as the result of retrying
 * @returns queue of URLs to work through while playing back
 */
function getURLPlaylistForAsset(url, asset, isRetry) {
    if (isRetry === void 0) { isRetry = false; }
    logger.trace("getURLPlaylistForAsset", url, asset, isRetry);
    // If FOG asset, get URLS for the recordedUrl
    // Recursively exit after this and pull URLs for the
    // recordedUrl query string.
    if (exports.FOG_RE.test(url)) {
        return getURLPlaylistForFOGAsset(url, JSUtil_1.parseQueryParams(url).recordedUrl, asset, isRetry);
    }
    // Make initial modifications that modify the URL
    url = makeInitialModifications(asset, url);
    return getPlaylist(url, asset, isRetry);
}
exports.getURLPlaylistForAsset = getURLPlaylistForAsset;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"../ConfigurationManager":484,"../MpxParser":486,"../PPError":487,"../ads/AdManagerFactory":494,"../analytics/XuaAssetFactory":535,"../assets/ContentOptions":538,"../assets/NbcConditionedStreamApi":539,"../assets/OttAsset":540,"../assets/OttLocatorParser":541,"../assets/VssAsset":542,"../handlers/AnalyticsHandler":559,"../handlers/SessionManager":565,"../util/JSUtil":569,"../util/Logger":571,"rxjs":281,"rxjs/add/observable/dom/ajax":239,"rxjs/add/observable/of":248}],569:[function(require,module,exports){
/**
 * Created by chesli200 on 3/3/15.
 */
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Given an object, copy all properties from all <code>sources</code>
 * objects into the <code>destination</code> object.
 *
 * Adapted from Underscore.js
 *
 * @param obj - destination object
 * @param {...object} sources - variable number of source objects
 * @returns {object}
 */
function extend(obj) {
    var _ = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        _[_i - 1] = arguments[_i];
    }
    var length = arguments.length;
    if (length < 2 || !obj) {
        return obj;
    }
    for (var index = 1; index < length; index++) {
        var source = arguments[index];
        var keys = Object.keys(source);
        var l = keys.length;
        for (var i = 0; i < l; i++) {
            var key = keys[i];
            obj[key] = source[key];
        }
    }
    return obj;
}
exports.extend = extend;
function isObject(obj) {
    var type = typeof obj;
    return type === "function" || type === "object" && !!obj;
}
exports.isObject = isObject;
/**
 * Given a url, parse its query parameters into an object
 *
 * @param {string} url
 * @returns {object}
 */
function parseQueryParams(url) {
    var regex = /[?&]([^=#]+)=([^&#]*)/g;
    var params = {};
    var match = regex.exec(url);
    while (match) {
        params[match[1]] = decodeURIComponent(match[2]);
        match = regex.exec(url);
    }
    return params;
}
exports.parseQueryParams = parseQueryParams;
/**
 * given a url and an object containing desired query parameters,
 * replace the query parameters on the url with the parameters
 * in the params object.
 *
 * @param {string} url
 * @param {object} params
 * @returns {string}
 */
function replaceQueryParams(url, params) {
    if (url === void 0) { url = ""; }
    return url.split("?")[0] + "?" + toQueryParams(params);
}
exports.replaceQueryParams = replaceQueryParams;
/**
 * Given an object, convert its key/value pairs into query parameters.
 *
 * @param {object} obj
 * @returns {string}
 */
function toQueryParams(obj) {
    return Object.keys(obj)
        .map(function (key) {
        return encodeURIComponent(key) + "=" + encodeURIComponent(obj[key]);
    })
        .join("&");
}
exports.toQueryParams = toQueryParams;
function getQueryVariable(variable) {
    var query = window.location.search.substring(1);
    var vars = query.split("&");
    for (var i = 0; i < vars.length; i++) {
        var pair = vars[i].split("=");
        if (decodeURIComponent(pair[0]) == variable && pair[1]) {
            return decodeURIComponent(pair[1]);
        }
    }
    // console.warn("getQueryVariable: Query variable " + variable + " not found");
}
exports.getQueryVariable = getQueryVariable;
function keyForValue(obj, value) {
    return Object.keys(obj).filter(function (key) { return obj[key] === value; })[0];
}
exports.keyForValue = keyForValue;
function getNestedProperty(object, property) {
    if (!object || typeof object !== "object") {
        return object;
    }
    else if (typeof property === "string") {
        property = property.replace(/\[(\d+)\]/g, ".$1");
        var split = property.split(".");
        return split.reduce(function (obj, prop) {
            return obj && obj[prop];
        }, object);
    }
    else if (typeof property === "number") {
        return object[property];
    }
    else {
        return object;
    }
}
exports.getNestedProperty = getNestedProperty;
function arrayEquals(arr1, arr2) {
    if (!arr1 || !arr2) {
        return false;
    }
    if (arr1.length != arr2.length) {
        return false;
    }
    for (var i = 0, n = arr1.length; i < n; i++) {
        if (arr1[i] !== arr2[i]) {
            return false;
        }
    }
    return true;
}
exports.arrayEquals = arrayEquals;
/**
 * GUIDcreate: mimics ActionScript GUIDUtil.create
 * @returns {String}
 */
function createGUID() {
    var s4 = function () { return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1); };
    return "" + s4() + s4() + "-" + s4() + "-" + s4() + "-" + s4() + "-" + s4() + s4() + s4();
}
exports.createGUID = createGUID;
/**
 * Mimics strftime("%FT%T.%L%:z", new Date())
 * @param {object} timeval (optional)
 * @returns {String}
 */
function formatLocalDateTimeStamp(timeval) {
    var now = timeval || new Date();
    var tzo = -now.getTimezoneOffset();
    var dif = tzo >= 0 ? "+" : "-";
    var pad = function (num) {
        var norm = Math.abs(Math.floor(num));
        return (norm < 10 ? "0" : "") + norm;
    };
    var padTwo = function (num) {
        var norm = Math.abs(Math.floor(num));
        return (norm < 10 ? "00" : (norm < 100 ? "0" : "")) + norm;
    };
    return now.getFullYear()
        + "-" + pad(now.getMonth() + 1)
        + "-" + pad(now.getDate())
        + "T" + pad(now.getHours())
        + ":" + pad(now.getMinutes())
        + ":" + pad(now.getSeconds())
        + "." + padTwo(now.getMilliseconds())
        + dif + pad(tzo / 60)
        + ":" + pad(tzo % 60);
}
exports.formatLocalDateTimeStamp = formatLocalDateTimeStamp;
function imageSource(url) {
    new Image().src = url;
}
exports.imageSource = imageSource;
var UINT32_MAX = Math.pow(2, 32) - 1;
var SIGNED_BIT_INT32 = 0x80000000;
/**
 * Returns a random uint32_t.
 */
function thirtyTwoBitUInt() {
    return Math.floor(Math.random() * UINT32_MAX);
}
/**
 * Produces a string containing the value of a int64_t (long long int)
 * in the range of [−9223372036854775808, 9223372036854775807]
 */
function randomLong() {
    var longRandString = "";
    var highOrderBits = thirtyTwoBitUInt();
    // Knock off the left most bit, to determine if end result should be +||-
    if ((highOrderBits & SIGNED_BIT_INT32) != 0) {
        highOrderBits &= ~SIGNED_BIT_INT32;
        longRandString += "-";
    }
    // Shift the random number into the 32 high order bits,
    // then add to the random low 32 bits.
    // (0x7FFFFFFF << 32) + 0xFFFFFFF;
    longRandString += sumToString([
        thirtyTwoBitShiftToString(highOrderBits),
        thirtyTwoBitUInt().toString()
    ]);
    return longRandString;
}
exports.randomLong = randomLong;
/**
 * Accepts an array of strings to be summed. String values are assumed
 * to be larger than Math.pow(2, 53). Only positive numbers are supported.
 *
 * sumToString(["91", "9"]) === "100"
 */
function sumToString(vals) {
    var longestString = Math.max.apply(null, vals.map(function (val) { return val.length; }));
    var sum = [];
    var charIdx = 1;
    var result = 0;
    while (charIdx <= longestString) {
        var resultAsString = "";
        vals.forEach(function (val) {
            if (val.length - charIdx >= 0) {
                result += +val.charAt(val.length - charIdx);
            }
        });
        resultAsString = result.toString();
        sum.unshift(resultAsString.charAt(resultAsString.length - 1));
        result = Math.floor(result / 10);
        charIdx += 1;
    }
    if (result) {
        sum.unshift(result.toString());
    }
    return sum.join("");
}
exports.sumToString = sumToString;
/**
 * Accepts a uint32_t to be shifted 32 bits.
 *
 * thirtyTwoBitShiftToString(4294967295) === "18446744069414584320"
 */
function thirtyTwoBitShiftToString(x) {
    // the largest number you can multiple by 9 without overflowing a float.
    if (x >= (Math.pow(2, 53) / 9)) {
        throw new Error("unsupported number for 32b shift.");
    }
    var shiftString = Math.pow(2, 32).toString();
    var stringsToBeSummed = [];
    for (var i = 0; i < shiftString.length; i++) {
        var result = (x * +shiftString.charAt(i)) + Array(shiftString.length - i).join("0");
        stringsToBeSummed.push(result);
    }
    return sumToString(stringsToBeSummed);
}
exports.thirtyTwoBitShiftToString = thirtyTwoBitShiftToString;

},{}],570:[function(require,module,exports){
"use strict";
/**
 * Created by chesli200 on 7/9/15.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var JSUtil_1 = require("./JSUtil");
var langMap = {
    eng: "en",
    spa: "es",
    fra: "fr",
    deu: "de",
    ita: "it",
    por: "pt"
};
function convert3to2(lang) {
    return langMap[lang] || "en";
}
exports.convert3to2 = convert3to2;
function convert2to3(lang) {
    return JSUtil_1.keyForValue(langMap, lang) || "eng";
}
exports.convert2to3 = convert2to3;

},{"./JSUtil":569}],571:[function(require,module,exports){
"use strict";
/**
 * Created by chesli200 on 2/4/16.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var _a;
var JSUtil_1 = require("./JSUtil");
/**
 * LogLevel enum. This matches jsnlog values for backwards compatibility.
 */
var LogLevel;
(function (LogLevel) {
    LogLevel[LogLevel["ALL"] = -2147483648] = "ALL";
    LogLevel[LogLevel["TRACE"] = 1000] = "TRACE";
    LogLevel[LogLevel["INFO"] = 3000] = "INFO";
    LogLevel[LogLevel["WARN"] = 4000] = "WARN";
    LogLevel[LogLevel["ERROR"] = 5000] = "ERROR";
    LogLevel[LogLevel["FATAL"] = 6000] = "FATAL";
    LogLevel[LogLevel["NONE"] = 2147483647] = "NONE";
})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));
/**
 * Set the global logging level. This will be used unless a level is
 * set explicitly on an individual `Logger`.
 */
function setLogLevel(level) {
    Logger.GLOBAL_LEVEL = level;
}
exports.setLogLevel = setLogLevel;
/**
 * Override the global array of `LoggerSink`s. These will be used unless
 * the sinks are set explicitly on an individual `Logger`.
 */
function setLogSinks(sinks) {
    Logger.GLOBAL_SINKS = sinks;
}
exports.setLogSinks = setLogSinks;
/**
 * Add a `LoggerSink` to the global array of sinks.
 */
function addLogSink(sink) {
    Logger.GLOBAL_SINKS.push(sink);
}
exports.addLogSink = addLogSink;
/**
 * LoggerSink that outputs all messages to the browser console using the
 * appropriate console logging method.
 *
 * @hidden
 */
var ConsoleSink = /** @class */ (function () {
    function ConsoleSink() {
    }
    ConsoleSink.prototype.log = function (level, name, msg) {
        msg.unshift(name + ":");
        /* WMR apply not found
        ConsoleSink.funcMap[level].apply(console, msg);
        */
    };
    ConsoleSink.funcMap = (_a = {},
        /* WMR bind was not found
        _a[LogLevel.TRACE] = console.debug.bind(console),
        _a[LogLevel.INFO] = console.info.bind(console),
        _a[LogLevel.WARN] = console.warn.bind(console),
        _a[LogLevel.ERROR] = console.error.bind(console),
        _a[LogLevel.FATAL] = console.error.bind(console, "FATAL!"),
        */
        _a);
    return ConsoleSink;
}());
exports.ConsoleSink = ConsoleSink;
/**
 * LoggerSink similar to ConsoleSink except it stringify's all JS objects so they're
 * printed out in the STB receiver log files.
 *
 * @hidden
 */
var STBConsoleSink = /** @class */ (function () {
    function STBConsoleSink() {
    }
    STBConsoleSink.prototype.log = function (level, name, msgs) {
        msgs = msgs.map(function (msg) { return JSUtil_1.isObject(msg) ? JSON.stringify(msg, null, 2) : msg; });
        //WMR fails because in ConsoleSink I commented out bind
        //ConsoleSink.funcMap[level].call(console, name + ": " + msgs.join(","));
        my_console_log(name + ": " + msgs.join(","));
    };
    return STBConsoleSink;
}());
exports.STBConsoleSink = STBConsoleSink;
/**
 * This logger class is meant to be used with `LoggerSink`s to output
 * messages in the desired method. The default sink is a `ConsoleSink` which
 * will forward all messages to the appropriate console logging method. Individual
 * loggers can use their own sinks. If no sinks are set, this will use the global
 * setting.
 *
 * @hidden
 */
var Logger = /** @class */ (function () {
    function Logger(name, options) {
        if (options === void 0) { options = {}; }
        this._sinks = [];
        this.level = options.level;
        this._name = name;
        this._sinks = options.sinks || [];
    }
    Logger.prototype._log = function (level, msg) {
        var _this = this;
        var currentLevel = this.level || Logger.GLOBAL_LEVEL;
        var currentSinks = this._sinks.length ? this._sinks : Logger.GLOBAL_SINKS;
        if (currentLevel === LogLevel.NONE) {
            return;
        }
        if (currentLevel === LogLevel.ALL || level >= currentLevel) {
            currentSinks.forEach(function (sink) { return sink.log(level, _this._name, msg.slice()); });
        }
    };
    Logger.prototype.trace = function () {
        var msg = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            msg[_i] = arguments[_i];
        }
        this._log(LogLevel.TRACE, msg);
    };
    Logger.prototype.info = function () {
        var msg = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            msg[_i] = arguments[_i];
        }
        this._log(LogLevel.INFO, msg);
    };
    Logger.prototype.warn = function () {
        var msg = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            msg[_i] = arguments[_i];
        }
        this._log(LogLevel.WARN, msg);
    };
    Logger.prototype.error = function () {
        var msg = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            msg[_i] = arguments[_i];
        }
        this._log(LogLevel.ERROR, msg);
    };
    Logger.prototype.fatal = function () {
        var msg = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            msg[_i] = arguments[_i];
        }
        this._log(LogLevel.FATAL, msg);
    };
    Logger.GLOBAL_LEVEL = LogLevel.TRACE;
    Logger.GLOBAL_SINKS = [new ConsoleSink()];
    return Logger;
}());
exports.Logger = Logger;

},{"./JSUtil":569}],572:[function(require,module,exports){
"use strict";
/**
 * Created by chesli200 on 6/22/15.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var Logger_1 = require("./Logger");
var JSUtil_1 = require("./JSUtil");
var PATTERN = /trace-id=([A-F\d]{8}-[A-F\d]{4}-[A-F\d]{4}-[A-F\d]{4}-[A-F\d]{12});/i;
/**
 * Encapsulates money trace functionality. If a money trace string is passed in,
 * the string string is parsed and the trace-id value is used. If it is not, a
 * money trace string (context) is generated.
 *
 * MoneyTrace's can be used in two ways, one as the origin, two as a node.
 * The way in which it's used depends on the arguments to the MoneyTrace
 * constructor.
 *
 * For Video fragments, the player HTML is not to be considered the originator
 * of the trace. For those traces, accept content options, and pass them
 * along.
 *
 *
 * @param {string|MoneyTraceOptions} [context]
 * @returns {object}
 * @constructor
 */
var MoneyTrace = /** @class */ (function () {
    function MoneyTrace(context) {
        this._logger = new Logger_1.Logger("MoneyTrace");
        if (typeof context === "string") {
            this._logger.warn("MoneyTrace string argument is deprecated.");
            this._parseTraceContext(context);
        }
        else if (typeof context === "object") {
            if (context.traceId) {
                this.traceId = context.traceId;
            }
            if (context.parentId) {
                this.parentId = context.parentId;
            }
            if (context.spanId) {
                this.spanId = context.spanId;
            }
            else {
                this.spanId = JSUtil_1.randomLong();
            }
        }
        else {
            this._generateTraceContext();
        }
    }
    /**
     * Create the money trace string out of traceId, parentId and spanId
     * To be used in the X-MoneyTrace header. Everytime this is called the trace
     * get's 'stepped' by generating new spanId & parentId.
     */
    MoneyTrace.prototype.createTraceMessage = function () {
        var traceMessage = "trace-id=" + this.traceId + ";parent-id=" + this.parentId + ";span-id=" + this.spanId + ";";
        this.spanId = JSUtil_1.randomLong();
        return traceMessage;
    };
    /**
     * If the context parameter is passed into the constructor, this
     * will try and parse out the trace-id using a regex pattern.
     * If the string cannot be parsed, a new money trace context will be generated.
     */
    MoneyTrace.prototype._parseTraceContext = function (context) {
        var matches = PATTERN.exec(context);
        if (!matches || matches.length < 2) {
            this._logger.warn("Unable to parse trace context. Generating random money trace");
            this._generateTraceContext();
        }
        else {
            this._logger.warn("parent-id needed when trace is not an origin");
            this._generateTraceContext(matches[1]);
        }
    };
    /**
     * Generates trace values using either the trace-id passed in or a newly generated one.
     * The spanId is created anew.
     */
    MoneyTrace.prototype._generateTraceContext = function (id) {
        if (id === void 0) { id = generateUUID(); }
        this.traceId = id;
        this.parentId = "0";
        this.spanId = JSUtil_1.randomLong();
    };
    return MoneyTrace;
}());
exports.MoneyTrace = MoneyTrace;
function generateUUID() {
    var d = new Date().getTime();
    return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function (c) {
        var r = (d + Math.random() * 16) % 16 | 0;
        d = Math.floor(d / 16);
        return (c == "x" ? r : (r & 0x3 | 0x8)).toString(16);
    });
}
exports.generateUUID = generateUUID;

},{"./JSUtil":569,"./Logger":571}],573:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var PlayerPlatformAPIEvents_1 = require("../PlayerPlatformAPIEvents");
require("rxjs/add/operator/map");
require("rxjs/add/operator/merge");
require("rxjs/add/operator/pairwise");
require("rxjs/add/operator/startWith");
require("rxjs/add/operator/withLatestFrom");
/**
 * Abstraction for two MediaProgress events to encapsulate playback information
 * between two periods of time from the playback timeline.
 */
var ProgressWindow = /** @class */ (function () {
    function ProgressWindow(prev, next, prevRate, nextRate, duration, seeking, stopped) {
        if (seeking === void 0) { seeking = false; }
        if (stopped === void 0) { stopped = false; }
        this.prev = prev;
        this.next = next;
        this.prevRate = prevRate;
        this.nextRate = nextRate;
        this.duration = duration;
        this.seeking = seeking;
        this.stopped = stopped;
    }
    ProgressWindow.prototype.equals = function (progress) {
        return this.prev === progress.prev && this.next === progress.next && this.prevRate === progress.prevRate && this.nextRate === progress.nextRate;
    };
    ProgressWindow.prototype.duringTrickPlay = function () {
        return (this.nextRate !== 1 || this.prevRate > 1 || this.prevRate < 0);
    };
    /**
     * Creates a ProgressWindow based on a pair of `MediaProgressEvent`s or a `MediaProgressEvent` with
     * a `PlayStateChanged` event. If the second argument is a `PlayStateChangedEvent` then it is
     * assumed that the `ProgressWindow` should be considered stopped.
     */
    ProgressWindow.create = function (event1, event2) {
        if (event2 instanceof PlayerPlatformAPIEvents_1.MediaProgressEvent) {
            return new ProgressWindow(event1.position, event2.position, event1.playbackSpeed, event2.playbackSpeed, event2.endposition);
        }
        else {
            return new ProgressWindow(event1.position, event1.position, 0, 0, 0, false, true);
        }
    };
    /**
     * Create an observable of `ProgressWindow`s based on an observable of `MediaProgressEvent`s.
     */
    ProgressWindow.createObservable = function (progressObservable) {
        return progressObservable
            .startWith(new PlayerPlatformAPIEvents_1.MediaProgressEvent(-1, 1, 0, 0, 0))
            .pairwise()
            .map(function (events) { return ProgressWindow.create(events[0], events[1]); });
    };
    /**
     * Create an observable of `ProgressWindow`s that can be "stopped". This means that the given a `stopObservable`
     * is merged with the progress observable to create a `ProgressWindow` object that indicates the end of the window.
     */
    ProgressWindow.createStopObservable = function (progressObservable, stopObservable) {
        return ProgressWindow.createObservable(progressObservable)
            .merge(stopObservable
            .withLatestFrom(progressObservable)
            .map(function (events) { return ProgressWindow.create(events[1], events[0]); }));
    };
    return ProgressWindow;
}());
exports.ProgressWindow = ProgressWindow;

},{"../PlayerPlatformAPIEvents":489,"rxjs/add/operator/map":263,"rxjs/add/operator/merge":265,"rxjs/add/operator/pairwise":268,"rxjs/add/operator/startWith":273,"rxjs/add/operator/withLatestFrom":279}],574:[function(require,module,exports){
"use strict";
/**
 * Created by chesli200 on 9/1/15.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var x2json_1 = require("x2json");
var xml2js = new x2json_1.X2JS();
function parse(xsct) {
    var rawToken = atob(xsct);
    var msg = xml2js.xml_str2json(rawToken)["xcal-auth-message"];
    var obj = (msg.attribute || []).reduce(function (prev, next) {
        prev[next._key] = next.__text;
        return prev;
    }, {});
    return {
        get zipCode() {
            return obj["device:xcal:locationHomeZip"] || obj["device:xcal:locationSessionZip"];
        },
        get inHome() {
            return obj["device:xcal:locationInHome"] === "true";
        },
        get accountId() {
            return obj["account:xcal:id"];
        },
        get deviceId() {
            return obj["device:xcal:id"];
        }
    };
}
exports.parse = parse;

},{"x2json":482}],575:[function(require,module,exports){
"use strict";
/**
 * Created by chesli200 on 5/27/16.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var HlsTag_1 = require("./HlsTag");
var PlayerPlatformConstants_1 = require("../../PlayerPlatformConstants");
var REQUIRED_FIELDS = ["ID", "DURATION"];
var HlsCueTag = /** @class */ (function (_super) {
    __extends(HlsCueTag, _super);
    function HlsCueTag(time, content) {
        var _this = _super.call(this, "#EXT-X-CUE", time, content, REQUIRED_FIELDS) || this;
        _this.id = _this.metadata["ID"];
        _this.duration = parseFloat(_this.metadata["DURATION"]) * PlayerPlatformConstants_1.MILLISECONDS_PER_SECOND;
        _this.psn = _this.metadata["PSN"] === "true";
        return _this;
    }
    return HlsCueTag;
}(HlsTag_1.HlsTag));
exports.HlsCueTag = HlsCueTag;

},{"../../PlayerPlatformConstants":490,"./HlsTag":578}],576:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var HlsTag_1 = require("./HlsTag");
var REQUIRED_FIELDS = [];
var HlsServiceZoneRequiredTag = /** @class */ (function (_super) {
    __extends(HlsServiceZoneRequiredTag, _super);
    function HlsServiceZoneRequiredTag(time, content) {
        return _super.call(this, "#EXT-X-SZ-REQUIRED", time, content, REQUIRED_FIELDS) || this;
    }
    return HlsServiceZoneRequiredTag;
}(HlsTag_1.HlsTag));
exports.HlsServiceZoneRequiredTag = HlsServiceZoneRequiredTag;

},{"./HlsTag":578}],577:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var HlsTag_1 = require("./HlsTag");
var REQUIRED_FIELDS = [];
var HlsSourceStreamTag = /** @class */ (function (_super) {
    __extends(HlsSourceStreamTag, _super);
    function HlsSourceStreamTag(time, content) {
        var _this = _super.call(this, "#EXT-X-SOURCE-STREAM", time, content, REQUIRED_FIELDS) || this;
        _this.id = _this.metadata["ID"];
        _this.signal = _this.metadata["SIGNAL"];
        return _this;
    }
    return HlsSourceStreamTag;
}(HlsTag_1.HlsTag));
exports.HlsSourceStreamTag = HlsSourceStreamTag;

},{"./HlsTag":578}],578:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Logger_1 = require("../Logger");
var HlsTag = /** @class */ (function () {
    function HlsTag(name, time, content, _requiredFields) {
        if (content === void 0) { content = ""; }
        if (_requiredFields === void 0) { _requiredFields = []; }
        this.name = name;
        this.time = time;
        this.content = content;
        this._requiredFields = _requiredFields;
        this.metadata = {};
        this._logger = new Logger_1.Logger("HlsTag");
        this._parseContent();
        this._logContentWarnings();
    }
    HlsTag.prototype._parseContent = function () {
        var _this = this;
        if (!this.content) {
            return;
        }
        var prefix = this.name + ":";
        if (this.content.indexOf(prefix) === 0) {
            this.content = this.content.substr(this.content.indexOf(":") + 1);
        }
        var keyValues = this.content.split(",");
        keyValues.forEach(function (kv) {
            // parse a key/value pair out of a string of key=value
            // since value can contain = characters, we look for the first = to be the kvp separator
            // any remaining = characters are considered to be part of the value
            var delim = kv.indexOf("=");
            if (delim > 0) {
                var key = kv.substring(0, delim);
                var value = kv.substring(delim + 1);
                _this.metadata[key] = value ?
                    // remove wrapping quotes if they exist
                    value.replace(/^"([^"]*)"$/, "$1") :
                    value;
            }
        });
    };
    HlsTag.prototype._logContentWarnings = function () {
        var _this = this;
        var keys = Object.keys(this.metadata);
        this._requiredFields
            .filter(function (field) { return keys.indexOf(field) === -1; })
            .forEach(function (field) { return _this._logger.warn("Required field " + field + " missing from " + _this.name + " tag"); });
    };
    return HlsTag;
}());
exports.HlsTag = HlsTag;

},{"../Logger":571}],579:[function(require,module,exports){
"use strict";
/**
 * Created by chesli200 on 5/27/16.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var _a;
var HlsTag_1 = require("./HlsTag");
var HlsCueTag_1 = require("./HlsCueTag");
var HlsTrickmodeRestrictionTag_1 = require("./HlsTrickmodeRestrictionTag");
var HlsSourceStreamTag_1 = require("./HlsSourceStreamTag");
var HlsServiceZoneRequiredTag_1 = require("./HlsServiceZoneRequiredTag");
exports.TAG_CUE = "#EXT-X-CUE";
exports.TAG_TRICKMODE_RESTRICTION = "#EXT-X-TRICKMODE-RESTRICTION";
exports.TAG_SOURCE_STREAM = "#EXT-X-SOURCE-STREAM";
exports.TAG_SERVICE_ZONE_REQUIRED = "#EXT-X-SZ-REQUIRED";
exports.TAG_CONSTRUCTORS = (_a = {},
    _a[exports.TAG_CUE] = HlsCueTag_1.HlsCueTag,
    _a[exports.TAG_TRICKMODE_RESTRICTION] = HlsTrickmodeRestrictionTag_1.HlsTrickmodeRestrictionTag,
    _a[exports.TAG_SOURCE_STREAM] = HlsSourceStreamTag_1.HlsSourceStreamTag,
    _a[exports.TAG_SERVICE_ZONE_REQUIRED] = HlsServiceZoneRequiredTag_1.HlsServiceZoneRequiredTag,
    _a);
function create(name, time, content) {
    if (content === void 0) { content = ""; }
    var ctor = exports.TAG_CONSTRUCTORS[name];
    if (ctor) {
        return new ctor(time, content);
    }
    return new HlsTag_1.HlsTag(name, time, content);
}
exports.create = create;

},{"./HlsCueTag":575,"./HlsServiceZoneRequiredTag":576,"./HlsSourceStreamTag":577,"./HlsTag":578,"./HlsTrickmodeRestrictionTag":580}],580:[function(require,module,exports){
"use strict";
/**
 * Created by chesli200 on 5/27/16.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var HlsTag_1 = require("./HlsTag");
var REQUIRED_FIELDS = ["ADID", "MODE"];
var HlsTrickmodeRestrictionTag = /** @class */ (function (_super) {
    __extends(HlsTrickmodeRestrictionTag, _super);
    function HlsTrickmodeRestrictionTag(time, content) {
        var _this = _super.call(this, "#EXT-X-TRICKMODE-RESTRICTION", time, content, REQUIRED_FIELDS) || this;
        _this.id = _this.metadata["ADID"];
        _this.mode = _this.metadata["MODE"];
        _this.limit = _this.metadata["LIMIT"];
        _this.scale = _this.metadata["SCALE"];
        return _this;
    }
    return HlsTrickmodeRestrictionTag;
}(HlsTag_1.HlsTag));
exports.HlsTrickmodeRestrictionTag = HlsTrickmodeRestrictionTag;

},{"./HlsTag":578}],581:[function(require,module,exports){
(function (global){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Application_1 = require("../Application");
var ContentOptions_1 = require("../assets/ContentOptions");
var XREErrors_1 = require("../engines/psdk/XREErrors");
var events = require("../PlayerPlatformAPIEvents");
var Logger_1 = require("../util/Logger");
var LanguageUtil_1 = require("../util/LanguageUtil");
var BaseAsset_1 = require("../assets/BaseAsset");
/**
 * Initialize the XRE event system and register listeners
 * @constructor
 */
var XREEventManager = /** @class */ (function () {
    function XREEventManager() {
        this.logger = new Logger_1.Logger("XREEventManager");
    }
    /**
     * @param player - an instance of the PlayerPlatformAPI that XREEventManager
     *                  will attach all it's listeners to.
     * @param deviceType
     */
    XREEventManager.prototype.init = function (sandbox, player, deviceType) {
        this.player = player;
        this.deviceType = deviceType;
        this.sandbox = sandbox;
        events.on("BitrateChanged", this.onBitrateChanged, {}, this);
        events.on("BufferComplete", this.onBufferComplete, {}, this);
        events.on("BufferStart", this.onBufferStart, {}, this);
        events.on("MediaEnded", this.onMediaEnded, {}, this);
        events.on("MediaFailed", this.onMediaFailed, {}, this);
        events.on("MediaOpened", this.onMediaOpened, {}, this);
        events.on("MediaProgress", this.onMediaProgress, {}, this);
        events.on("MediaWarning", this.onMediaWarning, {}, this);
        events.on("PlaybackSpeedChanged", this.onPlaybackSpeedChanged, {}, this);
        events.on("PlaybackSpeedsChanged", this.onPlaybackSpeedsChanged, {}, this);
        events.on("PlayStateChanged", this.onPlayStateChanged, {}, this);
        events.on("DRMMetadata", this.onDRMMetadata, {}, this);
        events.on("MediaRetry", this.onMediaRetry, {}, this);
        sandbox.subscribe("xre:onenteringlive", this.onEnteringLive, {}, this);
        return this;
    };
    XREEventManager.prototype.destroy = function (sandbox) {
        events.off("BitrateChanged", this.onBitrateChanged);
        events.off("BufferComplete", this.onBufferComplete);
        events.off("BufferStart", this.onBufferStart);
        events.off("MediaEnded", this.onMediaEnded);
        events.off("MediaFailed", this.onMediaFailed);
        events.off("MediaOpened", this.onMediaOpened);
        events.off("MediaProgress", this.onMediaProgress);
        events.off("MediaWarning", this.onMediaWarning);
        events.off("PlaybackSpeedChanged", this.onPlaybackSpeedChanged);
        events.off("PlaybackSpeedsChanged", this.onPlaybackSpeedsChanged);
        events.off("PlayStateChanged", this.onPlayStateChanged);
        events.off("DRMMetadata", this.onDRMMetadata);
        events.off("MediaRetry", this.onMediaRetry);
        sandbox.remove("xre:onenteringlive", this.onEnteringLive);
    };
    XREEventManager.prototype.onBitrateChanged = function (event) {
        this.logger.trace("onBitrateChanged");
        if (global.XREReceiver) {
            global.XREReceiver.onEvent("onDynamicStreamsChange", {
                bitRate: event.bitRate,
                changeReason: event.changeReason
            });
        }
    };
    XREEventManager.prototype.onBufferComplete = function () {
        this.logger.trace("onBufferComplete");
        _xrePlayerPlatform.isBuffering = false;
    };
    XREEventManager.prototype.onBufferStart = function () {
        this.logger.trace("onBufferStart");
        _xrePlayerPlatform.isBuffering = true;
    };
    XREEventManager.prototype.onMediaEnded = function () {
        this.logger.info("onMediaEnded: Stop");
        this.player.stop();
        if (global.XREReceiver) {
            //global.XREReceiver.onComplete();
            global.XREReceiver.onEvent("onMediaEnded", {});
        }
    };
    XREEventManager.prototype.onMediaFailed = function (event) {
        this.logger.trace("onMediaFailed");
        this.player.stop();
        var _a = this.getErrorCode(event.error), errorCode = _a[0], errorDesc = _a[1];
        if (global.XREReceiver) {
            XREReceiver.onEvent("onMediaFailed", {
                code: errorCode,
                description: errorDesc,
                playerRecoveryEnabled: false
            });
        }
    };
    XREEventManager.prototype.onMediaOpened = function () {
        this.logger.trace("onMediaOpened");
        // onMediaOpened never makes it the Receiver for some liveTSB tunes
        // https://ccp.sys.comcast.net/browse/ARRISXI6-596
        try {
            if (global.XREReceiver) {
                this.logger.info("onMediaOpened send onMediaOpened");
                //convert audio languages..
                var languagesISO639 = [];
                var availableLanguages = this.player.getAvailableAudioLanguages();
                for (var i = 0; i < availableLanguages.length; i++) {
                    var lang = LanguageUtil_1.convert2to3(availableLanguages[i]);
                    languagesISO639.push(lang);
                }
                global.XREReceiver.onEvent("onMediaOpened", {
                    mediaType: this.getMediaType(),
                    width: this.player.getVideoWidth(),
                    height: this.player.getVideoHeight(),
                    endPosition: this.player.getDuration(),
                    availableAudioLanguages: languagesISO639,
                    playbackSpeeds: XREEventManager.PLAYBACK_SPEEDS,
                    mediaSegments: this.player.getMediaSegments().map(function (segment) { return segment.toObject(); }),
                    availableClosedCaptionTracks: this.player.getAvailableClosedCaptionTracks(),
                    customProps: {
                        engineType: this.player.getAssetEngineType()
                    }
                });
            }
            if (this.player.getAutoPlay()) {
                this.logger.info("XREEventManager.onMediaOpened calling play()");
                this.player.play();
            }
        }
        catch (e) {
            this.logger.info(e);
        }
    };
    XREEventManager.prototype.onMediaProgress = function (event) {
        if (global.XREReceiver) {
            global.XREReceiver.onEvent("onMediaProgress", { position: event.position, startPosition: event.startposition, endPosition: event.endposition, playbackSpeed: event.playbackSpeed });
        }
        else {
            this.logger.error("onMediaProgress: no XREReceiver!");
        }
    };
    XREEventManager.prototype.onMediaRetry = function (event) {
        this.logger.trace("onMediaRetry");
        var _a = this.getErrorCode(event.data.error), errorCode = _a[0], errorDesc = _a[1];
        if (global.XREReceiver) {
            if (_xrePlayerPlatform.contentOptions.enableSelfHeal) {
                XREReceiver.onEvent("onMediaFailed", {
                    code: errorCode,
                    description: errorDesc,
                    playerRecoveryEnabled: true
                });
            }
            else {
                XREReceiver.onEvent("onMediaWarning", {
                    code: errorCode,
                    description: errorDesc
                });
            }
        }
    };
    XREEventManager.prototype.onMediaWarning = function (event) {
        this.logger.trace("onMediaWarning");
        if (global.XREReceiver) {
            global.XREReceiver.onEvent("onMediaWarning", { code: event.error.code, description: event.error.description });
        }
    };
    XREEventManager.prototype.onPlaybackSpeedChanged = function (event) {
        this.logger.trace("onPlaybackSpeedChanged");
        if (global.XREReceiver) {
            global.XREReceiver.onEvent("onPlaybackSpeedChanged", {
                speed: event.playbackSpeed,
                reason: event.reason
            });
        }
    };
    XREEventManager.prototype.onPlaybackSpeedsChanged = function (event) {
        // need to make sure we account for allowed XRE speeds
        var newSpeeds = XREEventManager.PLAYBACK_SPEEDS.filter(function (num) {
            return event.playbackSpeeds.indexOf(num) !== -1;
        });
        this.logger.trace("onPlaybackSpeedsChanged: " + JSON.stringify(newSpeeds));
        if (global.XREReceiver) {
            global.XREReceiver.onEvent("onPlaybackSpeedsChanged", { playbackSpeeds: newSpeeds });
        }
    };
    XREEventManager.prototype.onPlayStateChanged = function (event) {
        this.logger.trace("onPlayStateChanged: state = " + event.playState);
        // These are the only 3 states that XREReceiver checks for :(
        if (event.playState === "playing" || // Playing removes the undercard
            event.playState === "paused" ||
            (this.shouldSendInitializing() && event.playState === "initializing")) {
            if (global.XREReceiver) {
                global.XREReceiver.onEvent("onPlayStateChanged", { state: event.playState });
            }
        }
    };
    XREEventManager.prototype.onDRMMetadata = function (event) {
        this.logger.trace("onDRMMetadata");
        if (global.XREReceiver) {
            global.XREReceiver.onEvent("onDRMMetadata", { drmMetadataInfo: event.drmMetadataInfo });
        }
    };
    XREEventManager.prototype.onEnteringLive = function () {
        this.logger.trace("OnEnteringLive");
        if (global.XREReceiver) {
            global.XREReceiver.onEvent("onEnteringLive", {});
        }
    };
    XREEventManager.prototype.onAdditionalAuthRequired = function (locator, eventId) {
        this.logger.trace("onAdditionalAuthRequired");
        if (global.XREReceiver) {
            XREReceiver.onEvent("onAdditionalAuthRequired", { locator: locator, eventId: eventId });
        }
    };
    XREEventManager.prototype.getMediaType = function () {
        var xreMediaType = mediaTypeMap[this.player.getVideoType()];
        if (!xreMediaType) {
            throw new Error("cannot determine xre media type");
        }
        if (xreMediaType === "live" && ContentOptions_1.FOG_RE.test(this.player.asset.url)) {
            xreMediaType = "liveTSB";
        }
        this.logger.info("XRE media type: " + xreMediaType);
        return xreMediaType;
    };
    XREEventManager.prototype.shouldSendInitializing = function () {
        // RNG150 doesn't handle "initializing" correctly. Don't send if STB is RNG150
        if (this.deviceType.toLowerCase().indexOf("rng150") >= 0) {
            return false;
        }
        // we need retry logic to work for OTT content because cookie auth could fail which
        // would require a retry to obtain new cookies
        if (this.sandbox.asset.assetType === BaseAsset_1.AssetTypeMapping.OTT) {
            return false;
        }
        return true;
    };
    XREEventManager.prototype.getErrorCode = function (error) {
        var errorCode = 0;
        var errorDesc = "";
        if (this.player.getAssetEngineType() === "aamp") {
            errorCode = parseInt(error.code);
            errorDesc = error.description;
        }
        else {
            var xreError = XREErrors_1.getByErrorCode(error.code);
            errorCode = xreError.code;
            errorDesc = xreError.description;
        }
        return [errorCode, errorDesc];
    };
    XREEventManager.TYPICAL_IFRAME_INTERVAL_MILLISECONDS = 2000;
    XREEventManager.LIVE_DELAY_MILLISECONDS = 4000;
    XREEventManager.PLAYBACK_SPEEDS = [-64, -32, -16, -4, -1, 0, 1, 4, 16, 32, 64];
    /**
     * 10
     * NETWORK ERROR
     * Not able to access content due to a network error
     */
    XREEventManager.NETWORK_ERROR = 10;
    /**
     * 20
     * RESOURCE UNAVAILABLE
     * The resource was not found at the URL provided (HTTP 404)
     */
    XREEventManager.RESOURCE_UNAVAILABLE = 20;
    /**
     * 30
     * UNSUPPORTED CONTENT
     * The resource is not recognized as a format that the player supports
     */
    XREEventManager.UNSUPPORTED_CONTENT = 30;
    /**
     * 40
     * CONTENT UNAUTHORIZED
     * User is unauthorized to play content; content hasn't been paid for
     */
    XREEventManager.CONTENT_UNAUTHORIZED = 40;
    /**
     * 50
     * DRM FAILURE
     * Unable to get rights to play back content
     */
    XREEventManager.DRM_FAILURE = 50;
    /**
     * 60
     * CONTENT CANCELLED
     * A request to destroy the video resource is made prior to video loading (before onVideoMetaData or onStreamPlaying would be sent)
     */
    XREEventManager.CONTENT_CANCELLED = 60;
    /**
     * 70
     * PLAYBACK FAILURE
     * Unable to start playing content
     */
    XREEventManager.PLAYBACK_FAILURE = 70;
    /**
     * 80
     * PLAYBACK TERMINATED
     * Error occurred during playback
     */
    XREEventManager.PLAYBACK_TERMINATED = 80;
    /**
     * 90
     * INVALID PARAMS
     * Errors that relate to the state of the player such as invalid playback speed, audio language, etc.
     */
    XREEventManager.INVALID_PARAMS = 90;
    /**
     * 100
     * OTHER
     */
    XREEventManager.OTHER = 100;
    /**
     * 110
     * MEDIA_ERROR_TUNE_ERROR
     * Failure to tune to the frequency
     */
    XREEventManager.TUNE_ERROR = 110;
    /**
     * 120
     * PROGRAM_DATA_UNAVAILABLE
     * Failure to get the PAT/PMT/PID and other program data
     */
    XREEventManager.PROGRAM_DATA_UNAVAILABLE = 120;
    /**
     * 130
     * VOD_PLAYBACK_FAILURE
     * Failure in playing VOD asset
     */
    XREEventManager.VOD_PLAYBACK_FAILURE = 130;
    return XREEventManager;
}());
exports.XREEventManager = XREEventManager;
var mediaTypeMap = {
    live: "live",
    vod: "recorded"
};
Application_1.registerModule("XREEventManager", XREEventManager);

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"../Application":483,"../PlayerPlatformAPIEvents":489,"../assets/BaseAsset":537,"../assets/ContentOptions":538,"../engines/psdk/XREErrors":558,"../util/LanguageUtil":570,"../util/Logger":571}],582:[function(require,module,exports){
(function (global){
"use strict";
/**
 * Created by chesli200 on 7/9/15.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Partner config regex.
 * NOTE: if a new partner config is required, it **must** be added to the regex below.
 */
var PARTNER_CONFIG_RE = /^(comcast|cox|rogers|shaw)/;
require("./config/default.json");
require("./config/comcast.json");
require("./config/cox.json");
require("./config/cox-dev.json");
require("./config/shaw.json");
require("./config/shaw-dev.json");
require("./config/rogers.json");
require("./config/rogers-dev.json");
require("polyfill-function-prototype-bind");
var Logger_1 = require("../util/Logger");
var XREPlayerPlatform_1 = require("./XREPlayerPlatform");
var ConfigurationManager_1 = require("../ConfigurationManager");
var PlayerPlatformAPI_1 = require("../PlayerPlatformAPI");
var JSUtil_1 = require("../util/JSUtil");
var app = require("../Application");
require("./XREEventManager");
var logger = new Logger_1.Logger("XREMain");
var configMgr = ConfigurationManager_1.ConfigurationManager.getInstance();
// global variables
global._xrePlayerPlatform = null;
global._xreEventManager = null;
global._playerPlatformAPI = null;
/**
 * URL query parameters
 *
 * @property deviceType
 * @property estbMacAddress
 * @property partnerId
 * @property receiverVersion
 * @property receiverPlatform
 * @type {*|Object}
 */
//WMR location.search not found
var query = { partnerId:"comcast", receiverPlatform:"pace_XI3_65.86.55p43d5EXP", estbMacAddress:"70:85:c6:d6:58:58", receiverVersion:"65.86.55p43d5", deviceType:"ipstb", receiverType:"Native", protocolVersion:"2.15.0.0", buildType:""} 
/*JSUtil_1.parseQueryParams(location.search);*/ 
var partnerId = parsePartnerId(query.partnerId);
var deviceVersion = parseDeviceVersion(query.receiverPlatform);
var deviceID = query.estbMacAddress;
var analyticsAppNames = {
    "xg1": "Xg1",
    "xg1v3": "Xg1v3",
    "xg2": "Xg2",
    "xi3": "Xi3",
    "xi4": "Xi4"
};
var rectNeedsUpdate = false;
// setup deprecated global functions
Object.getOwnPropertyNames(XREPlayerPlatform_1.XREPlayerPlatform.prototype).forEach(createGlobalFunction);

//WMR onXREReady is now called by onRemoteReadySuccess instead of by the Receiver
global.onXREReady = function () {
my_console_log("onXREReady 1");
    if (typeof XREReceiver === "undefined") {
        throw new Error("XREReceiver not available");
    }
my_console_log("onXREReady 2");
    global._xrePlayerPlatform = new XREPlayerPlatform_1.XREPlayerPlatform({
        configurationManager: configMgr,
        deviceID: deviceID,
    });
    my_console_log("onXREReady global._xrePlayerPlatfor=" + global._xrePlayerPlatform);
    try {
        // Configuration setup
//        configMgr.onSuccess(onConfigLoaded);//WMR stderr: Publish channel:configurationLoaded error <TypeError: Cannot read property 'call' of undefined> from subscriber - undefined::onConfigLoaded
        configMgr.onFailure(onConfigFailed);
        var partnerConfig = PARTNER_CONFIG_RE.test(partnerId) ? partnerId : "default";
        var __configPath = "./config";//WMR __configPath wasn't set
        var configUrl = __configPath + "/" + partnerConfig.toLowerCase() + ".json";// + location.search;WMR no location.search 
        configMgr.loadConfiguration(configUrl);
    }
    catch (error) {
        onReadyFailed("Couldn't create the PlayerPlatformAPI: " + error.toString());
    }
    onConfigLoaded({
  "productType": "cdvr",
  "drmNetworkRequestTimeout": 10000,
  "licenseServerUrl": "https://mds.ccp.xcal.tv",

  "easNetworkRequestTimeout": 10000,
  "zipToFipsEndPoint": "https://easip-client-po.ccp.xcal.tv/easws/api/fips/zip/",
  "alertServiceEndPoint": "https://easip-client-po.ccp.xcal.tv/easws/api/alert/active/fipscode/",
  "easUpdateInterval": 15000,
  "easAlertRepeat": 1,
  "easAlertFontSize": "20.0f",
  "easAlertFont": "Helvetica-Bold",

  "analyticsNetworkRequestTimeout": 10000,
  "analyticsEndPoint": "https://analytics.xcal.tv/comcast/player",
  "analyticsProtocol": "2.0",
  "analyticsDeviceType": "STB",
  "maxBatchSize": 10,
  "maxQueueSize": 100,
  "batchInterval": 5000,
  "fogAnalyticsEndPoint": "https://analytics.xcal.tv/comcast/fog",
  "failOnNetworkDown": true,

  "playerNetworkRequestTimeout": 10000,
  "heartbeatInterval": 60000,
  "autoplay": true,
  "retryInterval": 1000,
  "manifestManipulatorRetries": 1,
  "manifestManipulatorTimeout": 4000,
  "retryOnMediaFailed": true,
  "updateInterval": 1000,
  "partnerId": "Comcast",
  "enableAds": false,
  "stalledTimeout": 10000,

  "defaultAsset": {
    "cdnRedundant": false,
    "maximumRetries": 5,
    "ddPlus": false,
    "initialPolicy": 0,
    "playingPolicy": 2,
    "initialBitrate": 0,
    "maximumBitrate": 12000000,
    "playbackStalledEnabled": true,
    "minimumBitrate": 100000,
    "initialBufferTime": 4000,
    "playingVODBufferTime": 15000,
    "playingLinearBufferTime": 15000,
    "placementRequestEndPoint": "https://ccpvab-po-v103-p.po.ccp.cable.comcast.com/PlacementRequest",
    "placementStatusNotificationEndPoint": "https://altcon-vexdr-prod1.ccp.xcal.tv/vex-director/PlacementStatusNotification"
  },

  "ott": {
    "freeWheelConfig": {
      "mvpdString": "xtv",
      "playerProfileMvpd": "384777:comcast_sports",
      "freewheelPlatform": "ott_x1",
      "playerProfilePlatform": "x1_js",
      "networkId": "384777",
      "serverUrl": "https://5df09.v.fwmrm.net/",
      "contentType": "application/x-mpegurl",
      "preventFreeWheelTrackingEvents": true
    }
  },

  "title6Vod": {
      "ddPlus": true
  },

  "title6Linear": {
      "cdnRedundant": true,
      "forceHttps": true
  },

  "xi3": {
    "enableAds": true,
    "defaultAsset": {
      "playingVODBufferTime": 24000
    }
  },
  "xi4": {
    "defaultAsset": {
      "playingVODBufferTime": 24000,
      "maximumBitrate": 14000000
    }
  },
  "xid": {
    "enableAds": true,
    "defaultAsset": {
      "playingVODBufferTime": 24000,
      "maximumBitrate": 14000000
    }
  },
  "xi5": {
    "enableAds": true,
    "defaultAsset": {
      "playingVODBufferTime": 24000
    }
  },
  "xg1v4": {
    "defaultAsset": {
      "maximumBitrate": 20000000
    }
  }
});
};
function onReadyFailed(description) {
    var debug = { partnerId: partnerId, deviceVersion: deviceVersion, query: query };
    console.error("XREReceiver.onReadyFailed");
    console.error(description + " --- " + JSON.stringify(debug, null, 2));
    XREReceiver.onEvent("onReadyFailed", { description: description, debug: debug });
}
function onConfigLoaded(values) {
    logger.info("Configuration loaded: " + JSON.stringify(values, null, 2));
    var device = deviceType(query.receiverPlatform) || "";
    configMgr.extendConfiguration(device.toLowerCase(), ConfigurationManager_1.ConfigurationManager.DEFAULT_ASSET);
    configMgr.update(ConfigurationManager_1.ConfigurationManager.DRM_ENABLED, false);
    configMgr.update(ConfigurationManager_1.ConfigurationManager.PARTNER_ID, values.partnerId || partnerId);
    // Initialize the Player and Analytics
    var params = {
        configurationManager: configMgr,
        //videoElement: videoDiv,
        deviceID: deviceID
    };
    Logger_1.setLogSinks([new Logger_1.STBConsoleSink()]);
    global._playerPlatformAPI = new PlayerPlatformAPI_1.PlayerPlatformAPI(params);
    global._xreEventManager = app.startModule("XREEventManager", global._playerPlatformAPI, query.deviceType);//WMR had to add global. in front of _playerPlatformAPI to get it to work
    logVersion();
    if (shouldEnableAds()) {
        my_console_log("enabling dynamic ad insertion");
        global._xrePlayerPlatform.enableAds = true;
    }
    else {
        my_console_log("dynamic ad insertion disabled");
    }
    if (rectNeedsUpdate) {
        rectNeedsUpdate = false;
        //UpdateVideoRect();//WMR no videoDiv
    }
    global.XREReceiver.onEvent("onReady", {});
    var deviceName = analyticsAppNames[device.toLowerCase()] || device.toUpperCase();
    var appName = configMgr.get(ConfigurationManager_1.ConfigurationManager.ANALYTICS_DEVICE_TYPE) + "-" + deviceName;
    // Enable Analytics as part of player setup
/* WMR got stuck so i disabled for now
    global._playerPlatformAPI.configureAnalytics({
        appName: appName,
        appVersion: query.receiverVersion,
        deviceId: query.estbMacAddress,
        deviceVersion: parseDeviceVersion(query.receiverPlatform),
        deviceName: query.deviceType,
        xsctPartnerId: parsePartnerId(query.partnerId),
        inHomeState: function () { return "inHome"; },
        messageOptions: global._xrePlayerPlatform.messageOptions
    });
*/
}
function logVersion() {
    try {
        my_console_log("PlayerPlatformAPI: " + global._playerPlatformAPI.getVersion());
        my_console_log("AdobePSDK: " + AdobePSDK.version.description);
    }
    catch (error) {
        my_console_log("Error retrieving version info.");
    }
}
function parsePartnerId(id) {
    // Default to comcast for any falsy value
    return (id || "comcast").toLowerCase();
}
function shouldEnableAds() {
    return configMgr.get(ConfigurationManager_1.ConfigurationManager.ENABLE_ADS) && configMgr.get(ConfigurationManager_1.ConfigurationManager.ENABLE_ADS) !== "false";
}
function onConfigFailed(error, url) {
    onReadyFailed("Config loading failed with error: " + error + " -- URL: " + url);
}
function deviceType(receiverPlatform) {
    if (typeof receiverPlatform === "string") {
        return receiverPlatform.split("_")[1];
    }
}
function parseDeviceVersion(receiverPlatform) {
    if (query.receiverVersion) {
        return query.receiverVersion;
    }
    if (typeof receiverPlatform === "string") {
        return receiverPlatform.split("_")[2];
    }
}
/**
 * sets a function with the given name on the global object that
 * forwards to _xrePlayerPlatform
 *
 * @param name - name of function
 */
function createGlobalFunction(name) {
    // don't create globals for these methods
    if (name === "constructor" || name === "onCallMethod") {
        return;
    }
    global[name] = function () {
        logger.warn("WARNING! DEPRECATED! Please use _xrePlayerPlatform");
        _xrePlayerPlatform[name].apply(_xrePlayerPlatform, arguments);
    };
}
/**
 * Local function to handle resize events from browser
 */
global.onBodyResize = function () {
    logger.info("onBodyResize calling UpdateVideoRect");
    UpdateVideoRect();
};
function UpdateVideoRect() {
    var vidElement = document.getElementById("videoDiv");
    var rect = vidElement.getBoundingClientRect();
    logger.info("UpdateVideoRect videoDiv = " + rect.left + ", " + rect.top + " - " + rect.width + " x " + rect.height);
    if (!global._playerPlatformAPI) {
        rectNeedsUpdate = true;
        return;
    }
    global._playerPlatformAPI.setDimensionsOfVideo(rect.width, rect.height);
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"../Application":483,"../ConfigurationManager":484,"../PlayerPlatformAPI":488,"../util/JSUtil":569,"../util/Logger":571,"./XREEventManager":581,"./XREPlayerPlatform":583,"./config/comcast.json":584,"./config/cox-dev.json":585,"./config/cox.json":586,"./config/default.json":587,"./config/rogers-dev.json":588,"./config/rogers.json":589,"./config/shaw-dev.json":590,"./config/shaw.json":591,"polyfill-function-prototype-bind":164}],583:[function(require,module,exports){
(function (global){
"use strict";
/* tslint:disable:no-console */
Object.defineProperty(exports, "__esModule", { value: true });
var BaseAsset_1 = require("../assets/BaseAsset");
var ConfigurationManager_1 = require("../ConfigurationManager");
var LanguageUtil_1 = require("../util/LanguageUtil");
var SessionManager_1 = require("../handlers/SessionManager");
var AssetFactory_1 = require("../assets/AssetFactory");
/**
 * XREPlayerPlatform is XRE's wrapper to PlayerPlatformAPI
 * it allows for dynamic function calls based on name and params
 * via the onCallMethod, which is a function handler
 * to the XREReceiver's callMethod signal.
 */
var XREPlayerPlatform = /** @class */ (function () {
    function XREPlayerPlatform(parameters) {
my_console_log("XREPlayerPlatform enter");
        var _this = this;
        this.isBuffering = false;
        this.enableAds = false;
my_console_log("XREPlayerPlatform enter 1");
        this.ottAuthCallback = function (locator) {
            return new Promise(function (resolve) {
                _this.inFlightAuthResolve = resolve;
                _this.inFlightEventId = Math.random().toString().substring(2, 12);
                global._xreEventManager.onAdditionalAuthRequired(locator, _this.inFlightEventId);
            });
        };
my_console_log("XREPlayerPlatform enter 2");
        //XREReceiver.callMethod.connect(this.onCallMethod.bind(this)); WMR
        this.deviceID = parameters.deviceID;
        this.configMgr = parameters.configurationManager;
my_console_log("XREPlayerPlatform enter 3");
        this.messageOptions = {
            preDispatch: function (message) {
                // TODO(estobb200): This requires knowledge of the message formats
                // that should maybe only occur within the provider, or message itself.
                if (_this.contentOptions) {
                    if (_this.contentOptions.accountID) {
                        message.APP.SERVICE_ACCOUNT_ID = _this.contentOptions.accountID;
                    }
                    if (_this.contentOptions.deviceID) {
                        message.DEV.PHYSICAL_DEVICE_ID = _this.contentOptions.deviceID;
                    }
                }
            }
        };
my_console_log("XREPlayerPlatform exit");
    }
    Object.defineProperty(XREPlayerPlatform.prototype, "contentOptions", {
        get: function () {
            return this._contentOptions;
        },
        enumerable: true,
        configurable: true
    });
    XREPlayerPlatform.prototype.onCallMethod = function (name, params) {
        my_console_log("XREPlayerPlatform:onCallMethod: " + name);
        // An error is being thrown during playerPlatform.setAsset that gets
        // incorrectly reported as no such method `setContentUrl`.
        // https://ccp.sys.comcast.net/browse/ARRISXI6-596
        try {
            if (typeof this[name] === "function") {
                this[name].apply(this, params);
            }
            else {
                console.error("XREPlayerPlatform: no such method named: " + name);
            }
        }
        catch (e) {
            console.error("Error occurred calling: " + name);
            console.error(e);
        }
    };
    XREPlayerPlatform.prototype.cleanup = function () {
        global._playerPlatformAPI.destroy();
        my_console_log("XREPlayerPlatform:cleanup");
        XREReceiver.callMethod.connect(new Function());
        XREReceiver.gotRedirectionURL.connect(new Function());
        XREReceiver.onEvent("onCleanUp", {});
    };
    /**
     * Content options from AVEWebVideoItem as JSON
     * @param {object} options
     */
    XREPlayerPlatform.prototype.setContentOptions = function (options) {
        if (!options) {
            console.warn("WARNING: invalid contentOptions: " + options);
            options = {};
        }
        try {
            if (typeof options === "string") {
                this._contentOptions = JSON.parse(options);
            }
            else {
                this._contentOptions = options;
            }
            my_console_log("Updated content options: " + JSON.stringify(this.contentOptions));
        }
        catch (error) {
            console.error("Error parsing content options, setting to empty object");
            this._contentOptions = {};
        }
        if (typeof this.contentOptions.parentId === "number") {
            console.warn("parentId should be a string, number is ignored.");
            this.contentOptions.parentId = null;
        }
        if (typeof this.contentOptions.spanId === "number") {
            console.warn("spanId should be a string, number is ignored.");
            this.contentOptions.spanId = null;
        }
        if (this.contentOptions.traceId) {
            // Tell session manager to use our trace_id
            SessionManager_1.SessionManager.instance.setCustomTraceId(true);
            // Set our trace_id
            SessionManager_1.SessionManager.instance.moneyTrace.traceId = this.contentOptions.traceId;
        }
        if (this.contentOptions.spanId) {
            SessionManager_1.SessionManager.instance.moneyTrace.spanId = this.contentOptions.spanId;
        }
        if (this.contentOptions.parentId) {
            SessionManager_1.SessionManager.instance.moneyTrace.parentId = this.contentOptions.parentId;
        }
        my_console_log("WMR setContentOptions exit");
    };
    XREPlayerPlatform.prototype.setAVESessionToken = function (token) {
        try {
            this.sessionToken = JSON.parse(token)["client:accessToken"];
        }
        catch (err) {
            console.error("Failed to parse token string: " + err.message);
        }
    };
    /**
     * Gets manifest manipulator ad configuration for usage on set top box.
     * The set top box sometimes utilizes a manifest manipulator service which can proxy freewheel
     * requests.
     */
    XREPlayerPlatform.prototype._getManifestManipulatorAdConfig = function (contentOptions) {
        var defaultCfg = {};
        var fwCfg = ConfigurationManager_1.ConfigurationManager.getInstance().getByAssetType(contentOptions.assetType, ConfigurationManager_1.ConfigurationManager.FREE_WHEEL_CONFIG, defaultCfg);
        var result = {
            type: "manifest",
            terminalAddress: this.deviceID,
            acrURL: this.configMgr.get(ConfigurationManager_1.ConfigurationManager.PLACEMENT_STATUS_NOTIFICATION_URL_END_POINT)
        };
        // Plug free-wheel values in for proxy if we had configuration for freewheel
        if (fwCfg !== defaultCfg) {
            result.networkId = fwCfg.networkId;
            result.playerProfile = fwCfg.networkId + ":" + fwCfg.mvpdString + "_TVE_vod_" + fwCfg.freewheelPlatform;
            result.siteSectionId = fwCfg.mvpdString + "_" + (this.contentOptions.brand || "nobrand") + "_vod_" + fwCfg.freewheelPlatform;
            result.assetId = fwCfg.mvpdString + "_" + contentOptions.mediaGuid;
            result.countryCode = fwCfg.countryCode;
            result.postalCode = this._contentOptions.postalCode;
            result.serverUrl = fwCfg.serverUrl;
        }
        return result;
    };
    XREPlayerPlatform.prototype._configureAds = function (contentOptions) {
        var adConf = {
            type: "none"
        };
        if (this.enableAds && this.shouldUseManifestAds()) {
            return this._getManifestManipulatorAdConfig(contentOptions);
        }
        else if (this.shouldUseCLinearAds()) {
            var clinearConf = adConf;
            clinearConf.type = "clinear";
            clinearConf.terminalAddress = this.deviceID;
            return clinearConf;
        }
        return adConf;
    };
    /**
     * Determines if we should use clinear ads.
     * LINEAR currently should use manifest ads.
     * @returns true iff we should use the clinear ad manager
     */
    XREPlayerPlatform.prototype.shouldUseCLinearAds = function () {
        return this.contentOptions && this.contentOptions.playbackMode === "LINEAR_TV";
    };
    /**
     * Determines if we should use manifest ads.
     * Manifest ads should be configured only for VOD assets.
     * @returns true iff we should use the manifest manipulator ad manager
     */
    XREPlayerPlatform.prototype.shouldUseManifestAds = function () {
        return !this.contentOptions || (this.contentOptions.playbackMode === "VOD" && !this.isIVOD());
    };
    XREPlayerPlatform.prototype.enableAutoPlay = function (flag) {
        my_console_log("XREPlayerPlatform:enableAutoPlay: " + flag);
        global._playerPlatformAPI.setAutoPlay(flag);
    };
    /**
     * @param url as .m3u8
     */
    XREPlayerPlatform.prototype.setContentUrl = function (url) {
        my_console_log("XREPlayerPlatform:setContentUrl: " + url);
        this.setAsset(url);
    };
    XREPlayerPlatform.prototype.createAsset = function (url) {
        var extension = BaseAsset_1.getUrlExtension(url);
        var options = this.mapContentOptions();
        if (url.startsWith("comcast:ott-stream")) {
            options.assetType = BaseAsset_1.OTT;
            options.ottAuthCallback = this.ottAuthCallback;
        }
        else {
            this.inFlightAuthResolve = undefined;
            this.inFlightEventId = undefined;
        }
        if (extension === "mpd") {
            options.assetEngine = "aamp";
            // disable DD+ until production DASH content is ready
            options.surround = false;
        }
        else {
            if (this.contentOptions.playerEngine === "AAMP") {
                options.assetEngine = "aamp";
            }
            else if (this.contentOptions.playerEngine === "PSDK") {
                options.assetEngine = "psdk";
            }
            options.adConfig = this._configureAds(options);
        }
        my_console_log("contentOptions: " + JSON.stringify(options));
        return AssetFactory_1.AssetFactory.create(url, options);
    };
    XREPlayerPlatform.prototype.mapContentOptions = function () {
        return {
            assetType: this.getAssetTypeFromXREContentOptions(),
            assetId: this.contentOptions.assetID || undefined,
            providerId: this.contentOptions.providerID || undefined,
            streamId: this.contentOptions.streamId || this.contentOptions.streamID || undefined,
            recordingId: this.contentOptions.recordingID || undefined,
            resumePosition: this.contentOptions.position,
            isContentPosition: false,
            mediaGuid: this.contentOptions.mediaGuid,
            easPath: this.contentOptions.easContentID || undefined,
            authToken: this.sessionToken
        };
    };
    XREPlayerPlatform.prototype.setAsset = function (url) {
        my_console_log("setAsset: " + url);
        var asset = this.createAsset(url);
        global._playerPlatformAPI.setAsset(asset);
    };
    XREPlayerPlatform.prototype.setOffset = function (x, y) {
        my_console_log("XREPlayerPlatform:setOffset: " + x + "x" + y);
        global._playerPlatformAPI.setOffset(x, y);
    };
    XREPlayerPlatform.prototype.setScale = function (scaleX, scaleY) {
        my_console_log("XREPlayerPlatform:setScale: " + scaleX + "x" + scaleY);
        if (global._playerPlatformAPI) {
            global._playerPlatformAPI.setScale(scaleX, scaleY);
        }
    };
    XREPlayerPlatform.prototype.play = function () {
        my_console_log("XREPlayerPlatform:play");
        global._playerPlatformAPI.play();
    };
    XREPlayerPlatform.prototype.stop = function () {
        my_console_log("XREPlayerPlatform:stop");
        global._playerPlatformAPI.stop();
    };
    XREPlayerPlatform.prototype.pause = function () {
        my_console_log("XREPlayerPlatform:pause");
        global._playerPlatformAPI.pause();
    };
    XREPlayerPlatform.prototype.seek = function (milliSeconds) {
        my_console_log("XREPlayerPlatform:seek");
        var status = global._playerPlatformAPI.getPlayerStatus();
        my_console_log("XREPlayerPlatform:seek: " + milliSeconds + " status=" + status);
        global._playerPlatformAPI.setPosition(milliSeconds);
    };
    XREPlayerPlatform.prototype.seekToLive = function () {
        my_console_log("XREPlayerPlatform:seekToLive");
        global._playerPlatformAPI.seekToLive();
    };
    XREPlayerPlatform.prototype.setSpeed = function (speed, overshootCorrection) {
        my_console_log("XREPlayerPlatform:setSpeed: " + speed + " overshootCorrection: " + overshootCorrection);
        global._playerPlatformAPI.setSpeed(speed, overshootCorrection);
    };
    XREPlayerPlatform.prototype.requestStatus = function () {
        my_console_log("XREPlayerPlatform:requestStatus");
        var live = global._playerPlatformAPI.getVideoType() === "live";
        var capacity = global._playerPlatformAPI.getBufferTime();
        var percent = 0;
        if (capacity !== 0) {
            percent = global._playerPlatformAPI.getBufferFilledLength() / capacity;
        }
        XREReceiver.onEvent("onVideoStatus", {
            width: global._playerPlatformAPI.getVideoWidth(),
            height: global._playerPlatformAPI.getVideoHeight(),
            duration: global._playerPlatformAPI.getDuration(),
            position: global._playerPlatformAPI.getCurrentPosition(),
            isLive: live,
            isBuffering: this.isBuffering,
            bufferPercentage: percent,
            connectionURL: global._playerPlatformAPI.asset.url,
            dynamicProps: {},
            netStreamInfo: {}
        });
    };
    XREPlayerPlatform.prototype.setVolume = function (volume) {
        my_console_log("XREPlayerPlatform:setVolume: " + volume);
        // XRE sends volume as an int, PlayerPlatform expects it as a float.
        global._playerPlatformAPI.setVolume((volume / 100.0));
    };
    XREPlayerPlatform.prototype.setPreferredAudioLanguage = function (lang) {
        my_console_log("XREPlayerPlatform:setPreferredAudioLanguage: " + lang);
        var langCorrected = LanguageUtil_1.convert3to2(lang);
        global._playerPlatformAPI.setPreferredAudioLanguage(langCorrected);
    };
    XREPlayerPlatform.prototype.setPreferredZoomSetting = function (setting) {
        my_console_log("XREPlayerPlatform: setPreferredZoomSetting");
        global._playerPlatformAPI.setPreferredZoomSetting(setting);
    };
    XREPlayerPlatform.prototype.setVideoMute = function (mute) {
        my_console_log("XREPlayerPlatform:setVideoMute: " + mute);
        global._playerPlatformAPI.setAudioOnly(mute);
    };
    XREPlayerPlatform.prototype.getContentPosition = function () {
        return global._playerPlatformAPI.getContentPosition();
    };
    XREPlayerPlatform.prototype.setLiveFetchHoldTime = function () {
        console.warn("XREPlayerPlatform:setLiveFetchHoldTime(" + JSON.stringify(arguments) + ") not supported.");
    };
    XREPlayerPlatform.prototype.setAdditionalAuth = function (auth) {
        if (!auth) {
            console.error("ott auth result is not defined");
            return;
        }
        if (!auth.eventId) {
            console.error("ott auth result event id is not defined");
            return;
        }
        if (!this.inFlightAuthResolve) {
            console.warn("unexpected ott auth response");
            return;
        }
        if (auth.eventId !== this.inFlightEventId) {
            console.warn("ott auth response event id does not match expected event id; ignoring auth result");
            return;
        }
        this.inFlightAuthResolve(auth);
        this.inFlightAuthResolve = undefined;
        this.inFlightEventId = undefined;
    };
    /**
     * Returns correct playerplatform assetType based on XREContentOptions values
     * @returns {string}
     */
    XREPlayerPlatform.prototype.getAssetTypeFromXREContentOptions = function () {
        var assetType = this.contentOptions.assetType || exports.PLAYBACK_MODE_TO_ASSET_TYPE_MAP[this.contentOptions.playbackMode];
        if (this.isIVOD()) {
            assetType = "IVOD";
        }
        return assetType;
    };
    /**
     * Returns true, if the asset is to be treated as an IVOD asset
     * @returns {boolean}
     */
    XREPlayerPlatform.prototype.isIVOD = function () {
        return this.contentOptions.playbackMode === "VOD" &&
            this.contentOptions.extendedPlaybackMode === "IVOD" &&
            this.contentOptions.isIVOD;
    };
    return XREPlayerPlatform;
}());
exports.XREPlayerPlatform = XREPlayerPlatform;
exports.PLAYBACK_MODE_TO_ASSET_TYPE_MAP = {
    "VOD": "T6_VOD",
    "DVR": "CDVR",
    "LINEAR_TV": "T6_LINEAR"
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"../ConfigurationManager":484,"../assets/AssetFactory":536,"../assets/BaseAsset":537,"../handlers/SessionManager":565,"../util/LanguageUtil":570}],584:[function(require,module,exports){
module.exports={
  "productType": "cdvr",
  "drmNetworkRequestTimeout": 10000,
  "licenseServerUrl": "https://mds.ccp.xcal.tv",

  "easNetworkRequestTimeout": 10000,
  "zipToFipsEndPoint": "https://easip-client-po.ccp.xcal.tv/easws/api/fips/zip/",
  "alertServiceEndPoint": "https://easip-client-po.ccp.xcal.tv/easws/api/alert/active/fipscode/",
  "easUpdateInterval": 15000,
  "easAlertRepeat": 1,
  "easAlertFontSize": "20.0f",
  "easAlertFont": "Helvetica-Bold",

  "analyticsNetworkRequestTimeout": 10000,
  "analyticsEndPoint": "https://analytics.xcal.tv/comcast/player",
  "analyticsProtocol": "2.0",
  "analyticsDeviceType": "STB",
  "maxBatchSize": 10,
  "maxQueueSize": 100,
  "batchInterval": 5000,
  "fogAnalyticsEndPoint": "https://analytics.xcal.tv/comcast/fog",
  "failOnNetworkDown": true,

  "playerNetworkRequestTimeout": 10000,
  "heartbeatInterval": 60000,
  "autoplay": true,
  "retryInterval": 1000,
  "manifestManipulatorRetries": 1,
  "manifestManipulatorTimeout": 4000,
  "retryOnMediaFailed": true,
  "updateInterval": 1000,
  "partnerId": "Comcast",
  "enableAds": false,
  "stalledTimeout": 10000,

  "defaultAsset": {
    "cdnRedundant": false,
    "maximumRetries": 5,
    "ddPlus": false,
    "initialPolicy": 0,
    "playingPolicy": 2,
    "initialBitrate": 0,
    "maximumBitrate": 12000000,
    "playbackStalledEnabled": true,
    "minimumBitrate": 100000,
    "initialBufferTime": 4000,
    "playingVODBufferTime": 15000,
    "playingLinearBufferTime": 15000,
    "placementRequestEndPoint": "https://ccpvab-po-v103-p.po.ccp.cable.comcast.com/PlacementRequest",
    "placementStatusNotificationEndPoint": "https://altcon-vexdr-prod1.ccp.xcal.tv/vex-director/PlacementStatusNotification"
  },

  "ott": {
    "freeWheelConfig": {
      "mvpdString": "xtv",
      "playerProfileMvpd": "384777:comcast_sports",
      "freewheelPlatform": "ott_x1",
      "playerProfilePlatform": "x1_js",
      "networkId": "384777",
      "serverUrl": "https://5df09.v.fwmrm.net/",
      "contentType": "application/x-mpegurl",
      "preventFreeWheelTrackingEvents": true
    }
  },

  "title6Vod": {
      "ddPlus": true
  },

  "title6Linear": {
      "cdnRedundant": true,
      "forceHttps": true
  },

  "xi3": {
    "enableAds": true,
    "defaultAsset": {
      "playingVODBufferTime": 24000
    }
  },
  "xi4": {
    "defaultAsset": {
      "playingVODBufferTime": 24000,
      "maximumBitrate": 14000000
    }
  },
  "xid": {
    "enableAds": true,
    "defaultAsset": {
      "playingVODBufferTime": 24000,
      "maximumBitrate": 14000000
    }
  },
  "xi5": {
    "enableAds": true,
    "defaultAsset": {
      "playingVODBufferTime": 24000
    }
  },
  "xg1v4": {
    "defaultAsset": {
      "maximumBitrate": 20000000
    }
  }
}

},{}],585:[function(require,module,exports){
module.exports={
  "productType": "cdvr",
  "drmNetworkRequestTimeout": 10000,

  "easNetworkRequestTimeout": 10000,
  "zipToFipsEndPoint": "https://wm1-easip-client.ccp.xcal.tv/eas/api/fips/zip/",
  "alertServiceEndPoint": "https://wm1-easip-client.ccp.xcal.tv/eas/api/alert/active/fipscode/",
  "easUpdateInterval": 15000,
  "easAlertRepeat": 1,
  "easAlertFontSize": "20.0f",
  "easAlertFont": "Helvetica-Bold",

  "analyticsNetworkRequestTimeout": 10000,
  "analyticsEndPoint": "https://analytics.xcal.tv/cox/player",
  "analyticsProtocol": "2.0",
  "analyticsDeviceType": "STB",
  "maxBatchSize": 10,
  "maxQueueSize": 100,
  "batchInterval": 5000,

  "playerNetworkRequestTimeout": 10000,
  "heartbeatInterval": 60000,
  "autoplay": true,
  "retryInterval": 1000,
  "maximumRetries": 5,
  "manifestManipulatorRetries": 1,
  "manifestManipulatorTimeout": 4000,
  "retryOnMediaFailed": true,
  "updateInterval": 1000,
  "partnerId": "Cox",
  "enableAds": true,

  "defaultAsset": {
    "initialPolicy": 0,
    "playingPolicy": 2,
    "initialBitrate": 0,
    "maximumBitrate": 12000000,
    "playbackStalledEnabled": true,
    "minimumBitrate": 100000,
    "initialBufferTime": 4000,
    "playingVODBufferTime": 15000,
    "playingLinearBufferTime": 15000,
    "placementRequestEndPoint": "https://ccpvab-po-v103-p.po.ccp.cable.comcast.com/PlacementRequest",
    "placementStatusNotificationEndPoint": "https://altcon-vexdir-cox-stage.ccp.xcal.tv/vex-director/PlacementStatusNotification"
  },
  
  "title6Vod": {
      "ddPlus": true
  },

  "xi3": {
    "defaultAsset": {
      "playingVODBufferTime": 24000
    }
  },
  "xi4": {
    "defaultAsset": {
      "playingVODBufferTime": 24000,
      "maximumBitrate": 14000000
    }
  },
  "xid": {
    "defaultAsset": {
      "playingVODBufferTime": 24000,
      "maximumBitrate": 14000000
    }
  }
}

},{}],586:[function(require,module,exports){
module.exports={
  "productType": "cdvr",
  "drmNetworkRequestTimeout": 10000,

  "easNetworkRequestTimeout": 10000,
  "zipToFipsEndPoint": "https://wm1-easip-client.ccp.xcal.tv/eas/api/fips/zip/",
  "alertServiceEndPoint": "https://wm1-easip-client.ccp.xcal.tv/eas/api/alert/active/fipscode/",
  "easUpdateInterval": 15000,
  "easAlertRepeat": 1,
  "easAlertFontSize": "20.0f",
  "easAlertFont": "Helvetica-Bold",

  "analyticsNetworkRequestTimeout": 10000,
  "analyticsEndPoint": "https://analytics.xcal.tv/cox/player",
  "analyticsProtocol": "2.0",
  "analyticsDeviceType": "STB",
  "maxBatchSize": 10,
  "maxQueueSize": 100,
  "batchInterval": 5000,

  "playerNetworkRequestTimeout": 10000,
  "heartbeatInterval": 60000,
  "autoplay": true,
  "retryInterval": 1000,
  "networkDownTimeout": 0,
  "maximumRetries": 5,
  "manifestManipulatorRetries": 1,
  "manifestManipulatorTimeout": 4000,
  "retryOnMediaFailed": true,
  "updateInterval": 1000,
  "partnerId": "Cox",
  "enableAds": true,

  "defaultAsset": {
    "initialPolicy": 0,
    "playingPolicy": 2,
    "initialBitrate": 0,
    "maximumBitrate": 12000000,
    "playbackStalledEnabled": true,
    "minimumBitrate": 100000,
    "initialBufferTime": 4000,
    "playingVODBufferTime": 15000,
    "playingLinearBufferTime": 15000,
    "placementRequestEndPoint": "https://ccpvab-po-v103-p.po.ccp.cable.comcast.com/PlacementRequest",
    "placementStatusNotificationEndPoint": "https://altcon-vexdir-cox-prod1.ccp.xcal.tv/vex-director/PlacementStatusNotification"
  },

  "ott": {
    "freeWheelConfig": {
      "mvpdString": "contour",
      "playerProfileMvpd": "505334:cox_sports",
      "freewheelPlatform": "ott_x1",
      "playerProfilePlatform": "x1_js",
      "networkId": "505334",
      "serverUrl": "https://7b5f6.v.fwmrm.net/",
      "contentType": "application/x-mpegurl",
      "preventFreeWheelTrackingEvents": true
    }
  },

  "title6Vod": {
      "ddPlus": true
  },

  "xi3": {
    "defaultAsset": {
      "playingVODBufferTime": 24000
    }
  },
  "xi4": {
    "defaultAsset": {
      "playingVODBufferTime": 24000,
      "maximumBitrate": 14000000
    }
  },
  "xid": {
    "defaultAsset": {
      "playingVODBufferTime": 24000,
      "maximumBitrate": 14000000
    }
  }

}

},{}],587:[function(require,module,exports){
module.exports={
    "analyticsDeviceType": "STB",
    "defaultAsset": {
        "playbackStalledEnabled": true
    },
    "xi3": {
        "defaultAsset": {
            "playingVODBufferTime": 24000
        }
    },
    "xid": {
        "defaultAsset": {
            "playingVODBufferTime": 24000
        }
    },
    "xi5": {
        "defaultAsset": {
            "playingVODBufferTime": 24000
        }
    }
}

},{}],588:[function(require,module,exports){
module.exports={
  "partnerId": "Rogers-dev",
  "licenseServerUrl": "https://mds-rogers.ccp.xcal.tv",

  "analyticsDeviceType": "STB",
  "analyticsEndPoint": "https://analytics.xcal.tv/rogers/player",

  "zipToFipsEndPoint": "http://easip-client-rogers.xcal.tv/eas/api/fips/allfips/",
  "alertServiceEndPoint": "http://easip-client-rogers.xcal.tv/eas/api/alert/active/fipscode/",

  "stalledTimeout": 10000,

  "defaultAsset": {
    "playbackStalledEnabled": false
  },

  "title6Linear": {
    "ddPlus": true,
    "forceHttps": true,
    "cdnRedundant": true
  },

  "title6Vod": {
    "ddPlus": true,
    "freeWheelConfig": {
      "mvpdString": "ignitetv",
      "freewheelPlatform": "x1",
      "networkId": "511845",
      "serverUrl": "7cf65.v.fwmrm.net",
      "countryCode": "ca"
    }
  },

  "cDvr": {
    "ddPlus": true
  },

  "xi6": {
    "defaultAsset": {
      "playingVODBufferTime": 12000,
      "playingLinearBufferTime": 12000,
      "maximumBitrate": 20000000
    }
  },

  "xg1v4": {
    "defaultAsset": {
      "playingVODBufferTime": 12000,
      "playingLinearBufferTime": 12000,
      "maximumBitrate": 20000000
    }
  }
}

},{}],589:[function(require,module,exports){
module.exports={
  "partnerId": "Rogers",
  "licenseServerUrl": "https://mds-rogers.ccp.xcal.tv",

  "analyticsDeviceType": "STB",
  "analyticsEndPoint": "https://analytics.xcal.tv/rogers/player",

  "zipToFipsEndPoint": "http://easip-client-rogers.xcal.tv/eas/api/fips/allfips/",
  "alertServiceEndPoint": "http://easip-client-rogers.xcal.tv/eas/api/alert/active/fipscode/",

  "stalledTimeout": 10000,

  "defaultAsset": {
    "playbackStalledEnabled": false
  },

  "title6Linear": {
    "ddPlus": true,
    "forceHttps": true,
    "cdnRedundant": true
  },

  "title6Vod": {
    "ddPlus": true,
    "freeWheelConfig": {
      "mvpdString": "ignitetv",
      "freewheelPlatform": "x1",
      "networkId": "511845",
      "serverUrl": "7cf65.v.fwmrm.net",
      "countryCode": "ca"
    }
  },

  "cDvr": {
    "ddPlus": true
  },

  "xi6": {
    "defaultAsset": {
      "playingVODBufferTime": 12000,
      "playingLinearBufferTime": 12000,
      "maximumBitrate": 20000000
    }
  },

  "xg1v4": {
    "defaultAsset": {
      "playingVODBufferTime": 12000,
      "playingLinearBufferTime": 12000,
      "maximumBitrate": 20000000
    }
  }
}

},{}],590:[function(require,module,exports){
module.exports={
  "productType": "cdvr",
  "drmNetworkRequestTimeout": 10000,

  "easNetworkRequestTimeout": 10000,
  "zipToFipsEndPoint": "https://wm1-easip-client.ccp.xcal.tv/eas/api/fips/zip/",
  "alertServiceEndPoint": "https://wm1-easip-client.ccp.xcal.tv/eas/api/alert/active/fipscode/",
  "easUpdateInterval": 15000,
  "easAlertRepeat": 1,
  "easAlertFontSize": "20.0f",
  "easAlertFont": "Helvetica-Bold",

  "analyticsNetworkRequestTimeout": 10000,
  "analyticsEndPoint": "https://analytics.xcal.tv/shaw/player",
  "analyticsProtocol": "2.0",
  "analyticsDeviceType": "STB",
  "maxBatchSize": 10,
  "maxQueueSize": 100,
  "batchInterval": 5000,

  "playerNetworkRequestTimeout": 10000,
  "heartbeatInterval": 60000,
  "autoplay": true,
  "retryInterval": 1000,
  "maximumRetries": 5,
  "manifestManipulatorRetries": 1,
  "manifestManipulatorTimeout": 4000,
  "retryOnMediaFailed": true,
  "updateInterval": 1000,
  "partnerId": "Shaw",
  "enableAds": false,

  "defaultAsset": {
    "ddPlus": false,
    "initialPolicy": 0,
    "playingPolicy": 2,
    "playbackStalledEnabled": true,
    "initialBitrate": 0,
    "maximumBitrate": 12000000,
    "minimumBitrate": 0,
    "initialBufferTime": 4000,
    "playingVODBufferTime": 15000,
    "playingLinearBufferTime": 15000,
    "placementRequestEndPoint": "https://ccpvab-po-v103-p.po.ccp.cable.comcast.com/PlacementRequest",
    "placementStatusNotificationEndPoint": "https://altcon-vexdr-prod1.ccp.xcal.tv/vex-director/PlacementStatusNotification"
  },

  "title6Vod": {
      "ddPlus": true
  },

  "tveVod": {
      "ddPlus": true
  },

  "xi3": {
    "defaultAsset": {
      "playingVODBufferTime": 24000
    }
  },
  "xi4": {
    "defaultAsset": {
      "playingVODBufferTime": 24000,
      "maximumBitrate": 14000000
    }
  },
  "xid": {
    "defaultAsset": {
      "playingVODBufferTime": 24000,
      "maximumBitrate": 14000000
    }
  }
}

},{}],591:[function(require,module,exports){
module.exports={
  "productType": "cdvr",
  "drmNetworkRequestTimeout": 10000,

  "easNetworkRequestTimeout": 10000,
  "zipToFipsEndPoint": "https://wm1-easip-client.ccp.xcal.tv/eas/api/fips/zip/",
  "alertServiceEndPoint": "https://wm1-easip-client.ccp.xcal.tv/eas/api/alert/active/fipscode/",
  "easUpdateInterval": 15000,
  "easAlertRepeat": 1,
  "easAlertFontSize": "20.0f",
  "easAlertFont": "Helvetica-Bold",
  "easLanguage": "en-CA",

  "analyticsNetworkRequestTimeout": 10000,
  "analyticsEndPoint": "https://analytics.xcal.tv/shaw/player",
  "analyticsProtocol": "2.0",
  "analyticsDeviceType": "STB",
  "maxBatchSize": 10,
  "maxQueueSize": 100,
  "batchInterval": 5000,

  "playerNetworkRequestTimeout": 10000,
  "heartbeatInterval": 60000,
  "autoplay": true,
  "retryInterval": 1000,
  "maximumRetries": 5,
  "manifestManipulatorRetries": 1,
  "manifestManipulatorTimeout": 4000,
  "retryOnMediaFailed": true,
  "updateInterval": 1000,
  "partnerId": "Shaw",
  "enableAds": false,

  "defaultAsset": {
    "ddPlus": false,
    "initialPolicy": 0,
    "playingPolicy": 2,
    "initialBitrate": 0,
    "playbackStalledEnabled": true,
    "maximumBitrate": 12000000,
    "minimumBitrate": 0,
    "initialBufferTime": 4000,
    "playingVODBufferTime": 15000,
    "playingLinearBufferTime": 15000,
    "placementRequestEndPoint": "https://ccpvab-po-v103-p.po.ccp.cable.comcast.com/PlacementRequest",
    "placementStatusNotificationEndPoint": "https://altcon-vexdr-prod1.ccp.xcal.tv/vex-director/PlacementStatusNotification"
  },

  "title6Vod": {
      "ddPlus": true
  },

  "tveVod": {
      "ddPlus": true
  },

  "xi3": {
    "defaultAsset": {
      "playingVODBufferTime": 24000
    }
  },
  "xi4": {
    "defaultAsset": {
      "playingVODBufferTime": 24000,
      "maximumBitrate": 14000000
    }
  },
  "xid": {
    "defaultAsset": {
      "playingVODBufferTime": 24000,
      "maximumBitrate": 14000000
    }
  }
}

},{}],592:[function(require,module,exports){
var inject = require('./../../node_modules/cssify');
var css = "#viper-player-container {\n   position: relative;\n   width: 100%;\n   height: 100%;\n}\n\n#viper-player {\n    width: 100%;\n    height: 100%;\n}\n\n.pp-cc-container {\n    position: absolute;\n    width: 100%;\n    height: 40px;\n    bottom: 0;\n    text-align: center;\n}\n\n.pp-cc-text-outer {\n    position: absolute;\n    width: 100%;\n    display: inline-block;\n}\n\n.pp-cc-text {\n    position: relative;\n    margin: 0 10px;\n    background-color: black;\n    color: #ffffff;\n    display: inline-block;\n    padding: 3px;\n}\n";
inject(css, undefined, '_1c0k3i6');
module.exports = css;

},{"./../../node_modules/cssify":162}]},{},[567]);
//VIPER BUNDLE END


log("javascript fully loaded");

}).catch( function importFailed(err)
{
    console.error("Import failed for rdkmediaplayer.js: " + err)
});
